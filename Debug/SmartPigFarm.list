
SmartPigFarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b84  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001580  08009c98  08009c98  0000ac98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b218  0800b218  0000d200  2**0
                  CONTENTS
  4 .ARM          00000008  0800b218  0800b218  0000c218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b220  0800b220  0000d200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b220  0800b220  0000c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b224  0800b224  0000c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800b228  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004094  20000200  0800b428  0000d200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004294  0800b428  0000d294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061fb  00000000  00000000  0000d229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d42  00000000  00000000  00013424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00015168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f7  00000000  00000000  00015848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188f4  00000000  00000000  00015d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fd0  00000000  00000000  0002e633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082e75  00000000  00000000  00038603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb478  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b4  00000000  00000000  000bb4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000be770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	08009c7c 	.word	0x08009c7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	08009c7c 	.word	0x08009c7c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2uiz>:
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	d20e      	bcs.n	800115e <__aeabi_f2uiz+0x22>
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30b      	bcc.n	800115e <__aeabi_f2uiz+0x22>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d409      	bmi.n	8001164 <__aeabi_f2uiz+0x28>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2uiz+0x32>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d102      	bne.n	8001174 <__aeabi_f2uiz+0x38>
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	4770      	bx	lr
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <__aeabi_d2lz>:
 800117c:	b538      	push	{r3, r4, r5, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	2300      	movs	r3, #0
 8001182:	4604      	mov	r4, r0
 8001184:	460d      	mov	r5, r1
 8001186:	f7ff fc19 	bl	80009bc <__aeabi_dcmplt>
 800118a:	b928      	cbnz	r0, 8001198 <__aeabi_d2lz+0x1c>
 800118c:	4620      	mov	r0, r4
 800118e:	4629      	mov	r1, r5
 8001190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001194:	f000 b80a 	b.w	80011ac <__aeabi_d2ulz>
 8001198:	4620      	mov	r0, r4
 800119a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800119e:	f000 f805 	bl	80011ac <__aeabi_d2ulz>
 80011a2:	4240      	negs	r0, r0
 80011a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a8:	bd38      	pop	{r3, r4, r5, pc}
 80011aa:	bf00      	nop

080011ac <__aeabi_d2ulz>:
 80011ac:	b5d0      	push	{r4, r6, r7, lr}
 80011ae:	2200      	movs	r2, #0
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <__aeabi_d2ulz+0x34>)
 80011b2:	4606      	mov	r6, r0
 80011b4:	460f      	mov	r7, r1
 80011b6:	f7ff f98f 	bl	80004d8 <__aeabi_dmul>
 80011ba:	f7ff fc65 	bl	8000a88 <__aeabi_d2uiz>
 80011be:	4604      	mov	r4, r0
 80011c0:	f7ff f910 	bl	80003e4 <__aeabi_ui2d>
 80011c4:	2200      	movs	r2, #0
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <__aeabi_d2ulz+0x38>)
 80011c8:	f7ff f986 	bl	80004d8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4630      	mov	r0, r6
 80011d2:	4639      	mov	r1, r7
 80011d4:	f7fe ffc8 	bl	8000168 <__aeabi_dsub>
 80011d8:	f7ff fc56 	bl	8000a88 <__aeabi_d2uiz>
 80011dc:	4621      	mov	r1, r4
 80011de:	bdd0      	pop	{r4, r6, r7, pc}
 80011e0:	3df00000 	.word	0x3df00000
 80011e4:	41f00000 	.word	0x41f00000

080011e8 <main>:
/**
 * @brief The application entry point.
 * @retval int
 */
int main(void)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b08e      	sub	sp, #56	@ 0x38
 80011ec:	af04      	add	r7, sp, #16
  // HAL Initialization
  HAL_Init();
 80011ee:	f000 fbd1 	bl	8001994 <HAL_Init>
  SystemClock_Config();
 80011f2:	f000 fa53 	bl	800169c <SystemClock_Config>
  USARTx_Init(USART1, PA9PA10, 115200);
 80011f6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011fa:	2100      	movs	r1, #0
 80011fc:	48b0      	ldr	r0, [pc, #704]	@ (80014c0 <main+0x2d8>)
 80011fe:	f001 feef 	bl	8002fe0 <USARTx_Init>

  // Display welcome message
  printf("HE THONG GIAM SAT KHI NH3 & H2S\n");
 8001202:	48b0      	ldr	r0, [pc, #704]	@ (80014c4 <main+0x2dc>)
 8001204:	f004 fab2 	bl	800576c <puts>
  printf("CAM BIEN: MQ137 + MQ136 + RTC DS3231\r\n");
 8001208:	48af      	ldr	r0, [pc, #700]	@ (80014c8 <main+0x2e0>)
 800120a:	f004 faaf 	bl	800576c <puts>
 
  // =============================================================================
  // KHỞI TẠO RTC DS3231 - ĐơN GIẢN
  // =============================================================================
  printf("\r\nKHOI TAO RTC DS3231 \r\n");
 800120e:	48af      	ldr	r0, [pc, #700]	@ (80014cc <main+0x2e4>)
 8001210:	f004 faac 	bl	800576c <puts>
  
  // Khởi tạo I2C cho DS3231
  I2Cx_Init(I2C1, Pin_PB6PB7, 100000);
 8001214:	4aae      	ldr	r2, [pc, #696]	@ (80014d0 <main+0x2e8>)
 8001216:	2100      	movs	r1, #0
 8001218:	48ae      	ldr	r0, [pc, #696]	@ (80014d4 <main+0x2ec>)
 800121a:	f001 fc39 	bl	8002a90 <I2Cx_Init>
  printf(" I2C1 da khoi tao cho DS3231\r\n");
 800121e:	48ae      	ldr	r0, [pc, #696]	@ (80014d8 <main+0x2f0>)
 8001220:	f004 faa4 	bl	800576c <puts>
  
  // Thiết lập thời gian ban đầu (chỉ chạy 1 lần khi cần)
  // Uncomment dòng dưới để set thời gian:
   DS3231Set(0, 18, 0, 7, 12, 7, 25);  // 17:15:00, Thứ 6, 11/07/2025
 8001224:	2319      	movs	r3, #25
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	2307      	movs	r3, #7
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	230c      	movs	r3, #12
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2307      	movs	r3, #7
 8001232:	2200      	movs	r2, #0
 8001234:	2112      	movs	r1, #18
 8001236:	2000      	movs	r0, #0
 8001238:	f001 fe5c 	bl	8002ef4 <DS3231Set>
  
  // Test đọc thời gian với biến local
  uint8_t test_gio, test_phut, test_giay, test_thu, test_ngay, test_thang, test_nam;
  DS3231Read(&test_gio, &test_phut, &test_giay, &test_thu, &test_ngay, &test_thang, &test_nam);
 800123c:	f107 0411 	add.w	r4, r7, #17
 8001240:	f107 0212 	add.w	r2, r7, #18
 8001244:	f107 0113 	add.w	r1, r7, #19
 8001248:	f107 0014 	add.w	r0, r7, #20
 800124c:	f107 030e 	add.w	r3, r7, #14
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	f107 030f 	add.w	r3, r7, #15
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4623      	mov	r3, r4
 8001260:	f001 fdfa 	bl	8002e58 <DS3231Read>
  printf("Thoi gian hien tai: %02d:%02d:%02d %02d/%02d/20%02d\r\n",
 8001264:	7d3b      	ldrb	r3, [r7, #20]
 8001266:	4618      	mov	r0, r3
 8001268:	7cfb      	ldrb	r3, [r7, #19]
 800126a:	461c      	mov	r4, r3
 800126c:	7cbb      	ldrb	r3, [r7, #18]
 800126e:	461d      	mov	r5, r3
 8001270:	7c3b      	ldrb	r3, [r7, #16]
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	7bb9      	ldrb	r1, [r7, #14]
 8001276:	9102      	str	r1, [sp, #8]
 8001278:	9201      	str	r2, [sp, #4]
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	462b      	mov	r3, r5
 800127e:	4622      	mov	r2, r4
 8001280:	4601      	mov	r1, r0
 8001282:	4896      	ldr	r0, [pc, #600]	@ (80014dc <main+0x2f4>)
 8001284:	f004 fa0a 	bl	800569c <iprintf>
         test_gio, test_phut, test_giay, test_ngay, test_thang, test_nam);
  
  printf(" RTC da san sang\r\n");
 8001288:	4895      	ldr	r0, [pc, #596]	@ (80014e0 <main+0x2f8>)
 800128a:	f004 fa6f 	bl	800576c <puts>
  // =============================================================================
  // KHỞI TẠO HỆ THỐNG CẢM BIẾN (GỮ NGUYÊN)
  // =============================================================================
  
  // Khởi tạo hệ thống cảm biến
  InitSensorSystem();
 800128e:	f002 fbbf 	bl	8003a10 <InitSensorSystem>
  // Test hệ thống
  //TestSensorSystem();

  // Hiệu chuẩn nếu cần (uncomment để chạy)
  //CalibrateSensors();
  SetManualR0(26000, 10000); // Set R0 cho MQ137 & MQ135
 8001292:	4994      	ldr	r1, [pc, #592]	@ (80014e4 <main+0x2fc>)
 8001294:	4894      	ldr	r0, [pc, #592]	@ (80014e8 <main+0x300>)
 8001296:	f003 f99b 	bl	80045d0 <SetManualR0>
  printf("\r\n BAT DAU GIAM SAT\r\n");
 800129a:	4894      	ldr	r0, [pc, #592]	@ (80014ec <main+0x304>)
 800129c:	f004 fa66 	bl	800576c <puts>
  printf("Press any key to stop...\r\n");
 80012a0:	4893      	ldr	r0, [pc, #588]	@ (80014f0 <main+0x308>)
 80012a2:	f004 fa63 	bl	800576c <puts>

  // =============================================================================
  // BIẾN ĐỂ QUẢN LÝ LOG THEO THỜI GIAN
  // =============================================================================
  uint32_t last_log_minute = 255; // Giá trị ban đầu không hợp lệ để force log lần đầu
 80012a6:	23ff      	movs	r3, #255	@ 0xff
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t display_counter = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  {
    // =============================================================================
    // ĐỌC THỜI GIAN RTC - SỬ DỤNG BIẾN LOCAL
    // =============================================================================
    uint8_t current_gio, current_phut, current_giay, current_thu, current_ngay, current_thang, current_nam;
    DS3231Read(&current_gio, &current_phut, &current_giay, &current_thu, &current_ngay, &current_thang, &current_nam);
 80012b0:	f107 040a 	add.w	r4, r7, #10
 80012b4:	f107 020b 	add.w	r2, r7, #11
 80012b8:	f107 010c 	add.w	r1, r7, #12
 80012bc:	f107 000d 	add.w	r0, r7, #13
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	f107 0309 	add.w	r3, r7, #9
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	4623      	mov	r3, r4
 80012d2:	f001 fdc1 	bl	8002e58 <DS3231Read>
    
    // =============================================================================
    // XỬ LÝ CẢM BIẾN VỚI TIMESTAMP
    // =============================================================================
    printf("\r\n[%02d:%02d:%02d] XU LY CAM BIEN \r\n", 
 80012d6:	7b7b      	ldrb	r3, [r7, #13]
 80012d8:	4619      	mov	r1, r3
 80012da:	7b3b      	ldrb	r3, [r7, #12]
 80012dc:	461a      	mov	r2, r3
 80012de:	7afb      	ldrb	r3, [r7, #11]
 80012e0:	4884      	ldr	r0, [pc, #528]	@ (80014f4 <main+0x30c>)
 80012e2:	f004 f9db 	bl	800569c <iprintf>
           current_gio, current_phut, current_giay);
    
    // Xử lý tất cả cảm biến
    ProcessAllSensors();
 80012e6:	f002 fc23 	bl	8003b30 <ProcessAllSensors>

    // Hiển thị trạng thái chi tiết (mỗi 5 lần)
    if(++display_counter >= 5) {
 80012ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012ee:	3301      	adds	r3, #1
 80012f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d916      	bls.n	800132a <main+0x142>
        display_counter = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        printf("\r\n=== [%02d:%02d:%02d %02d/%02d/20%02d] TRANG THAI HE THONG ===\r\n",
 8001302:	7b7b      	ldrb	r3, [r7, #13]
 8001304:	4618      	mov	r0, r3
 8001306:	7b3b      	ldrb	r3, [r7, #12]
 8001308:	461c      	mov	r4, r3
 800130a:	7afb      	ldrb	r3, [r7, #11]
 800130c:	461d      	mov	r5, r3
 800130e:	7a7b      	ldrb	r3, [r7, #9]
 8001310:	7a3a      	ldrb	r2, [r7, #8]
 8001312:	79f9      	ldrb	r1, [r7, #7]
 8001314:	9102      	str	r1, [sp, #8]
 8001316:	9201      	str	r2, [sp, #4]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	462b      	mov	r3, r5
 800131c:	4622      	mov	r2, r4
 800131e:	4601      	mov	r1, r0
 8001320:	4875      	ldr	r0, [pc, #468]	@ (80014f8 <main+0x310>)
 8001322:	f004 f9bb 	bl	800569c <iprintf>
               current_gio, current_phut, current_giay, current_ngay, current_thang, current_nam);
        DisplaySystemStatus();
 8001326:	f002 fc45 	bl	8003bb4 <DisplaySystemStatus>
    }

    // Lấy giá trị để điều khiển
    float nh3_ppm = GetNH3_PPM();
 800132a:	f003 f9a9 	bl	8004680 <GetNH3_PPM>
 800132e:	61f8      	str	r0, [r7, #28]
    float h2s_ppm = GetH2S_PPM();
 8001330:	f003 f9b8 	bl	80046a4 <GetH2S_PPM>
 8001334:	61b8      	str	r0, [r7, #24]
    AlarmLevel_t nh3_alarm = GetNH3AlarmLevel();
 8001336:	f003 f9c9 	bl	80046cc <GetNH3AlarmLevel>
 800133a:	4603      	mov	r3, r0
 800133c:	75fb      	strb	r3, [r7, #23]
    AlarmLevel_t h2s_alarm = GetH2SAlarmLevel();
 800133e:	f003 f9d1 	bl	80046e4 <GetH2SAlarmLevel>
 8001342:	4603      	mov	r3, r0
 8001344:	75bb      	strb	r3, [r7, #22]
    AlarmLevel_t system_alarm = GetSystemAlarmLevel();
 8001346:	f003 f9d9 	bl	80046fc <GetSystemAlarmLevel>
 800134a:	4603      	mov	r3, r0
 800134c:	757b      	strb	r3, [r7, #21]

    // =============================================================================
    // LOG DỮ LIỆU THEO THỜI GIAN (MỖI 5 PHÚT)
    // =============================================================================
    // Kiểm tra nếu phút chia hết cho 5 và khác với lần log trước
    if((current_phut % 5 == 0) && (current_phut != last_log_minute)) {
 800134e:	7b3a      	ldrb	r2, [r7, #12]
 8001350:	4b6a      	ldr	r3, [pc, #424]	@ (80014fc <main+0x314>)
 8001352:	fba3 1302 	umull	r1, r3, r3, r2
 8001356:	0899      	lsrs	r1, r3, #2
 8001358:	460b      	mov	r3, r1
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d142      	bne.n	80013ec <main+0x204>
 8001366:	7b3b      	ldrb	r3, [r7, #12]
 8001368:	461a      	mov	r2, r3
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	4293      	cmp	r3, r2
 800136e:	d03d      	beq.n	80013ec <main+0x204>
        last_log_minute = current_phut;
 8001370:	7b3b      	ldrb	r3, [r7, #12]
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
        
        printf("\r\n=== [%02d:%02d:%02d] LOG DU LIEU CAM BIEN ===\r\n",
 8001374:	7b7b      	ldrb	r3, [r7, #13]
 8001376:	4619      	mov	r1, r3
 8001378:	7b3b      	ldrb	r3, [r7, #12]
 800137a:	461a      	mov	r2, r3
 800137c:	7afb      	ldrb	r3, [r7, #11]
 800137e:	4860      	ldr	r0, [pc, #384]	@ (8001500 <main+0x318>)
 8001380:	f004 f98c 	bl	800569c <iprintf>
               current_gio, current_phut, current_giay);
        printf("NH3: %.1f ppm (Alarm: %d)\r\n", nh3_ppm, nh3_alarm);
 8001384:	69f8      	ldr	r0, [r7, #28]
 8001386:	f7ff f84f 	bl	8000428 <__aeabi_f2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	7df9      	ldrb	r1, [r7, #23]
 8001390:	9100      	str	r1, [sp, #0]
 8001392:	485c      	ldr	r0, [pc, #368]	@ (8001504 <main+0x31c>)
 8001394:	f004 f982 	bl	800569c <iprintf>
        printf("H2S: %.1f ppm (Alarm: %d)\r\n", h2s_ppm, h2s_alarm);
 8001398:	69b8      	ldr	r0, [r7, #24]
 800139a:	f7ff f845 	bl	8000428 <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	7db9      	ldrb	r1, [r7, #22]
 80013a4:	9100      	str	r1, [sp, #0]
 80013a6:	4858      	ldr	r0, [pc, #352]	@ (8001508 <main+0x320>)
 80013a8:	f004 f978 	bl	800569c <iprintf>
        printf("System Status: %d | System Alarm: %d\r\n", GetSystemStatus(), system_alarm);
 80013ac:	f003 f9b2 	bl	8004714 <GetSystemStatus>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4619      	mov	r1, r3
 80013b4:	7d7b      	ldrb	r3, [r7, #21]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4854      	ldr	r0, [pc, #336]	@ (800150c <main+0x324>)
 80013ba:	f004 f96f 	bl	800569c <iprintf>
        printf("Uptime: %.1f phut\r\n", HAL_GetTick() / 60000.0f);
 80013be:	f000 fb41 	bl	8001a44 <HAL_GetTick>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc85 	bl	8000cd4 <__aeabi_ui2f>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4950      	ldr	r1, [pc, #320]	@ (8001510 <main+0x328>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fd8c 	bl	8000eec <__aeabi_fdiv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f826 	bl	8000428 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	484c      	ldr	r0, [pc, #304]	@ (8001514 <main+0x32c>)
 80013e2:	f004 f95b 	bl	800569c <iprintf>
        printf("==============================================\r\n");
 80013e6:	484c      	ldr	r0, [pc, #304]	@ (8001518 <main+0x330>)
 80013e8:	f004 f9c0 	bl	800576c <puts>
    // =============================================================================
    // LOGIC ĐIỀU KHIỂN (GỮ NGUYÊN)
    // =============================================================================
    
    // Debug thong tin
    printf("DEBUG - NH3: %.1f ppm, Alarm Level: %d\r\n", nh3_ppm, nh3_alarm);
 80013ec:	69f8      	ldr	r0, [r7, #28]
 80013ee:	f7ff f81b 	bl	8000428 <__aeabi_f2d>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	7df9      	ldrb	r1, [r7, #23]
 80013f8:	9100      	str	r1, [sp, #0]
 80013fa:	4848      	ldr	r0, [pc, #288]	@ (800151c <main+0x334>)
 80013fc:	f004 f94e 	bl	800569c <iprintf>
    printf("DEBUG - H2S: %.1f ppm, Alarm Level: %d\r\n", h2s_ppm, h2s_alarm);
 8001400:	69b8      	ldr	r0, [r7, #24]
 8001402:	f7ff f811 	bl	8000428 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	7db9      	ldrb	r1, [r7, #22]
 800140c:	9100      	str	r1, [sp, #0]
 800140e:	4844      	ldr	r0, [pc, #272]	@ (8001520 <main+0x338>)
 8001410:	f004 f944 	bl	800569c <iprintf>
    
    // Logic dieu khien NH3 - day du tat ca truong hop
    printf("\r\nNH3 STATUS: ");
 8001414:	4843      	ldr	r0, [pc, #268]	@ (8001524 <main+0x33c>)
 8001416:	f004 f941 	bl	800569c <iprintf>
    if(nh3_alarm == ALARM_DANGER) {
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d108      	bne.n	8001432 <main+0x24a>
        printf("NH3 = %.1f ppm - NGUY HIEM! BAT QUAT MAX!\r\n", nh3_ppm);
 8001420:	69f8      	ldr	r0, [r7, #28]
 8001422:	f7ff f801 	bl	8000428 <__aeabi_f2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	483f      	ldr	r0, [pc, #252]	@ (8001528 <main+0x340>)
 800142c:	f004 f936 	bl	800569c <iprintf>
 8001430:	e01f      	b.n	8001472 <main+0x28a>
        // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_SET);
    }
    else if(nh3_alarm == ALARM_HIGH) {
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d108      	bne.n	800144a <main+0x262>
        printf("NH3 = %.1f ppm - BAT QUAT THONG GIO!\r\n", nh3_ppm);
 8001438:	69f8      	ldr	r0, [r7, #28]
 800143a:	f7fe fff5 	bl	8000428 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	483a      	ldr	r0, [pc, #232]	@ (800152c <main+0x344>)
 8001444:	f004 f92a 	bl	800569c <iprintf>
 8001448:	e013      	b.n	8001472 <main+0x28a>
        // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_SET);
    }
    else if(nh3_alarm == ALARM_LOW) {
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d108      	bne.n	8001462 <main+0x27a>
        printf("NH3 = %.1f ppm - Canh bao thap\r\n", nh3_ppm);
 8001450:	69f8      	ldr	r0, [r7, #28]
 8001452:	f7fe ffe9 	bl	8000428 <__aeabi_f2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4835      	ldr	r0, [pc, #212]	@ (8001530 <main+0x348>)
 800145c:	f004 f91e 	bl	800569c <iprintf>
 8001460:	e007      	b.n	8001472 <main+0x28a>
        // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_RESET);
    }
    else { // ALARM_NORMAL
        printf("NH3 = %.1f ppm - Binh thuong\r\n", nh3_ppm);
 8001462:	69f8      	ldr	r0, [r7, #28]
 8001464:	f7fe ffe0 	bl	8000428 <__aeabi_f2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4831      	ldr	r0, [pc, #196]	@ (8001534 <main+0x34c>)
 800146e:	f004 f915 	bl	800569c <iprintf>
        // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_RESET);
    }
    
    // Logic dieu khien CO2 - day du tat ca truong hop
    printf("H2S STATUS: ");
 8001472:	4831      	ldr	r0, [pc, #196]	@ (8001538 <main+0x350>)
 8001474:	f004 f912 	bl	800569c <iprintf>
    if(h2s_alarm == ALARM_DANGER) {
 8001478:	7dbb      	ldrb	r3, [r7, #22]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d108      	bne.n	8001490 <main+0x2a8>
        printf("H2S = %.1f ppm - NGUY HIEM! CAN THONG GIO NGAY!\r\n", h2s_ppm);
 800147e:	69b8      	ldr	r0, [r7, #24]
 8001480:	f7fe ffd2 	bl	8000428 <__aeabi_f2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	482c      	ldr	r0, [pc, #176]	@ (800153c <main+0x354>)
 800148a:	f004 f907 	bl	800569c <iprintf>
 800148e:	e063      	b.n	8001558 <main+0x370>
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_SET);
    }
    else if(h2s_alarm == ALARM_HIGH) {
 8001490:	7dbb      	ldrb	r3, [r7, #22]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d108      	bne.n	80014a8 <main+0x2c0>
        printf("H2S = %.1f ppm - BAT QUAT THONG GIO!\r\n", h2s_ppm);
 8001496:	69b8      	ldr	r0, [r7, #24]
 8001498:	f7fe ffc6 	bl	8000428 <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4827      	ldr	r0, [pc, #156]	@ (8001540 <main+0x358>)
 80014a2:	f004 f8fb 	bl	800569c <iprintf>
 80014a6:	e057      	b.n	8001558 <main+0x370>
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_SET);
    }
    else if(h2s_alarm == ALARM_LOW) {
 80014a8:	7dbb      	ldrb	r3, [r7, #22]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d14c      	bne.n	8001548 <main+0x360>
        printf("H2S = %.1f ppm - Canh bao thap\r\n", h2s_ppm);
 80014ae:	69b8      	ldr	r0, [r7, #24]
 80014b0:	f7fe ffba 	bl	8000428 <__aeabi_f2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4822      	ldr	r0, [pc, #136]	@ (8001544 <main+0x35c>)
 80014ba:	f004 f8ef 	bl	800569c <iprintf>
 80014be:	e04b      	b.n	8001558 <main+0x370>
 80014c0:	40013800 	.word	0x40013800
 80014c4:	08009c98 	.word	0x08009c98
 80014c8:	08009cb8 	.word	0x08009cb8
 80014cc:	08009ce0 	.word	0x08009ce0
 80014d0:	000186a0 	.word	0x000186a0
 80014d4:	40005400 	.word	0x40005400
 80014d8:	08009cf8 	.word	0x08009cf8
 80014dc:	08009d18 	.word	0x08009d18
 80014e0:	08009d50 	.word	0x08009d50
 80014e4:	461c4000 	.word	0x461c4000
 80014e8:	46cb2000 	.word	0x46cb2000
 80014ec:	08009d64 	.word	0x08009d64
 80014f0:	08009d7c 	.word	0x08009d7c
 80014f4:	08009d98 	.word	0x08009d98
 80014f8:	08009dc0 	.word	0x08009dc0
 80014fc:	cccccccd 	.word	0xcccccccd
 8001500:	08009e04 	.word	0x08009e04
 8001504:	08009e38 	.word	0x08009e38
 8001508:	08009e54 	.word	0x08009e54
 800150c:	08009e70 	.word	0x08009e70
 8001510:	476a6000 	.word	0x476a6000
 8001514:	08009e98 	.word	0x08009e98
 8001518:	08009eac 	.word	0x08009eac
 800151c:	08009edc 	.word	0x08009edc
 8001520:	08009f08 	.word	0x08009f08
 8001524:	08009f34 	.word	0x08009f34
 8001528:	08009f44 	.word	0x08009f44
 800152c:	08009f70 	.word	0x08009f70
 8001530:	08009f98 	.word	0x08009f98
 8001534:	08009fbc 	.word	0x08009fbc
 8001538:	08009fdc 	.word	0x08009fdc
 800153c:	08009fec 	.word	0x08009fec
 8001540:	0800a020 	.word	0x0800a020
 8001544:	0800a048 	.word	0x0800a048
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_RESET);
    }
    else { // ALARM_NORMAL
        printf("H2S = %.1f ppm - Binh thuong\r\n", h2s_ppm);
 8001548:	69b8      	ldr	r0, [r7, #24]
 800154a:	f7fe ff6d 	bl	8000428 <__aeabi_f2d>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4844      	ldr	r0, [pc, #272]	@ (8001664 <main+0x47c>)
 8001554:	f004 f8a2 	bl	800569c <iprintf>
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_RESET);
    }

    // Cảnh báo tổng thể
    switch (system_alarm)
 8001558:	7d7b      	ldrb	r3, [r7, #21]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d006      	beq.n	800156c <main+0x384>
 800155e:	2b03      	cmp	r3, #3
 8001560:	dc10      	bgt.n	8001584 <main+0x39c>
 8001562:	2b01      	cmp	r3, #1
 8001564:	d00a      	beq.n	800157c <main+0x394>
 8001566:	2b02      	cmp	r3, #2
 8001568:	d004      	beq.n	8001574 <main+0x38c>
 800156a:	e00b      	b.n	8001584 <main+0x39c>
    {
    case ALARM_DANGER:
      printf("NGUY HIEM - KIEM TRA NGAY LAP TUC\r\n");
 800156c:	483e      	ldr	r0, [pc, #248]	@ (8001668 <main+0x480>)
 800156e:	f004 f8fd 	bl	800576c <puts>
      // HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
      break;
 8001572:	e00b      	b.n	800158c <main+0x3a4>
    case ALARM_HIGH:
      printf("CANH BAO CAO - CHU Y NGAY\r\n");
 8001574:	483d      	ldr	r0, [pc, #244]	@ (800166c <main+0x484>)
 8001576:	f004 f8f9 	bl	800576c <puts>
      break;
 800157a:	e007      	b.n	800158c <main+0x3a4>
    case ALARM_LOW:
      printf("CANH BAO THAP - TIEP TUC THEO DOI\r\n");
 800157c:	483c      	ldr	r0, [pc, #240]	@ (8001670 <main+0x488>)
 800157e:	f004 f8f5 	bl	800576c <puts>
      break;
 8001582:	e003      	b.n	800158c <main+0x3a4>
    default:
      printf("HE THONG HOAT DONG BINH THUONG\r\n");
 8001584:	483b      	ldr	r0, [pc, #236]	@ (8001674 <main+0x48c>)
 8001586:	f004 f8f1 	bl	800576c <puts>
      // HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
      break;
 800158a:	bf00      	nop
    // =============================================================================
    // KIỂM TRA TÁC VỤ THEO LỊCH - ĐƠN GIẢN
    // =============================================================================
    
    // Tự động hiệu chuẩn vào 3:00 AM
    if(current_gio == 3 && current_phut == 0 && current_giay < 5) {
 800158c:	7b7b      	ldrb	r3, [r7, #13]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d10f      	bne.n	80015b2 <main+0x3ca>
 8001592:	7b3b      	ldrb	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10c      	bne.n	80015b2 <main+0x3ca>
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	2b04      	cmp	r3, #4
 800159c:	d809      	bhi.n	80015b2 <main+0x3ca>
        printf("\r\n🕒 [%02d:%02d:%02d] THOI GIAN HIEU CHUAN TU DONG!\r\n", 
 800159e:	7b7b      	ldrb	r3, [r7, #13]
 80015a0:	4619      	mov	r1, r3
 80015a2:	7b3b      	ldrb	r3, [r7, #12]
 80015a4:	461a      	mov	r2, r3
 80015a6:	7afb      	ldrb	r3, [r7, #11]
 80015a8:	4833      	ldr	r0, [pc, #204]	@ (8001678 <main+0x490>)
 80015aa:	f004 f877 	bl	800569c <iprintf>
               current_gio, current_phut, current_giay);
        CalibrateSensors();
 80015ae:	f002 fb6d 	bl	8003c8c <CalibrateSensors>
    }
    
    // Báo cáo hàng ngày vào 23:59
    if(current_gio == 23 && current_phut == 59 && current_giay < 5) {
 80015b2:	7b7b      	ldrb	r3, [r7, #13]
 80015b4:	2b17      	cmp	r3, #23
 80015b6:	d133      	bne.n	8001620 <main+0x438>
 80015b8:	7b3b      	ldrb	r3, [r7, #12]
 80015ba:	2b3b      	cmp	r3, #59	@ 0x3b
 80015bc:	d130      	bne.n	8001620 <main+0x438>
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d82d      	bhi.n	8001620 <main+0x438>
        printf("\r\n📊 [%02d:%02d:%02d] BAO CAO HANG NGAY\r\n", 
 80015c4:	7b7b      	ldrb	r3, [r7, #13]
 80015c6:	4619      	mov	r1, r3
 80015c8:	7b3b      	ldrb	r3, [r7, #12]
 80015ca:	461a      	mov	r2, r3
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	482b      	ldr	r0, [pc, #172]	@ (800167c <main+0x494>)
 80015d0:	f004 f864 	bl	800569c <iprintf>
               current_gio, current_phut, current_giay);
        printf("Ngay: %02d/%02d/20%02d\r\n", current_ngay, current_thang, current_nam);
 80015d4:	7a7b      	ldrb	r3, [r7, #9]
 80015d6:	4619      	mov	r1, r3
 80015d8:	7a3b      	ldrb	r3, [r7, #8]
 80015da:	461a      	mov	r2, r3
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4828      	ldr	r0, [pc, #160]	@ (8001680 <main+0x498>)
 80015e0:	f004 f85c 	bl	800569c <iprintf>
        printf("Uptime: %.1f gio\r\n", HAL_GetTick() / 3600000.0f);
 80015e4:	f000 fa2e 	bl	8001a44 <HAL_GetTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fb72 	bl	8000cd4 <__aeabi_ui2f>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4924      	ldr	r1, [pc, #144]	@ (8001684 <main+0x49c>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fc79 	bl	8000eec <__aeabi_fdiv>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ff13 	bl	8000428 <__aeabi_f2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4820      	ldr	r0, [pc, #128]	@ (8001688 <main+0x4a0>)
 8001608:	f004 f848 	bl	800569c <iprintf>
        printf("Tong doc: %lu | Loi: %lu\r\n", g_sensor_system.total_readings, g_sensor_system.error_count);
 800160c:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <main+0x4a4>)
 800160e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8001612:	4a1e      	ldr	r2, [pc, #120]	@ (800168c <main+0x4a4>)
 8001614:	f8d2 20fc 	ldr.w	r2, [r2, #252]	@ 0xfc
 8001618:	4619      	mov	r1, r3
 800161a:	481d      	ldr	r0, [pc, #116]	@ (8001690 <main+0x4a8>)
 800161c:	f004 f83e 	bl	800569c <iprintf>
    }
    
    // Chào buổi sáng
    if(current_gio == 6 && current_phut == 0 && current_giay < 5) {
 8001620:	7b7b      	ldrb	r3, [r7, #13]
 8001622:	2b06      	cmp	r3, #6
 8001624:	d10d      	bne.n	8001642 <main+0x45a>
 8001626:	7b3b      	ldrb	r3, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10a      	bne.n	8001642 <main+0x45a>
 800162c:	7afb      	ldrb	r3, [r7, #11]
 800162e:	2b04      	cmp	r3, #4
 8001630:	d807      	bhi.n	8001642 <main+0x45a>
        printf("\r\n🌅 [%02d:%02d:%02d] CHAO BUOI SANG!\r\n", 
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	4619      	mov	r1, r3
 8001636:	7b3b      	ldrb	r3, [r7, #12]
 8001638:	461a      	mov	r2, r3
 800163a:	7afb      	ldrb	r3, [r7, #11]
 800163c:	4815      	ldr	r0, [pc, #84]	@ (8001694 <main+0x4ac>)
 800163e:	f004 f82d 	bl	800569c <iprintf>
    // SendDataToServerWithTime(nh3_ppm, co2_ppm, system_alarm, current_gio, current_phut, current_giay);

    // - Hiển thị trên LCD với thời gian
    // UpdateLCDDisplayWithTime(nh3_ppm, co2_ppm, system_alarm, current_gio, current_phut, current_giay);

    printf("\r\n[%02d:%02d:%02d] CHO %d GIAY DE DO TIEP\r\n", 
 8001642:	7b7b      	ldrb	r3, [r7, #13]
 8001644:	4619      	mov	r1, r3
 8001646:	7b3b      	ldrb	r3, [r7, #12]
 8001648:	461a      	mov	r2, r3
 800164a:	7afb      	ldrb	r3, [r7, #11]
 800164c:	4618      	mov	r0, r3
 800164e:	2314      	movs	r3, #20
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	4603      	mov	r3, r0
 8001654:	4810      	ldr	r0, [pc, #64]	@ (8001698 <main+0x4b0>)
 8001656:	f004 f821 	bl	800569c <iprintf>
           current_gio, current_phut, current_giay, MAIN_LOOP_DELAY/1000);
    
    HAL_Delay(MAIN_LOOP_DELAY); // Chờ 1 phút
 800165a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800165e:	f000 f9fb 	bl	8001a58 <HAL_Delay>
  {
 8001662:	e625      	b.n	80012b0 <main+0xc8>
 8001664:	0800a06c 	.word	0x0800a06c
 8001668:	0800a08c 	.word	0x0800a08c
 800166c:	0800a0b0 	.word	0x0800a0b0
 8001670:	0800a0cc 	.word	0x0800a0cc
 8001674:	0800a0f0 	.word	0x0800a0f0
 8001678:	0800a110 	.word	0x0800a110
 800167c:	0800a148 	.word	0x0800a148
 8001680:	0800a174 	.word	0x0800a174
 8001684:	4a5bba00 	.word	0x4a5bba00
 8001688:	0800a190 	.word	0x0800a190
 800168c:	20000350 	.word	0x20000350
 8001690:	0800a1a4 	.word	0x0800a1a4
 8001694:	0800a1c0 	.word	0x0800a1c0
 8001698:	0800a1ec 	.word	0x0800a1ec

0800169c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b090      	sub	sp, #64	@ 0x40
 80016a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	2228      	movs	r2, #40	@ 0x28
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 f95e 	bl	800596c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016be:	2301      	movs	r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016cc:	2301      	movs	r3, #1
 80016ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d0:	2302      	movs	r3, #2
 80016d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016da:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fabf 	bl	8001c68 <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016f0:	f000 f819 	bl	8001726 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016f4:	230f      	movs	r3, #15
 80016f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f8:	2302      	movs	r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001700:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2102      	movs	r1, #2
 800170e:	4618      	mov	r0, r3
 8001710:	f000 fd2c 	bl	800216c <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800171a:	f000 f804 	bl	8001726 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3740      	adds	r7, #64	@ 0x40
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172a:	b672      	cpsid	i
}
 800172c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172e:	bf00      	nop
 8001730:	e7fd      	b.n	800172e <Error_Handler+0x8>
	...

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_MspInit+0x5c>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	4a14      	ldr	r2, [pc, #80]	@ (8001790 <HAL_MspInit+0x5c>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6193      	str	r3, [r2, #24]
 8001746:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_MspInit+0x5c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_MspInit+0x5c>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a0e      	ldr	r2, [pc, #56]	@ (8001790 <HAL_MspInit+0x5c>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175c:	61d3      	str	r3, [r2, #28]
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <HAL_MspInit+0x5c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_MspInit+0x60>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <HAL_MspInit+0x60>)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <NMI_Handler+0x4>

080017a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <MemManage_Handler+0x4>

080017b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <UsageFault_Handler+0x4>

080017c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e8:	f000 f91a 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <_kill>:

int _kill(int pid, int sig)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001808:	f004 f902 	bl	8005a10 <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	2216      	movs	r2, #22
 8001810:	601a      	str	r2, [r3, #0]
  return -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <_exit>:

void _exit (int status)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001826:	f04f 31ff 	mov.w	r1, #4294967295
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffe7 	bl	80017fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <_exit+0x12>

08001834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
  }

  return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_close>:
  }
  return len;
}

int _close(int file)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001894:	605a      	str	r2, [r3, #4]
  return 0;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b085      	sub	sp, #20
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
	...

080018d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d8:	4a14      	ldr	r2, [pc, #80]	@ (800192c <_sbrk+0x5c>)
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <_sbrk+0x60>)
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <_sbrk+0x64>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <_sbrk+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d207      	bcs.n	8001910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001900:	f004 f886 	bl	8005a10 <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	220c      	movs	r2, #12
 8001908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	e009      	b.n	8001924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <_sbrk+0x64>)
 8001920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20005000 	.word	0x20005000
 8001930:	00000400 	.word	0x00000400
 8001934:	2000021c 	.word	0x2000021c
 8001938:	20004298 	.word	0x20004298

0800193c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001948:	f7ff fff8 	bl	800193c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800194c:	480b      	ldr	r0, [pc, #44]	@ (800197c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800194e:	490c      	ldr	r1, [pc, #48]	@ (8001980 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001950:	4a0c      	ldr	r2, [pc, #48]	@ (8001984 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a09      	ldr	r2, [pc, #36]	@ (8001988 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001964:	4c09      	ldr	r4, [pc, #36]	@ (800198c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001972:	f004 f853 	bl	8005a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001976:	f7ff fc37 	bl	80011e8 <main>
  bx lr
 800197a:	4770      	bx	lr
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001984:	0800b228 	.word	0x0800b228
  ldr r2, =_sbss
 8001988:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800198c:	20004294 	.word	0x20004294

08001990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC1_2_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_Init+0x28>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <HAL_Init+0x28>)
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f92b 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	200f      	movs	r0, #15
 80019ac:	f000 f808 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fec0 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40022000 	.word	0x40022000

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_InitTick+0x54>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_InitTick+0x58>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f935 	bl	8001c4e <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f000 f90b 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <HAL_InitTick+0x5c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_IncTick+0x1c>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_IncTick+0x20>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a03      	ldr	r2, [pc, #12]	@ (8001a40 <HAL_IncTick+0x20>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	20000220 	.word	0x20000220

08001a44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return uwTick;
 8001a48:	4b02      	ldr	r3, [pc, #8]	@ (8001a54 <HAL_GetTick+0x10>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	20000220 	.word	0x20000220

08001a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff fff0 	bl	8001a44 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d005      	beq.n	8001a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	@ (8001a9c <HAL_Delay+0x44>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a7e:	bf00      	nop
 8001a80:	f7ff ffe0 	bl	8001a44 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <HAL_Delay+0x28>
  {
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	@ (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	@ (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	@ 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff90 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff49 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c28:	f7ff ff5e 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	6978      	ldr	r0, [r7, #20]
 8001c34:	f7ff ff90 	bl	8001b58 <NVIC_EncodePriority>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff5f 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffb0 	bl	8001bbc <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e272      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8087 	beq.w	8001d96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c88:	4b92      	ldr	r3, [pc, #584]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d00c      	beq.n	8001cae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c94:	4b8f      	ldr	r3, [pc, #572]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 030c 	and.w	r3, r3, #12
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d112      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5e>
 8001ca0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cac:	d10b      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cae:	4b89      	ldr	r3, [pc, #548]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d06c      	beq.n	8001d94 <HAL_RCC_OscConfig+0x12c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d168      	bne.n	8001d94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e24c      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x76>
 8001cd0:	4b80      	ldr	r3, [pc, #512]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e02e      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x98>
 8001ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a7a      	ldr	r2, [pc, #488]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b78      	ldr	r3, [pc, #480]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a77      	ldr	r2, [pc, #476]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e01d      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0xbc>
 8001d0a:	4b72      	ldr	r3, [pc, #456]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a71      	ldr	r2, [pc, #452]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0xd4>
 8001d24:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6a      	ldr	r2, [pc, #424]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b68      	ldr	r3, [pc, #416]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a67      	ldr	r2, [pc, #412]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fe7e 	bl	8001a44 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fe7a 	bl	8001a44 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	@ 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e200      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xe4>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fe6a 	bl	8001a44 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff fe66 	bl	8001a44 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	@ 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1ec      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	4b53      	ldr	r3, [pc, #332]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x10c>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d063      	beq.n	8001e6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dae:	4b49      	ldr	r3, [pc, #292]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d11c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x18c>
 8001dba:	4b46      	ldr	r3, [pc, #280]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d116      	bne.n	8001df4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	4b43      	ldr	r3, [pc, #268]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d001      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e1c0      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dde:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4939      	ldr	r1, [pc, #228]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df2:	e03a      	b.n	8001e6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfc:	4b36      	ldr	r3, [pc, #216]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fe1f 	bl	8001a44 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fe1b 	bl	8001a44 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e1a1      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4927      	ldr	r1, [pc, #156]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fdfe 	bl	8001a44 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fdfa 	bl	8001a44 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e180      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d03a      	beq.n	8001eec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d019      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7e:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <HAL_RCC_OscConfig+0x274>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7ff fdde 	bl	8001a44 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fdda 	bl	8001a44 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e160      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f000 faa6 	bl	80023fc <RCC_Delay>
 8001eb0:	e01c      	b.n	8001eec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <HAL_RCC_OscConfig+0x274>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fdc4 	bl	8001a44 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebe:	e00f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fdc0 	bl	8001a44 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d908      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e146      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	42420000 	.word	0x42420000
 8001edc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	4b92      	ldr	r3, [pc, #584]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e9      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a6 	beq.w	8002046 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efe:	4b8b      	ldr	r3, [pc, #556]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10d      	bne.n	8001f26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b88      	ldr	r3, [pc, #544]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a87      	ldr	r2, [pc, #540]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b85      	ldr	r3, [pc, #532]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	4b82      	ldr	r3, [pc, #520]	@ (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d118      	bne.n	8001f64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f32:	4b7f      	ldr	r3, [pc, #508]	@ (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7e      	ldr	r2, [pc, #504]	@ (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fd81 	bl	8001a44 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7ff fd7d 	bl	8001a44 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b64      	cmp	r3, #100	@ 0x64
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e103      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	4b75      	ldr	r3, [pc, #468]	@ (8002130 <HAL_RCC_OscConfig+0x4c8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x312>
 8001f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	4a6e      	ldr	r2, [pc, #440]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6213      	str	r3, [r2, #32]
 8001f78:	e02d      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x334>
 8001f82:	4b6a      	ldr	r3, [pc, #424]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a69      	ldr	r2, [pc, #420]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	4b67      	ldr	r3, [pc, #412]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a66      	ldr	r2, [pc, #408]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	e01c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_OscConfig+0x356>
 8001fa4:	4b61      	ldr	r3, [pc, #388]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a60      	ldr	r2, [pc, #384]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	4b5e      	ldr	r3, [pc, #376]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x36e>
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	4b58      	ldr	r3, [pc, #352]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a57      	ldr	r2, [pc, #348]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d015      	beq.n	800200a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fde:	f7ff fd31 	bl	8001a44 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff fd2d 	bl	8001a44 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0b1      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ee      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x37e>
 8002008:	e014      	b.n	8002034 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff fd1b 	bl	8001a44 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff fd17 	bl	8001a44 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e09b      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	4b40      	ldr	r3, [pc, #256]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ee      	bne.n	8002012 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002034:	7dfb      	ldrb	r3, [r7, #23]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d105      	bne.n	8002046 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203a:	4b3c      	ldr	r3, [pc, #240]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a3b      	ldr	r2, [pc, #236]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002044:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8087 	beq.w	800215e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002050:	4b36      	ldr	r3, [pc, #216]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d061      	beq.n	8002120 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d146      	bne.n	80020f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002064:	4b33      	ldr	r3, [pc, #204]	@ (8002134 <HAL_RCC_OscConfig+0x4cc>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7ff fceb 	bl	8001a44 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7ff fce7 	bl	8001a44 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e06d      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002084:	4b29      	ldr	r3, [pc, #164]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002098:	d108      	bne.n	80020ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209a:	4b24      	ldr	r3, [pc, #144]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4921      	ldr	r1, [pc, #132]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ac:	4b1f      	ldr	r3, [pc, #124]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a19      	ldr	r1, [r3, #32]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	430b      	orrs	r3, r1
 80020be:	491b      	ldr	r1, [pc, #108]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <HAL_RCC_OscConfig+0x4cc>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff fcbb 	bl	8001a44 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff fcb7 	bl	8001a44 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e03d      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x46a>
 80020f0:	e035      	b.n	800215e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b10      	ldr	r3, [pc, #64]	@ (8002134 <HAL_RCC_OscConfig+0x4cc>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fca4 	bl	8001a44 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7ff fca0 	bl	8001a44 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e026      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_RCC_OscConfig+0x4c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x498>
 800211e:	e01e      	b.n	800215e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e019      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
 8002134:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_RCC_OscConfig+0x500>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	429a      	cmp	r2, r3
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d001      	beq.n	800215e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0d0      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b6a      	ldr	r3, [pc, #424]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d910      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b67      	ldr	r3, [pc, #412]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4965      	ldr	r1, [pc, #404]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a58      	ldr	r2, [pc, #352]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a52      	ldr	r2, [pc, #328]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d040      	beq.n	800228c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d115      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e073      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3d      	ldr	r3, [pc, #244]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e06b      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4936      	ldr	r1, [pc, #216]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800225c:	f7ff fbf2 	bl	8001a44 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7ff fbee 	bl	8001a44 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e053      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2d      	ldr	r3, [pc, #180]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b27      	ldr	r3, [pc, #156]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d210      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b24      	ldr	r3, [pc, #144]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	4922      	ldr	r1, [pc, #136]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022e6:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f821 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	@ (8002338 <HAL_RCC_ClockConfig+0x1cc>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x1d0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fb50 	bl	80019c0 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40022000 	.word	0x40022000
 8002330:	40021000 	.word	0x40021000
 8002334:	0800ada4 	.word	0x0800ada4
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800235a:	4b1e      	ldr	r3, [pc, #120]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b04      	cmp	r3, #4
 8002368:	d002      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x30>
 800236a:	2b08      	cmp	r3, #8
 800236c:	d003      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x36>
 800236e:	e027      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002370:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002372:	613b      	str	r3, [r7, #16]
      break;
 8002374:	e027      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	0c9b      	lsrs	r3, r3, #18
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	4a17      	ldr	r2, [pc, #92]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800238e:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	0c5b      	lsrs	r3, r3, #17
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	4a11      	ldr	r2, [pc, #68]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a0d      	ldr	r2, [pc, #52]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023a2:	fb03 f202 	mul.w	r2, r3, r2
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e004      	b.n	80023ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a0c      	ldr	r2, [pc, #48]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	613b      	str	r3, [r7, #16]
      break;
 80023be:	e002      	b.n	80023c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023c2:	613b      	str	r3, [r7, #16]
      break;
 80023c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023c6:	693b      	ldr	r3, [r7, #16]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	007a1200 	.word	0x007a1200
 80023dc:	0800adbc 	.word	0x0800adbc
 80023e0:	0800adcc 	.word	0x0800adcc
 80023e4:	003d0900 	.word	0x003d0900

080023e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023ec:	4b02      	ldr	r3, [pc, #8]	@ (80023f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	20000000 	.word	0x20000000

080023fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002404:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <RCC_Delay+0x34>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <RCC_Delay+0x38>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0a5b      	lsrs	r3, r3, #9
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002418:	bf00      	nop
  }
  while (Delay --);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	60fa      	str	r2, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f9      	bne.n	8002418 <RCC_Delay+0x1c>
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000000 	.word	0x20000000
 8002434:	10624dd3 	.word	0x10624dd3

08002438 <ADCx_Init>:
#include "adc.h"

void ADCx_Init(ADC_TypeDef *ADCx, uint8_t Channel) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af02      	add	r7, sp, #8
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
    // Enable ADC clock
    if(ADCx == ADC1) RCC->APB2ENR |= 1<<9;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a84      	ldr	r2, [pc, #528]	@ (8002658 <ADCx_Init+0x220>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d105      	bne.n	8002458 <ADCx_Init+0x20>
 800244c:	4b83      	ldr	r3, [pc, #524]	@ (800265c <ADCx_Init+0x224>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a82      	ldr	r2, [pc, #520]	@ (800265c <ADCx_Init+0x224>)
 8002452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002456:	6193      	str	r3, [r2, #24]
    if(ADCx == ADC2) RCC->APB2ENR |= 1<<10;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a81      	ldr	r2, [pc, #516]	@ (8002660 <ADCx_Init+0x228>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d105      	bne.n	800246c <ADCx_Init+0x34>
 8002460:	4b7e      	ldr	r3, [pc, #504]	@ (800265c <ADCx_Init+0x224>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	4a7d      	ldr	r2, [pc, #500]	@ (800265c <ADCx_Init+0x224>)
 8002466:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800246a:	6193      	str	r3, [r2, #24]
    
    // Configure GPIO pins for analog input
    if(Channel == ADC_Channel_0) GPIOx_Init(GPIOA, 0, INPUT_ANALOG, NOPULL, 0);
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d107      	bne.n	8002482 <ADCx_Init+0x4a>
 8002472:	2300      	movs	r3, #0
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2300      	movs	r3, #0
 8002478:	2200      	movs	r2, #0
 800247a:	2100      	movs	r1, #0
 800247c:	4879      	ldr	r0, [pc, #484]	@ (8002664 <ADCx_Init+0x22c>)
 800247e:	f000 fa51 	bl	8002924 <GPIOx_Init>
    if(Channel == ADC_Channel_1) GPIOx_Init(GPIOA, 1, INPUT_ANALOG, NOPULL, 0);
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d107      	bne.n	8002498 <ADCx_Init+0x60>
 8002488:	2300      	movs	r3, #0
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2300      	movs	r3, #0
 800248e:	2200      	movs	r2, #0
 8002490:	2101      	movs	r1, #1
 8002492:	4874      	ldr	r0, [pc, #464]	@ (8002664 <ADCx_Init+0x22c>)
 8002494:	f000 fa46 	bl	8002924 <GPIOx_Init>
    if(Channel == ADC_Channel_2) GPIOx_Init(GPIOA, 2, INPUT_ANALOG, NOPULL, 0);
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d107      	bne.n	80024ae <ADCx_Init+0x76>
 800249e:	2300      	movs	r3, #0
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2300      	movs	r3, #0
 80024a4:	2200      	movs	r2, #0
 80024a6:	2102      	movs	r1, #2
 80024a8:	486e      	ldr	r0, [pc, #440]	@ (8002664 <ADCx_Init+0x22c>)
 80024aa:	f000 fa3b 	bl	8002924 <GPIOx_Init>
    if(Channel == ADC_Channel_3) GPIOx_Init(GPIOA, 3, INPUT_ANALOG, NOPULL, 0);
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d107      	bne.n	80024c4 <ADCx_Init+0x8c>
 80024b4:	2300      	movs	r3, #0
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2300      	movs	r3, #0
 80024ba:	2200      	movs	r2, #0
 80024bc:	2103      	movs	r1, #3
 80024be:	4869      	ldr	r0, [pc, #420]	@ (8002664 <ADCx_Init+0x22c>)
 80024c0:	f000 fa30 	bl	8002924 <GPIOx_Init>
    if(Channel == ADC_Channel_4) GPIOx_Init(GPIOA, 4, INPUT_ANALOG, NOPULL, 0);
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d107      	bne.n	80024da <ADCx_Init+0xa2>
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2300      	movs	r3, #0
 80024d0:	2200      	movs	r2, #0
 80024d2:	2104      	movs	r1, #4
 80024d4:	4863      	ldr	r0, [pc, #396]	@ (8002664 <ADCx_Init+0x22c>)
 80024d6:	f000 fa25 	bl	8002924 <GPIOx_Init>
    if(Channel == ADC_Channel_5) GPIOx_Init(GPIOA, 5, INPUT_ANALOG, NOPULL, 0);
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d107      	bne.n	80024f0 <ADCx_Init+0xb8>
 80024e0:	2300      	movs	r3, #0
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2300      	movs	r3, #0
 80024e6:	2200      	movs	r2, #0
 80024e8:	2105      	movs	r1, #5
 80024ea:	485e      	ldr	r0, [pc, #376]	@ (8002664 <ADCx_Init+0x22c>)
 80024ec:	f000 fa1a 	bl	8002924 <GPIOx_Init>
    if(Channel == ADC_Channel_6) GPIOx_Init(GPIOA, 6, INPUT_ANALOG, NOPULL, 0);
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d107      	bne.n	8002506 <ADCx_Init+0xce>
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2300      	movs	r3, #0
 80024fc:	2200      	movs	r2, #0
 80024fe:	2106      	movs	r1, #6
 8002500:	4858      	ldr	r0, [pc, #352]	@ (8002664 <ADCx_Init+0x22c>)
 8002502:	f000 fa0f 	bl	8002924 <GPIOx_Init>
    if(Channel == ADC_Channel_7) GPIOx_Init(GPIOA, 7, INPUT_ANALOG, NOPULL, 0);
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	2b07      	cmp	r3, #7
 800250a:	d107      	bne.n	800251c <ADCx_Init+0xe4>
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2300      	movs	r3, #0
 8002512:	2200      	movs	r2, #0
 8002514:	2107      	movs	r1, #7
 8002516:	4853      	ldr	r0, [pc, #332]	@ (8002664 <ADCx_Init+0x22c>)
 8002518:	f000 fa04 	bl	8002924 <GPIOx_Init>
    
    // ADC Configuration
    ADCx->CR1 |= 1<<8;              // SCAN MODE enable
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	605a      	str	r2, [r3, #4]
    ADCx->CR2 |= (1<<1) | (1<<0);   // CONT=1, ADON=1 (Continuous mode)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f043 0203 	orr.w	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= 1<<20;             // EXTEN[1:0] = 00 (External trigger disabled)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
    ADCx->CR2 &= ~(1<<11);          // ALIGN=0 (Right alignment)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	609a      	str	r2, [r3, #8]
    ADCx->CR2 &= ~(0x7<<17);        // Clear EXTSEL bits
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 2260 	bic.w	r2, r3, #917504	@ 0xe0000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= (0x7<<17);         // EXTSEL = 111 (SWSTART)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f443 2260 	orr.w	r2, r3, #917504	@ 0xe0000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]
    
    // Set sequence length to 1 conversion
    ADCx->SQR1 &= ~(0xF<<20);       // Clear L[3:0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADCx->SQR1 |= (0x0<<20);        // L=0 (1 conversion)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    // Set sampling time (longest for better accuracy)
    if(Channel > 9) {
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	2b09      	cmp	r3, #9
 800257c:	d91f      	bls.n	80025be <ADCx_Init+0x186>
        ADCx->SMPR1 &= ~(7<<((Channel-10)*3)); 
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68d9      	ldr	r1, [r3, #12]
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	f1a3 020a 	sub.w	r2, r3, #10
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	2207      	movs	r2, #7
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	ea01 0203 	and.w	r2, r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60da      	str	r2, [r3, #12]
        ADCx->SMPR1 |= (7<<((Channel-10)*3));   // 480 cycles
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68d9      	ldr	r1, [r3, #12]
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	f1a3 020a 	sub.w	r2, r3, #10
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	2207      	movs	r2, #7
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	ea41 0203 	orr.w	r2, r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	60da      	str	r2, [r3, #12]
 80025bc:	e01a      	b.n	80025f4 <ADCx_Init+0x1bc>
    } else {
        ADCx->SMPR2 &= ~(7<<(Channel*3));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6919      	ldr	r1, [r3, #16]
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	2207      	movs	r2, #7
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	ea01 0203 	and.w	r2, r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	611a      	str	r2, [r3, #16]
        ADCx->SMPR2 |= (7<<(Channel*3));        // 480 cycles
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6919      	ldr	r1, [r3, #16]
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	2207      	movs	r2, #7
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	ea41 0203 	orr.w	r2, r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	611a      	str	r2, [r3, #16]
    }
    
    // Set first conversion in regular sequence
    ADCx->SQR3 &= 0xFFFFFFE0;       // Clear SQ1[4:0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f8:	f023 021f 	bic.w	r2, r3, #31
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	635a      	str	r2, [r3, #52]	@ 0x34
    ADCx->SQR3 |= Channel;          // Set channel for SQ1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // ADC Calibration
    ADCx->CR2 |= 1<<3;              // RSTCAL=1 (Reset calibration)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f043 0208 	orr.w	r2, r3, #8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]
    while(ADCx->CR2 & (1<<3));      // Wait for reset calibration to complete
 8002618:	bf00      	nop
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f9      	bne.n	800261a <ADCx_Init+0x1e2>
    
    ADCx->CR2 |= 1<<2;              // CAL=1 (Start calibration)  
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f043 0204 	orr.w	r2, r3, #4
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	609a      	str	r2, [r3, #8]
    while(ADCx->CR2 & (1<<2));      // Wait for calibration to complete
 8002632:	bf00      	nop
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f9      	bne.n	8002634 <ADCx_Init+0x1fc>
        
    // Enable ADC
    ADCx->CR2 |= (1<<22) | (1<<0);  // SWSTART=1, ADON=1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6093      	str	r3, [r2, #8]
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40012400 	.word	0x40012400
 800265c:	40021000 	.word	0x40021000
 8002660:	40012800 	.word	0x40012800
 8002664:	40010800 	.word	0x40010800

08002668 <ADCx_Read>:

uint16_t ADCx_Read(ADC_TypeDef *ADCx, uint8_t Channel) {
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
    // Set sampling time for the channel
    if(Channel > 9) {
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	2b09      	cmp	r3, #9
 8002678:	d91f      	bls.n	80026ba <ADCx_Read+0x52>
        ADCx->SMPR1 &= ~(7<<((Channel-10)*3)); 
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68d9      	ldr	r1, [r3, #12]
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	f1a3 020a 	sub.w	r2, r3, #10
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	2207      	movs	r2, #7
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	ea01 0203 	and.w	r2, r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60da      	str	r2, [r3, #12]
        ADCx->SMPR1 |= (7<<((Channel-10)*3));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68d9      	ldr	r1, [r3, #12]
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	f1a3 020a 	sub.w	r2, r3, #10
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	ea41 0203 	orr.w	r2, r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	60da      	str	r2, [r3, #12]
 80026b8:	e01a      	b.n	80026f0 <ADCx_Read+0x88>
    } else {
        ADCx->SMPR2 &= ~(7<<(Channel*3));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6919      	ldr	r1, [r3, #16]
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	2207      	movs	r2, #7
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	ea01 0203 	and.w	r2, r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]
        ADCx->SMPR2 |= (7<<(Channel*3));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6919      	ldr	r1, [r3, #16]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	2207      	movs	r2, #7
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	ea41 0203 	orr.w	r2, r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	611a      	str	r2, [r3, #16]
    }
    
    // Set channel in regular sequence
    ADCx->SQR3 &= 0xFFFFFFE0;       
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f4:	f023 021f 	bic.w	r2, r3, #31
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	635a      	str	r2, [r3, #52]	@ 0x34
    ADCx->SQR3 |= Channel;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Start conversion
    ADCx->CR2 |= (1<<22) | (1<<0);  // SWSTART=1, ADON=1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6093      	str	r3, [r2, #8]
    
    // Wait for conversion to complete
    while((ADCx->SR & (1<<1)) == 0);
 8002718:	bf00      	nop
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f9      	beq.n	800271a <ADCx_Read+0xb2>
    
    // Clear EOC flag by reading DR
    return ADCx->DR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	b29b      	uxth	r3, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <ADCx_Read_TB>:

uint16_t ADCx_Read_TB(ADC_TypeDef *ADCx, uint8_t Channel, uint8_t n) {
 8002736:	b580      	push	{r7, lr}
 8002738:	b088      	sub	sp, #32
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	70fb      	strb	r3, [r7, #3]
 8002742:	4613      	mov	r3, r2
 8002744:	70bb      	strb	r3, [r7, #2]
    if(n == 0) return 0;            // Validation
 8002746:	78bb      	ldrb	r3, [r7, #2]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <ADCx_Read_TB+0x1a>
 800274c:	2300      	movs	r3, #0
 800274e:	e03c      	b.n	80027ca <ADCx_Read_TB+0x94>
    
    uint32_t sum = 0;               // Dùng uint32_t d? tránh overflow
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
    
    // ? Lo?i b? m?t s? m?u d?u d? ADC ?n d?nh
    for(int i = 0; i < 3; i++) {
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	e011      	b.n	800277e <ADCx_Read_TB+0x48>
        ADCx_Read(ADCx, Channel);
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ff82 	bl	8002668 <ADCx_Read>
        for(volatile int d = 0; d < 500; d++); // Delay
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	e002      	b.n	8002770 <ADCx_Read_TB+0x3a>
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	3301      	adds	r3, #1
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002776:	dbf8      	blt.n	800276a <ADCx_Read_TB+0x34>
    for(int i = 0; i < 3; i++) {
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	3301      	adds	r3, #1
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	2b02      	cmp	r3, #2
 8002782:	ddea      	ble.n	800275a <ADCx_Read_TB+0x24>
    }
    
    // Ð?c n m?u
    for (int i = 0; i < n; i++) {
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e016      	b.n	80027b8 <ADCx_Read_TB+0x82>
        sum += ADCx_Read(ADCx, Channel);
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	4619      	mov	r1, r3
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ff6a 	bl	8002668 <ADCx_Read>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4413      	add	r3, r2
 800279c:	61fb      	str	r3, [r7, #28]
        for (volatile int d = 0; d < 1000; d++); // Delay gi?a các l?n d?c
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e002      	b.n	80027aa <ADCx_Read_TB+0x74>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3301      	adds	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027b0:	dbf8      	blt.n	80027a4 <ADCx_Read_TB+0x6e>
    for (int i = 0; i < n; i++) {
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3301      	adds	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	78bb      	ldrb	r3, [r7, #2]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	dbe4      	blt.n	800278a <ADCx_Read_TB+0x54>
    }
    
    return (uint16_t)(sum / n);     // Tr? v? trung bình
 80027c0:	78bb      	ldrb	r3, [r7, #2]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	b29b      	uxth	r3, r3
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <__NVIC_GetPriorityGrouping>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4906      	ldr	r1, [pc, #24]	@ (8002824 <__NVIC_EnableIRQ+0x34>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100

08002828 <__NVIC_SetPriority>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	db0a      	blt.n	8002852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	490c      	ldr	r1, [pc, #48]	@ (8002874 <__NVIC_SetPriority+0x4c>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002850:	e00a      	b.n	8002868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4908      	ldr	r1, [pc, #32]	@ (8002878 <__NVIC_SetPriority+0x50>)
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3b04      	subs	r3, #4
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	440b      	add	r3, r1
 8002866:	761a      	strb	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <NVIC_EncodePriority>:
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	@ 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f1c3 0307 	rsb	r3, r3, #7
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf28      	it	cs
 800289a:	2304      	movcs	r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d902      	bls.n	80028ac <NVIC_EncodePriority+0x30>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3b03      	subs	r3, #3
 80028aa:	e000      	b.n	80028ae <NVIC_EncodePriority+0x32>
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	4313      	orrs	r3, r2
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	@ 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <NVICx_Init>:
#include "gpio.h"


void NVICx_Init(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f2:	f7ff ff6f 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 80028f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	6978      	ldr	r0, [r7, #20]
 80028fe:	f7ff ffbd 	bl	800287c <NVIC_EncodePriority>
 8002902:	4602      	mov	r2, r0
 8002904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff ff8c 	bl	8002828 <__NVIC_SetPriority>
	
	 /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff6b 	bl	80027f0 <__NVIC_EnableIRQ>
}
 800291a:	bf00      	nop
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <GPIOx_Init>:
void GPIOx_Init(GPIO_TypeDef *GPIOx ,uint8_t Pin ,uint8_t Mode ,uint8_t Pull,uint8_t Speed)
{ 
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	4608      	mov	r0, r1
 800292e:	4611      	mov	r1, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	70fb      	strb	r3, [r7, #3]
 8002936:	460b      	mov	r3, r1
 8002938:	70bb      	strb	r3, [r7, #2]
 800293a:	4613      	mov	r3, r2
 800293c:	707b      	strb	r3, [r7, #1]
if(GPIOx == GPIOA ) RCC ->APB2ENR |= 1<<2 ;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a41      	ldr	r2, [pc, #260]	@ (8002a48 <GPIOx_Init+0x124>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d105      	bne.n	8002952 <GPIOx_Init+0x2e>
 8002946:	4b41      	ldr	r3, [pc, #260]	@ (8002a4c <GPIOx_Init+0x128>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4a40      	ldr	r2, [pc, #256]	@ (8002a4c <GPIOx_Init+0x128>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOB ) RCC ->APB2ENR |= 1<<3 ;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a3e      	ldr	r2, [pc, #248]	@ (8002a50 <GPIOx_Init+0x12c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d105      	bne.n	8002966 <GPIOx_Init+0x42>
 800295a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a4c <GPIOx_Init+0x128>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a4c <GPIOx_Init+0x128>)
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOC ) RCC ->APB2ENR |= 1<<4 ;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a3a      	ldr	r2, [pc, #232]	@ (8002a54 <GPIOx_Init+0x130>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d105      	bne.n	800297a <GPIOx_Init+0x56>
 800296e:	4b37      	ldr	r3, [pc, #220]	@ (8002a4c <GPIOx_Init+0x128>)
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	4a36      	ldr	r2, [pc, #216]	@ (8002a4c <GPIOx_Init+0x128>)
 8002974:	f043 0310 	orr.w	r3, r3, #16
 8002978:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOD ) RCC ->APB2ENR |= 1<<5 ;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a36      	ldr	r2, [pc, #216]	@ (8002a58 <GPIOx_Init+0x134>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d105      	bne.n	800298e <GPIOx_Init+0x6a>
 8002982:	4b32      	ldr	r3, [pc, #200]	@ (8002a4c <GPIOx_Init+0x128>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	4a31      	ldr	r2, [pc, #196]	@ (8002a4c <GPIOx_Init+0x128>)
 8002988:	f043 0320 	orr.w	r3, r3, #32
 800298c:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOE ) RCC ->APB2ENR |= 1<<6 ;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a32      	ldr	r2, [pc, #200]	@ (8002a5c <GPIOx_Init+0x138>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d105      	bne.n	80029a2 <GPIOx_Init+0x7e>
 8002996:	4b2d      	ldr	r3, [pc, #180]	@ (8002a4c <GPIOx_Init+0x128>)
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	4a2c      	ldr	r2, [pc, #176]	@ (8002a4c <GPIOx_Init+0x128>)
 800299c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a0:	6193      	str	r3, [r2, #24]
	if(Pin<8){
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	2b07      	cmp	r3, #7
 80029a6:	d818      	bhi.n	80029da <GPIOx_Init+0xb6>
	GPIOx->CRL &=~(0xF<<(Pin*4)) ;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	0092      	lsls	r2, r2, #2
 80029b0:	210f      	movs	r1, #15
 80029b2:	fa01 f202 	lsl.w	r2, r1, r2
 80029b6:	43d2      	mvns	r2, r2
 80029b8:	401a      	ands	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]
	GPIOx->CRL |=(((Mode<<2)+ Speed) <<(Pin*4)) ; 
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	78ba      	ldrb	r2, [r7, #2]
 80029c4:	0091      	lsls	r1, r2, #2
 80029c6:	7c3a      	ldrb	r2, [r7, #16]
 80029c8:	4411      	add	r1, r2
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	0092      	lsls	r2, r2, #2
 80029ce:	fa01 f202 	lsl.w	r2, r1, r2
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	e019      	b.n	8002a0e <GPIOx_Init+0xea>
	}
	else{
	GPIOx->CRH &=~(0xF<<((Pin-8)*4)) ;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	3a08      	subs	r2, #8
 80029e2:	0092      	lsls	r2, r2, #2
 80029e4:	210f      	movs	r1, #15
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	43d2      	mvns	r2, r2
 80029ec:	401a      	ands	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	605a      	str	r2, [r3, #4]
	GPIOx->CRH |=(((Mode<<2)+ Speed) <<((Pin-8)*4)) ;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	78ba      	ldrb	r2, [r7, #2]
 80029f8:	0091      	lsls	r1, r2, #2
 80029fa:	7c3a      	ldrb	r2, [r7, #16]
 80029fc:	4411      	add	r1, r2
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	3a08      	subs	r2, #8
 8002a02:	0092      	lsls	r2, r2, #2
 8002a04:	fa01 f202 	lsl.w	r2, r1, r2
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	605a      	str	r2, [r3, #4]
	}
	if(Pull ==PU)
 8002a0e:	787b      	ldrb	r3, [r7, #1]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d109      	bne.n	8002a28 <GPIOx_Init+0x104>
  GPIOx->ODR |= 1<<Pin ;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60da      	str	r2, [r3, #12]
  else GPIOx->ODR &= ~(1<<Pin); 	
}
 8002a26:	e009      	b.n	8002a3c <GPIOx_Init+0x118>
  else GPIOx->ODR &= ~(1<<Pin); 	
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	43d2      	mvns	r2, r2
 8002a36:	401a      	ands	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	60da      	str	r2, [r3, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40010800 	.word	0x40010800
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40010c00 	.word	0x40010c00
 8002a54:	40011000 	.word	0x40011000
 8002a58:	40011400 	.word	0x40011400
 8002a5c:	40011800 	.word	0x40011800

08002a60 <GPIOx_ReadPin>:
{
	if (bit==1) GPIOx->BSRR |= 1 << Pin ;
	else GPIOx->BSRR |= 1 << (Pin + 16);
}
uint8_t GPIOx_ReadPin(GPIO_TypeDef *GPIOx ,uint8_t Pin )
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	70fb      	strb	r3, [r7, #3]
	return ((GPIOx->IDR)&(1<<Pin))==0 ? 0:1 ; 
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
	...

08002a90 <I2Cx_Init>:
#include "i2c.h"
/* I2C1 init function */
void I2Cx_Init(I2C_TypeDef * I2Cx, I2C_Pin Pins, uint32_t Speed)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	72fb      	strb	r3, [r7, #11]
	uint32_t PCLKx=(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a9e:	4b40      	ldr	r3, [pc, #256]	@ (8002ba0 <I2Cx_Init+0x110>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a40      	ldr	r2, [pc, #256]	@ (8002ba4 <I2Cx_Init+0x114>)
 8002aa4:	6852      	ldr	r2, [r2, #4]
 8002aa6:	0a12      	lsrs	r2, r2, #8
 8002aa8:	f002 0207 	and.w	r2, r2, #7
 8002aac:	493e      	ldr	r1, [pc, #248]	@ (8002ba8 <I2Cx_Init+0x118>)
 8002aae:	5c8a      	ldrb	r2, [r1, r2]
 8002ab0:	40d3      	lsrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
	
  /* I2C clock enable */
		if (I2Cx == I2C1) {
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a3d      	ldr	r2, [pc, #244]	@ (8002bac <I2Cx_Init+0x11c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d106      	bne.n	8002aca <I2Cx_Init+0x3a>
				RCC->APB1ENR |= (1 << 21); // B?t clock cho I2C1
 8002abc:	4b39      	ldr	r3, [pc, #228]	@ (8002ba4 <I2Cx_Init+0x114>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	4a38      	ldr	r2, [pc, #224]	@ (8002ba4 <I2Cx_Init+0x114>)
 8002ac2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ac6:	61d3      	str	r3, [r2, #28]
 8002ac8:	e009      	b.n	8002ade <I2Cx_Init+0x4e>
		} else if (I2Cx == I2C2) {
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a38      	ldr	r2, [pc, #224]	@ (8002bb0 <I2Cx_Init+0x120>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d105      	bne.n	8002ade <I2Cx_Init+0x4e>
				RCC->APB1ENR |= (1 << 22); // B?t clock cho I2C2
 8002ad2:	4b34      	ldr	r3, [pc, #208]	@ (8002ba4 <I2Cx_Init+0x114>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	4a33      	ldr	r2, [pc, #204]	@ (8002ba4 <I2Cx_Init+0x114>)
 8002ad8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002adc:	61d3      	str	r3, [r2, #28]
		}
	

		if(Pins==Pin_PB6PB7){		////I2C1
 8002ade:	7afb      	ldrb	r3, [r7, #11]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d110      	bne.n	8002b06 <I2Cx_Init+0x76>
			GPIOx_Init(GPIOB, 6,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2203      	movs	r2, #3
 8002aec:	2106      	movs	r1, #6
 8002aee:	4831      	ldr	r0, [pc, #196]	@ (8002bb4 <I2Cx_Init+0x124>)
 8002af0:	f7ff ff18 	bl	8002924 <GPIOx_Init>
			GPIOx_Init(GPIOB, 7,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002af4:	2303      	movs	r3, #3
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2300      	movs	r3, #0
 8002afa:	2203      	movs	r2, #3
 8002afc:	2107      	movs	r1, #7
 8002afe:	482d      	ldr	r0, [pc, #180]	@ (8002bb4 <I2Cx_Init+0x124>)
 8002b00:	f7ff ff10 	bl	8002924 <GPIOx_Init>
 8002b04:	e02c      	b.n	8002b60 <I2Cx_Init+0xd0>
		}
		else if(Pins==Pin_PB8PB9){//I2C1
 8002b06:	7afb      	ldrb	r3, [r7, #11]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d116      	bne.n	8002b3a <I2Cx_Init+0xaa>
			AFIO->MAPR |= 1<<1;// REMAP
 8002b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <I2Cx_Init+0x128>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a29      	ldr	r2, [pc, #164]	@ (8002bb8 <I2Cx_Init+0x128>)
 8002b12:	f043 0302 	orr.w	r3, r3, #2
 8002b16:	6053      	str	r3, [r2, #4]
			GPIOx_Init(GPIOB, 8,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002b18:	2303      	movs	r3, #3
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2203      	movs	r2, #3
 8002b20:	2108      	movs	r1, #8
 8002b22:	4824      	ldr	r0, [pc, #144]	@ (8002bb4 <I2Cx_Init+0x124>)
 8002b24:	f7ff fefe 	bl	8002924 <GPIOx_Init>
			GPIOx_Init(GPIOB, 9,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002b28:	2303      	movs	r3, #3
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2203      	movs	r2, #3
 8002b30:	2109      	movs	r1, #9
 8002b32:	4820      	ldr	r0, [pc, #128]	@ (8002bb4 <I2Cx_Init+0x124>)
 8002b34:	f7ff fef6 	bl	8002924 <GPIOx_Init>
 8002b38:	e012      	b.n	8002b60 <I2Cx_Init+0xd0>
		}
		
		
		else if(Pins==Pin_PB10PB11){//I2C2
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d10f      	bne.n	8002b60 <I2Cx_Init+0xd0>
			GPIOx_Init(GPIOB, 10,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002b40:	2303      	movs	r3, #3
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2300      	movs	r3, #0
 8002b46:	2203      	movs	r2, #3
 8002b48:	210a      	movs	r1, #10
 8002b4a:	481a      	ldr	r0, [pc, #104]	@ (8002bb4 <I2Cx_Init+0x124>)
 8002b4c:	f7ff feea 	bl	8002924 <GPIOx_Init>
			GPIOx_Init(GPIOB, 11,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002b50:	2303      	movs	r3, #3
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2300      	movs	r3, #0
 8002b56:	2203      	movs	r2, #3
 8002b58:	210b      	movs	r1, #11
 8002b5a:	4816      	ldr	r0, [pc, #88]	@ (8002bb4 <I2Cx_Init+0x124>)
 8002b5c:	f7ff fee2 	bl	8002924 <GPIOx_Init>
		}
		
		I2Cx->CR2 =  PCLKx/1000000;// Peripheral clock frequency = 36M
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <I2Cx_Init+0x12c>)
 8002b64:	fba2 2303 	umull	r2, r3, r2, r3
 8002b68:	0c9a      	lsrs	r2, r3, #18
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]
		I2Cx->CCR =  PCLKx/(Speed*2); 
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	61da      	str	r2, [r3, #28]
		I2Cx->TRISE = (PCLKx/1000000)+1;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bbc <I2Cx_Init+0x12c>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	0c9b      	lsrs	r3, r3, #18
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	621a      	str	r2, [r3, #32]
		I2Cx->CR1 |=(0<<1)|(1<<0) ; //en 
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	601a      	str	r2, [r3, #0]
	}
 8002b98:	bf00      	nop
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	0800adb4 	.word	0x0800adb4
 8002bac:	40005400 	.word	0x40005400
 8002bb0:	40005800 	.word	0x40005800
 8002bb4:	40010c00 	.word	0x40010c00
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	431bde83 	.word	0x431bde83

08002bc0 <I2Cx_ReadMulti>:

	void I2Cx_ReadMulti(I2C_TypeDef *I2Cx, uint8_t DevAddress, uint8_t add, uint8_t * data, uint8_t size){
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	72fb      	strb	r3, [r7, #11]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	72bb      	strb	r3, [r7, #10]
		I2Cx->CR1 |= (1<<8) |(1<<10);// Start generation + ACK
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]
		while(!(I2Cx->SR1&(1<<0)));
 8002bde:	bf00      	nop
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f9      	beq.n	8002be0 <I2Cx_ReadMulti+0x20>
		
		I2Cx->DR = (DevAddress<<1)|0;
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	005a      	lsls	r2, r3, #1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
		while(!(I2Cx->SR1&(1<<1))  |  !(I2Cx->SR2&(1<<1)));
 8002bf4:	bf00      	nop
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1e9      	bne.n	8002bf6 <I2Cx_ReadMulti+0x36>
		
		I2Cx->DR = add;
 8002c22:	7aba      	ldrb	r2, [r7, #10]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	611a      	str	r2, [r3, #16]
		while(!(I2Cx->SR1&(1<<7)));
 8002c28:	bf00      	nop
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f9      	beq.n	8002c2a <I2Cx_ReadMulti+0x6a>
		
		I2Cx->CR1 |= (1<<8) ;// reStart generation 
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]
		while(!(I2Cx->SR1&(1<<0)));
 8002c42:	bf00      	nop
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f9      	beq.n	8002c44 <I2Cx_ReadMulti+0x84>
		
		I2Cx->DR = (DevAddress<<1)|1;
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	611a      	str	r2, [r3, #16]
		while(!(I2Cx->SR1&(1<<1))  |  !(I2Cx->SR2&(1<<1)));
 8002c5e:	bf00      	nop
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf0c      	ite	eq
 8002c7e:	2301      	moveq	r3, #1
 8002c80:	2300      	movne	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4313      	orrs	r3, r2
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e9      	bne.n	8002c60 <I2Cx_ReadMulti+0xa0>
		
		for(int i=0; i<size; i++){
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	e010      	b.n	8002cb4 <I2Cx_ReadMulti+0xf4>
		while(!(I2Cx->SR1&(1<<6)));// RXE
 8002c92:	bf00      	nop
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f9      	beq.n	8002c94 <I2Cx_ReadMulti+0xd4>
		data[i] = I2Cx->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6919      	ldr	r1, [r3, #16]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	b2ca      	uxtb	r2, r1
 8002cac:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	dbe9      	blt.n	8002c92 <I2Cx_ReadMulti+0xd2>
		}
		
		I2Cx->CR1 &= ~(1<<10);// nACK
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	601a      	str	r2, [r3, #0]
		I2Cx->CR1 |= (1<<9) ;// Stop 
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]
		
	}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <I2Cx_WriteMulti>:
	void I2Cx_WriteMulti(I2C_TypeDef *I2Cx, uint8_t DevAddress, uint8_t add, uint8_t * data, uint8_t size){
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	72fb      	strb	r3, [r7, #11]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	72bb      	strb	r3, [r7, #10]

	I2Cx->CR1 |= (1<<8) |(1<<10);// Start generation + ACK
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	601a      	str	r2, [r3, #0]
	while(!(I2Cx->SR1&(1<<0)));
 8002cfe:	bf00      	nop
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f9      	beq.n	8002d00 <I2Cx_WriteMulti+0x20>
	
	I2Cx->DR = (DevAddress<<1)|0;
 8002d0c:	7afb      	ldrb	r3, [r7, #11]
 8002d0e:	005a      	lsls	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	611a      	str	r2, [r3, #16]
	while(!(I2Cx->SR1&(1<<1))  |  !(I2Cx->SR2&(1<<1)));
 8002d14:	bf00      	nop
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1e9      	bne.n	8002d16 <I2Cx_WriteMulti+0x36>
	
	I2Cx->DR = add;
 8002d42:	7aba      	ldrb	r2, [r7, #10]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	611a      	str	r2, [r3, #16]
	while(!(I2Cx->SR1&(1<<7)));// TXE
 8002d48:	bf00      	nop
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f9      	beq.n	8002d4a <I2Cx_WriteMulti+0x6a>
	
	for(int i=0; i<size; i++){
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e010      	b.n	8002d7e <I2Cx_WriteMulti+0x9e>
	I2Cx->DR = data[i];
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	611a      	str	r2, [r3, #16]
	while(!(I2Cx->SR1&(1<<7)));// TXE
 8002d6a:	bf00      	nop
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f9      	beq.n	8002d6c <I2Cx_WriteMulti+0x8c>
	for(int i=0; i<size; i++){
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbe9      	blt.n	8002d5c <I2Cx_WriteMulti+0x7c>
	}
	
	I2Cx->CR1 &= ~(1<<10);// nACK
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]
	I2Cx->CR1 |= (1<<9) ;// Stop 
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	601a      	str	r2, [r3, #0]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <BCDtoBIN>:
uint8_t BCDtoBIN(uint8_t bcd){
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	71fb      	strb	r3, [r7, #7]
return 10*(bcd>>4) + (bcd&0x0f);
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	0092      	lsls	r2, r2, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	b2db      	uxtb	r3, r3

}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
	...

08002ddc <BINtoBCD>:

uint8_t BINtoBCD(uint8_t bin){
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
return ((bin/10)<<4) + (bin%10);
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	4a0c      	ldr	r2, [pc, #48]	@ (8002e1c <BINtoBCD+0x40>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	08db      	lsrs	r3, r3, #3
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	b2d8      	uxtb	r0, r3
 8002df6:	79fa      	ldrb	r2, [r7, #7]
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <BINtoBCD+0x40>)
 8002dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfe:	08d9      	lsrs	r1, r3, #3
 8002e00:	460b      	mov	r3, r1
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	4403      	add	r3, r0
 8002e0e:	b2db      	uxtb	r3, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	cccccccd 	.word	0xcccccccd

08002e20 <RTC_CheckMinMax>:


uint8_t RTC_CheckMinMax(uint8_t val, uint8_t min, uint8_t max) {
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	71bb      	strb	r3, [r7, #6]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	717b      	strb	r3, [r7, #5]
	if (val < min) {
 8002e32:	79fa      	ldrb	r2, [r7, #7]
 8002e34:	79bb      	ldrb	r3, [r7, #6]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d201      	bcs.n	8002e3e <RTC_CheckMinMax+0x1e>
		return min;
 8002e3a:	79bb      	ldrb	r3, [r7, #6]
 8002e3c:	e006      	b.n	8002e4c <RTC_CheckMinMax+0x2c>
	} else if (val > max) {
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	797b      	ldrb	r3, [r7, #5]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d901      	bls.n	8002e4a <RTC_CheckMinMax+0x2a>
		return max;
 8002e46:	797b      	ldrb	r3, [r7, #5]
 8002e48:	e000      	b.n	8002e4c <RTC_CheckMinMax+0x2c>
	}
	return val;
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
	...

08002e58 <DS3231Read>:

void DS3231Read(uint8_t *HH, uint8_t *MM, uint8_t *SS,uint8_t *Date ,uint8_t *D,uint8_t *M,uint8_t *Y){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
uint8_t data[7];
	
I2Cx_ReadMulti(I2C1, 0x68, 0x00, data, 7);
 8002e66:	f107 0310 	add.w	r3, r7, #16
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	9200      	str	r2, [sp, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2168      	movs	r1, #104	@ 0x68
 8002e72:	481f      	ldr	r0, [pc, #124]	@ (8002ef0 <DS3231Read+0x98>)
 8002e74:	f7ff fea4 	bl	8002bc0 <I2Cx_ReadMulti>
	
	*HH=BCDtoBIN(data[2]); *MM=BCDtoBIN(data[1]); *SS=BCDtoBIN(data[0]); *Date =BCDtoBIN(data[3]);*D=BCDtoBIN(data[4]);*M=BCDtoBIN(data[5]);*Y=BCDtoBIN(data[6]);
 8002e78:	7cbb      	ldrb	r3, [r7, #18]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ff95 	bl	8002daa <BCDtoBIN>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	7c7b      	ldrb	r3, [r7, #17]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff8d 	bl	8002daa <BCDtoBIN>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	7c3b      	ldrb	r3, [r7, #16]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff85 	bl	8002daa <BCDtoBIN>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff7d 	bl	8002daa <BCDtoBIN>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	7d3b      	ldrb	r3, [r7, #20]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ff75 	bl	8002daa <BCDtoBIN>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	7d7b      	ldrb	r3, [r7, #21]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ff6d 	bl	8002daa <BCDtoBIN>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	701a      	strb	r2, [r3, #0]
 8002ed8:	7dbb      	ldrb	r3, [r7, #22]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff65 	bl	8002daa <BCDtoBIN>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee6:	701a      	strb	r2, [r3, #0]
	
}
 8002ee8:	bf00      	nop
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40005400 	.word	0x40005400

08002ef4 <DS3231Set>:
void DS3231Set(uint8_t HH, uint8_t MM, uint8_t SS,uint8_t Date ,uint8_t D,uint8_t M,uint8_t Y){
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	4604      	mov	r4, r0
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	4603      	mov	r3, r0
 8002f08:	71bb      	strb	r3, [r7, #6]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	717b      	strb	r3, [r7, #5]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	713b      	strb	r3, [r7, #4]

	uint8_t data[7];
	
	data[0] = BINtoBCD(RTC_CheckMinMax(SS, 0, 59)); 
 8002f12:	797b      	ldrb	r3, [r7, #5]
 8002f14:	223b      	movs	r2, #59	@ 0x3b
 8002f16:	2100      	movs	r1, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff81 	bl	8002e20 <RTC_CheckMinMax>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff5b 	bl	8002ddc <BINtoBCD>
 8002f26:	4603      	mov	r3, r0
 8002f28:	723b      	strb	r3, [r7, #8]
	data[1] = BINtoBCD(RTC_CheckMinMax(MM, 0, 59));
 8002f2a:	79bb      	ldrb	r3, [r7, #6]
 8002f2c:	223b      	movs	r2, #59	@ 0x3b
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff75 	bl	8002e20 <RTC_CheckMinMax>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff4f 	bl	8002ddc <BINtoBCD>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	727b      	strb	r3, [r7, #9]
	data[2] = BINtoBCD(RTC_CheckMinMax(HH, 0, 23));
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	2217      	movs	r2, #23
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff69 	bl	8002e20 <RTC_CheckMinMax>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff43 	bl	8002ddc <BINtoBCD>
 8002f56:	4603      	mov	r3, r0
 8002f58:	72bb      	strb	r3, [r7, #10]
	data[3] = BINtoBCD(RTC_CheckMinMax(Date, 1, 7));
 8002f5a:	793b      	ldrb	r3, [r7, #4]
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff5d 	bl	8002e20 <RTC_CheckMinMax>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff37 	bl	8002ddc <BINtoBCD>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	72fb      	strb	r3, [r7, #11]
	data[4] = BINtoBCD(RTC_CheckMinMax(D, 1, 31));
 8002f72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f76:	221f      	movs	r2, #31
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ff50 	bl	8002e20 <RTC_CheckMinMax>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ff2a 	bl	8002ddc <BINtoBCD>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	733b      	strb	r3, [r7, #12]
	data[5] = BINtoBCD(RTC_CheckMinMax(M, 1, 12));
 8002f8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f90:	220c      	movs	r2, #12
 8002f92:	2101      	movs	r1, #1
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff43 	bl	8002e20 <RTC_CheckMinMax>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff1d 	bl	8002ddc <BINtoBCD>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	737b      	strb	r3, [r7, #13]
	data[6] = BINtoBCD(RTC_CheckMinMax(Y, 0, 99));
 8002fa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002faa:	2263      	movs	r2, #99	@ 0x63
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ff36 	bl	8002e20 <RTC_CheckMinMax>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ff10 	bl	8002ddc <BINtoBCD>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73bb      	strb	r3, [r7, #14]
	
	I2Cx_WriteMulti(I2C1, 0x68, 0x00, data,7);
 8002fc0:	f107 0308 	add.w	r3, r7, #8
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	9200      	str	r2, [sp, #0]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2168      	movs	r1, #104	@ 0x68
 8002fcc:	4803      	ldr	r0, [pc, #12]	@ (8002fdc <DS3231Set+0xe8>)
 8002fce:	f7ff fe87 	bl	8002ce0 <I2Cx_WriteMulti>
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40005400 	.word	0x40005400

08002fe0 <USARTx_Init>:
 *      Author: FPTSHOP
 */

#include "uart.h"
void USARTx_Init(USART_TypeDef * USARTx,USART_Pin Pin,uint32_t baud)
{
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	b08a      	sub	sp, #40	@ 0x28
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	72fb      	strb	r3, [r7, #11]
	  IRQn_Type IRQn  ; 
	  uint8_t u = 0 ; 
 8002fee:	2300      	movs	r3, #0
 8002ff0:	77bb      	strb	r3, [r7, #30]
	  uint32_t PCLKx = 0 ; 
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
	  RCC->APB2ENR |=1<<0 ; 
 8002ff6:	4b87      	ldr	r3, [pc, #540]	@ (8003214 <USARTx_Init+0x234>)
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	4a86      	ldr	r2, [pc, #536]	@ (8003214 <USARTx_Init+0x234>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6193      	str	r3, [r2, #24]
    float USARTDIV = 0.0 ;
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
    uint16_t mantisa = 0 ,fraction= 0 ;  
 8003008:	2300      	movs	r3, #0
 800300a:	827b      	strh	r3, [r7, #18]
 800300c:	2300      	movs	r3, #0
 800300e:	823b      	strh	r3, [r7, #16]
	
		if(USARTx == USART1 ){PCLKx =(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE1_Pos]); RCC->APB2ENR|=1<<14;IRQn = USART1_IRQn ; u=1;}
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a81      	ldr	r2, [pc, #516]	@ (8003218 <USARTx_Init+0x238>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d116      	bne.n	8003046 <USARTx_Init+0x66>
 8003018:	f7ff f9e6 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b7d      	ldr	r3, [pc, #500]	@ (8003214 <USARTx_Init+0x234>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003028:	497c      	ldr	r1, [pc, #496]	@ (800321c <USARTx_Init+0x23c>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	fa42 f303 	asr.w	r3, r2, r3
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	4b78      	ldr	r3, [pc, #480]	@ (8003214 <USARTx_Init+0x234>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	4a77      	ldr	r2, [pc, #476]	@ (8003214 <USARTx_Init+0x234>)
 8003038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800303c:	6193      	str	r3, [r2, #24]
 800303e:	2325      	movs	r3, #37	@ 0x25
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	2301      	movs	r3, #1
 8003044:	77bb      	strb	r3, [r7, #30]
		if(USARTx == USART2 ){PCLKx =(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]); RCC->APB1ENR|=1<<17;IRQn = USART2_IRQn ; u=2;} 
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4a75      	ldr	r2, [pc, #468]	@ (8003220 <USARTx_Init+0x240>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d116      	bne.n	800307c <USARTx_Init+0x9c>
 800304e:	f7ff f9cb 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 8003052:	4602      	mov	r2, r0
 8003054:	4b6f      	ldr	r3, [pc, #444]	@ (8003214 <USARTx_Init+0x234>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	0a1b      	lsrs	r3, r3, #8
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	496f      	ldr	r1, [pc, #444]	@ (800321c <USARTx_Init+0x23c>)
 8003060:	5ccb      	ldrb	r3, [r1, r3]
 8003062:	fa42 f303 	asr.w	r3, r2, r3
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	4b6a      	ldr	r3, [pc, #424]	@ (8003214 <USARTx_Init+0x234>)
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	4a69      	ldr	r2, [pc, #420]	@ (8003214 <USARTx_Init+0x234>)
 800306e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003072:	61d3      	str	r3, [r2, #28]
 8003074:	2326      	movs	r3, #38	@ 0x26
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	2302      	movs	r3, #2
 800307a:	77bb      	strb	r3, [r7, #30]
		if(USARTx == USART3 ){PCLKx =(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]); RCC->APB1ENR|=1<<18;IRQn = USART3_IRQn ; u=3;}
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a69      	ldr	r2, [pc, #420]	@ (8003224 <USARTx_Init+0x244>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d116      	bne.n	80030b2 <USARTx_Init+0xd2>
 8003084:	f7ff f9b0 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 8003088:	4602      	mov	r2, r0
 800308a:	4b62      	ldr	r3, [pc, #392]	@ (8003214 <USARTx_Init+0x234>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4961      	ldr	r1, [pc, #388]	@ (800321c <USARTx_Init+0x23c>)
 8003096:	5ccb      	ldrb	r3, [r1, r3]
 8003098:	fa42 f303 	asr.w	r3, r2, r3
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	4b5d      	ldr	r3, [pc, #372]	@ (8003214 <USARTx_Init+0x234>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003214 <USARTx_Init+0x234>)
 80030a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030a8:	61d3      	str	r3, [r2, #28]
 80030aa:	2327      	movs	r3, #39	@ 0x27
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	2303      	movs	r3, #3
 80030b0:	77bb      	strb	r3, [r7, #30]
	if(Pin==PA9PA10){//usart1
 80030b2:	7afb      	ldrb	r3, [r7, #11]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10f      	bne.n	80030d8 <USARTx_Init+0xf8>
			GPIOx_Init(GPIOA,9, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 80030b8:	2303      	movs	r3, #3
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2300      	movs	r3, #0
 80030be:	2202      	movs	r2, #2
 80030c0:	2109      	movs	r1, #9
 80030c2:	4859      	ldr	r0, [pc, #356]	@ (8003228 <USARTx_Init+0x248>)
 80030c4:	f7ff fc2e 	bl	8002924 <GPIOx_Init>
			GPIOx_Init(GPIOA,10, INPUT_FLOATING,NOPULL, 0);//rx
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2300      	movs	r3, #0
 80030ce:	2201      	movs	r2, #1
 80030d0:	210a      	movs	r1, #10
 80030d2:	4855      	ldr	r0, [pc, #340]	@ (8003228 <USARTx_Init+0x248>)
 80030d4:	f7ff fc26 	bl	8002924 <GPIOx_Init>
		 }
	if(Pin==PB6PB7){//usart1
 80030d8:	7afb      	ldrb	r3, [r7, #11]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d115      	bne.n	800310a <USARTx_Init+0x12a>
			AFIO->MAPR|=1<<2;
 80030de:	4b53      	ldr	r3, [pc, #332]	@ (800322c <USARTx_Init+0x24c>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a52      	ldr	r2, [pc, #328]	@ (800322c <USARTx_Init+0x24c>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	6053      	str	r3, [r2, #4]
			GPIOx_Init(GPIOB,6, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 80030ea:	2303      	movs	r3, #3
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2300      	movs	r3, #0
 80030f0:	2202      	movs	r2, #2
 80030f2:	2106      	movs	r1, #6
 80030f4:	484e      	ldr	r0, [pc, #312]	@ (8003230 <USARTx_Init+0x250>)
 80030f6:	f7ff fc15 	bl	8002924 <GPIOx_Init>
			GPIOx_Init(GPIOB,7, INPUT_FLOATING,NOPULL, 0);//rx
 80030fa:	2300      	movs	r3, #0
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2300      	movs	r3, #0
 8003100:	2201      	movs	r2, #1
 8003102:	2107      	movs	r1, #7
 8003104:	484a      	ldr	r0, [pc, #296]	@ (8003230 <USARTx_Init+0x250>)
 8003106:	f7ff fc0d 	bl	8002924 <GPIOx_Init>
		 }

		if(Pin==PA2PA3){//usart2
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d10f      	bne.n	8003130 <USARTx_Init+0x150>
		GPIOx_Init(GPIOA,2, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 8003110:	2303      	movs	r3, #3
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2300      	movs	r3, #0
 8003116:	2202      	movs	r2, #2
 8003118:	2102      	movs	r1, #2
 800311a:	4843      	ldr	r0, [pc, #268]	@ (8003228 <USARTx_Init+0x248>)
 800311c:	f7ff fc02 	bl	8002924 <GPIOx_Init>
		GPIOx_Init(GPIOA,3, INPUT_FLOATING,NOPULL, 0);//rx
 8003120:	2300      	movs	r3, #0
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2300      	movs	r3, #0
 8003126:	2201      	movs	r2, #1
 8003128:	2103      	movs	r1, #3
 800312a:	483f      	ldr	r0, [pc, #252]	@ (8003228 <USARTx_Init+0x248>)
 800312c:	f7ff fbfa 	bl	8002924 <GPIOx_Init>
	 }
		if(Pin==PB10PB11){//usart3
 8003130:	7afb      	ldrb	r3, [r7, #11]
 8003132:	2b03      	cmp	r3, #3
 8003134:	d10f      	bne.n	8003156 <USARTx_Init+0x176>
		GPIOx_Init(GPIOB,10, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 8003136:	2303      	movs	r3, #3
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2300      	movs	r3, #0
 800313c:	2202      	movs	r2, #2
 800313e:	210a      	movs	r1, #10
 8003140:	483b      	ldr	r0, [pc, #236]	@ (8003230 <USARTx_Init+0x250>)
 8003142:	f7ff fbef 	bl	8002924 <GPIOx_Init>
		GPIOx_Init(GPIOB,11, INPUT_FLOATING,NOPULL, 0);//rx
 8003146:	2300      	movs	r3, #0
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	2201      	movs	r2, #1
 800314e:	210b      	movs	r1, #11
 8003150:	4837      	ldr	r0, [pc, #220]	@ (8003230 <USARTx_Init+0x250>)
 8003152:	f7ff fbe7 	bl	8002924 <GPIOx_Init>
	 }
		USARTDIV = (float)(PCLKx/(16.0*baud)) ;
 8003156:	69b8      	ldr	r0, [r7, #24]
 8003158:	f7fd f944 	bl	80003e4 <__aeabi_ui2d>
 800315c:	4604      	mov	r4, r0
 800315e:	460d      	mov	r5, r1
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fd f93f 	bl	80003e4 <__aeabi_ui2d>
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	4b32      	ldr	r3, [pc, #200]	@ (8003234 <USARTx_Init+0x254>)
 800316c:	f7fd f9b4 	bl	80004d8 <__aeabi_dmul>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4620      	mov	r0, r4
 8003176:	4629      	mov	r1, r5
 8003178:	f7fd fad8 	bl	800072c <__aeabi_ddiv>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	f7fd fca0 	bl	8000ac8 <__aeabi_d2f>
 8003188:	4603      	mov	r3, r0
 800318a:	617b      	str	r3, [r7, #20]
	    mantisa  = (uint16_t)USARTDIV ; 
 800318c:	6978      	ldr	r0, [r7, #20]
 800318e:	f7fd ffd5 	bl	800113c <__aeabi_f2uiz>
 8003192:	4603      	mov	r3, r0
 8003194:	827b      	strh	r3, [r7, #18]
        fraction = (USARTDIV - mantisa)*16 ; 	
 8003196:	8a7b      	ldrh	r3, [r7, #18]
 8003198:	4618      	mov	r0, r3
 800319a:	f7fd fd9f 	bl	8000cdc <__aeabi_i2f>
 800319e:	4603      	mov	r3, r0
 80031a0:	4619      	mov	r1, r3
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7fd fce4 	bl	8000b70 <__aeabi_fsub>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd fde8 	bl	8000d84 <__aeabi_fmul>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd ffc0 	bl	800113c <__aeabi_f2uiz>
 80031bc:	4603      	mov	r3, r0
 80031be:	823b      	strh	r3, [r7, #16]
		USARTx->BRR = (mantisa <<4)+fraction ; 
 80031c0:	8a7b      	ldrh	r3, [r7, #18]
 80031c2:	011a      	lsls	r2, r3, #4
 80031c4:	8a3b      	ldrh	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	461a      	mov	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	609a      	str	r2, [r3, #8]
      USARTx->CR1 |=1<<2;//tx
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f043 0204 	orr.w	r2, r3, #4
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	60da      	str	r2, [r3, #12]
	  USARTx->CR1 |=1<<3;//rx
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f043 0208 	orr.w	r2, r3, #8
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	60da      	str	r2, [r3, #12]
	  USARTx->CR1 |=1<<13 ; //enable usart
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	60da      	str	r2, [r3, #12]
    USARTx->CR1 |=1<<5; //it
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f043 0220 	orr.w	r2, r3, #32
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	60da      	str	r2, [r3, #12]
    NVICx_Init(IRQn, 1, u);
 80031fe:	7fba      	ldrb	r2, [r7, #30]
 8003200:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003204:	2101      	movs	r1, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff fb6a 	bl	80028e0 <NVICx_Init>
}
 800320c:	bf00      	nop
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bdb0      	pop	{r4, r5, r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	40013800 	.word	0x40013800
 800321c:	0800adb4 	.word	0x0800adb4
 8003220:	40004400 	.word	0x40004400
 8003224:	40004800 	.word	0x40004800
 8003228:	40010800 	.word	0x40010800
 800322c:	40010000 	.word	0x40010000
 8003230:	40010c00 	.word	0x40010c00
 8003234:	40300000 	.word	0x40300000

08003238 <USARTtoBUFF>:
char USART3_BUFFER[USART3_BUFFER_SIZE];

USART_ST USART1_ST  ={USART1_BUFFER,USART1_BUFFER_SIZE , 0, 0, 0} ;
USART_ST USART2_ST  ={USART2_BUFFER,USART2_BUFFER_SIZE , 0, 0, 0} ;
USART_ST USART3_ST  ={USART3_BUFFER,USART3_BUFFER_SIZE , 0, 0, 0} ;
void USARTtoBUFF(USART_ST *u , char c){
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
	if(u->in<u->size){
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	88da      	ldrh	r2, [r3, #6]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	889b      	ldrh	r3, [r3, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d21b      	bcs.n	8003288 <USARTtoBUFF+0x50>
		 u->buffer[u->in] = c;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	88d2      	ldrh	r2, [r2, #6]
 8003258:	4413      	add	r3, r2
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	701a      	strb	r2, [r3, #0]
		 u->in++;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	88db      	ldrh	r3, [r3, #6]
 8003262:	3301      	adds	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	80da      	strh	r2, [r3, #6]
		 u->num++;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	895b      	ldrh	r3, [r3, #10]
 800326e:	3301      	adds	r3, #1
 8003270:	b29a      	uxth	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	815a      	strh	r2, [r3, #10]
		if(u->in==u->size) u->in = 0 ;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	88da      	ldrh	r2, [r3, #6]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	889b      	ldrh	r3, [r3, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	d102      	bne.n	8003288 <USARTtoBUFF+0x50>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	80da      	strh	r2, [r3, #6]
	}
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <USART_PutC>:
    // Thêm null terminator
    if(i < len) str[i] = '\0';
    
    return i; 
}
void USART_PutC(USART_TypeDef * USARTx, char c) {
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	70fb      	strb	r3, [r7, #3]
    while(!(USARTx->SR & (1<<7)));  // Ð?i d?n khi TXE = 1
 800329e:	bf00      	nop
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f9      	beq.n	80032a0 <USART_PutC+0xe>
    USARTx->DR = c;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	605a      	str	r2, [r3, #4]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <USART1_IRQHandler>:

 while(*str) USART_PutC(USARTx ,*str ++) ;

}
void USART1_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
    if(USART1->SR & (1<<5)) {           // ? USART1 check USART1
 80032c2:	4b09      	ldr	r3, [pc, #36]	@ (80032e8 <USART1_IRQHandler+0x2c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <USART1_IRQHandler+0x22>
        char data = USART1->DR;                // ? Ð?c t? USART1
 80032ce:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <USART1_IRQHandler+0x2c>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART1_ST, data);         // ? Luu vào buffer USART1
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	4619      	mov	r1, r3
 80032d8:	4804      	ldr	r0, [pc, #16]	@ (80032ec <USART1_IRQHandler+0x30>)
 80032da:	f7ff ffad 	bl	8003238 <USARTtoBUFF>
    }
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40013800 	.word	0x40013800
 80032ec:	2000000c 	.word	0x2000000c

080032f0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
    if(USART2->SR & (1<<5)) {           // ? USART2 check USART2  
 80032f6:	4b09      	ldr	r3, [pc, #36]	@ (800331c <USART2_IRQHandler+0x2c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <USART2_IRQHandler+0x22>
        char data = USART2->DR;                // ? Ð?c t? USART2
 8003302:	4b06      	ldr	r3, [pc, #24]	@ (800331c <USART2_IRQHandler+0x2c>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART2_ST, data);         // ? Luu vào buffer USART2
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	4619      	mov	r1, r3
 800330c:	4804      	ldr	r0, [pc, #16]	@ (8003320 <USART2_IRQHandler+0x30>)
 800330e:	f7ff ff93 	bl	8003238 <USARTtoBUFF>
    }
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40004400 	.word	0x40004400
 8003320:	20000018 	.word	0x20000018

08003324 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
    if(USART3->SR & (1<<5)) {           // ? USART3 dã dúng
 800332a:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <USART3_IRQHandler+0x2c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <USART3_IRQHandler+0x22>
        char data = USART3->DR;                // ? Ð?c t? USART3
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <USART3_IRQHandler+0x2c>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART3_ST, data);         // ? Luu vào buffer USART3
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	4619      	mov	r1, r3
 8003340:	4804      	ldr	r0, [pc, #16]	@ (8003354 <USART3_IRQHandler+0x30>)
 8003342:	f7ff ff79 	bl	8003238 <USARTtoBUFF>
    }
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40004800 	.word	0x40004800
 8003354:	20000024 	.word	0x20000024

08003358 <_write>:

// =============================================================================
// PRINTF UART REDIRECT
// =============================================================================
#ifdef __GNUC__
int _write(int file, char *ptr, int len) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e00a      	b.n	8003380 <_write+0x28>
        USART_PutC(USART1, ptr[i]);
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	4413      	add	r3, r2
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	4619      	mov	r1, r3
 8003374:	4807      	ldr	r0, [pc, #28]	@ (8003394 <_write+0x3c>)
 8003376:	f7ff ff8c 	bl	8003292 <USART_PutC>
    for (int i = 0; i < len; i++) {
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3301      	adds	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	dbf0      	blt.n	800336a <_write+0x12>
    }
    return len;
 8003388:	687b      	ldr	r3, [r7, #4]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40013800 	.word	0x40013800

08003398 <InitMQ137Sensor>:
 *
 *  Created on: Jun 30, 2025
 *      Author: FPTSHOP
 */
#include "gas_sensor.h"
void InitMQ137Sensor(GasSensor_t* sensor) {
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
    // Cấu hình base sensor
    sensor->base.sensor_id = 0;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
    sensor->base.sensor_type = SENSOR_TYPE_MQ137;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	705a      	strb	r2, [r3, #1]
    strcpy(sensor->base.sensor_name, "MQ137");
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3302      	adds	r3, #2
 80033b0:	4a20      	ldr	r2, [pc, #128]	@ (8003434 <InitMQ137Sensor+0x9c>)
 80033b2:	6810      	ldr	r0, [r2, #0]
 80033b4:	6018      	str	r0, [r3, #0]
 80033b6:	8892      	ldrh	r2, [r2, #4]
 80033b8:	809a      	strh	r2, [r3, #4]
    sensor->base.is_enabled = 1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	749a      	strb	r2, [r3, #18]
    sensor->base.adc_channel = MQ137_ADC_CHANNEL;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2208      	movs	r2, #8
 80033c4:	615a      	str	r2, [r3, #20]
    sensor->base.digital_port = MQ137_DIGITAL_PORT;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003438 <InitMQ137Sensor+0xa0>)
 80033ca:	619a      	str	r2, [r3, #24]
    sensor->base.digital_pin = MQ137_DIGITAL_PIN;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2208      	movs	r2, #8
 80033d0:	839a      	strh	r2, [r3, #28]
    sensor->base.r0_value = 10000.0f; // Giá trị mặc định, cần hiệu chuẩn
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a19      	ldr	r2, [pc, #100]	@ (800343c <InitMQ137Sensor+0xa4>)
 80033d6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Cấu hình gas sensor
    sensor->gas_type = GAS_TYPE_NH3;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    strcpy(sensor->gas_name, "NH3");
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3339      	adds	r3, #57	@ 0x39
 80033e4:	4a16      	ldr	r2, [pc, #88]	@ (8003440 <InitMQ137Sensor+0xa8>)
 80033e6:	6810      	ldr	r0, [r2, #0]
 80033e8:	6018      	str	r0, [r3, #0]
    strcpy(sensor->unit, "ppm");
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3341      	adds	r3, #65	@ 0x41
 80033ee:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <InitMQ137Sensor+0xac>)
 80033f0:	6810      	ldr	r0, [r2, #0]
 80033f2:	6018      	str	r0, [r3, #0]
    
    // Ngưỡng cảnh báo NH3
    sensor->threshold_low = 15.0f;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a14      	ldr	r2, [pc, #80]	@ (8003448 <InitMQ137Sensor+0xb0>)
 80033f8:	659a      	str	r2, [r3, #88]	@ 0x58
    sensor->threshold_high = 25.0f;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a13      	ldr	r2, [pc, #76]	@ (800344c <InitMQ137Sensor+0xb4>)
 80033fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    sensor->threshold_danger = 50.0f;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a13      	ldr	r2, [pc, #76]	@ (8003450 <InitMQ137Sensor+0xb8>)
 8003404:	661a      	str	r2, [r3, #96]	@ 0x60
    
    // Thông số đặc tuyến MQ137 cho NH3
    sensor->curve_a = -0.263f;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a12      	ldr	r2, [pc, #72]	@ (8003454 <InitMQ137Sensor+0xbc>)
 800340a:	669a      	str	r2, [r3, #104]	@ 0x68
    sensor->curve_b = 0.42f;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a12      	ldr	r2, [pc, #72]	@ (8003458 <InitMQ137Sensor+0xc0>)
 8003410:	66da      	str	r2, [r3, #108]	@ 0x6c
    sensor->min_ppm = 0.0f;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	671a      	str	r2, [r3, #112]	@ 0x70
    sensor->max_ppm = 500.0f;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a0f      	ldr	r2, [pc, #60]	@ (800345c <InitMQ137Sensor+0xc4>)
 800341e:	675a      	str	r2, [r3, #116]	@ 0x74
    
    // Khởi tạo giá trị
    sensor->alarm_level = ALARM_NORMAL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	0800a218 	.word	0x0800a218
 8003438:	40010800 	.word	0x40010800
 800343c:	461c4000 	.word	0x461c4000
 8003440:	0800a220 	.word	0x0800a220
 8003444:	0800a224 	.word	0x0800a224
 8003448:	41700000 	.word	0x41700000
 800344c:	41c80000 	.word	0x41c80000
 8003450:	42480000 	.word	0x42480000
 8003454:	be86a7f0 	.word	0xbe86a7f0
 8003458:	3ed70a3d 	.word	0x3ed70a3d
 800345c:	43fa0000 	.word	0x43fa0000

08003460 <InitMQ136Sensor>:

/**
 * @brief Khởi tạo cảm biến MQ136 (H2S)
 */
void InitMQ136Sensor(GasSensor_t* sensor) {
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
    // Cấu hình base sensor
    sensor->base.sensor_id = 1;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
    sensor->base.sensor_type = SENSOR_TYPE_MQ136;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	705a      	strb	r2, [r3, #1]
    strcpy(sensor->base.sensor_name, "MQ136");
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3302      	adds	r3, #2
 8003478:	4a20      	ldr	r2, [pc, #128]	@ (80034fc <InitMQ136Sensor+0x9c>)
 800347a:	6810      	ldr	r0, [r2, #0]
 800347c:	6018      	str	r0, [r3, #0]
 800347e:	8892      	ldrh	r2, [r2, #4]
 8003480:	809a      	strh	r2, [r3, #4]
    sensor->base.is_enabled = 1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	749a      	strb	r2, [r3, #18]
    sensor->base.adc_channel = MQ136_ADC_CHANNEL;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2209      	movs	r2, #9
 800348c:	615a      	str	r2, [r3, #20]
    sensor->base.digital_port = MQ136_DIGITAL_PORT;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1b      	ldr	r2, [pc, #108]	@ (8003500 <InitMQ136Sensor+0xa0>)
 8003492:	619a      	str	r2, [r3, #24]
    sensor->base.digital_pin = MQ136_DIGITAL_PIN;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2210      	movs	r2, #16
 8003498:	839a      	strh	r2, [r3, #28]
    sensor->base.r0_value = 10000.0f; // Giá trị mặc định, cần hiệu chuẩn
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a19      	ldr	r2, [pc, #100]	@ (8003504 <InitMQ136Sensor+0xa4>)
 800349e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Cấu hình gas sensor
    sensor->gas_type = GAS_TYPE_H2S;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    strcpy(sensor->gas_name, "H2S");
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3339      	adds	r3, #57	@ 0x39
 80034ac:	4a16      	ldr	r2, [pc, #88]	@ (8003508 <InitMQ136Sensor+0xa8>)
 80034ae:	6810      	ldr	r0, [r2, #0]
 80034b0:	6018      	str	r0, [r3, #0]
    strcpy(sensor->unit, "ppm");
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3341      	adds	r3, #65	@ 0x41
 80034b6:	4a15      	ldr	r2, [pc, #84]	@ (800350c <InitMQ136Sensor+0xac>)
 80034b8:	6810      	ldr	r0, [r2, #0]
 80034ba:	6018      	str	r0, [r3, #0]
    
    // Ngưỡng cảnh báo CO2
    sensor->threshold_low = MQ136_THRESHOLD_LOW;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a14      	ldr	r2, [pc, #80]	@ (8003510 <InitMQ136Sensor+0xb0>)
 80034c0:	659a      	str	r2, [r3, #88]	@ 0x58
    sensor->threshold_high = MQ136_THRESHOLD_HIGH;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a13      	ldr	r2, [pc, #76]	@ (8003514 <InitMQ136Sensor+0xb4>)
 80034c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    sensor->threshold_danger = MQ136_THRESHOLD_DANGER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a13      	ldr	r2, [pc, #76]	@ (8003518 <InitMQ136Sensor+0xb8>)
 80034cc:	661a      	str	r2, [r3, #96]	@ 0x60
    
    // Thông số đặc tuyến MQ135 cho CO2
    sensor->curve_a = MQ136_CURVE_A;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a12      	ldr	r2, [pc, #72]	@ (800351c <InitMQ136Sensor+0xbc>)
 80034d2:	669a      	str	r2, [r3, #104]	@ 0x68
    sensor->curve_b = MQ136_CURVE_B;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a12      	ldr	r2, [pc, #72]	@ (8003520 <InitMQ136Sensor+0xc0>)
 80034d8:	66da      	str	r2, [r3, #108]	@ 0x6c
    sensor->min_ppm = MQ136_MIN_PPM;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80034e0:	671a      	str	r2, [r3, #112]	@ 0x70
    sensor->max_ppm = MQ136_MAX_PPM;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003524 <InitMQ136Sensor+0xc4>)
 80034e6:	675a      	str	r2, [r3, #116]	@ 0x74
    
    // Khởi tạo giá trị
    sensor->alarm_level = ALARM_NORMAL;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	0800a228 	.word	0x0800a228
 8003500:	40010800 	.word	0x40010800
 8003504:	461c4000 	.word	0x461c4000
 8003508:	0800a230 	.word	0x0800a230
 800350c:	0800a224 	.word	0x0800a224
 8003510:	40a00000 	.word	0x40a00000
 8003514:	41200000 	.word	0x41200000
 8003518:	41a00000 	.word	0x41a00000
 800351c:	be800000 	.word	0xbe800000
 8003520:	be75c28f 	.word	0xbe75c28f
 8003524:	42c80000 	.word	0x42c80000

08003528 <ProcessGasSensor>:
void ProcessGasSensor(GasSensor_t* sensor) {
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

    sensor->base.raw_voltage = ReadADC_Voltage(sensor->base.adc_channel);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 f9b5 	bl	80038a4 <ReadADC_Voltage>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	621a      	str	r2, [r3, #32]
    sensor->base.digital_state = ReadDigitalState(sensor->base.digital_port, sensor->base.digital_pin);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699a      	ldr	r2, [r3, #24]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8b9b      	ldrh	r3, [r3, #28]
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f000 f9d2 	bl	80038f4 <ReadDigitalState>
 8003550:	4603      	mov	r3, r0
 8003552:	461a      	mov	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    sensor->base.timestamp = HAL_GetTick();
 800355a:	f7fe fa73 	bl	8001a44 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30

    // Tính toán điện trở và tỷ lệ Rs/R0
    if(sensor->base.raw_voltage > 0.2f) { // Ngưỡng thấp hơn cho ADC 3.3V
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	493f      	ldr	r1, [pc, #252]	@ (8003668 <ProcessGasSensor+0x140>)
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd fdc6 	bl	80010fc <__aeabi_fcmpgt>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d059      	beq.n	800362a <ProcessGasSensor+0x102>
        sensor->base.resistance = CalculateResistance(sensor->base.raw_voltage);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f9cc 	bl	8003918 <CalculateResistance>
 8003580:	4602      	mov	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	@ 0x24
        sensor->base.rs_r0_ratio = sensor->base.resistance / sensor->base.r0_value;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f7fd fcab 	bl	8000eec <__aeabi_fdiv>
 8003596:	4603      	mov	r3, r0
 8003598:	461a      	mov	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	629a      	str	r2, [r3, #40]	@ 0x28

        // Tính nồng độ khí
        sensor->gas_ppm = CalculateGasPPM(sensor->base.rs_r0_ratio, sensor->curve_a, sensor->curve_b);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035aa:	461a      	mov	r2, r3
 80035ac:	f000 f9dc 	bl	8003968 <CalculateGasPPM>
 80035b0:	4602      	mov	r2, r0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	64da      	str	r2, [r3, #76]	@ 0x4c

        // Giới hạn giá trị trong khoảng hợp lệ
        if(sensor->gas_ppm < sensor->min_ppm) sensor->gas_ppm = sensor->min_ppm;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f7fd fd7d 	bl	80010c0 <__aeabi_fcmplt>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <ProcessGasSensor+0xac>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	64da      	str	r2, [r3, #76]	@ 0x4c
        if(sensor->gas_ppm > sensor->max_ppm) sensor->gas_ppm = sensor->max_ppm;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f7fd fd8c 	bl	80010fc <__aeabi_fcmpgt>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <ProcessGasSensor+0xca>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	64da      	str	r2, [r3, #76]	@ 0x4c

        // Lọc nhiễu đơn giản (moving average)
        sensor->filtered_ppm = 0.8f * sensor->filtered_ppm + 0.2f * sensor->gas_ppm;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f6:	491d      	ldr	r1, [pc, #116]	@ (800366c <ProcessGasSensor+0x144>)
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fbc3 	bl	8000d84 <__aeabi_fmul>
 80035fe:	4603      	mov	r3, r0
 8003600:	461c      	mov	r4, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003606:	4918      	ldr	r1, [pc, #96]	@ (8003668 <ProcessGasSensor+0x140>)
 8003608:	4618      	mov	r0, r3
 800360a:	f7fd fbbb 	bl	8000d84 <__aeabi_fmul>
 800360e:	4603      	mov	r3, r0
 8003610:	4619      	mov	r1, r3
 8003612:	4620      	mov	r0, r4
 8003614:	f7fd faae 	bl	8000b74 <__addsf3>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	651a      	str	r2, [r3, #80]	@ 0x50
        sensor->average_ppm = sensor->filtered_ppm;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	655a      	str	r2, [r3, #84]	@ 0x54
 8003628:	e00f      	b.n	800364a <ProcessGasSensor+0x122>

    } else {
        sensor->base.resistance = 0.0f;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	625a      	str	r2, [r3, #36]	@ 0x24
        sensor->base.rs_r0_ratio = 0.0f;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	629a      	str	r2, [r3, #40]	@ 0x28
        sensor->gas_ppm = sensor->min_ppm;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	64da      	str	r2, [r3, #76]	@ 0x4c
        sensor->filtered_ppm = sensor->min_ppm;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    // Validate dữ liệu
    sensor->base.is_valid = ValidateGasSensor(sensor);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f810 	bl	8003670 <ValidateGasSensor>
 8003650:	4603      	mov	r3, r0
 8003652:	461a      	mov	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	74da      	strb	r2, [r3, #19]

    // Cập nhật mức cảnh báo
    UpdateAlarmLevel(sensor);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f85b 	bl	8003714 <UpdateAlarmLevel>
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bd90      	pop	{r4, r7, pc}
 8003666:	bf00      	nop
 8003668:	3e4ccccd 	.word	0x3e4ccccd
 800366c:	3f4ccccd 	.word	0x3f4ccccd

08003670 <ValidateGasSensor>:

/**
 * @brief Validate dữ liệu cảm biến (cập nhật cho điện áp 3.3V)
 */
uint8_t ValidateGasSensor(GasSensor_t* sensor) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
    // Kiểm tra điện áp trong khoảng hợp lệ (0.1V - 4.8V cho cảm biến 5V)
    // Sau khi qua mạch chia áp, tín hiệu sẽ từ 0.066V - 3.168V tại ADC
    if(sensor->base.raw_voltage < 0.2f || sensor->base.raw_voltage > 4.8f) {
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4921      	ldr	r1, [pc, #132]	@ (8003704 <ValidateGasSensor+0x94>)
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd fd1e 	bl	80010c0 <__aeabi_fcmplt>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d108      	bne.n	800369c <ValidateGasSensor+0x2c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	491e      	ldr	r1, [pc, #120]	@ (8003708 <ValidateGasSensor+0x98>)
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fd33 	bl	80010fc <__aeabi_fcmpgt>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <ValidateGasSensor+0x30>
        return 0;
 800369c:	2300      	movs	r3, #0
 800369e:	e02c      	b.n	80036fa <ValidateGasSensor+0x8a>
    }
    
    // Kiểm tra điện trở trong khoảng hợp lệ
    if(sensor->base.resistance < 1000.0f || sensor->base.resistance > 200000.0f) {
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	4919      	ldr	r1, [pc, #100]	@ (800370c <ValidateGasSensor+0x9c>)
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fd fd0a 	bl	80010c0 <__aeabi_fcmplt>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d108      	bne.n	80036c4 <ValidateGasSensor+0x54>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	4916      	ldr	r1, [pc, #88]	@ (8003710 <ValidateGasSensor+0xa0>)
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fd fd1f 	bl	80010fc <__aeabi_fcmpgt>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <ValidateGasSensor+0x58>
        return 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e018      	b.n	80036fa <ValidateGasSensor+0x8a>
    }
    
    // Kiểm tra nồng độ khí trong khoảng hợp lệ
    if(sensor->gas_ppm < sensor->min_ppm || sensor->gas_ppm > sensor->max_ppm) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f7fd fcf4 	bl	80010c0 <__aeabi_fcmplt>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <ValidateGasSensor+0x84>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e6:	4619      	mov	r1, r3
 80036e8:	4610      	mov	r0, r2
 80036ea:	f7fd fd07 	bl	80010fc <__aeabi_fcmpgt>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <ValidateGasSensor+0x88>
        return 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <ValidateGasSensor+0x8a>
    }
    
    return 1; // Dữ liệu hợp lệ
 80036f8:	2301      	movs	r3, #1
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	3e4ccccd 	.word	0x3e4ccccd
 8003708:	4099999a 	.word	0x4099999a
 800370c:	447a0000 	.word	0x447a0000
 8003710:	48435000 	.word	0x48435000

08003714 <UpdateAlarmLevel>:

/**
 * @brief Cập nhật mức cảnh báo cho cảm biến
 */
void UpdateAlarmLevel(GasSensor_t* sensor) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
    sensor->alarm_level = DetermineAlarmLevel(sensor->gas_ppm, 
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372c:	f000 f948 	bl	80039c0 <DetermineAlarmLevel>
 8003730:	4603      	mov	r3, r0
 8003732:	461a      	mov	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
                                            sensor->threshold_low,
                                            sensor->threshold_high, 
                                            sensor->threshold_danger);
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <PrintSensorDetails>:
void PrintSensorDetails(GasSensor_t* sensor) {
 8003744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003748:	b08b      	sub	sp, #44	@ 0x2c
 800374a:	af04      	add	r7, sp, #16
 800374c:	6078      	str	r0, [r7, #4]
    printf("\r\n--- %s (%s) ---\r\n", sensor->base.sensor_name, sensor->gas_name);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	1c99      	adds	r1, r3, #2
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3339      	adds	r3, #57	@ 0x39
 8003756:	461a      	mov	r2, r3
 8003758:	4845      	ldr	r0, [pc, #276]	@ (8003870 <PrintSensorDetails+0x12c>)
 800375a:	f001 ff9f 	bl	800569c <iprintf>
    printf("ID: %d | TRANG THAI: %s\r\n", 
           sensor->base.sensor_id, 
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	781b      	ldrb	r3, [r3, #0]
    printf("ID: %d | TRANG THAI: %s\r\n", 
 8003762:	4619      	mov	r1, r3
           sensor->base.is_enabled ? (sensor->base.is_valid ? "HOAT DONG" : "LOI") : "OFF");
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7c9b      	ldrb	r3, [r3, #18]
    printf("ID: %d | TRANG THAI: %s\r\n", 
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <PrintSensorDetails+0x38>
           sensor->base.is_enabled ? (sensor->base.is_valid ? "HOAT DONG" : "LOI") : "OFF");
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	7cdb      	ldrb	r3, [r3, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <PrintSensorDetails+0x34>
 8003774:	4b3f      	ldr	r3, [pc, #252]	@ (8003874 <PrintSensorDetails+0x130>)
 8003776:	e002      	b.n	800377e <PrintSensorDetails+0x3a>
 8003778:	4b3f      	ldr	r3, [pc, #252]	@ (8003878 <PrintSensorDetails+0x134>)
 800377a:	e000      	b.n	800377e <PrintSensorDetails+0x3a>
    printf("ID: %d | TRANG THAI: %s\r\n", 
 800377c:	4b3f      	ldr	r3, [pc, #252]	@ (800387c <PrintSensorDetails+0x138>)
 800377e:	461a      	mov	r2, r3
 8003780:	483f      	ldr	r0, [pc, #252]	@ (8003880 <PrintSensorDetails+0x13c>)
 8003782:	f001 ff8b 	bl	800569c <iprintf>
    printf("DIEN AP: %.3f V | DIEN TRO: %.1f Ω\r\n", 
           sensor->base.raw_voltage, sensor->base.resistance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
    printf("DIEN AP: %.3f V | DIEN TRO: %.1f Ω\r\n", 
 800378a:	4618      	mov	r0, r3
 800378c:	f7fc fe4c 	bl	8000428 <__aeabi_f2d>
 8003790:	4604      	mov	r4, r0
 8003792:	460d      	mov	r5, r1
           sensor->base.raw_voltage, sensor->base.resistance);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    printf("DIEN AP: %.3f V | DIEN TRO: %.1f Ω\r\n", 
 8003798:	4618      	mov	r0, r3
 800379a:	f7fc fe45 	bl	8000428 <__aeabi_f2d>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	e9cd 2300 	strd	r2, r3, [sp]
 80037a6:	4622      	mov	r2, r4
 80037a8:	462b      	mov	r3, r5
 80037aa:	4836      	ldr	r0, [pc, #216]	@ (8003884 <PrintSensorDetails+0x140>)
 80037ac:	f001 ff76 	bl	800569c <iprintf>
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
           sensor->base.rs_r0_ratio, sensor->base.r0_value);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fc fe37 	bl	8000428 <__aeabi_f2d>
 80037ba:	4604      	mov	r4, r0
 80037bc:	460d      	mov	r5, r1
           sensor->base.rs_r0_ratio, sensor->base.r0_value);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fc fe30 	bl	8000428 <__aeabi_f2d>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	e9cd 2300 	strd	r2, r3, [sp]
 80037d0:	4622      	mov	r2, r4
 80037d2:	462b      	mov	r3, r5
 80037d4:	482c      	ldr	r0, [pc, #176]	@ (8003888 <PrintSensorDetails+0x144>)
 80037d6:	f001 ff61 	bl	800569c <iprintf>
    printf("NONG DO: %.1f %s \r\n", 
           sensor->gas_ppm, sensor->unit);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    printf("NONG DO: %.1f %s \r\n", 
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fc fe22 	bl	8000428 <__aeabi_f2d>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
           sensor->gas_ppm, sensor->unit);
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	3141      	adds	r1, #65	@ 0x41
    printf("NONG DO: %.1f %s \r\n", 
 80037ec:	9100      	str	r1, [sp, #0]
 80037ee:	4827      	ldr	r0, [pc, #156]	@ (800388c <PrintSensorDetails+0x148>)
 80037f0:	f001 ff54 	bl	800569c <iprintf>
    printf("Digital: %s\r\n", sensor->base.digital_state ? "HIGH" : "LOW");
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <PrintSensorDetails+0xbe>
 80037fe:	4b24      	ldr	r3, [pc, #144]	@ (8003890 <PrintSensorDetails+0x14c>)
 8003800:	e000      	b.n	8003804 <PrintSensorDetails+0xc0>
 8003802:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <PrintSensorDetails+0x150>)
 8003804:	4619      	mov	r1, r3
 8003806:	4824      	ldr	r0, [pc, #144]	@ (8003898 <PrintSensorDetails+0x154>)
 8003808:	f001 ff48 	bl	800569c <iprintf>
    
    const char* alarm_text[] = {"BINH THUONG", "THAP", "CAO", "NGUY HIEM"};
 800380c:	4b23      	ldr	r3, [pc, #140]	@ (800389c <PrintSensorDetails+0x158>)
 800380e:	f107 0408 	add.w	r4, r7, #8
 8003812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
           alarm_text[sensor->alarm_level],
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	3318      	adds	r3, #24
 8003822:	443b      	add	r3, r7
 8003824:	f853 6c10 	ldr.w	r6, [r3, #-16]
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc fdfb 	bl	8000428 <__aeabi_f2d>
 8003832:	4680      	mov	r8, r0
 8003834:	4689      	mov	r9, r1
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 800383a:	4618      	mov	r0, r3
 800383c:	f7fc fdf4 	bl	8000428 <__aeabi_f2d>
 8003840:	4604      	mov	r4, r0
 8003842:	460d      	mov	r5, r1
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fded 	bl	8000428 <__aeabi_f2d>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003856:	e9cd 4500 	strd	r4, r5, [sp]
 800385a:	4642      	mov	r2, r8
 800385c:	464b      	mov	r3, r9
 800385e:	4631      	mov	r1, r6
 8003860:	480f      	ldr	r0, [pc, #60]	@ (80038a0 <PrintSensorDetails+0x15c>)
 8003862:	f001 ff1b 	bl	800569c <iprintf>
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003870:	0800a234 	.word	0x0800a234
 8003874:	0800a248 	.word	0x0800a248
 8003878:	0800a254 	.word	0x0800a254
 800387c:	0800a258 	.word	0x0800a258
 8003880:	0800a25c 	.word	0x0800a25c
 8003884:	0800a278 	.word	0x0800a278
 8003888:	0800a2a0 	.word	0x0800a2a0
 800388c:	0800a2bc 	.word	0x0800a2bc
 8003890:	0800a2d0 	.word	0x0800a2d0
 8003894:	0800a2d8 	.word	0x0800a2d8
 8003898:	0800a2dc 	.word	0x0800a2dc
 800389c:	0800a330 	.word	0x0800a330
 80038a0:	0800a2ec 	.word	0x0800a2ec

080038a4 <ReadADC_Voltage>:
 *
 *  Created on: Jun 30, 2025
 *      Author: FPTSHOP
 */
#include "sensor_hardware.h"
float ReadADC_Voltage(uint32_t channel) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
    // Đọc giá trị ADC trung bình
    float adc_avg = ADCx_Read_TB(ADC1, channel, 10);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	220a      	movs	r2, #10
 80038b2:	4619      	mov	r1, r3
 80038b4:	480c      	ldr	r0, [pc, #48]	@ (80038e8 <ReadADC_Voltage+0x44>)
 80038b6:	f7fe ff3e 	bl	8002736 <ADCx_Read_TB>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fd fa09 	bl	8000cd4 <__aeabi_ui2f>
 80038c2:	4603      	mov	r3, r0
 80038c4:	60fb      	str	r3, [r7, #12]
    
    // Chuyển đổi giá trị ADC sang điện áp tại chân ADC
    float adc_voltage = adc_avg * ADC_VREF / ADC_RESOLUTION;
 80038c6:	4909      	ldr	r1, [pc, #36]	@ (80038ec <ReadADC_Voltage+0x48>)
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7fd fa5b 	bl	8000d84 <__aeabi_fmul>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4907      	ldr	r1, [pc, #28]	@ (80038f0 <ReadADC_Voltage+0x4c>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fb0a 	bl	8000eec <__aeabi_fdiv>
 80038d8:	4603      	mov	r3, r0
 80038da:	60bb      	str	r3, [r7, #8]
    
    // Hiệu chỉnh cho mạch chia áp để có điện áp thực của cảm biến
    
    return adc_voltage;
 80038dc:	68bb      	ldr	r3, [r7, #8]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40012400 	.word	0x40012400
 80038ec:	40533333 	.word	0x40533333
 80038f0:	457ff000 	.word	0x457ff000

080038f4 <ReadDigitalState>:
/**
 * @brief Đọc trạng thái digital
 */
uint8_t ReadDigitalState(GPIO_TypeDef* port, uint16_t pin) {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
    return GPIOx_ReadPin(port , pin );
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	4619      	mov	r1, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff f8aa 	bl	8002a60 <GPIOx_ReadPin>
 800390c:	4603      	mov	r3, r0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <CalculateResistance>:

/**
 * @brief Tính điện trở cảm biến (hiệu chỉnh cho nguồn 5V)
 */
float CalculateResistance(float voltage) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
    if(voltage <= 0.1f) return 0.0f;
 8003920:	490e      	ldr	r1, [pc, #56]	@ (800395c <CalculateResistance+0x44>)
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fbd6 	bl	80010d4 <__aeabi_fcmple>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <CalculateResistance+0x1c>
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e00e      	b.n	8003952 <CalculateResistance+0x3a>
    
    // Công thức tính điện trở cảm biến với nguồn cấp 5V
    // Rs = (Vcc - Vs) / Vs * RL
    // Trong đó: Vcc = 5V, Vs = điện áp đo được, RL = điện trở tải
    return ((SENSOR_VCC - voltage) / voltage) * LOAD_RESISTANCE;
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	480a      	ldr	r0, [pc, #40]	@ (8003960 <CalculateResistance+0x48>)
 8003938:	f7fd f91a 	bl	8000b70 <__aeabi_fsub>
 800393c:	4603      	mov	r3, r0
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd fad3 	bl	8000eec <__aeabi_fdiv>
 8003946:	4603      	mov	r3, r0
 8003948:	4906      	ldr	r1, [pc, #24]	@ (8003964 <CalculateResistance+0x4c>)
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd fa1a 	bl	8000d84 <__aeabi_fmul>
 8003950:	4603      	mov	r3, r0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	3dcccccd 	.word	0x3dcccccd
 8003960:	40533333 	.word	0x40533333
 8003964:	461c4000 	.word	0x461c4000

08003968 <CalculateGasPPM>:

/**
 * @brief Tính nồng độ khí từ tỷ lệ Rs/R0
 */
float CalculateGasPPM(float rs_r0_ratio, float curve_a, float curve_b) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
    if (rs_r0_ratio <= 0.0f) return 0.0f;
 8003974:	f04f 0100 	mov.w	r1, #0
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7fd fbab 	bl	80010d4 <__aeabi_fcmple>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <CalculateGasPPM+0x22>
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	e014      	b.n	80039b4 <CalculateGasPPM+0x4c>

    float log_ratio = log10f(rs_r0_ratio);                          // log10(Rs/R0)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f005 fb26 	bl	8008fdc <log10f>
 8003990:	61f8      	str	r0, [r7, #28]
    float log_ppm   = (log_ratio - curve_b) / curve_a;             // log10(ppm)
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	69f8      	ldr	r0, [r7, #28]
 8003996:	f7fd f8eb 	bl	8000b70 <__aeabi_fsub>
 800399a:	4603      	mov	r3, r0
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd faa4 	bl	8000eec <__aeabi_fdiv>
 80039a4:	4603      	mov	r3, r0
 80039a6:	61bb      	str	r3, [r7, #24]
    float ppm       = powf(10.0f, log_ppm);                         // ppm = 10^log_ppm
 80039a8:	69b9      	ldr	r1, [r7, #24]
 80039aa:	4804      	ldr	r0, [pc, #16]	@ (80039bc <CalculateGasPPM+0x54>)
 80039ac:	f005 fb3e 	bl	800902c <powf>
 80039b0:	6178      	str	r0, [r7, #20]
    return ppm;
 80039b2:	697b      	ldr	r3, [r7, #20]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	41200000 	.word	0x41200000

080039c0 <DetermineAlarmLevel>:

/**
 * @brief Xác định mức cảnh báo
 */
AlarmLevel_t DetermineAlarmLevel(float ppm, float low, float high, float danger) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
    if(ppm >= danger) return ALARM_DANGER;
 80039ce:	6839      	ldr	r1, [r7, #0]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7fd fb89 	bl	80010e8 <__aeabi_fcmpge>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <DetermineAlarmLevel+0x20>
 80039dc:	2303      	movs	r3, #3
 80039de:	e012      	b.n	8003a06 <DetermineAlarmLevel+0x46>
    if(ppm >= high) return ALARM_HIGH;
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f7fd fb80 	bl	80010e8 <__aeabi_fcmpge>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <DetermineAlarmLevel+0x32>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e009      	b.n	8003a06 <DetermineAlarmLevel+0x46>
    if(ppm >= low) return ALARM_LOW;
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7fd fb77 	bl	80010e8 <__aeabi_fcmpge>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <DetermineAlarmLevel+0x44>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <DetermineAlarmLevel+0x46>
    return ALARM_NORMAL;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <InitSensorSystem>:
static SensorSystem_t history_buffer[HISTORY_BUFFER_SIZE];
static uint8_t history_index = 0;

// Các define khác cần thiết
#define MAIN_LOOP_DELAY 60000  // 1 phút = 60000ms
void InitSensorSystem(void) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af02      	add	r7, sp, #8
    printf("\r\nKHOI TAO HE THONG\r\n");
 8003a16:	4838      	ldr	r0, [pc, #224]	@ (8003af8 <InitSensorSystem+0xe8>)
 8003a18:	f001 fea8 	bl	800576c <puts>
    
    // Reset toàn bộ hệ thống
    memset(&g_sensor_system, 0, sizeof(SensorSystem_t));
 8003a1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a20:	2100      	movs	r1, #0
 8003a22:	4836      	ldr	r0, [pc, #216]	@ (8003afc <InitSensorSystem+0xec>)
 8003a24:	f001 ffa2 	bl	800596c <memset>
    memset(history_buffer, 0, sizeof(history_buffer));
 8003a28:	f643 42f0 	movw	r2, #15600	@ 0x3cf0
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4834      	ldr	r0, [pc, #208]	@ (8003b00 <InitSensorSystem+0xf0>)
 8003a30:	f001 ff9c 	bl	800596c <memset>
    
    // Khởi tạo từng cảm biến
    InitMQ137Sensor(&g_sensor_system.mq137);
 8003a34:	4831      	ldr	r0, [pc, #196]	@ (8003afc <InitSensorSystem+0xec>)
 8003a36:	f7ff fcaf 	bl	8003398 <InitMQ137Sensor>
    InitMQ136Sensor(&g_sensor_system.mq136);
 8003a3a:	4832      	ldr	r0, [pc, #200]	@ (8003b04 <InitSensorSystem+0xf4>)
 8003a3c:	f7ff fd10 	bl	8003460 <InitMQ136Sensor>
    
    // MQ137 Digital Pin
    GPIOx_Init(MQ137_DIGITAL_PORT ,MQ137_DIGITAL_PIN ,MODE_INPUT ,PU,0)  ; 
 8003a40:	2300      	movs	r3, #0
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2301      	movs	r3, #1
 8003a46:	2200      	movs	r2, #0
 8003a48:	2108      	movs	r1, #8
 8003a4a:	482f      	ldr	r0, [pc, #188]	@ (8003b08 <InitSensorSystem+0xf8>)
 8003a4c:	f7fe ff6a 	bl	8002924 <GPIOx_Init>
    // MQ135 Digital Pin
    GPIOx_Init(MQ136_DIGITAL_PORT ,MQ136_DIGITAL_PIN ,MODE_INPUT ,PU,0)  ;
 8003a50:	2300      	movs	r3, #0
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2301      	movs	r3, #1
 8003a56:	2200      	movs	r2, #0
 8003a58:	2110      	movs	r1, #16
 8003a5a:	482b      	ldr	r0, [pc, #172]	@ (8003b08 <InitSensorSystem+0xf8>)
 8003a5c:	f7fe ff62 	bl	8002924 <GPIOx_Init>
    ADCx_Init(ADC1,MQ137_ADC_CHANNEL); // Khởi tạo ADC cho MQ137
 8003a60:	2108      	movs	r1, #8
 8003a62:	482a      	ldr	r0, [pc, #168]	@ (8003b0c <InitSensorSystem+0xfc>)
 8003a64:	f7fe fce8 	bl	8002438 <ADCx_Init>
    ADCx_Init(ADC1,MQ136_ADC_CHANNEL); // Khởi tạo ADC cho MQ136
 8003a68:	2109      	movs	r1, #9
 8003a6a:	4828      	ldr	r0, [pc, #160]	@ (8003b0c <InitSensorSystem+0xfc>)
 8003a6c:	f7fe fce4 	bl	8002438 <ADCx_Init>
    
    
    // Cập nhật trạng thái hệ thống
    g_sensor_system.active_sensor_count = 2;
 8003a70:	4b22      	ldr	r3, [pc, #136]	@ (8003afc <InitSensorSystem+0xec>)
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    g_sensor_system.last_update = HAL_GetTick();
 8003a78:	f7fd ffe4 	bl	8001a44 <HAL_GetTick>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003afc <InitSensorSystem+0xec>)
 8003a80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    
    printf("KHOI TAO MQ137 (NH3): %s\r\n", g_sensor_system.mq137.base.is_enabled ? "OK" : "FAIL");
 8003a84:	4b1d      	ldr	r3, [pc, #116]	@ (8003afc <InitSensorSystem+0xec>)
 8003a86:	7c9b      	ldrb	r3, [r3, #18]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <InitSensorSystem+0x80>
 8003a8c:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <InitSensorSystem+0x100>)
 8003a8e:	e000      	b.n	8003a92 <InitSensorSystem+0x82>
 8003a90:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <InitSensorSystem+0x104>)
 8003a92:	4619      	mov	r1, r3
 8003a94:	4820      	ldr	r0, [pc, #128]	@ (8003b18 <InitSensorSystem+0x108>)
 8003a96:	f001 fe01 	bl	800569c <iprintf>
    printf("KHOI TAO MQ136 (H2S): %s\r\n", g_sensor_system.mq136.base.is_enabled ? "OK" : "FAIL");
 8003a9a:	4b18      	ldr	r3, [pc, #96]	@ (8003afc <InitSensorSystem+0xec>)
 8003a9c:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <InitSensorSystem+0x98>
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b10 <InitSensorSystem+0x100>)
 8003aa6:	e000      	b.n	8003aaa <InitSensorSystem+0x9a>
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b14 <InitSensorSystem+0x104>)
 8003aaa:	4619      	mov	r1, r3
 8003aac:	481b      	ldr	r0, [pc, #108]	@ (8003b1c <InitSensorSystem+0x10c>)
 8003aae:	f001 fdf5 	bl	800569c <iprintf>
    printf("CAM BIEN HOAT DONG: %d/2\r\n", g_sensor_system.active_sensor_count);
 8003ab2:	4b12      	ldr	r3, [pc, #72]	@ (8003afc <InitSensorSystem+0xec>)
 8003ab4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4819      	ldr	r0, [pc, #100]	@ (8003b20 <InitSensorSystem+0x110>)
 8003abc:	f001 fdee 	bl	800569c <iprintf>
    
    // Thời gian ổn định
    printf("DANG ON DINH CAM BIEN...\r\n");
 8003ac0:	4818      	ldr	r0, [pc, #96]	@ (8003b24 <InitSensorSystem+0x114>)
 8003ac2:	f001 fe53 	bl	800576c <puts>
    for(int i = 30; i > 0; i--) {
 8003ac6:	231e      	movs	r3, #30
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	e00a      	b.n	8003ae2 <InitSensorSystem+0xd2>
        printf("ON DINH: %d GIAY\r", i);
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4816      	ldr	r0, [pc, #88]	@ (8003b28 <InitSensorSystem+0x118>)
 8003ad0:	f001 fde4 	bl	800569c <iprintf>
        HAL_Delay(1000);
 8003ad4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ad8:	f7fd ffbe 	bl	8001a58 <HAL_Delay>
    for(int i = 30; i > 0; i--) {
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	dcf1      	bgt.n	8003acc <InitSensorSystem+0xbc>
    }
    printf("\r\nHE THONG SAN SANG\r\n");
 8003ae8:	4810      	ldr	r0, [pc, #64]	@ (8003b2c <InitSensorSystem+0x11c>)
 8003aea:	f001 fe3f 	bl	800576c <puts>
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	0800a340 	.word	0x0800a340
 8003afc:	20000350 	.word	0x20000350
 8003b00:	20000454 	.word	0x20000454
 8003b04:	200003c8 	.word	0x200003c8
 8003b08:	40010800 	.word	0x40010800
 8003b0c:	40012400 	.word	0x40012400
 8003b10:	0800a358 	.word	0x0800a358
 8003b14:	0800a35c 	.word	0x0800a35c
 8003b18:	0800a364 	.word	0x0800a364
 8003b1c:	0800a380 	.word	0x0800a380
 8003b20:	0800a39c 	.word	0x0800a39c
 8003b24:	0800a3b8 	.word	0x0800a3b8
 8003b28:	0800a3d4 	.word	0x0800a3d4
 8003b2c:	0800a3e8 	.word	0x0800a3e8

08003b30 <ProcessAllSensors>:
void ProcessAllSensors(void) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8003b36:	f7fd ff85 	bl	8001a44 <HAL_GetTick>
 8003b3a:	6078      	str	r0, [r7, #4]
    printf  ("\r\nXU LY CAM BIEN TAI %lu ms \r\n", current_time);
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4819      	ldr	r0, [pc, #100]	@ (8003ba4 <ProcessAllSensors+0x74>)
 8003b40:	f001 fdac 	bl	800569c <iprintf>
    // Xử lý từng cảm biến
    if(g_sensor_system.mq137.base.is_enabled) {
 8003b44:	4b18      	ldr	r3, [pc, #96]	@ (8003ba8 <ProcessAllSensors+0x78>)
 8003b46:	7c9b      	ldrb	r3, [r3, #18]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <ProcessAllSensors+0x22>
        ProcessGasSensor(&g_sensor_system.mq137);
 8003b4c:	4816      	ldr	r0, [pc, #88]	@ (8003ba8 <ProcessAllSensors+0x78>)
 8003b4e:	f7ff fceb 	bl	8003528 <ProcessGasSensor>

    }
        

    if(g_sensor_system.mq136.base.is_enabled) {
 8003b52:	4b15      	ldr	r3, [pc, #84]	@ (8003ba8 <ProcessAllSensors+0x78>)
 8003b54:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <ProcessAllSensors+0x32>
        ProcessGasSensor(&g_sensor_system.mq136);
 8003b5c:	4813      	ldr	r0, [pc, #76]	@ (8003bac <ProcessAllSensors+0x7c>)
 8003b5e:	f7ff fce3 	bl	8003528 <ProcessGasSensor>
    }
    // Cập nhật trạng thái hệ thống
    UpdateSystemStatus();
 8003b62:	f000 fe13 	bl	800478c <UpdateSystemStatus>
    
    // Lưu lịch sử
    SaveToHistory();
 8003b66:	f000 fde1 	bl	800472c <SaveToHistory>
    
    // Cập nhật thống kê
    g_sensor_system.total_readings++;
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba8 <ProcessAllSensors+0x78>)
 8003b6c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003b70:	3301      	adds	r3, #1
 8003b72:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba8 <ProcessAllSensors+0x78>)
 8003b74:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
    g_sensor_system.last_update = current_time;
 8003b78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ba8 <ProcessAllSensors+0x78>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    g_sensor_system.uptime_minutes = current_time / 60000.0f;
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fd f8a7 	bl	8000cd4 <__aeabi_ui2f>
 8003b86:	4603      	mov	r3, r0
 8003b88:	4909      	ldr	r1, [pc, #36]	@ (8003bb0 <ProcessAllSensors+0x80>)
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd f9ae 	bl	8000eec <__aeabi_fdiv>
 8003b90:	4603      	mov	r3, r0
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b04      	ldr	r3, [pc, #16]	@ (8003ba8 <ProcessAllSensors+0x78>)
 8003b96:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	0800a400 	.word	0x0800a400
 8003ba8:	20000350 	.word	0x20000350
 8003bac:	200003c8 	.word	0x200003c8
 8003bb0:	476a6000 	.word	0x476a6000

08003bb4 <DisplaySystemStatus>:
/**
 * @brief Hiển thị trạng thái hệ thống
 */
void DisplaySystemStatus(void) {
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b089      	sub	sp, #36	@ 0x24
 8003bb8:	af00      	add	r7, sp, #0
    printf("\r\n=== TRANG THAI HE THONG CAM BIEN ===\r\n");
 8003bba:	4829      	ldr	r0, [pc, #164]	@ (8003c60 <DisplaySystemStatus+0xac>)
 8003bbc:	f001 fdd6 	bl	800576c <puts>
    printf("TIME: %lu ms | Uptime: %.1f PHUT\r\n", 
 8003bc0:	f7fd ff40 	bl	8001a44 <HAL_GetTick>
 8003bc4:	4604      	mov	r4, r0
           HAL_GetTick(), g_sensor_system.uptime_minutes);
 8003bc6:	4b27      	ldr	r3, [pc, #156]	@ (8003c64 <DisplaySystemStatus+0xb0>)
 8003bc8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
    printf("TIME: %lu ms | Uptime: %.1f PHUT\r\n", 
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fc fc2b 	bl	8000428 <__aeabi_f2d>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	4823      	ldr	r0, [pc, #140]	@ (8003c68 <DisplaySystemStatus+0xb4>)
 8003bda:	f001 fd5f 	bl	800569c <iprintf>
    
    // Hiển thị MQ137
    PrintSensorDetails(&g_sensor_system.mq137);
 8003bde:	4821      	ldr	r0, [pc, #132]	@ (8003c64 <DisplaySystemStatus+0xb0>)
 8003be0:	f7ff fdb0 	bl	8003744 <PrintSensorDetails>
    
    // Hiển thị MQ135
    PrintSensorDetails(&g_sensor_system.mq136);
 8003be4:	4821      	ldr	r0, [pc, #132]	@ (8003c6c <DisplaySystemStatus+0xb8>)
 8003be6:	f7ff fdad 	bl	8003744 <PrintSensorDetails>
    
    // Trạng thái tổng thể
    printf("\r\n--- HE THONG ---\r\n");
 8003bea:	4821      	ldr	r0, [pc, #132]	@ (8003c70 <DisplaySystemStatus+0xbc>)
 8003bec:	f001 fdbe 	bl	800576c <puts>
    const char* status_text[] = {"LOI", "CO BAN", "TOT", "TOI UU"};
 8003bf0:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <DisplaySystemStatus+0xc0>)
 8003bf2:	f107 0410 	add.w	r4, r7, #16
 8003bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const char* alarm_text[] = {"BINH THUONG", "THAP", "CAO", "NGUY HIEM"};
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c78 <DisplaySystemStatus+0xc4>)
 8003bfe:	463c      	mov	r4, r7
 8003c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    printf("TRANG THAI: %s (%d/2 CAM BIEN HOAT DONG)\r\n", 
           status_text[g_sensor_system.system_status], g_sensor_system.active_sensor_count);
 8003c06:	4b17      	ldr	r3, [pc, #92]	@ (8003c64 <DisplaySystemStatus+0xb0>)
 8003c08:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
    printf("TRANG THAI: %s (%d/2 CAM BIEN HOAT DONG)\r\n", 
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	3320      	adds	r3, #32
 8003c10:	443b      	add	r3, r7
 8003c12:	f853 3c10 	ldr.w	r3, [r3, #-16]
           status_text[g_sensor_system.system_status], g_sensor_system.active_sensor_count);
 8003c16:	4a13      	ldr	r2, [pc, #76]	@ (8003c64 <DisplaySystemStatus+0xb0>)
 8003c18:	f892 20f0 	ldrb.w	r2, [r2, #240]	@ 0xf0
    printf("TRANG THAI: %s (%d/2 CAM BIEN HOAT DONG)\r\n", 
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4817      	ldr	r0, [pc, #92]	@ (8003c7c <DisplaySystemStatus+0xc8>)
 8003c20:	f001 fd3c 	bl	800569c <iprintf>
    printf("CANH BAO TONG THE %s\r\n", alarm_text[g_sensor_system.system_alarm]);
 8003c24:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <DisplaySystemStatus+0xb0>)
 8003c26:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	3320      	adds	r3, #32
 8003c2e:	443b      	add	r3, r7
 8003c30:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003c34:	4619      	mov	r1, r3
 8003c36:	4812      	ldr	r0, [pc, #72]	@ (8003c80 <DisplaySystemStatus+0xcc>)
 8003c38:	f001 fd30 	bl	800569c <iprintf>
    printf("TONG SO DO: %lu | LOI: %lu\r\n", 
 8003c3c:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <DisplaySystemStatus+0xb0>)
 8003c3e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003c42:	4a08      	ldr	r2, [pc, #32]	@ (8003c64 <DisplaySystemStatus+0xb0>)
 8003c44:	f8d2 20fc 	ldr.w	r2, [r2, #252]	@ 0xfc
 8003c48:	4619      	mov	r1, r3
 8003c4a:	480e      	ldr	r0, [pc, #56]	@ (8003c84 <DisplaySystemStatus+0xd0>)
 8003c4c:	f001 fd26 	bl	800569c <iprintf>
           g_sensor_system.total_readings, g_sensor_system.error_count);
    
    printf("=====================================\r\n");
 8003c50:	480d      	ldr	r0, [pc, #52]	@ (8003c88 <DisplaySystemStatus+0xd4>)
 8003c52:	f001 fd8b 	bl	800576c <puts>
}
 8003c56:	bf00      	nop
 8003c58:	3724      	adds	r7, #36	@ 0x24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd90      	pop	{r4, r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	0800a420 	.word	0x0800a420
 8003c64:	20000350 	.word	0x20000350
 8003c68:	0800a448 	.word	0x0800a448
 8003c6c:	200003c8 	.word	0x200003c8
 8003c70:	0800a46c 	.word	0x0800a46c
 8003c74:	0800a524 	.word	0x0800a524
 8003c78:	0800a558 	.word	0x0800a558
 8003c7c:	0800a480 	.word	0x0800a480
 8003c80:	0800a4ac 	.word	0x0800a4ac
 8003c84:	0800a4c4 	.word	0x0800a4c4
 8003c88:	0800a4e4 	.word	0x0800a4e4

08003c8c <CalibrateSensors>:
 */
// =============================================================================
// HIỆU CHUẨN CẢM BIẾN ĐƯỢC CẢI TIẾN - MQ137 & MQ135
// =============================================================================

void CalibrateSensors(void) {
 8003c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c90:	b09d      	sub	sp, #116	@ 0x74
 8003c92:	af08      	add	r7, sp, #32
    printf("\r\n=== HIEU CHUAN CAM BIEN CAI TIEN ===\r\n");
 8003c94:	4884      	ldr	r0, [pc, #528]	@ (8003ea8 <CalibrateSensors+0x21c>)
 8003c96:	f001 fd69 	bl	800576c <puts>
    printf("QUAN TRONG: Dam bao cam bien da chay 24h+ va o moi truong sach!\r\n");
 8003c9a:	4884      	ldr	r0, [pc, #528]	@ (8003eac <CalibrateSensors+0x220>)
 8003c9c:	f001 fd66 	bl	800576c <puts>
    
    // Kiểm tra điều kiện trước khi hiệu chuẩn
    if(!CheckCalibrationConditions()) {
 8003ca0:	f000 fa38 	bl	8004114 <CheckCalibrationConditions>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <CalibrateSensors+0x26>
        printf("❌ DIEU KIEN KHONG DAP UNG - Huy hieu chuan!\r\n");
 8003caa:	4881      	ldr	r0, [pc, #516]	@ (8003eb0 <CalibrateSensors+0x224>)
 8003cac:	f001 fd5e 	bl	800576c <puts>
        return;
 8003cb0:	e204      	b.n	80040bc <CalibrateSensors+0x430>
    }
    
    printf("✅ Dieu kien OK - Bat dau hieu chuan...\r\n");
 8003cb2:	4880      	ldr	r0, [pc, #512]	@ (8003eb4 <CalibrateSensors+0x228>)
 8003cb4:	f001 fd5a 	bl	800576c <puts>
    printf("Thoi gian: 5 phut (300 mau)\r\n");
 8003cb8:	487f      	ldr	r0, [pc, #508]	@ (8003eb8 <CalibrateSensors+0x22c>)
 8003cba:	f001 fd57 	bl	800576c <puts>
    
    float mq137_r0_sum = 0, mq137_min = 999999, mq137_max = 0;
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc4:	4b7d      	ldr	r3, [pc, #500]	@ (8003ebc <CalibrateSensors+0x230>)
 8003cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	647b      	str	r3, [r7, #68]	@ 0x44
    float mq136_r0_sum = 0, mq136_min = 999999, mq136_max = 0;
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cd4:	4b79      	ldr	r3, [pc, #484]	@ (8003ebc <CalibrateSensors+0x230>)
 8003cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
    int valid_samples = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	637b      	str	r3, [r7, #52]	@ 0x34
    int total_samples = 300;  // 5 phút
 8003ce2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    for(int i = 0; i < total_samples; i++) {
 8003ce8:	2300      	movs	r3, #0
 8003cea:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cec:	e098      	b.n	8003e20 <CalibrateSensors+0x194>
        ProcessAllSensors();
 8003cee:	f7ff ff1f 	bl	8003b30 <ProcessAllSensors>
        
        float mq137_resistance = g_sensor_system.mq137.base.resistance;
 8003cf2:	4b73      	ldr	r3, [pc, #460]	@ (8003ec0 <CalibrateSensors+0x234>)
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	60fb      	str	r3, [r7, #12]
        float mq136_resistance = g_sensor_system.mq136.base.resistance;
 8003cf8:	4b71      	ldr	r3, [pc, #452]	@ (8003ec0 <CalibrateSensors+0x234>)
 8003cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cfe:	60bb      	str	r3, [r7, #8]
        
        // Validate samples với điều kiện chặt chẽ hơn
        uint8_t mq137_valid = ValidateCalibrationSample(mq137_resistance, 
 8003d00:	4b6f      	ldr	r3, [pc, #444]	@ (8003ec0 <CalibrateSensors+0x234>)
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	4619      	mov	r1, r3
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 faf0 	bl	80042ec <ValidateCalibrationSample>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	71fb      	strb	r3, [r7, #7]
                                                       g_sensor_system.mq137.base.raw_voltage);
        uint8_t mq136_valid = ValidateCalibrationSample(mq136_resistance, 
 8003d10:	4b6b      	ldr	r3, [pc, #428]	@ (8003ec0 <CalibrateSensors+0x234>)
 8003d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d16:	4619      	mov	r1, r3
 8003d18:	68b8      	ldr	r0, [r7, #8]
 8003d1a:	f000 fae7 	bl	80042ec <ValidateCalibrationSample>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71bb      	strb	r3, [r7, #6]
                                                       g_sensor_system.mq136.base.raw_voltage);
        
        if(mq137_valid && mq136_valid) {
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d035      	beq.n	8003d94 <CalibrateSensors+0x108>
 8003d28:	79bb      	ldrb	r3, [r7, #6]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d032      	beq.n	8003d94 <CalibrateSensors+0x108>
            // MQ137 statistics
            mq137_r0_sum += mq137_resistance;
 8003d2e:	68f9      	ldr	r1, [r7, #12]
 8003d30:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003d32:	f7fc ff1f 	bl	8000b74 <__addsf3>
 8003d36:	4603      	mov	r3, r0
 8003d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if(mq137_resistance < mq137_min) mq137_min = mq137_resistance;
 8003d3a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7fd f9bf 	bl	80010c0 <__aeabi_fcmplt>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <CalibrateSensors+0xc0>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
            if(mq137_resistance > mq137_max) mq137_max = mq137_resistance;
 8003d4c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7fd f9d4 	bl	80010fc <__aeabi_fcmpgt>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <CalibrateSensors+0xd2>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	647b      	str	r3, [r7, #68]	@ 0x44
            
            // MQ135 statistics
            mq136_r0_sum += mq136_resistance;
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003d62:	f7fc ff07 	bl	8000b74 <__addsf3>
 8003d66:	4603      	mov	r3, r0
 8003d68:	643b      	str	r3, [r7, #64]	@ 0x40
            if(mq136_resistance < mq136_min) mq136_min = mq136_resistance;
 8003d6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d6c:	68b8      	ldr	r0, [r7, #8]
 8003d6e:	f7fd f9a7 	bl	80010c0 <__aeabi_fcmplt>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <CalibrateSensors+0xf0>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if(mq136_resistance > mq136_max) mq136_max = mq136_resistance;
 8003d7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d7e:	68b8      	ldr	r0, [r7, #8]
 8003d80:	f7fd f9bc 	bl	80010fc <__aeabi_fcmpgt>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <CalibrateSensors+0x102>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
            
            valid_samples++;
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d90:	3301      	adds	r3, #1
 8003d92:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        
        // Progress report mỗi 30 giây
        if(i % 30 == 0) {
 8003d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d96:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec4 <CalibrateSensors+0x238>)
 8003d98:	fb83 1302 	smull	r1, r3, r3, r2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	1119      	asrs	r1, r3, #4
 8003da0:	17d3      	asrs	r3, r2, #31
 8003da2:	1ac9      	subs	r1, r1, r3
 8003da4:	460b      	mov	r3, r1
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a5b      	subs	r3, r3, r1
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	1ad1      	subs	r1, r2, r3
 8003dae:	2900      	cmp	r1, #0
 8003db0:	d12f      	bne.n	8003e12 <CalibrateSensors+0x186>
            float progress = (float)i / total_samples * 100.0f;
 8003db2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003db4:	f7fc ff92 	bl	8000cdc <__aeabi_i2f>
 8003db8:	4604      	mov	r4, r0
 8003dba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dbc:	f7fc ff8e 	bl	8000cdc <__aeabi_i2f>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	f7fd f891 	bl	8000eec <__aeabi_fdiv>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	493e      	ldr	r1, [pc, #248]	@ (8003ec8 <CalibrateSensors+0x23c>)
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fc ffd8 	bl	8000d84 <__aeabi_fmul>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	603b      	str	r3, [r7, #0]
            printf("Tien do: %.1f%% | Mau %d: MQ137=%.1fΩ, MQ136=%.1fΩ | Valid: %d\r\n", 
 8003dd8:	6838      	ldr	r0, [r7, #0]
 8003dda:	f7fc fb25 	bl	8000428 <__aeabi_f2d>
 8003dde:	4680      	mov	r8, r0
 8003de0:	4689      	mov	r9, r1
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	1c5e      	adds	r6, r3, #1
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7fc fb1e 	bl	8000428 <__aeabi_f2d>
 8003dec:	4604      	mov	r4, r0
 8003dee:	460d      	mov	r5, r1
 8003df0:	68b8      	ldr	r0, [r7, #8]
 8003df2:	f7fc fb19 	bl	8000428 <__aeabi_f2d>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003dfc:	9106      	str	r1, [sp, #24]
 8003dfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e02:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003e06:	9600      	str	r6, [sp, #0]
 8003e08:	4642      	mov	r2, r8
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	482f      	ldr	r0, [pc, #188]	@ (8003ecc <CalibrateSensors+0x240>)
 8003e0e:	f001 fc45 	bl	800569c <iprintf>
                   progress, i+1, mq137_resistance, mq136_resistance, valid_samples);
        }
        
        HAL_Delay(1000);  // 1 giây mỗi sample
 8003e12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e16:	f7fd fe1f 	bl	8001a58 <HAL_Delay>
    for(int i = 0; i < total_samples; i++) {
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e24:	429a      	cmp	r2, r3
 8003e26:	f6ff af62 	blt.w	8003cee <CalibrateSensors+0x62>
    }
    
    // Phân tích kết quả
    if(valid_samples < (total_samples * 0.8f)) {  // Cần ít nhất 80% sample hợp lệ
 8003e2a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e2c:	f7fc ff56 	bl	8000cdc <__aeabi_i2f>
 8003e30:	4604      	mov	r4, r0
 8003e32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e34:	f7fc ff52 	bl	8000cdc <__aeabi_i2f>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4925      	ldr	r1, [pc, #148]	@ (8003ed0 <CalibrateSensors+0x244>)
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fc ffa1 	bl	8000d84 <__aeabi_fmul>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4619      	mov	r1, r3
 8003e46:	4620      	mov	r0, r4
 8003e48:	f7fd f93a 	bl	80010c0 <__aeabi_fcmplt>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04a      	beq.n	8003ee8 <CalibrateSensors+0x25c>
        printf("❌ KHONG DU SAMPLE HOP LE (%d/%d = %.1f%%)\r\n", 
               valid_samples, total_samples, (float)valid_samples/total_samples*100);
 8003e52:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e54:	f7fc ff42 	bl	8000cdc <__aeabi_i2f>
 8003e58:	4604      	mov	r4, r0
 8003e5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e5c:	f7fc ff3e 	bl	8000cdc <__aeabi_i2f>
 8003e60:	4603      	mov	r3, r0
 8003e62:	4619      	mov	r1, r3
 8003e64:	4620      	mov	r0, r4
 8003e66:	f7fd f841 	bl	8000eec <__aeabi_fdiv>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4916      	ldr	r1, [pc, #88]	@ (8003ec8 <CalibrateSensors+0x23c>)
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc ff88 	bl	8000d84 <__aeabi_fmul>
 8003e74:	4603      	mov	r3, r0
        printf("❌ KHONG DU SAMPLE HOP LE (%d/%d = %.1f%%)\r\n", 
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc fad6 	bl	8000428 <__aeabi_f2d>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	e9cd 2300 	strd	r2, r3, [sp]
 8003e84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e88:	4812      	ldr	r0, [pc, #72]	@ (8003ed4 <CalibrateSensors+0x248>)
 8003e8a:	f001 fc07 	bl	800569c <iprintf>
        printf("Hay kiem tra:\r\n");
 8003e8e:	4812      	ldr	r0, [pc, #72]	@ (8003ed8 <CalibrateSensors+0x24c>)
 8003e90:	f001 fc6c 	bl	800576c <puts>
        printf("- Cam bien da preheat 24h+?\r\n");
 8003e94:	4811      	ldr	r0, [pc, #68]	@ (8003edc <CalibrateSensors+0x250>)
 8003e96:	f001 fc69 	bl	800576c <puts>
        printf("- Moi truong thuc su sach?\r\n");
 8003e9a:	4811      	ldr	r0, [pc, #68]	@ (8003ee0 <CalibrateSensors+0x254>)
 8003e9c:	f001 fc66 	bl	800576c <puts>
        printf("- Hardware ket noi dung?\r\n");
 8003ea0:	4810      	ldr	r0, [pc, #64]	@ (8003ee4 <CalibrateSensors+0x258>)
 8003ea2:	f001 fc63 	bl	800576c <puts>
        return;
 8003ea6:	e109      	b.n	80040bc <CalibrateSensors+0x430>
 8003ea8:	0800a610 	.word	0x0800a610
 8003eac:	0800a638 	.word	0x0800a638
 8003eb0:	0800a67c 	.word	0x0800a67c
 8003eb4:	0800a6ac 	.word	0x0800a6ac
 8003eb8:	0800a6d8 	.word	0x0800a6d8
 8003ebc:	497423f0 	.word	0x497423f0
 8003ec0:	20000350 	.word	0x20000350
 8003ec4:	88888889 	.word	0x88888889
 8003ec8:	42c80000 	.word	0x42c80000
 8003ecc:	0800a6f8 	.word	0x0800a6f8
 8003ed0:	3f4ccccd 	.word	0x3f4ccccd
 8003ed4:	0800a73c 	.word	0x0800a73c
 8003ed8:	0800a76c 	.word	0x0800a76c
 8003edc:	0800a77c 	.word	0x0800a77c
 8003ee0:	0800a79c 	.word	0x0800a79c
 8003ee4:	0800a7b8 	.word	0x0800a7b8
    }
    
    // Tính giá trị trung bình
    float mq137_r0_avg = mq137_r0_sum / valid_samples;
 8003ee8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003eea:	f7fc fef7 	bl	8000cdc <__aeabi_i2f>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003ef4:	f7fc fffa 	bl	8000eec <__aeabi_fdiv>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    float mq136_r0_avg = mq136_r0_sum / valid_samples;
 8003efc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003efe:	f7fc feed 	bl	8000cdc <__aeabi_i2f>
 8003f02:	4603      	mov	r3, r0
 8003f04:	4619      	mov	r1, r3
 8003f06:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003f08:	f7fc fff0 	bl	8000eec <__aeabi_fdiv>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // Tính độ ổn định
    float mq137_range = mq137_max - mq137_min;
 8003f10:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003f12:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003f14:	f7fc fe2c 	bl	8000b70 <__aeabi_fsub>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	623b      	str	r3, [r7, #32]
    float mq136_range = mq136_max - mq136_min;
 8003f1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f20:	f7fc fe26 	bl	8000b70 <__aeabi_fsub>
 8003f24:	4603      	mov	r3, r0
 8003f26:	61fb      	str	r3, [r7, #28]
    float mq137_stability = (mq137_range / mq137_r0_avg) * 100.0f;
 8003f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f2a:	6a38      	ldr	r0, [r7, #32]
 8003f2c:	f7fc ffde 	bl	8000eec <__aeabi_fdiv>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4964      	ldr	r1, [pc, #400]	@ (80040c4 <CalibrateSensors+0x438>)
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc ff25 	bl	8000d84 <__aeabi_fmul>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	61bb      	str	r3, [r7, #24]
    float mq136_stability = (mq136_range / mq136_r0_avg) * 100.0f;
 8003f3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f40:	69f8      	ldr	r0, [r7, #28]
 8003f42:	f7fc ffd3 	bl	8000eec <__aeabi_fdiv>
 8003f46:	4603      	mov	r3, r0
 8003f48:	495e      	ldr	r1, [pc, #376]	@ (80040c4 <CalibrateSensors+0x438>)
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fc ff1a 	bl	8000d84 <__aeabi_fmul>
 8003f50:	4603      	mov	r3, r0
 8003f52:	617b      	str	r3, [r7, #20]
    
    printf("\r\n=== KET QUA HIEU CHUAN ===\r\n");
 8003f54:	485c      	ldr	r0, [pc, #368]	@ (80040c8 <CalibrateSensors+0x43c>)
 8003f56:	f001 fc09 	bl	800576c <puts>
    printf("Thoi gian: 5 phut | Sample hop le: %d/%d (%.1f%%)\r\n", 
           valid_samples, total_samples, (float)valid_samples/total_samples*100);
 8003f5a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f5c:	f7fc febe 	bl	8000cdc <__aeabi_i2f>
 8003f60:	4604      	mov	r4, r0
 8003f62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f64:	f7fc feba 	bl	8000cdc <__aeabi_i2f>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7fc ffbd 	bl	8000eec <__aeabi_fdiv>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4953      	ldr	r1, [pc, #332]	@ (80040c4 <CalibrateSensors+0x438>)
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc ff04 	bl	8000d84 <__aeabi_fmul>
 8003f7c:	4603      	mov	r3, r0
    printf("Thoi gian: 5 phut | Sample hop le: %d/%d (%.1f%%)\r\n", 
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fc fa52 	bl	8000428 <__aeabi_f2d>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	e9cd 2300 	strd	r2, r3, [sp]
 8003f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f90:	484e      	ldr	r0, [pc, #312]	@ (80040cc <CalibrateSensors+0x440>)
 8003f92:	f001 fb83 	bl	800569c <iprintf>
    
    // MQ137 results
    printf("\r\n--- MQ137 (NH3) ---\r\n");
 8003f96:	484e      	ldr	r0, [pc, #312]	@ (80040d0 <CalibrateSensors+0x444>)
 8003f98:	f001 fbe8 	bl	800576c <puts>
    printf("R0 trung binh: %.1f Ω\r\n", mq137_r0_avg);
 8003f9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f9e:	f7fc fa43 	bl	8000428 <__aeabi_f2d>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	484b      	ldr	r0, [pc, #300]	@ (80040d4 <CalibrateSensors+0x448>)
 8003fa8:	f001 fb78 	bl	800569c <iprintf>
    printf("Khoang bien thien: %.1f - %.1f Ω\r\n", mq137_min, mq137_max);
 8003fac:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003fae:	f7fc fa3b 	bl	8000428 <__aeabi_f2d>
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003fb8:	f7fc fa36 	bl	8000428 <__aeabi_f2d>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	e9cd 2300 	strd	r2, r3, [sp]
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	462b      	mov	r3, r5
 8003fc8:	4843      	ldr	r0, [pc, #268]	@ (80040d8 <CalibrateSensors+0x44c>)
 8003fca:	f001 fb67 	bl	800569c <iprintf>
    printf("Do on dinh: %.1f%%\r\n", mq137_stability);
 8003fce:	69b8      	ldr	r0, [r7, #24]
 8003fd0:	f7fc fa2a 	bl	8000428 <__aeabi_f2d>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4840      	ldr	r0, [pc, #256]	@ (80040dc <CalibrateSensors+0x450>)
 8003fda:	f001 fb5f 	bl	800569c <iprintf>
    
    // MQ135 results  
    printf("\r\n--- MQ136 (H2S) ---\r\n");
 8003fde:	4840      	ldr	r0, [pc, #256]	@ (80040e0 <CalibrateSensors+0x454>)
 8003fe0:	f001 fbc4 	bl	800576c <puts>
    printf("R0 trung binh: %.1f Ω\r\n", mq136_r0_avg);
 8003fe4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fe6:	f7fc fa1f 	bl	8000428 <__aeabi_f2d>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4839      	ldr	r0, [pc, #228]	@ (80040d4 <CalibrateSensors+0x448>)
 8003ff0:	f001 fb54 	bl	800569c <iprintf>
    printf("Khoang bien thien: %.1f - %.1f Ω\r\n", mq136_min, mq136_max);
 8003ff4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003ff6:	f7fc fa17 	bl	8000428 <__aeabi_f2d>
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	460d      	mov	r5, r1
 8003ffe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004000:	f7fc fa12 	bl	8000428 <__aeabi_f2d>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	e9cd 2300 	strd	r2, r3, [sp]
 800400c:	4622      	mov	r2, r4
 800400e:	462b      	mov	r3, r5
 8004010:	4831      	ldr	r0, [pc, #196]	@ (80040d8 <CalibrateSensors+0x44c>)
 8004012:	f001 fb43 	bl	800569c <iprintf>
    printf("Do on dinh: %.1f%%\r\n", mq136_stability);
 8004016:	6978      	ldr	r0, [r7, #20]
 8004018:	f7fc fa06 	bl	8000428 <__aeabi_f2d>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	482e      	ldr	r0, [pc, #184]	@ (80040dc <CalibrateSensors+0x450>)
 8004022:	f001 fb3b 	bl	800569c <iprintf>
    
    // Validate và apply R0 values
    uint8_t mq137_r0_valid = ValidateR0Value(mq137_r0_avg, mq137_stability, "MQ137");
 8004026:	4a2f      	ldr	r2, [pc, #188]	@ (80040e4 <CalibrateSensors+0x458>)
 8004028:	69b9      	ldr	r1, [r7, #24]
 800402a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800402c:	f000 f990 	bl	8004350 <ValidateR0Value>
 8004030:	4603      	mov	r3, r0
 8004032:	74fb      	strb	r3, [r7, #19]
    uint8_t mq136_r0_valid = ValidateR0Value(mq136_r0_avg, mq136_stability, "MQ136");
 8004034:	4a2c      	ldr	r2, [pc, #176]	@ (80040e8 <CalibrateSensors+0x45c>)
 8004036:	6979      	ldr	r1, [r7, #20]
 8004038:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800403a:	f000 f989 	bl	8004350 <ValidateR0Value>
 800403e:	4603      	mov	r3, r0
 8004040:	74bb      	strb	r3, [r7, #18]
    
    if(mq137_r0_valid && mq136_r0_valid) {
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d029      	beq.n	800409c <CalibrateSensors+0x410>
 8004048:	7cbb      	ldrb	r3, [r7, #18]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d026      	beq.n	800409c <CalibrateSensors+0x410>
        // Cập nhật giá trị R0
        g_sensor_system.mq137.base.r0_value = mq137_r0_avg;
 800404e:	4a27      	ldr	r2, [pc, #156]	@ (80040ec <CalibrateSensors+0x460>)
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	6353      	str	r3, [r2, #52]	@ 0x34
        g_sensor_system.mq136.base.r0_value = mq136_r0_avg;
 8004054:	4a25      	ldr	r2, [pc, #148]	@ (80040ec <CalibrateSensors+0x460>)
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
        
        printf("\r\n✅ HIEU CHUAN THANH CONG!\r\n");
 800405c:	4824      	ldr	r0, [pc, #144]	@ (80040f0 <CalibrateSensors+0x464>)
 800405e:	f001 fb85 	bl	800576c <puts>
        printf("R0 da duoc cap nhat:\r\n");
 8004062:	4824      	ldr	r0, [pc, #144]	@ (80040f4 <CalibrateSensors+0x468>)
 8004064:	f001 fb82 	bl	800576c <puts>
        printf("- MQ137: %.1f Ω\r\n", mq137_r0_avg);
 8004068:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800406a:	f7fc f9dd 	bl	8000428 <__aeabi_f2d>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4821      	ldr	r0, [pc, #132]	@ (80040f8 <CalibrateSensors+0x46c>)
 8004074:	f001 fb12 	bl	800569c <iprintf>
        printf("- MQ136: %.1f Ω\r\n", mq136_r0_avg);
 8004078:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800407a:	f7fc f9d5 	bl	8000428 <__aeabi_f2d>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	481e      	ldr	r0, [pc, #120]	@ (80040fc <CalibrateSensors+0x470>)
 8004084:	f001 fb0a 	bl	800569c <iprintf>
        
        // Lưu vào Flash (optional)
        SaveCalibrationToFlash(mq137_r0_avg, mq136_r0_avg);
 8004088:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800408a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800408c:	f000 fa84 	bl	8004598 <SaveCalibrationToFlash>
        
        // Test ngay với R0 mới
        printf("\r\n🧪 TEST VOI R0 MOI:\r\n");
 8004090:	481b      	ldr	r0, [pc, #108]	@ (8004100 <CalibrateSensors+0x474>)
 8004092:	f001 fb6b 	bl	800576c <puts>
        TestCalibrationResult();
 8004096:	f000 fa47 	bl	8004528 <TestCalibrationResult>
 800409a:	e00c      	b.n	80040b6 <CalibrateSensors+0x42a>
        
    } else {
        printf("\r\n❌ HIEU CHUAN THAT BAI!\r\n");
 800409c:	4819      	ldr	r0, [pc, #100]	@ (8004104 <CalibrateSensors+0x478>)
 800409e:	f001 fb65 	bl	800576c <puts>
        printf("Su dung gia tri R0 mac dinh\r\n");
 80040a2:	4819      	ldr	r0, [pc, #100]	@ (8004108 <CalibrateSensors+0x47c>)
 80040a4:	f001 fb62 	bl	800576c <puts>
        g_sensor_system.mq137.base.r0_value = 10000.0f;
 80040a8:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <CalibrateSensors+0x460>)
 80040aa:	4a18      	ldr	r2, [pc, #96]	@ (800410c <CalibrateSensors+0x480>)
 80040ac:	635a      	str	r2, [r3, #52]	@ 0x34
        g_sensor_system.mq136.base.r0_value = 10000.0f;
 80040ae:	4b0f      	ldr	r3, [pc, #60]	@ (80040ec <CalibrateSensors+0x460>)
 80040b0:	4a16      	ldr	r2, [pc, #88]	@ (800410c <CalibrateSensors+0x480>)
 80040b2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }
    
    printf("===============================\r\n");
 80040b6:	4816      	ldr	r0, [pc, #88]	@ (8004110 <CalibrateSensors+0x484>)
 80040b8:	f001 fb58 	bl	800576c <puts>
}
 80040bc:	3754      	adds	r7, #84	@ 0x54
 80040be:	46bd      	mov	sp, r7
 80040c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040c4:	42c80000 	.word	0x42c80000
 80040c8:	0800a7d4 	.word	0x0800a7d4
 80040cc:	0800a7f4 	.word	0x0800a7f4
 80040d0:	0800a828 	.word	0x0800a828
 80040d4:	0800a840 	.word	0x0800a840
 80040d8:	0800a85c 	.word	0x0800a85c
 80040dc:	0800a880 	.word	0x0800a880
 80040e0:	0800a898 	.word	0x0800a898
 80040e4:	0800a8b0 	.word	0x0800a8b0
 80040e8:	0800a8b8 	.word	0x0800a8b8
 80040ec:	20000350 	.word	0x20000350
 80040f0:	0800a8c0 	.word	0x0800a8c0
 80040f4:	0800a8e0 	.word	0x0800a8e0
 80040f8:	0800a8f8 	.word	0x0800a8f8
 80040fc:	0800a90c 	.word	0x0800a90c
 8004100:	0800a920 	.word	0x0800a920
 8004104:	0800a93c 	.word	0x0800a93c
 8004108:	0800a958 	.word	0x0800a958
 800410c:	461c4000 	.word	0x461c4000
 8004110:	0800a978 	.word	0x0800a978

08004114 <CheckCalibrationConditions>:

// =============================================================================
// CÁC HÀM HỖ TRỢ
// =============================================================================

uint8_t CheckCalibrationConditions(void) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b09a      	sub	sp, #104	@ 0x68
 8004118:	af00      	add	r7, sp, #0
    printf("Kiem tra dieu kien hieu chuan...\r\n");
 800411a:	4865      	ldr	r0, [pc, #404]	@ (80042b0 <CheckCalibrationConditions+0x19c>)
 800411c:	f001 fb26 	bl	800576c <puts>
    
    // Kiểm tra 10 sample để đánh giá ổn định
    float mq137_readings[10], mq136_readings[10];
    
    for(int i = 0; i < 10; i++) {
 8004120:	2300      	movs	r3, #0
 8004122:	667b      	str	r3, [r7, #100]	@ 0x64
 8004124:	e019      	b.n	800415a <CheckCalibrationConditions+0x46>
        ProcessAllSensors();
 8004126:	f7ff fd03 	bl	8003b30 <ProcessAllSensors>
        mq137_readings[i] = g_sensor_system.mq137.base.resistance;
 800412a:	4b62      	ldr	r3, [pc, #392]	@ (80042b4 <CheckCalibrationConditions+0x1a0>)
 800412c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800412e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	3368      	adds	r3, #104	@ 0x68
 8004134:	443b      	add	r3, r7
 8004136:	f843 2c3c 	str.w	r2, [r3, #-60]
        mq136_readings[i] = g_sensor_system.mq136.base.resistance;
 800413a:	4b5e      	ldr	r3, [pc, #376]	@ (80042b4 <CheckCalibrationConditions+0x1a0>)
 800413c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	3368      	adds	r3, #104	@ 0x68
 8004146:	443b      	add	r3, r7
 8004148:	f843 2c64 	str.w	r2, [r3, #-100]
        HAL_Delay(2000);  // 2 giây mỗi sample
 800414c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004150:	f7fd fc82 	bl	8001a58 <HAL_Delay>
    for(int i = 0; i < 10; i++) {
 8004154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004156:	3301      	adds	r3, #1
 8004158:	667b      	str	r3, [r7, #100]	@ 0x64
 800415a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800415c:	2b09      	cmp	r3, #9
 800415e:	dde2      	ble.n	8004126 <CheckCalibrationConditions+0x12>
    }
    
    // Tính coefficient of variation
    float mq137_cv = CalculateCV(mq137_readings, 10);
 8004160:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004164:	210a      	movs	r1, #10
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f94c 	bl	8004404 <CalculateCV>
 800416c:	6638      	str	r0, [r7, #96]	@ 0x60
    float mq136_cv = CalculateCV(mq136_readings, 10);
 800416e:	1d3b      	adds	r3, r7, #4
 8004170:	210a      	movs	r1, #10
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f946 	bl	8004404 <CalculateCV>
 8004178:	65f8      	str	r0, [r7, #92]	@ 0x5c
    
    printf("Do on dinh MQ137: %.1f%% (can <10%%)\r\n", mq137_cv);
 800417a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800417c:	f7fc f954 	bl	8000428 <__aeabi_f2d>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	484c      	ldr	r0, [pc, #304]	@ (80042b8 <CheckCalibrationConditions+0x1a4>)
 8004186:	f001 fa89 	bl	800569c <iprintf>
    printf("Do on dinh MQ136: %.1f%% (can <10%%)\r\n", mq136_cv);
 800418a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800418c:	f7fc f94c 	bl	8000428 <__aeabi_f2d>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4849      	ldr	r0, [pc, #292]	@ (80042bc <CheckCalibrationConditions+0x1a8>)
 8004196:	f001 fa81 	bl	800569c <iprintf>
    
    // Kiểm tra range hợp lý
    float mq137_avg = CalculateAverage(mq137_readings, 10);
 800419a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800419e:	210a      	movs	r1, #10
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f997 	bl	80044d4 <CalculateAverage>
 80041a6:	65b8      	str	r0, [r7, #88]	@ 0x58
    float mq136_avg = CalculateAverage(mq136_readings, 10);
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	210a      	movs	r1, #10
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 f991 	bl	80044d4 <CalculateAverage>
 80041b2:	6578      	str	r0, [r7, #84]	@ 0x54
    
    printf("Dien tro trung binh MQ137: %.1f Ω\r\n", mq137_avg);
 80041b4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80041b6:	f7fc f937 	bl	8000428 <__aeabi_f2d>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4840      	ldr	r0, [pc, #256]	@ (80042c0 <CheckCalibrationConditions+0x1ac>)
 80041c0:	f001 fa6c 	bl	800569c <iprintf>
    printf("Dien tro trung binh MQ136: %.1f Ω\r\n", mq136_avg);
 80041c4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80041c6:	f7fc f92f 	bl	8000428 <__aeabi_f2d>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	483d      	ldr	r0, [pc, #244]	@ (80042c4 <CheckCalibrationConditions+0x1b0>)
 80041d0:	f001 fa64 	bl	800569c <iprintf>
    
    // Điều kiện pass
    if(mq137_cv < 10.0f && mq136_cv < 10.0f && 
 80041d4:	493c      	ldr	r1, [pc, #240]	@ (80042c8 <CheckCalibrationConditions+0x1b4>)
 80041d6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80041d8:	f7fc ff72 	bl	80010c0 <__aeabi_fcmplt>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d027      	beq.n	8004232 <CheckCalibrationConditions+0x11e>
 80041e2:	4939      	ldr	r1, [pc, #228]	@ (80042c8 <CheckCalibrationConditions+0x1b4>)
 80041e4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80041e6:	f7fc ff6b 	bl	80010c0 <__aeabi_fcmplt>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <CheckCalibrationConditions+0x11e>
 80041f0:	4936      	ldr	r1, [pc, #216]	@ (80042cc <CheckCalibrationConditions+0x1b8>)
 80041f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80041f4:	f7fc ff82 	bl	80010fc <__aeabi_fcmpgt>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d019      	beq.n	8004232 <CheckCalibrationConditions+0x11e>
       mq137_avg > 10000.0f && mq137_avg < 200000.0f &&
 80041fe:	4934      	ldr	r1, [pc, #208]	@ (80042d0 <CheckCalibrationConditions+0x1bc>)
 8004200:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004202:	f7fc ff5d 	bl	80010c0 <__aeabi_fcmplt>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d012      	beq.n	8004232 <CheckCalibrationConditions+0x11e>
 800420c:	492f      	ldr	r1, [pc, #188]	@ (80042cc <CheckCalibrationConditions+0x1b8>)
 800420e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004210:	f7fc ff74 	bl	80010fc <__aeabi_fcmpgt>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <CheckCalibrationConditions+0x11e>
       mq136_avg > 10000.0f && mq136_avg < 200000.0f) {
 800421a:	492d      	ldr	r1, [pc, #180]	@ (80042d0 <CheckCalibrationConditions+0x1bc>)
 800421c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800421e:	f7fc ff4f 	bl	80010c0 <__aeabi_fcmplt>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d004      	beq.n	8004232 <CheckCalibrationConditions+0x11e>
        printf("✅ Dieu kien dat yeu cau\r\n");
 8004228:	482a      	ldr	r0, [pc, #168]	@ (80042d4 <CheckCalibrationConditions+0x1c0>)
 800422a:	f001 fa9f 	bl	800576c <puts>
        return 1;
 800422e:	2301      	movs	r3, #1
 8004230:	e039      	b.n	80042a6 <CheckCalibrationConditions+0x192>
    } else {
        printf("❌ Dieu kien chua dat yeu cau\r\n");
 8004232:	4829      	ldr	r0, [pc, #164]	@ (80042d8 <CheckCalibrationConditions+0x1c4>)
 8004234:	f001 fa9a 	bl	800576c <puts>
        if(mq137_cv >= 10.0f) printf("- MQ137 chua on dinh\r\n");
 8004238:	4923      	ldr	r1, [pc, #140]	@ (80042c8 <CheckCalibrationConditions+0x1b4>)
 800423a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800423c:	f7fc ff54 	bl	80010e8 <__aeabi_fcmpge>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <CheckCalibrationConditions+0x138>
 8004246:	4825      	ldr	r0, [pc, #148]	@ (80042dc <CheckCalibrationConditions+0x1c8>)
 8004248:	f001 fa90 	bl	800576c <puts>
        if(mq136_cv >= 10.0f) printf("- MQ136 chua on dinh\r\n");
 800424c:	491e      	ldr	r1, [pc, #120]	@ (80042c8 <CheckCalibrationConditions+0x1b4>)
 800424e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8004250:	f7fc ff4a 	bl	80010e8 <__aeabi_fcmpge>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <CheckCalibrationConditions+0x14c>
 800425a:	4821      	ldr	r0, [pc, #132]	@ (80042e0 <CheckCalibrationConditions+0x1cc>)
 800425c:	f001 fa86 	bl	800576c <puts>
        if(mq137_avg <= 10000.0f || mq137_avg >= 200000.0f) {
 8004260:	491a      	ldr	r1, [pc, #104]	@ (80042cc <CheckCalibrationConditions+0x1b8>)
 8004262:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004264:	f7fc ff36 	bl	80010d4 <__aeabi_fcmple>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <CheckCalibrationConditions+0x168>
 800426e:	4918      	ldr	r1, [pc, #96]	@ (80042d0 <CheckCalibrationConditions+0x1bc>)
 8004270:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004272:	f7fc ff39 	bl	80010e8 <__aeabi_fcmpge>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <CheckCalibrationConditions+0x16e>
            printf("- MQ137 dien tro bat thuong\r\n");
 800427c:	4819      	ldr	r0, [pc, #100]	@ (80042e4 <CheckCalibrationConditions+0x1d0>)
 800427e:	f001 fa75 	bl	800576c <puts>
        }
        if(mq136_avg <= 10000.0f || mq136_avg >= 200000.0f) {
 8004282:	4912      	ldr	r1, [pc, #72]	@ (80042cc <CheckCalibrationConditions+0x1b8>)
 8004284:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004286:	f7fc ff25 	bl	80010d4 <__aeabi_fcmple>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <CheckCalibrationConditions+0x18a>
 8004290:	490f      	ldr	r1, [pc, #60]	@ (80042d0 <CheckCalibrationConditions+0x1bc>)
 8004292:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004294:	f7fc ff28 	bl	80010e8 <__aeabi_fcmpge>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <CheckCalibrationConditions+0x190>
            printf("- MQ136 dien tro bat thuong\r\n");
 800429e:	4812      	ldr	r0, [pc, #72]	@ (80042e8 <CheckCalibrationConditions+0x1d4>)
 80042a0:	f001 fa64 	bl	800576c <puts>
        }
        return 0;
 80042a4:	2300      	movs	r3, #0
    }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3768      	adds	r7, #104	@ 0x68
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	0800a99c 	.word	0x0800a99c
 80042b4:	20000350 	.word	0x20000350
 80042b8:	0800a9c0 	.word	0x0800a9c0
 80042bc:	0800a9e8 	.word	0x0800a9e8
 80042c0:	0800aa10 	.word	0x0800aa10
 80042c4:	0800aa38 	.word	0x0800aa38
 80042c8:	41200000 	.word	0x41200000
 80042cc:	461c4000 	.word	0x461c4000
 80042d0:	48435000 	.word	0x48435000
 80042d4:	0800aa60 	.word	0x0800aa60
 80042d8:	0800aa7c 	.word	0x0800aa7c
 80042dc:	0800aa9c 	.word	0x0800aa9c
 80042e0:	0800aab4 	.word	0x0800aab4
 80042e4:	0800aacc 	.word	0x0800aacc
 80042e8:	0800aaec 	.word	0x0800aaec

080042ec <ValidateCalibrationSample>:

uint8_t ValidateCalibrationSample(float resistance, float voltage) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
    // Kiểm tra điện áp hợp lệ
    if(voltage < 0.2f || voltage > 4.8f) return 0;
 80042f6:	4912      	ldr	r1, [pc, #72]	@ (8004340 <ValidateCalibrationSample+0x54>)
 80042f8:	6838      	ldr	r0, [r7, #0]
 80042fa:	f7fc fee1 	bl	80010c0 <__aeabi_fcmplt>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <ValidateCalibrationSample+0x26>
 8004304:	490f      	ldr	r1, [pc, #60]	@ (8004344 <ValidateCalibrationSample+0x58>)
 8004306:	6838      	ldr	r0, [r7, #0]
 8004308:	f7fc fef8 	bl	80010fc <__aeabi_fcmpgt>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <ValidateCalibrationSample+0x2a>
 8004312:	2300      	movs	r3, #0
 8004314:	e010      	b.n	8004338 <ValidateCalibrationSample+0x4c>
    
    // Kiểm tra điện trở trong khoảng cho clean air
    if(resistance < 8000.0f || resistance > 300000.0f) return 0;
 8004316:	490c      	ldr	r1, [pc, #48]	@ (8004348 <ValidateCalibrationSample+0x5c>)
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7fc fed1 	bl	80010c0 <__aeabi_fcmplt>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d106      	bne.n	8004332 <ValidateCalibrationSample+0x46>
 8004324:	4909      	ldr	r1, [pc, #36]	@ (800434c <ValidateCalibrationSample+0x60>)
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc fee8 	bl	80010fc <__aeabi_fcmpgt>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <ValidateCalibrationSample+0x4a>
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <ValidateCalibrationSample+0x4c>
    
    return 1;
 8004336:	2301      	movs	r3, #1
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	3e4ccccd 	.word	0x3e4ccccd
 8004344:	4099999a 	.word	0x4099999a
 8004348:	45fa0000 	.word	0x45fa0000
 800434c:	48927c00 	.word	0x48927c00

08004350 <ValidateR0Value>:

uint8_t ValidateR0Value(float r0_value, float stability, const char* sensor_name) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
    printf("\r\nValidate %s R0...\r\n", sensor_name);
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4821      	ldr	r0, [pc, #132]	@ (80043e4 <ValidateR0Value+0x94>)
 8004360:	f001 f99c 	bl	800569c <iprintf>
    
    // Kiểm tra range
    if(r0_value < 8000.0f) {
 8004364:	4920      	ldr	r1, [pc, #128]	@ (80043e8 <ValidateR0Value+0x98>)
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7fc feaa 	bl	80010c0 <__aeabi_fcmplt>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <ValidateR0Value+0x38>
        printf("❌ %s R0 qua thap (%.1f < 8kΩ)\r\n", sensor_name, r0_value);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7fc f858 	bl	8000428 <__aeabi_f2d>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	481b      	ldr	r0, [pc, #108]	@ (80043ec <ValidateR0Value+0x9c>)
 8004380:	f001 f98c 	bl	800569c <iprintf>
        return 0;
 8004384:	2300      	movs	r3, #0
 8004386:	e028      	b.n	80043da <ValidateR0Value+0x8a>
    }
    if(r0_value > 200000.0f) {
 8004388:	4919      	ldr	r1, [pc, #100]	@ (80043f0 <ValidateR0Value+0xa0>)
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7fc feb6 	bl	80010fc <__aeabi_fcmpgt>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <ValidateR0Value+0x5c>
        printf("❌ %s R0 qua cao (%.1f > 200kΩ)\r\n", sensor_name, r0_value);
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7fc f846 	bl	8000428 <__aeabi_f2d>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4814      	ldr	r0, [pc, #80]	@ (80043f4 <ValidateR0Value+0xa4>)
 80043a4:	f001 f97a 	bl	800569c <iprintf>
        return 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e016      	b.n	80043da <ValidateR0Value+0x8a>
    }
    
    // Kiểm tra stability
    if(stability > 15.0f) {
 80043ac:	4912      	ldr	r1, [pc, #72]	@ (80043f8 <ValidateR0Value+0xa8>)
 80043ae:	68b8      	ldr	r0, [r7, #8]
 80043b0:	f7fc fea4 	bl	80010fc <__aeabi_fcmpgt>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <ValidateR0Value+0x80>
        printf("❌ %s chua on dinh (%.1f%% > 15%%)\r\n", sensor_name, stability);
 80043ba:	68b8      	ldr	r0, [r7, #8]
 80043bc:	f7fc f834 	bl	8000428 <__aeabi_f2d>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	480d      	ldr	r0, [pc, #52]	@ (80043fc <ValidateR0Value+0xac>)
 80043c8:	f001 f968 	bl	800569c <iprintf>
        return 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e004      	b.n	80043da <ValidateR0Value+0x8a>
    }
    
    printf("✅ %s R0 hop le\r\n", sensor_name);
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	480b      	ldr	r0, [pc, #44]	@ (8004400 <ValidateR0Value+0xb0>)
 80043d4:	f001 f962 	bl	800569c <iprintf>
    return 1;
 80043d8:	2301      	movs	r3, #1
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	0800ab0c 	.word	0x0800ab0c
 80043e8:	45fa0000 	.word	0x45fa0000
 80043ec:	0800ab24 	.word	0x0800ab24
 80043f0:	48435000 	.word	0x48435000
 80043f4:	0800ab48 	.word	0x0800ab48
 80043f8:	41700000 	.word	0x41700000
 80043fc:	0800ab6c 	.word	0x0800ab6c
 8004400:	0800ab94 	.word	0x0800ab94

08004404 <CalculateCV>:

float CalculateCV(float* data, int count) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
    float sum = 0, avg, variance = 0;
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	61bb      	str	r3, [r7, #24]
    
    // Tính trung bình
    for(int i = 0; i < count; i++) {
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	e00d      	b.n	800443c <CalculateCV+0x38>
        sum += data[i];
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4413      	add	r3, r2
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4619      	mov	r1, r3
 800442c:	69f8      	ldr	r0, [r7, #28]
 800442e:	f7fc fba1 	bl	8000b74 <__addsf3>
 8004432:	4603      	mov	r3, r0
 8004434:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < count; i++) {
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	3301      	adds	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	dbed      	blt.n	8004420 <CalculateCV+0x1c>
    }
    avg = sum / count;
 8004444:	6838      	ldr	r0, [r7, #0]
 8004446:	f7fc fc49 	bl	8000cdc <__aeabi_i2f>
 800444a:	4603      	mov	r3, r0
 800444c:	4619      	mov	r1, r3
 800444e:	69f8      	ldr	r0, [r7, #28]
 8004450:	f7fc fd4c 	bl	8000eec <__aeabi_fdiv>
 8004454:	4603      	mov	r3, r0
 8004456:	60fb      	str	r3, [r7, #12]
    
    // Tính variance
    for(int i = 0; i < count; i++) {
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	e018      	b.n	8004490 <CalculateCV+0x8c>
        variance += powf(data[i] - avg, 2);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68f9      	ldr	r1, [r7, #12]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fc fb80 	bl	8000b70 <__aeabi_fsub>
 8004470:	4603      	mov	r3, r0
 8004472:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004476:	4618      	mov	r0, r3
 8004478:	f004 fdd8 	bl	800902c <powf>
 800447c:	4603      	mov	r3, r0
 800447e:	4619      	mov	r1, r3
 8004480:	69b8      	ldr	r0, [r7, #24]
 8004482:	f7fc fb77 	bl	8000b74 <__addsf3>
 8004486:	4603      	mov	r3, r0
 8004488:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < count; i++) {
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3301      	adds	r3, #1
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	dbe2      	blt.n	800445e <CalculateCV+0x5a>
    }
    variance /= count;
 8004498:	6838      	ldr	r0, [r7, #0]
 800449a:	f7fc fc1f 	bl	8000cdc <__aeabi_i2f>
 800449e:	4603      	mov	r3, r0
 80044a0:	4619      	mov	r1, r3
 80044a2:	69b8      	ldr	r0, [r7, #24]
 80044a4:	f7fc fd22 	bl	8000eec <__aeabi_fdiv>
 80044a8:	4603      	mov	r3, r0
 80044aa:	61bb      	str	r3, [r7, #24]
    
    // Coefficient of variation = (std_dev / mean) * 100%
    float std_dev = sqrtf(variance);
 80044ac:	69b8      	ldr	r0, [r7, #24]
 80044ae:	f004 fe0a 	bl	80090c6 <sqrtf>
 80044b2:	60b8      	str	r0, [r7, #8]
    return (std_dev / avg) * 100.0f;
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	68b8      	ldr	r0, [r7, #8]
 80044b8:	f7fc fd18 	bl	8000eec <__aeabi_fdiv>
 80044bc:	4603      	mov	r3, r0
 80044be:	4904      	ldr	r1, [pc, #16]	@ (80044d0 <CalculateCV+0xcc>)
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fc fc5f 	bl	8000d84 <__aeabi_fmul>
 80044c6:	4603      	mov	r3, r0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	42c80000 	.word	0x42c80000

080044d4 <CalculateAverage>:

float CalculateAverage(float* data, int count) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
    float sum = 0;
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < count; i++) {
 80044e4:	2300      	movs	r3, #0
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	e00d      	b.n	8004506 <CalculateAverage+0x32>
        sum += data[i];
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4619      	mov	r1, r3
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f7fc fb3c 	bl	8000b74 <__addsf3>
 80044fc:	4603      	mov	r3, r0
 80044fe:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < count; i++) {
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	3301      	adds	r3, #1
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	dbed      	blt.n	80044ea <CalculateAverage+0x16>
    }
    return sum / count;
 800450e:	6838      	ldr	r0, [r7, #0]
 8004510:	f7fc fbe4 	bl	8000cdc <__aeabi_i2f>
 8004514:	4603      	mov	r3, r0
 8004516:	4619      	mov	r1, r3
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f7fc fce7 	bl	8000eec <__aeabi_fdiv>
 800451e:	4603      	mov	r3, r0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <TestCalibrationResult>:

void TestCalibrationResult(void) {
 8004528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452a:	b087      	sub	sp, #28
 800452c:	af02      	add	r7, sp, #8
    printf("Test 5 lan voi R0 moi...\r\n");
 800452e:	4818      	ldr	r0, [pc, #96]	@ (8004590 <TestCalibrationResult+0x68>)
 8004530:	f001 f91c 	bl	800576c <puts>
    
    for(int i = 0; i < 5; i++) {
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e022      	b.n	8004580 <TestCalibrationResult+0x58>
        ProcessAllSensors();
 800453a:	f7ff faf9 	bl	8003b30 <ProcessAllSensors>
        
        float nh3_ppm = GetNH3_PPM();
 800453e:	f000 f89f 	bl	8004680 <GetNH3_PPM>
 8004542:	60b8      	str	r0, [r7, #8]
        float h2s_ppm = GetH2S_PPM();
 8004544:	f000 f8ae 	bl	80046a4 <GetH2S_PPM>
 8004548:	6078      	str	r0, [r7, #4]
        
        printf("Test %d: NH3=%.1f ppm, H2S=%.1f ppm\r\n", i+1, nh3_ppm, h2s_ppm);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1c5e      	adds	r6, r3, #1
 800454e:	68b8      	ldr	r0, [r7, #8]
 8004550:	f7fb ff6a 	bl	8000428 <__aeabi_f2d>
 8004554:	4604      	mov	r4, r0
 8004556:	460d      	mov	r5, r1
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7fb ff65 	bl	8000428 <__aeabi_f2d>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	e9cd 2300 	strd	r2, r3, [sp]
 8004566:	4622      	mov	r2, r4
 8004568:	462b      	mov	r3, r5
 800456a:	4631      	mov	r1, r6
 800456c:	4809      	ldr	r0, [pc, #36]	@ (8004594 <TestCalibrationResult+0x6c>)
 800456e:	f001 f895 	bl	800569c <iprintf>
        
        HAL_Delay(3000);
 8004572:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004576:	f7fd fa6f 	bl	8001a58 <HAL_Delay>
    for(int i = 0; i < 5; i++) {
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3301      	adds	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b04      	cmp	r3, #4
 8004584:	ddd9      	ble.n	800453a <TestCalibrationResult+0x12>
    }
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004590:	0800aba8 	.word	0x0800aba8
 8004594:	0800abc4 	.word	0x0800abc4

08004598 <SaveCalibrationToFlash>:

void SaveCalibrationToFlash(float mq137_r0, float mq136_r0) {
 8004598:	b5b0      	push	{r4, r5, r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
    // TODO: Implement Flash save
    printf("💾 Luu R0 vao Flash: MQ137=%.1f, MQ136=%.1f\r\n", mq137_r0, mq136_r0);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fb ff40 	bl	8000428 <__aeabi_f2d>
 80045a8:	4604      	mov	r4, r0
 80045aa:	460d      	mov	r5, r1
 80045ac:	6838      	ldr	r0, [r7, #0]
 80045ae:	f7fb ff3b 	bl	8000428 <__aeabi_f2d>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	e9cd 2300 	strd	r2, r3, [sp]
 80045ba:	4622      	mov	r2, r4
 80045bc:	462b      	mov	r3, r5
 80045be:	4803      	ldr	r0, [pc, #12]	@ (80045cc <SaveCalibrationToFlash+0x34>)
 80045c0:	f001 f86c 	bl	800569c <iprintf>
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bdb0      	pop	{r4, r5, r7, pc}
 80045cc:	0800abec 	.word	0x0800abec

080045d0 <SetManualR0>:

// =============================================================================
// MANUAL R0 SETTING
// =============================================================================

void SetManualR0(float mq137_r0, float mq136_r0) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
    printf("\r\nTHIET LAP R0 THU CONG:\r\n");
 80045da:	4821      	ldr	r0, [pc, #132]	@ (8004660 <SetManualR0+0x90>)
 80045dc:	f001 f8c6 	bl	800576c <puts>
    
    if(mq137_r0 > 5000.0f && mq137_r0 < 300000.0f) {
 80045e0:	4920      	ldr	r1, [pc, #128]	@ (8004664 <SetManualR0+0x94>)
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fc fd8a 	bl	80010fc <__aeabi_fcmpgt>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d012      	beq.n	8004614 <SetManualR0+0x44>
 80045ee:	491e      	ldr	r1, [pc, #120]	@ (8004668 <SetManualR0+0x98>)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fc fd65 	bl	80010c0 <__aeabi_fcmplt>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <SetManualR0+0x44>
        g_sensor_system.mq137.base.r0_value = mq137_r0;
 80045fc:	4a1b      	ldr	r2, [pc, #108]	@ (800466c <SetManualR0+0x9c>)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6353      	str	r3, [r2, #52]	@ 0x34
        printf("✅ MQ137 R0 = %.1f Ω\r\n", mq137_r0);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fb ff10 	bl	8000428 <__aeabi_f2d>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4818      	ldr	r0, [pc, #96]	@ (8004670 <SetManualR0+0xa0>)
 800460e:	f001 f845 	bl	800569c <iprintf>
 8004612:	e002      	b.n	800461a <SetManualR0+0x4a>
    } else {
        printf("❌ MQ137 R0 khong hop le\r\n");
 8004614:	4817      	ldr	r0, [pc, #92]	@ (8004674 <SetManualR0+0xa4>)
 8004616:	f001 f8a9 	bl	800576c <puts>
    }
    
    if(mq136_r0 > 5000.0f && mq136_r0 < 300000.0f) {
 800461a:	4912      	ldr	r1, [pc, #72]	@ (8004664 <SetManualR0+0x94>)
 800461c:	6838      	ldr	r0, [r7, #0]
 800461e:	f7fc fd6d 	bl	80010fc <__aeabi_fcmpgt>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <SetManualR0+0x80>
 8004628:	490f      	ldr	r1, [pc, #60]	@ (8004668 <SetManualR0+0x98>)
 800462a:	6838      	ldr	r0, [r7, #0]
 800462c:	f7fc fd48 	bl	80010c0 <__aeabi_fcmplt>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00c      	beq.n	8004650 <SetManualR0+0x80>
        g_sensor_system.mq136.base.r0_value = mq136_r0;
 8004636:	4a0d      	ldr	r2, [pc, #52]	@ (800466c <SetManualR0+0x9c>)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
        printf("✅ MQ136 R0 = %.1f Ω\r\n", mq136_r0);
 800463e:	6838      	ldr	r0, [r7, #0]
 8004640:	f7fb fef2 	bl	8000428 <__aeabi_f2d>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	480b      	ldr	r0, [pc, #44]	@ (8004678 <SetManualR0+0xa8>)
 800464a:	f001 f827 	bl	800569c <iprintf>
 800464e:	e003      	b.n	8004658 <SetManualR0+0x88>
    } else {
        printf("❌ MQ136 R0 khong hop le\r\n");
 8004650:	480a      	ldr	r0, [pc, #40]	@ (800467c <SetManualR0+0xac>)
 8004652:	f001 f88b 	bl	800576c <puts>
    }
}
 8004656:	bf00      	nop
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	0800ad18 	.word	0x0800ad18
 8004664:	459c4000 	.word	0x459c4000
 8004668:	48927c00 	.word	0x48927c00
 800466c:	20000350 	.word	0x20000350
 8004670:	0800ad34 	.word	0x0800ad34
 8004674:	0800ad50 	.word	0x0800ad50
 8004678:	0800ad6c 	.word	0x0800ad6c
 800467c:	0800ad88 	.word	0x0800ad88

08004680 <GetNH3_PPM>:
// =============================================================================

/**
 * @brief Lấy nồng độ NH3 hiện tại
 */
float GetNH3_PPM(void) {
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
    return g_sensor_system.mq137.base.is_valid ? g_sensor_system.mq137.gas_ppm : 0.0f;
 8004684:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <GetNH3_PPM+0x20>)
 8004686:	7cdb      	ldrb	r3, [r3, #19]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <GetNH3_PPM+0x12>
 800468c:	4b04      	ldr	r3, [pc, #16]	@ (80046a0 <GetNH3_PPM+0x20>)
 800468e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004690:	e001      	b.n	8004696 <GetNH3_PPM+0x16>
 8004692:	f04f 0300 	mov.w	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000350 	.word	0x20000350

080046a4 <GetH2S_PPM>:

/**
 * @brief Lấy nồng độ CO2 hiện tại
 */
float GetH2S_PPM(void) {
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
    return g_sensor_system.mq136.base.is_valid ? g_sensor_system.mq136.gas_ppm : 0.0f;
 80046a8:	4b07      	ldr	r3, [pc, #28]	@ (80046c8 <GetH2S_PPM+0x24>)
 80046aa:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <GetH2S_PPM+0x16>
 80046b2:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <GetH2S_PPM+0x24>)
 80046b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80046b8:	e001      	b.n	80046be <GetH2S_PPM+0x1a>
 80046ba:	f04f 0300 	mov.w	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000350 	.word	0x20000350

080046cc <GetNH3AlarmLevel>:

/**
 * @brief Lấy mức cảnh báo NH3
 */
AlarmLevel_t GetNH3AlarmLevel(void) {
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
    return g_sensor_system.mq137.alarm_level;
 80046d0:	4b03      	ldr	r3, [pc, #12]	@ (80046e0 <GetNH3AlarmLevel+0x14>)
 80046d2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000350 	.word	0x20000350

080046e4 <GetH2SAlarmLevel>:

/**
 * @brief Lấy mức cảnh báo CO2
 */
AlarmLevel_t GetH2SAlarmLevel(void) {
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
    return g_sensor_system.mq136.alarm_level;
 80046e8:	4b03      	ldr	r3, [pc, #12]	@ (80046f8 <GetH2SAlarmLevel+0x14>)
 80046ea:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000350 	.word	0x20000350

080046fc <GetSystemAlarmLevel>:

/**
 * @brief Lấy mức cảnh báo tổng thể
 */
AlarmLevel_t GetSystemAlarmLevel(void) {
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
    return g_sensor_system.system_alarm;
 8004700:	4b03      	ldr	r3, [pc, #12]	@ (8004710 <GetSystemAlarmLevel+0x14>)
 8004702:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
}
 8004706:	4618      	mov	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000350 	.word	0x20000350

08004714 <GetSystemStatus>:

/**
 * @brief Lấy trạng thái hệ thống
 */
uint8_t GetSystemStatus(void) {
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
    return g_sensor_system.system_status;
 8004718:	4b03      	ldr	r3, [pc, #12]	@ (8004728 <GetSystemStatus+0x14>)
 800471a:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
}
 800471e:	4618      	mov	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000350 	.word	0x20000350

0800472c <SaveToHistory>:
/**
 * @brief Lưu dữ liệu vào buffer lịch sử
 */
void SaveToHistory(void) {
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
    history_buffer[history_index] = g_sensor_system;
 8004730:	4b12      	ldr	r3, [pc, #72]	@ (800477c <SaveToHistory+0x50>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	4619      	mov	r1, r3
 8004736:	4a12      	ldr	r2, [pc, #72]	@ (8004780 <SaveToHistory+0x54>)
 8004738:	460b      	mov	r3, r1
 800473a:	019b      	lsls	r3, r3, #6
 800473c:	440b      	add	r3, r1
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	4a10      	ldr	r2, [pc, #64]	@ (8004784 <SaveToHistory+0x58>)
 8004744:	4618      	mov	r0, r3
 8004746:	4611      	mov	r1, r2
 8004748:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800474c:	461a      	mov	r2, r3
 800474e:	f001 f99a 	bl	8005a86 <memcpy>
    history_index = (history_index + 1) % HISTORY_SIZE;
 8004752:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <SaveToHistory+0x50>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	4b0b      	ldr	r3, [pc, #44]	@ (8004788 <SaveToHistory+0x5c>)
 800475a:	fb83 1302 	smull	r1, r3, r3, r2
 800475e:	4413      	add	r3, r2
 8004760:	1159      	asrs	r1, r3, #5
 8004762:	17d3      	asrs	r3, r2, #31
 8004764:	1ac9      	subs	r1, r1, r3
 8004766:	460b      	mov	r3, r1
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	1a5b      	subs	r3, r3, r1
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	1ad1      	subs	r1, r2, r3
 8004770:	b2ca      	uxtb	r2, r1
 8004772:	4b02      	ldr	r3, [pc, #8]	@ (800477c <SaveToHistory+0x50>)
 8004774:	701a      	strb	r2, [r3, #0]
}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20004144 	.word	0x20004144
 8004780:	20000454 	.word	0x20000454
 8004784:	20000350 	.word	0x20000350
 8004788:	88888889 	.word	0x88888889

0800478c <UpdateSystemStatus>:
/**
 * @brief Cập nhật trạng thái hệ thống
 */         

void UpdateSystemStatus(void) {
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
    uint8_t valid_sensors = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	71fb      	strb	r3, [r7, #7]
    AlarmLevel_t max_alarm = ALARM_NORMAL;
 8004796:	2300      	movs	r3, #0
 8004798:	71bb      	strb	r3, [r7, #6]
    
    // Đếm cảm biến hợp lệ và tìm mức cảnh báo cao nhất
    if(g_sensor_system.mq137.base.is_enabled && g_sensor_system.mq137.base.is_valid) {
 800479a:	4b28      	ldr	r3, [pc, #160]	@ (800483c <UpdateSystemStatus+0xb0>)
 800479c:	7c9b      	ldrb	r3, [r3, #18]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d010      	beq.n	80047c4 <UpdateSystemStatus+0x38>
 80047a2:	4b26      	ldr	r3, [pc, #152]	@ (800483c <UpdateSystemStatus+0xb0>)
 80047a4:	7cdb      	ldrb	r3, [r3, #19]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <UpdateSystemStatus+0x38>
        valid_sensors++;
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	3301      	adds	r3, #1
 80047ae:	71fb      	strb	r3, [r7, #7]
        if(g_sensor_system.mq137.alarm_level > max_alarm) {
 80047b0:	4b22      	ldr	r3, [pc, #136]	@ (800483c <UpdateSystemStatus+0xb0>)
 80047b2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80047b6:	79ba      	ldrb	r2, [r7, #6]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d203      	bcs.n	80047c4 <UpdateSystemStatus+0x38>
            max_alarm = g_sensor_system.mq137.alarm_level;
 80047bc:	4b1f      	ldr	r3, [pc, #124]	@ (800483c <UpdateSystemStatus+0xb0>)
 80047be:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80047c2:	71bb      	strb	r3, [r7, #6]
        }
    }
    
    if(g_sensor_system.mq136.base.is_enabled && g_sensor_system.mq136.base.is_valid) {
 80047c4:	4b1d      	ldr	r3, [pc, #116]	@ (800483c <UpdateSystemStatus+0xb0>)
 80047c6:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d011      	beq.n	80047f2 <UpdateSystemStatus+0x66>
 80047ce:	4b1b      	ldr	r3, [pc, #108]	@ (800483c <UpdateSystemStatus+0xb0>)
 80047d0:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00c      	beq.n	80047f2 <UpdateSystemStatus+0x66>
        valid_sensors++;
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	3301      	adds	r3, #1
 80047dc:	71fb      	strb	r3, [r7, #7]
        if(g_sensor_system.mq136.alarm_level > max_alarm) {
 80047de:	4b17      	ldr	r3, [pc, #92]	@ (800483c <UpdateSystemStatus+0xb0>)
 80047e0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80047e4:	79ba      	ldrb	r2, [r7, #6]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d203      	bcs.n	80047f2 <UpdateSystemStatus+0x66>
            max_alarm = g_sensor_system.mq136.alarm_level;
 80047ea:	4b14      	ldr	r3, [pc, #80]	@ (800483c <UpdateSystemStatus+0xb0>)
 80047ec:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80047f0:	71bb      	strb	r3, [r7, #6]
        }
    }
    
    // Cập nhật trạng thái hệ thống
    if(valid_sensors == 2) {
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d104      	bne.n	8004802 <UpdateSystemStatus+0x76>
        g_sensor_system.system_status = 3; // Tối ưu
 80047f8:	4b10      	ldr	r3, [pc, #64]	@ (800483c <UpdateSystemStatus+0xb0>)
 80047fa:	2203      	movs	r2, #3
 80047fc:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
 8004800:	e012      	b.n	8004828 <UpdateSystemStatus+0x9c>
    } else if(valid_sensors == 1) {
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d104      	bne.n	8004812 <UpdateSystemStatus+0x86>
        g_sensor_system.system_status = 2; // Tốt
 8004808:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <UpdateSystemStatus+0xb0>)
 800480a:	2202      	movs	r2, #2
 800480c:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
 8004810:	e00a      	b.n	8004828 <UpdateSystemStatus+0x9c>
    } else {
        g_sensor_system.system_status = 0; // Lỗi
 8004812:	4b0a      	ldr	r3, [pc, #40]	@ (800483c <UpdateSystemStatus+0xb0>)
 8004814:	2200      	movs	r2, #0
 8004816:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
        g_sensor_system.error_count++;
 800481a:	4b08      	ldr	r3, [pc, #32]	@ (800483c <UpdateSystemStatus+0xb0>)
 800481c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8004820:	3301      	adds	r3, #1
 8004822:	4a06      	ldr	r2, [pc, #24]	@ (800483c <UpdateSystemStatus+0xb0>)
 8004824:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
    }
    
    g_sensor_system.system_alarm = max_alarm;
 8004828:	4a04      	ldr	r2, [pc, #16]	@ (800483c <UpdateSystemStatus+0xb0>)
 800482a:	79bb      	ldrb	r3, [r7, #6]
 800482c:	f882 30f2 	strb.w	r3, [r2, #242]	@ 0xf2
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000350 	.word	0x20000350

08004840 <__cvt>:
 8004840:	2b00      	cmp	r3, #0
 8004842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004846:	461d      	mov	r5, r3
 8004848:	bfbb      	ittet	lt
 800484a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800484e:	461d      	movlt	r5, r3
 8004850:	2300      	movge	r3, #0
 8004852:	232d      	movlt	r3, #45	@ 0x2d
 8004854:	b088      	sub	sp, #32
 8004856:	4614      	mov	r4, r2
 8004858:	bfb8      	it	lt
 800485a:	4614      	movlt	r4, r2
 800485c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800485e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004860:	7013      	strb	r3, [r2, #0]
 8004862:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004864:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004868:	f023 0820 	bic.w	r8, r3, #32
 800486c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004870:	d005      	beq.n	800487e <__cvt+0x3e>
 8004872:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004876:	d100      	bne.n	800487a <__cvt+0x3a>
 8004878:	3601      	adds	r6, #1
 800487a:	2302      	movs	r3, #2
 800487c:	e000      	b.n	8004880 <__cvt+0x40>
 800487e:	2303      	movs	r3, #3
 8004880:	aa07      	add	r2, sp, #28
 8004882:	9204      	str	r2, [sp, #16]
 8004884:	aa06      	add	r2, sp, #24
 8004886:	e9cd a202 	strd	sl, r2, [sp, #8]
 800488a:	e9cd 3600 	strd	r3, r6, [sp]
 800488e:	4622      	mov	r2, r4
 8004890:	462b      	mov	r3, r5
 8004892:	f001 f995 	bl	8005bc0 <_dtoa_r>
 8004896:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800489a:	4607      	mov	r7, r0
 800489c:	d119      	bne.n	80048d2 <__cvt+0x92>
 800489e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80048a0:	07db      	lsls	r3, r3, #31
 80048a2:	d50e      	bpl.n	80048c2 <__cvt+0x82>
 80048a4:	eb00 0906 	add.w	r9, r0, r6
 80048a8:	2200      	movs	r2, #0
 80048aa:	2300      	movs	r3, #0
 80048ac:	4620      	mov	r0, r4
 80048ae:	4629      	mov	r1, r5
 80048b0:	f7fc f87a 	bl	80009a8 <__aeabi_dcmpeq>
 80048b4:	b108      	cbz	r0, 80048ba <__cvt+0x7a>
 80048b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80048ba:	2230      	movs	r2, #48	@ 0x30
 80048bc:	9b07      	ldr	r3, [sp, #28]
 80048be:	454b      	cmp	r3, r9
 80048c0:	d31e      	bcc.n	8004900 <__cvt+0xc0>
 80048c2:	4638      	mov	r0, r7
 80048c4:	9b07      	ldr	r3, [sp, #28]
 80048c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80048c8:	1bdb      	subs	r3, r3, r7
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	b008      	add	sp, #32
 80048ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048d6:	eb00 0906 	add.w	r9, r0, r6
 80048da:	d1e5      	bne.n	80048a8 <__cvt+0x68>
 80048dc:	7803      	ldrb	r3, [r0, #0]
 80048de:	2b30      	cmp	r3, #48	@ 0x30
 80048e0:	d10a      	bne.n	80048f8 <__cvt+0xb8>
 80048e2:	2200      	movs	r2, #0
 80048e4:	2300      	movs	r3, #0
 80048e6:	4620      	mov	r0, r4
 80048e8:	4629      	mov	r1, r5
 80048ea:	f7fc f85d 	bl	80009a8 <__aeabi_dcmpeq>
 80048ee:	b918      	cbnz	r0, 80048f8 <__cvt+0xb8>
 80048f0:	f1c6 0601 	rsb	r6, r6, #1
 80048f4:	f8ca 6000 	str.w	r6, [sl]
 80048f8:	f8da 3000 	ldr.w	r3, [sl]
 80048fc:	4499      	add	r9, r3
 80048fe:	e7d3      	b.n	80048a8 <__cvt+0x68>
 8004900:	1c59      	adds	r1, r3, #1
 8004902:	9107      	str	r1, [sp, #28]
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e7d9      	b.n	80048bc <__cvt+0x7c>

08004908 <__exponent>:
 8004908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800490a:	2900      	cmp	r1, #0
 800490c:	bfb6      	itet	lt
 800490e:	232d      	movlt	r3, #45	@ 0x2d
 8004910:	232b      	movge	r3, #43	@ 0x2b
 8004912:	4249      	neglt	r1, r1
 8004914:	2909      	cmp	r1, #9
 8004916:	7002      	strb	r2, [r0, #0]
 8004918:	7043      	strb	r3, [r0, #1]
 800491a:	dd29      	ble.n	8004970 <__exponent+0x68>
 800491c:	f10d 0307 	add.w	r3, sp, #7
 8004920:	461d      	mov	r5, r3
 8004922:	270a      	movs	r7, #10
 8004924:	fbb1 f6f7 	udiv	r6, r1, r7
 8004928:	461a      	mov	r2, r3
 800492a:	fb07 1416 	mls	r4, r7, r6, r1
 800492e:	3430      	adds	r4, #48	@ 0x30
 8004930:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004934:	460c      	mov	r4, r1
 8004936:	2c63      	cmp	r4, #99	@ 0x63
 8004938:	4631      	mov	r1, r6
 800493a:	f103 33ff 	add.w	r3, r3, #4294967295
 800493e:	dcf1      	bgt.n	8004924 <__exponent+0x1c>
 8004940:	3130      	adds	r1, #48	@ 0x30
 8004942:	1e94      	subs	r4, r2, #2
 8004944:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004948:	4623      	mov	r3, r4
 800494a:	1c41      	adds	r1, r0, #1
 800494c:	42ab      	cmp	r3, r5
 800494e:	d30a      	bcc.n	8004966 <__exponent+0x5e>
 8004950:	f10d 0309 	add.w	r3, sp, #9
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	42ac      	cmp	r4, r5
 8004958:	bf88      	it	hi
 800495a:	2300      	movhi	r3, #0
 800495c:	3302      	adds	r3, #2
 800495e:	4403      	add	r3, r0
 8004960:	1a18      	subs	r0, r3, r0
 8004962:	b003      	add	sp, #12
 8004964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004966:	f813 6b01 	ldrb.w	r6, [r3], #1
 800496a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800496e:	e7ed      	b.n	800494c <__exponent+0x44>
 8004970:	2330      	movs	r3, #48	@ 0x30
 8004972:	3130      	adds	r1, #48	@ 0x30
 8004974:	7083      	strb	r3, [r0, #2]
 8004976:	70c1      	strb	r1, [r0, #3]
 8004978:	1d03      	adds	r3, r0, #4
 800497a:	e7f1      	b.n	8004960 <__exponent+0x58>

0800497c <_printf_float>:
 800497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004980:	b091      	sub	sp, #68	@ 0x44
 8004982:	460c      	mov	r4, r1
 8004984:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004988:	4616      	mov	r6, r2
 800498a:	461f      	mov	r7, r3
 800498c:	4605      	mov	r5, r0
 800498e:	f000 fff5 	bl	800597c <_localeconv_r>
 8004992:	6803      	ldr	r3, [r0, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	9308      	str	r3, [sp, #32]
 8004998:	f7fb fbda 	bl	8000150 <strlen>
 800499c:	2300      	movs	r3, #0
 800499e:	930e      	str	r3, [sp, #56]	@ 0x38
 80049a0:	f8d8 3000 	ldr.w	r3, [r8]
 80049a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80049a6:	3307      	adds	r3, #7
 80049a8:	f023 0307 	bic.w	r3, r3, #7
 80049ac:	f103 0208 	add.w	r2, r3, #8
 80049b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049b4:	f8d4 b000 	ldr.w	fp, [r4]
 80049b8:	f8c8 2000 	str.w	r2, [r8]
 80049bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80049c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049c6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80049ca:	f04f 32ff 	mov.w	r2, #4294967295
 80049ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80049d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80049d6:	4b9c      	ldr	r3, [pc, #624]	@ (8004c48 <_printf_float+0x2cc>)
 80049d8:	f7fc f818 	bl	8000a0c <__aeabi_dcmpun>
 80049dc:	bb70      	cbnz	r0, 8004a3c <_printf_float+0xc0>
 80049de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80049e2:	f04f 32ff 	mov.w	r2, #4294967295
 80049e6:	4b98      	ldr	r3, [pc, #608]	@ (8004c48 <_printf_float+0x2cc>)
 80049e8:	f7fb fff2 	bl	80009d0 <__aeabi_dcmple>
 80049ec:	bb30      	cbnz	r0, 8004a3c <_printf_float+0xc0>
 80049ee:	2200      	movs	r2, #0
 80049f0:	2300      	movs	r3, #0
 80049f2:	4640      	mov	r0, r8
 80049f4:	4649      	mov	r1, r9
 80049f6:	f7fb ffe1 	bl	80009bc <__aeabi_dcmplt>
 80049fa:	b110      	cbz	r0, 8004a02 <_printf_float+0x86>
 80049fc:	232d      	movs	r3, #45	@ 0x2d
 80049fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a02:	4a92      	ldr	r2, [pc, #584]	@ (8004c4c <_printf_float+0x2d0>)
 8004a04:	4b92      	ldr	r3, [pc, #584]	@ (8004c50 <_printf_float+0x2d4>)
 8004a06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a0a:	bf94      	ite	ls
 8004a0c:	4690      	movls	r8, r2
 8004a0e:	4698      	movhi	r8, r3
 8004a10:	2303      	movs	r3, #3
 8004a12:	f04f 0900 	mov.w	r9, #0
 8004a16:	6123      	str	r3, [r4, #16]
 8004a18:	f02b 0304 	bic.w	r3, fp, #4
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	4633      	mov	r3, r6
 8004a20:	4621      	mov	r1, r4
 8004a22:	4628      	mov	r0, r5
 8004a24:	9700      	str	r7, [sp, #0]
 8004a26:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004a28:	f000 f9d4 	bl	8004dd4 <_printf_common>
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	f040 8090 	bne.w	8004b52 <_printf_float+0x1d6>
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
 8004a36:	b011      	add	sp, #68	@ 0x44
 8004a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	4640      	mov	r0, r8
 8004a42:	4649      	mov	r1, r9
 8004a44:	f7fb ffe2 	bl	8000a0c <__aeabi_dcmpun>
 8004a48:	b148      	cbz	r0, 8004a5e <_printf_float+0xe2>
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bfb8      	it	lt
 8004a50:	232d      	movlt	r3, #45	@ 0x2d
 8004a52:	4a80      	ldr	r2, [pc, #512]	@ (8004c54 <_printf_float+0x2d8>)
 8004a54:	bfb8      	it	lt
 8004a56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c58 <_printf_float+0x2dc>)
 8004a5c:	e7d3      	b.n	8004a06 <_printf_float+0x8a>
 8004a5e:	6863      	ldr	r3, [r4, #4]
 8004a60:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	d13f      	bne.n	8004ae8 <_printf_float+0x16c>
 8004a68:	2306      	movs	r3, #6
 8004a6a:	6063      	str	r3, [r4, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004a72:	6023      	str	r3, [r4, #0]
 8004a74:	9206      	str	r2, [sp, #24]
 8004a76:	aa0e      	add	r2, sp, #56	@ 0x38
 8004a78:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004a7c:	aa0d      	add	r2, sp, #52	@ 0x34
 8004a7e:	9203      	str	r2, [sp, #12]
 8004a80:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004a84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a88:	6863      	ldr	r3, [r4, #4]
 8004a8a:	4642      	mov	r2, r8
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	4628      	mov	r0, r5
 8004a90:	464b      	mov	r3, r9
 8004a92:	910a      	str	r1, [sp, #40]	@ 0x28
 8004a94:	f7ff fed4 	bl	8004840 <__cvt>
 8004a98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004a9a:	4680      	mov	r8, r0
 8004a9c:	2947      	cmp	r1, #71	@ 0x47
 8004a9e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004aa0:	d128      	bne.n	8004af4 <_printf_float+0x178>
 8004aa2:	1cc8      	adds	r0, r1, #3
 8004aa4:	db02      	blt.n	8004aac <_printf_float+0x130>
 8004aa6:	6863      	ldr	r3, [r4, #4]
 8004aa8:	4299      	cmp	r1, r3
 8004aaa:	dd40      	ble.n	8004b2e <_printf_float+0x1b2>
 8004aac:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ab0:	fa5f fa8a 	uxtb.w	sl, sl
 8004ab4:	4652      	mov	r2, sl
 8004ab6:	3901      	subs	r1, #1
 8004ab8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004abc:	910d      	str	r1, [sp, #52]	@ 0x34
 8004abe:	f7ff ff23 	bl	8004908 <__exponent>
 8004ac2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ac4:	4681      	mov	r9, r0
 8004ac6:	1813      	adds	r3, r2, r0
 8004ac8:	2a01      	cmp	r2, #1
 8004aca:	6123      	str	r3, [r4, #16]
 8004acc:	dc02      	bgt.n	8004ad4 <_printf_float+0x158>
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	07d2      	lsls	r2, r2, #31
 8004ad2:	d501      	bpl.n	8004ad8 <_printf_float+0x15c>
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	6123      	str	r3, [r4, #16]
 8004ad8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d09e      	beq.n	8004a1e <_printf_float+0xa2>
 8004ae0:	232d      	movs	r3, #45	@ 0x2d
 8004ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ae6:	e79a      	b.n	8004a1e <_printf_float+0xa2>
 8004ae8:	2947      	cmp	r1, #71	@ 0x47
 8004aea:	d1bf      	bne.n	8004a6c <_printf_float+0xf0>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1bd      	bne.n	8004a6c <_printf_float+0xf0>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e7ba      	b.n	8004a6a <_printf_float+0xee>
 8004af4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004af8:	d9dc      	bls.n	8004ab4 <_printf_float+0x138>
 8004afa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004afe:	d118      	bne.n	8004b32 <_printf_float+0x1b6>
 8004b00:	2900      	cmp	r1, #0
 8004b02:	6863      	ldr	r3, [r4, #4]
 8004b04:	dd0b      	ble.n	8004b1e <_printf_float+0x1a2>
 8004b06:	6121      	str	r1, [r4, #16]
 8004b08:	b913      	cbnz	r3, 8004b10 <_printf_float+0x194>
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	07d0      	lsls	r0, r2, #31
 8004b0e:	d502      	bpl.n	8004b16 <_printf_float+0x19a>
 8004b10:	3301      	adds	r3, #1
 8004b12:	440b      	add	r3, r1
 8004b14:	6123      	str	r3, [r4, #16]
 8004b16:	f04f 0900 	mov.w	r9, #0
 8004b1a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b1c:	e7dc      	b.n	8004ad8 <_printf_float+0x15c>
 8004b1e:	b913      	cbnz	r3, 8004b26 <_printf_float+0x1aa>
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	07d2      	lsls	r2, r2, #31
 8004b24:	d501      	bpl.n	8004b2a <_printf_float+0x1ae>
 8004b26:	3302      	adds	r3, #2
 8004b28:	e7f4      	b.n	8004b14 <_printf_float+0x198>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e7f2      	b.n	8004b14 <_printf_float+0x198>
 8004b2e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b34:	4299      	cmp	r1, r3
 8004b36:	db05      	blt.n	8004b44 <_printf_float+0x1c8>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	6121      	str	r1, [r4, #16]
 8004b3c:	07d8      	lsls	r0, r3, #31
 8004b3e:	d5ea      	bpl.n	8004b16 <_printf_float+0x19a>
 8004b40:	1c4b      	adds	r3, r1, #1
 8004b42:	e7e7      	b.n	8004b14 <_printf_float+0x198>
 8004b44:	2900      	cmp	r1, #0
 8004b46:	bfcc      	ite	gt
 8004b48:	2201      	movgt	r2, #1
 8004b4a:	f1c1 0202 	rsble	r2, r1, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	e7e0      	b.n	8004b14 <_printf_float+0x198>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	055a      	lsls	r2, r3, #21
 8004b56:	d407      	bmi.n	8004b68 <_printf_float+0x1ec>
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	4642      	mov	r2, r8
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	4628      	mov	r0, r5
 8004b60:	47b8      	blx	r7
 8004b62:	3001      	adds	r0, #1
 8004b64:	d12b      	bne.n	8004bbe <_printf_float+0x242>
 8004b66:	e764      	b.n	8004a32 <_printf_float+0xb6>
 8004b68:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b6c:	f240 80dc 	bls.w	8004d28 <_printf_float+0x3ac>
 8004b70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b74:	2200      	movs	r2, #0
 8004b76:	2300      	movs	r3, #0
 8004b78:	f7fb ff16 	bl	80009a8 <__aeabi_dcmpeq>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d033      	beq.n	8004be8 <_printf_float+0x26c>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4631      	mov	r1, r6
 8004b84:	4628      	mov	r0, r5
 8004b86:	4a35      	ldr	r2, [pc, #212]	@ (8004c5c <_printf_float+0x2e0>)
 8004b88:	47b8      	blx	r7
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	f43f af51 	beq.w	8004a32 <_printf_float+0xb6>
 8004b90:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004b94:	4543      	cmp	r3, r8
 8004b96:	db02      	blt.n	8004b9e <_printf_float+0x222>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	07d8      	lsls	r0, r3, #31
 8004b9c:	d50f      	bpl.n	8004bbe <_printf_float+0x242>
 8004b9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	47b8      	blx	r7
 8004ba8:	3001      	adds	r0, #1
 8004baa:	f43f af42 	beq.w	8004a32 <_printf_float+0xb6>
 8004bae:	f04f 0900 	mov.w	r9, #0
 8004bb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bb6:	f104 0a1a 	add.w	sl, r4, #26
 8004bba:	45c8      	cmp	r8, r9
 8004bbc:	dc09      	bgt.n	8004bd2 <_printf_float+0x256>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	079b      	lsls	r3, r3, #30
 8004bc2:	f100 8102 	bmi.w	8004dca <_printf_float+0x44e>
 8004bc6:	68e0      	ldr	r0, [r4, #12]
 8004bc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bca:	4298      	cmp	r0, r3
 8004bcc:	bfb8      	it	lt
 8004bce:	4618      	movlt	r0, r3
 8004bd0:	e731      	b.n	8004a36 <_printf_float+0xba>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	4652      	mov	r2, sl
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4628      	mov	r0, r5
 8004bda:	47b8      	blx	r7
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f43f af28 	beq.w	8004a32 <_printf_float+0xb6>
 8004be2:	f109 0901 	add.w	r9, r9, #1
 8004be6:	e7e8      	b.n	8004bba <_printf_float+0x23e>
 8004be8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	dc38      	bgt.n	8004c60 <_printf_float+0x2e4>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	4a19      	ldr	r2, [pc, #100]	@ (8004c5c <_printf_float+0x2e0>)
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	f43f af1a 	beq.w	8004a32 <_printf_float+0xb6>
 8004bfe:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004c02:	ea59 0303 	orrs.w	r3, r9, r3
 8004c06:	d102      	bne.n	8004c0e <_printf_float+0x292>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	07d9      	lsls	r1, r3, #31
 8004c0c:	d5d7      	bpl.n	8004bbe <_printf_float+0x242>
 8004c0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c12:	4631      	mov	r1, r6
 8004c14:	4628      	mov	r0, r5
 8004c16:	47b8      	blx	r7
 8004c18:	3001      	adds	r0, #1
 8004c1a:	f43f af0a 	beq.w	8004a32 <_printf_float+0xb6>
 8004c1e:	f04f 0a00 	mov.w	sl, #0
 8004c22:	f104 0b1a 	add.w	fp, r4, #26
 8004c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c28:	425b      	negs	r3, r3
 8004c2a:	4553      	cmp	r3, sl
 8004c2c:	dc01      	bgt.n	8004c32 <_printf_float+0x2b6>
 8004c2e:	464b      	mov	r3, r9
 8004c30:	e793      	b.n	8004b5a <_printf_float+0x1de>
 8004c32:	2301      	movs	r3, #1
 8004c34:	465a      	mov	r2, fp
 8004c36:	4631      	mov	r1, r6
 8004c38:	4628      	mov	r0, r5
 8004c3a:	47b8      	blx	r7
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	f43f aef8 	beq.w	8004a32 <_printf_float+0xb6>
 8004c42:	f10a 0a01 	add.w	sl, sl, #1
 8004c46:	e7ee      	b.n	8004c26 <_printf_float+0x2aa>
 8004c48:	7fefffff 	.word	0x7fefffff
 8004c4c:	0800adce 	.word	0x0800adce
 8004c50:	0800add2 	.word	0x0800add2
 8004c54:	0800add6 	.word	0x0800add6
 8004c58:	0800adda 	.word	0x0800adda
 8004c5c:	0800adde 	.word	0x0800adde
 8004c60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c62:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004c66:	4553      	cmp	r3, sl
 8004c68:	bfa8      	it	ge
 8004c6a:	4653      	movge	r3, sl
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	4699      	mov	r9, r3
 8004c70:	dc36      	bgt.n	8004ce0 <_printf_float+0x364>
 8004c72:	f04f 0b00 	mov.w	fp, #0
 8004c76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c7a:	f104 021a 	add.w	r2, r4, #26
 8004c7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c82:	eba3 0309 	sub.w	r3, r3, r9
 8004c86:	455b      	cmp	r3, fp
 8004c88:	dc31      	bgt.n	8004cee <_printf_float+0x372>
 8004c8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c8c:	459a      	cmp	sl, r3
 8004c8e:	dc3a      	bgt.n	8004d06 <_printf_float+0x38a>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	07da      	lsls	r2, r3, #31
 8004c94:	d437      	bmi.n	8004d06 <_printf_float+0x38a>
 8004c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c98:	ebaa 0903 	sub.w	r9, sl, r3
 8004c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c9e:	ebaa 0303 	sub.w	r3, sl, r3
 8004ca2:	4599      	cmp	r9, r3
 8004ca4:	bfa8      	it	ge
 8004ca6:	4699      	movge	r9, r3
 8004ca8:	f1b9 0f00 	cmp.w	r9, #0
 8004cac:	dc33      	bgt.n	8004d16 <_printf_float+0x39a>
 8004cae:	f04f 0800 	mov.w	r8, #0
 8004cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cb6:	f104 0b1a 	add.w	fp, r4, #26
 8004cba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cbc:	ebaa 0303 	sub.w	r3, sl, r3
 8004cc0:	eba3 0309 	sub.w	r3, r3, r9
 8004cc4:	4543      	cmp	r3, r8
 8004cc6:	f77f af7a 	ble.w	8004bbe <_printf_float+0x242>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	465a      	mov	r2, fp
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b8      	blx	r7
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f43f aeac 	beq.w	8004a32 <_printf_float+0xb6>
 8004cda:	f108 0801 	add.w	r8, r8, #1
 8004cde:	e7ec      	b.n	8004cba <_printf_float+0x33e>
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d1c2      	bne.n	8004c72 <_printf_float+0x2f6>
 8004cec:	e6a1      	b.n	8004a32 <_printf_float+0xb6>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	4631      	mov	r1, r6
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	920a      	str	r2, [sp, #40]	@ 0x28
 8004cf6:	47b8      	blx	r7
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	f43f ae9a 	beq.w	8004a32 <_printf_float+0xb6>
 8004cfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d00:	f10b 0b01 	add.w	fp, fp, #1
 8004d04:	e7bb      	b.n	8004c7e <_printf_float+0x302>
 8004d06:	4631      	mov	r1, r6
 8004d08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	d1c0      	bne.n	8004c96 <_printf_float+0x31a>
 8004d14:	e68d      	b.n	8004a32 <_printf_float+0xb6>
 8004d16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d18:	464b      	mov	r3, r9
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	4442      	add	r2, r8
 8004d20:	47b8      	blx	r7
 8004d22:	3001      	adds	r0, #1
 8004d24:	d1c3      	bne.n	8004cae <_printf_float+0x332>
 8004d26:	e684      	b.n	8004a32 <_printf_float+0xb6>
 8004d28:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d2c:	f1ba 0f01 	cmp.w	sl, #1
 8004d30:	dc01      	bgt.n	8004d36 <_printf_float+0x3ba>
 8004d32:	07db      	lsls	r3, r3, #31
 8004d34:	d536      	bpl.n	8004da4 <_printf_float+0x428>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4642      	mov	r2, r8
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b8      	blx	r7
 8004d40:	3001      	adds	r0, #1
 8004d42:	f43f ae76 	beq.w	8004a32 <_printf_float+0xb6>
 8004d46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	47b8      	blx	r7
 8004d50:	3001      	adds	r0, #1
 8004d52:	f43f ae6e 	beq.w	8004a32 <_printf_float+0xb6>
 8004d56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d62:	f7fb fe21 	bl	80009a8 <__aeabi_dcmpeq>
 8004d66:	b9c0      	cbnz	r0, 8004d9a <_printf_float+0x41e>
 8004d68:	4653      	mov	r3, sl
 8004d6a:	f108 0201 	add.w	r2, r8, #1
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	d10c      	bne.n	8004d92 <_printf_float+0x416>
 8004d78:	e65b      	b.n	8004a32 <_printf_float+0xb6>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	465a      	mov	r2, fp
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4628      	mov	r0, r5
 8004d82:	47b8      	blx	r7
 8004d84:	3001      	adds	r0, #1
 8004d86:	f43f ae54 	beq.w	8004a32 <_printf_float+0xb6>
 8004d8a:	f108 0801 	add.w	r8, r8, #1
 8004d8e:	45d0      	cmp	r8, sl
 8004d90:	dbf3      	blt.n	8004d7a <_printf_float+0x3fe>
 8004d92:	464b      	mov	r3, r9
 8004d94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004d98:	e6e0      	b.n	8004b5c <_printf_float+0x1e0>
 8004d9a:	f04f 0800 	mov.w	r8, #0
 8004d9e:	f104 0b1a 	add.w	fp, r4, #26
 8004da2:	e7f4      	b.n	8004d8e <_printf_float+0x412>
 8004da4:	2301      	movs	r3, #1
 8004da6:	4642      	mov	r2, r8
 8004da8:	e7e1      	b.n	8004d6e <_printf_float+0x3f2>
 8004daa:	2301      	movs	r3, #1
 8004dac:	464a      	mov	r2, r9
 8004dae:	4631      	mov	r1, r6
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b8      	blx	r7
 8004db4:	3001      	adds	r0, #1
 8004db6:	f43f ae3c 	beq.w	8004a32 <_printf_float+0xb6>
 8004dba:	f108 0801 	add.w	r8, r8, #1
 8004dbe:	68e3      	ldr	r3, [r4, #12]
 8004dc0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004dc2:	1a5b      	subs	r3, r3, r1
 8004dc4:	4543      	cmp	r3, r8
 8004dc6:	dcf0      	bgt.n	8004daa <_printf_float+0x42e>
 8004dc8:	e6fd      	b.n	8004bc6 <_printf_float+0x24a>
 8004dca:	f04f 0800 	mov.w	r8, #0
 8004dce:	f104 0919 	add.w	r9, r4, #25
 8004dd2:	e7f4      	b.n	8004dbe <_printf_float+0x442>

08004dd4 <_printf_common>:
 8004dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd8:	4616      	mov	r6, r2
 8004dda:	4698      	mov	r8, r3
 8004ddc:	688a      	ldr	r2, [r1, #8]
 8004dde:	690b      	ldr	r3, [r1, #16]
 8004de0:	4607      	mov	r7, r0
 8004de2:	4293      	cmp	r3, r2
 8004de4:	bfb8      	it	lt
 8004de6:	4613      	movlt	r3, r2
 8004de8:	6033      	str	r3, [r6, #0]
 8004dea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dee:	460c      	mov	r4, r1
 8004df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004df4:	b10a      	cbz	r2, 8004dfa <_printf_common+0x26>
 8004df6:	3301      	adds	r3, #1
 8004df8:	6033      	str	r3, [r6, #0]
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	0699      	lsls	r1, r3, #26
 8004dfe:	bf42      	ittt	mi
 8004e00:	6833      	ldrmi	r3, [r6, #0]
 8004e02:	3302      	addmi	r3, #2
 8004e04:	6033      	strmi	r3, [r6, #0]
 8004e06:	6825      	ldr	r5, [r4, #0]
 8004e08:	f015 0506 	ands.w	r5, r5, #6
 8004e0c:	d106      	bne.n	8004e1c <_printf_common+0x48>
 8004e0e:	f104 0a19 	add.w	sl, r4, #25
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	6832      	ldr	r2, [r6, #0]
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	42ab      	cmp	r3, r5
 8004e1a:	dc2b      	bgt.n	8004e74 <_printf_common+0xa0>
 8004e1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e20:	6822      	ldr	r2, [r4, #0]
 8004e22:	3b00      	subs	r3, #0
 8004e24:	bf18      	it	ne
 8004e26:	2301      	movne	r3, #1
 8004e28:	0692      	lsls	r2, r2, #26
 8004e2a:	d430      	bmi.n	8004e8e <_printf_common+0xba>
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	4638      	mov	r0, r7
 8004e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e34:	47c8      	blx	r9
 8004e36:	3001      	adds	r0, #1
 8004e38:	d023      	beq.n	8004e82 <_printf_common+0xae>
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	6922      	ldr	r2, [r4, #16]
 8004e3e:	f003 0306 	and.w	r3, r3, #6
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	bf14      	ite	ne
 8004e46:	2500      	movne	r5, #0
 8004e48:	6833      	ldreq	r3, [r6, #0]
 8004e4a:	f04f 0600 	mov.w	r6, #0
 8004e4e:	bf08      	it	eq
 8004e50:	68e5      	ldreq	r5, [r4, #12]
 8004e52:	f104 041a 	add.w	r4, r4, #26
 8004e56:	bf08      	it	eq
 8004e58:	1aed      	subeq	r5, r5, r3
 8004e5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e5e:	bf08      	it	eq
 8004e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e64:	4293      	cmp	r3, r2
 8004e66:	bfc4      	itt	gt
 8004e68:	1a9b      	subgt	r3, r3, r2
 8004e6a:	18ed      	addgt	r5, r5, r3
 8004e6c:	42b5      	cmp	r5, r6
 8004e6e:	d11a      	bne.n	8004ea6 <_printf_common+0xd2>
 8004e70:	2000      	movs	r0, #0
 8004e72:	e008      	b.n	8004e86 <_printf_common+0xb2>
 8004e74:	2301      	movs	r3, #1
 8004e76:	4652      	mov	r2, sl
 8004e78:	4641      	mov	r1, r8
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	47c8      	blx	r9
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d103      	bne.n	8004e8a <_printf_common+0xb6>
 8004e82:	f04f 30ff 	mov.w	r0, #4294967295
 8004e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8a:	3501      	adds	r5, #1
 8004e8c:	e7c1      	b.n	8004e12 <_printf_common+0x3e>
 8004e8e:	2030      	movs	r0, #48	@ 0x30
 8004e90:	18e1      	adds	r1, r4, r3
 8004e92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e9c:	4422      	add	r2, r4
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ea4:	e7c2      	b.n	8004e2c <_printf_common+0x58>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	4641      	mov	r1, r8
 8004eac:	4638      	mov	r0, r7
 8004eae:	47c8      	blx	r9
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d0e6      	beq.n	8004e82 <_printf_common+0xae>
 8004eb4:	3601      	adds	r6, #1
 8004eb6:	e7d9      	b.n	8004e6c <_printf_common+0x98>

08004eb8 <_printf_i>:
 8004eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ebc:	7e0f      	ldrb	r7, [r1, #24]
 8004ebe:	4691      	mov	r9, r2
 8004ec0:	2f78      	cmp	r7, #120	@ 0x78
 8004ec2:	4680      	mov	r8, r0
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	469a      	mov	sl, r3
 8004ec8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004eca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ece:	d807      	bhi.n	8004ee0 <_printf_i+0x28>
 8004ed0:	2f62      	cmp	r7, #98	@ 0x62
 8004ed2:	d80a      	bhi.n	8004eea <_printf_i+0x32>
 8004ed4:	2f00      	cmp	r7, #0
 8004ed6:	f000 80d3 	beq.w	8005080 <_printf_i+0x1c8>
 8004eda:	2f58      	cmp	r7, #88	@ 0x58
 8004edc:	f000 80ba 	beq.w	8005054 <_printf_i+0x19c>
 8004ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ee4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ee8:	e03a      	b.n	8004f60 <_printf_i+0xa8>
 8004eea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004eee:	2b15      	cmp	r3, #21
 8004ef0:	d8f6      	bhi.n	8004ee0 <_printf_i+0x28>
 8004ef2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ef8 <_printf_i+0x40>)
 8004ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef8:	08004f51 	.word	0x08004f51
 8004efc:	08004f65 	.word	0x08004f65
 8004f00:	08004ee1 	.word	0x08004ee1
 8004f04:	08004ee1 	.word	0x08004ee1
 8004f08:	08004ee1 	.word	0x08004ee1
 8004f0c:	08004ee1 	.word	0x08004ee1
 8004f10:	08004f65 	.word	0x08004f65
 8004f14:	08004ee1 	.word	0x08004ee1
 8004f18:	08004ee1 	.word	0x08004ee1
 8004f1c:	08004ee1 	.word	0x08004ee1
 8004f20:	08004ee1 	.word	0x08004ee1
 8004f24:	08005067 	.word	0x08005067
 8004f28:	08004f8f 	.word	0x08004f8f
 8004f2c:	08005021 	.word	0x08005021
 8004f30:	08004ee1 	.word	0x08004ee1
 8004f34:	08004ee1 	.word	0x08004ee1
 8004f38:	08005089 	.word	0x08005089
 8004f3c:	08004ee1 	.word	0x08004ee1
 8004f40:	08004f8f 	.word	0x08004f8f
 8004f44:	08004ee1 	.word	0x08004ee1
 8004f48:	08004ee1 	.word	0x08004ee1
 8004f4c:	08005029 	.word	0x08005029
 8004f50:	6833      	ldr	r3, [r6, #0]
 8004f52:	1d1a      	adds	r2, r3, #4
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6032      	str	r2, [r6, #0]
 8004f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f60:	2301      	movs	r3, #1
 8004f62:	e09e      	b.n	80050a2 <_printf_i+0x1ea>
 8004f64:	6833      	ldr	r3, [r6, #0]
 8004f66:	6820      	ldr	r0, [r4, #0]
 8004f68:	1d19      	adds	r1, r3, #4
 8004f6a:	6031      	str	r1, [r6, #0]
 8004f6c:	0606      	lsls	r6, r0, #24
 8004f6e:	d501      	bpl.n	8004f74 <_printf_i+0xbc>
 8004f70:	681d      	ldr	r5, [r3, #0]
 8004f72:	e003      	b.n	8004f7c <_printf_i+0xc4>
 8004f74:	0645      	lsls	r5, r0, #25
 8004f76:	d5fb      	bpl.n	8004f70 <_printf_i+0xb8>
 8004f78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f7c:	2d00      	cmp	r5, #0
 8004f7e:	da03      	bge.n	8004f88 <_printf_i+0xd0>
 8004f80:	232d      	movs	r3, #45	@ 0x2d
 8004f82:	426d      	negs	r5, r5
 8004f84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f88:	230a      	movs	r3, #10
 8004f8a:	4859      	ldr	r0, [pc, #356]	@ (80050f0 <_printf_i+0x238>)
 8004f8c:	e011      	b.n	8004fb2 <_printf_i+0xfa>
 8004f8e:	6821      	ldr	r1, [r4, #0]
 8004f90:	6833      	ldr	r3, [r6, #0]
 8004f92:	0608      	lsls	r0, r1, #24
 8004f94:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f98:	d402      	bmi.n	8004fa0 <_printf_i+0xe8>
 8004f9a:	0649      	lsls	r1, r1, #25
 8004f9c:	bf48      	it	mi
 8004f9e:	b2ad      	uxthmi	r5, r5
 8004fa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fa2:	6033      	str	r3, [r6, #0]
 8004fa4:	bf14      	ite	ne
 8004fa6:	230a      	movne	r3, #10
 8004fa8:	2308      	moveq	r3, #8
 8004faa:	4851      	ldr	r0, [pc, #324]	@ (80050f0 <_printf_i+0x238>)
 8004fac:	2100      	movs	r1, #0
 8004fae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fb2:	6866      	ldr	r6, [r4, #4]
 8004fb4:	2e00      	cmp	r6, #0
 8004fb6:	bfa8      	it	ge
 8004fb8:	6821      	ldrge	r1, [r4, #0]
 8004fba:	60a6      	str	r6, [r4, #8]
 8004fbc:	bfa4      	itt	ge
 8004fbe:	f021 0104 	bicge.w	r1, r1, #4
 8004fc2:	6021      	strge	r1, [r4, #0]
 8004fc4:	b90d      	cbnz	r5, 8004fca <_printf_i+0x112>
 8004fc6:	2e00      	cmp	r6, #0
 8004fc8:	d04b      	beq.n	8005062 <_printf_i+0x1aa>
 8004fca:	4616      	mov	r6, r2
 8004fcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fd0:	fb03 5711 	mls	r7, r3, r1, r5
 8004fd4:	5dc7      	ldrb	r7, [r0, r7]
 8004fd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fda:	462f      	mov	r7, r5
 8004fdc:	42bb      	cmp	r3, r7
 8004fde:	460d      	mov	r5, r1
 8004fe0:	d9f4      	bls.n	8004fcc <_printf_i+0x114>
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d10b      	bne.n	8004ffe <_printf_i+0x146>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	07df      	lsls	r7, r3, #31
 8004fea:	d508      	bpl.n	8004ffe <_printf_i+0x146>
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	6861      	ldr	r1, [r4, #4]
 8004ff0:	4299      	cmp	r1, r3
 8004ff2:	bfde      	ittt	le
 8004ff4:	2330      	movle	r3, #48	@ 0x30
 8004ff6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ffa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ffe:	1b92      	subs	r2, r2, r6
 8005000:	6122      	str	r2, [r4, #16]
 8005002:	464b      	mov	r3, r9
 8005004:	4621      	mov	r1, r4
 8005006:	4640      	mov	r0, r8
 8005008:	f8cd a000 	str.w	sl, [sp]
 800500c:	aa03      	add	r2, sp, #12
 800500e:	f7ff fee1 	bl	8004dd4 <_printf_common>
 8005012:	3001      	adds	r0, #1
 8005014:	d14a      	bne.n	80050ac <_printf_i+0x1f4>
 8005016:	f04f 30ff 	mov.w	r0, #4294967295
 800501a:	b004      	add	sp, #16
 800501c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	f043 0320 	orr.w	r3, r3, #32
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	2778      	movs	r7, #120	@ 0x78
 800502a:	4832      	ldr	r0, [pc, #200]	@ (80050f4 <_printf_i+0x23c>)
 800502c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	6831      	ldr	r1, [r6, #0]
 8005034:	061f      	lsls	r7, r3, #24
 8005036:	f851 5b04 	ldr.w	r5, [r1], #4
 800503a:	d402      	bmi.n	8005042 <_printf_i+0x18a>
 800503c:	065f      	lsls	r7, r3, #25
 800503e:	bf48      	it	mi
 8005040:	b2ad      	uxthmi	r5, r5
 8005042:	6031      	str	r1, [r6, #0]
 8005044:	07d9      	lsls	r1, r3, #31
 8005046:	bf44      	itt	mi
 8005048:	f043 0320 	orrmi.w	r3, r3, #32
 800504c:	6023      	strmi	r3, [r4, #0]
 800504e:	b11d      	cbz	r5, 8005058 <_printf_i+0x1a0>
 8005050:	2310      	movs	r3, #16
 8005052:	e7ab      	b.n	8004fac <_printf_i+0xf4>
 8005054:	4826      	ldr	r0, [pc, #152]	@ (80050f0 <_printf_i+0x238>)
 8005056:	e7e9      	b.n	800502c <_printf_i+0x174>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	f023 0320 	bic.w	r3, r3, #32
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	e7f6      	b.n	8005050 <_printf_i+0x198>
 8005062:	4616      	mov	r6, r2
 8005064:	e7bd      	b.n	8004fe2 <_printf_i+0x12a>
 8005066:	6833      	ldr	r3, [r6, #0]
 8005068:	6825      	ldr	r5, [r4, #0]
 800506a:	1d18      	adds	r0, r3, #4
 800506c:	6961      	ldr	r1, [r4, #20]
 800506e:	6030      	str	r0, [r6, #0]
 8005070:	062e      	lsls	r6, r5, #24
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	d501      	bpl.n	800507a <_printf_i+0x1c2>
 8005076:	6019      	str	r1, [r3, #0]
 8005078:	e002      	b.n	8005080 <_printf_i+0x1c8>
 800507a:	0668      	lsls	r0, r5, #25
 800507c:	d5fb      	bpl.n	8005076 <_printf_i+0x1be>
 800507e:	8019      	strh	r1, [r3, #0]
 8005080:	2300      	movs	r3, #0
 8005082:	4616      	mov	r6, r2
 8005084:	6123      	str	r3, [r4, #16]
 8005086:	e7bc      	b.n	8005002 <_printf_i+0x14a>
 8005088:	6833      	ldr	r3, [r6, #0]
 800508a:	2100      	movs	r1, #0
 800508c:	1d1a      	adds	r2, r3, #4
 800508e:	6032      	str	r2, [r6, #0]
 8005090:	681e      	ldr	r6, [r3, #0]
 8005092:	6862      	ldr	r2, [r4, #4]
 8005094:	4630      	mov	r0, r6
 8005096:	f000 fce8 	bl	8005a6a <memchr>
 800509a:	b108      	cbz	r0, 80050a0 <_printf_i+0x1e8>
 800509c:	1b80      	subs	r0, r0, r6
 800509e:	6060      	str	r0, [r4, #4]
 80050a0:	6863      	ldr	r3, [r4, #4]
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	2300      	movs	r3, #0
 80050a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050aa:	e7aa      	b.n	8005002 <_printf_i+0x14a>
 80050ac:	4632      	mov	r2, r6
 80050ae:	4649      	mov	r1, r9
 80050b0:	4640      	mov	r0, r8
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	47d0      	blx	sl
 80050b6:	3001      	adds	r0, #1
 80050b8:	d0ad      	beq.n	8005016 <_printf_i+0x15e>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	079b      	lsls	r3, r3, #30
 80050be:	d413      	bmi.n	80050e8 <_printf_i+0x230>
 80050c0:	68e0      	ldr	r0, [r4, #12]
 80050c2:	9b03      	ldr	r3, [sp, #12]
 80050c4:	4298      	cmp	r0, r3
 80050c6:	bfb8      	it	lt
 80050c8:	4618      	movlt	r0, r3
 80050ca:	e7a6      	b.n	800501a <_printf_i+0x162>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4632      	mov	r2, r6
 80050d0:	4649      	mov	r1, r9
 80050d2:	4640      	mov	r0, r8
 80050d4:	47d0      	blx	sl
 80050d6:	3001      	adds	r0, #1
 80050d8:	d09d      	beq.n	8005016 <_printf_i+0x15e>
 80050da:	3501      	adds	r5, #1
 80050dc:	68e3      	ldr	r3, [r4, #12]
 80050de:	9903      	ldr	r1, [sp, #12]
 80050e0:	1a5b      	subs	r3, r3, r1
 80050e2:	42ab      	cmp	r3, r5
 80050e4:	dcf2      	bgt.n	80050cc <_printf_i+0x214>
 80050e6:	e7eb      	b.n	80050c0 <_printf_i+0x208>
 80050e8:	2500      	movs	r5, #0
 80050ea:	f104 0619 	add.w	r6, r4, #25
 80050ee:	e7f5      	b.n	80050dc <_printf_i+0x224>
 80050f0:	0800ade0 	.word	0x0800ade0
 80050f4:	0800adf1 	.word	0x0800adf1

080050f8 <_scanf_float>:
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	b087      	sub	sp, #28
 80050fe:	9303      	str	r3, [sp, #12]
 8005100:	688b      	ldr	r3, [r1, #8]
 8005102:	4617      	mov	r7, r2
 8005104:	1e5a      	subs	r2, r3, #1
 8005106:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800510a:	bf82      	ittt	hi
 800510c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005110:	eb03 0b05 	addhi.w	fp, r3, r5
 8005114:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005118:	460a      	mov	r2, r1
 800511a:	f04f 0500 	mov.w	r5, #0
 800511e:	bf88      	it	hi
 8005120:	608b      	strhi	r3, [r1, #8]
 8005122:	680b      	ldr	r3, [r1, #0]
 8005124:	4680      	mov	r8, r0
 8005126:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800512a:	f842 3b1c 	str.w	r3, [r2], #28
 800512e:	460c      	mov	r4, r1
 8005130:	bf98      	it	ls
 8005132:	f04f 0b00 	movls.w	fp, #0
 8005136:	4616      	mov	r6, r2
 8005138:	46aa      	mov	sl, r5
 800513a:	46a9      	mov	r9, r5
 800513c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005140:	9201      	str	r2, [sp, #4]
 8005142:	9502      	str	r5, [sp, #8]
 8005144:	68a2      	ldr	r2, [r4, #8]
 8005146:	b152      	cbz	r2, 800515e <_scanf_float+0x66>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b4e      	cmp	r3, #78	@ 0x4e
 800514e:	d865      	bhi.n	800521c <_scanf_float+0x124>
 8005150:	2b40      	cmp	r3, #64	@ 0x40
 8005152:	d83d      	bhi.n	80051d0 <_scanf_float+0xd8>
 8005154:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005158:	b2c8      	uxtb	r0, r1
 800515a:	280e      	cmp	r0, #14
 800515c:	d93b      	bls.n	80051d6 <_scanf_float+0xde>
 800515e:	f1b9 0f00 	cmp.w	r9, #0
 8005162:	d003      	beq.n	800516c <_scanf_float+0x74>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800516a:	6023      	str	r3, [r4, #0]
 800516c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005170:	f1ba 0f01 	cmp.w	sl, #1
 8005174:	f200 8118 	bhi.w	80053a8 <_scanf_float+0x2b0>
 8005178:	9b01      	ldr	r3, [sp, #4]
 800517a:	429e      	cmp	r6, r3
 800517c:	f200 8109 	bhi.w	8005392 <_scanf_float+0x29a>
 8005180:	2001      	movs	r0, #1
 8005182:	b007      	add	sp, #28
 8005184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005188:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800518c:	2a0d      	cmp	r2, #13
 800518e:	d8e6      	bhi.n	800515e <_scanf_float+0x66>
 8005190:	a101      	add	r1, pc, #4	@ (adr r1, 8005198 <_scanf_float+0xa0>)
 8005192:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005196:	bf00      	nop
 8005198:	080052df 	.word	0x080052df
 800519c:	0800515f 	.word	0x0800515f
 80051a0:	0800515f 	.word	0x0800515f
 80051a4:	0800515f 	.word	0x0800515f
 80051a8:	0800533f 	.word	0x0800533f
 80051ac:	08005317 	.word	0x08005317
 80051b0:	0800515f 	.word	0x0800515f
 80051b4:	0800515f 	.word	0x0800515f
 80051b8:	080052ed 	.word	0x080052ed
 80051bc:	0800515f 	.word	0x0800515f
 80051c0:	0800515f 	.word	0x0800515f
 80051c4:	0800515f 	.word	0x0800515f
 80051c8:	0800515f 	.word	0x0800515f
 80051cc:	080052a5 	.word	0x080052a5
 80051d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80051d4:	e7da      	b.n	800518c <_scanf_float+0x94>
 80051d6:	290e      	cmp	r1, #14
 80051d8:	d8c1      	bhi.n	800515e <_scanf_float+0x66>
 80051da:	a001      	add	r0, pc, #4	@ (adr r0, 80051e0 <_scanf_float+0xe8>)
 80051dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80051e0:	08005295 	.word	0x08005295
 80051e4:	0800515f 	.word	0x0800515f
 80051e8:	08005295 	.word	0x08005295
 80051ec:	0800532b 	.word	0x0800532b
 80051f0:	0800515f 	.word	0x0800515f
 80051f4:	0800523d 	.word	0x0800523d
 80051f8:	0800527b 	.word	0x0800527b
 80051fc:	0800527b 	.word	0x0800527b
 8005200:	0800527b 	.word	0x0800527b
 8005204:	0800527b 	.word	0x0800527b
 8005208:	0800527b 	.word	0x0800527b
 800520c:	0800527b 	.word	0x0800527b
 8005210:	0800527b 	.word	0x0800527b
 8005214:	0800527b 	.word	0x0800527b
 8005218:	0800527b 	.word	0x0800527b
 800521c:	2b6e      	cmp	r3, #110	@ 0x6e
 800521e:	d809      	bhi.n	8005234 <_scanf_float+0x13c>
 8005220:	2b60      	cmp	r3, #96	@ 0x60
 8005222:	d8b1      	bhi.n	8005188 <_scanf_float+0x90>
 8005224:	2b54      	cmp	r3, #84	@ 0x54
 8005226:	d07b      	beq.n	8005320 <_scanf_float+0x228>
 8005228:	2b59      	cmp	r3, #89	@ 0x59
 800522a:	d198      	bne.n	800515e <_scanf_float+0x66>
 800522c:	2d07      	cmp	r5, #7
 800522e:	d196      	bne.n	800515e <_scanf_float+0x66>
 8005230:	2508      	movs	r5, #8
 8005232:	e02c      	b.n	800528e <_scanf_float+0x196>
 8005234:	2b74      	cmp	r3, #116	@ 0x74
 8005236:	d073      	beq.n	8005320 <_scanf_float+0x228>
 8005238:	2b79      	cmp	r3, #121	@ 0x79
 800523a:	e7f6      	b.n	800522a <_scanf_float+0x132>
 800523c:	6821      	ldr	r1, [r4, #0]
 800523e:	05c8      	lsls	r0, r1, #23
 8005240:	d51b      	bpl.n	800527a <_scanf_float+0x182>
 8005242:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005246:	6021      	str	r1, [r4, #0]
 8005248:	f109 0901 	add.w	r9, r9, #1
 800524c:	f1bb 0f00 	cmp.w	fp, #0
 8005250:	d003      	beq.n	800525a <_scanf_float+0x162>
 8005252:	3201      	adds	r2, #1
 8005254:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005258:	60a2      	str	r2, [r4, #8]
 800525a:	68a3      	ldr	r3, [r4, #8]
 800525c:	3b01      	subs	r3, #1
 800525e:	60a3      	str	r3, [r4, #8]
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	3301      	adds	r3, #1
 8005264:	6123      	str	r3, [r4, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3b01      	subs	r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	607b      	str	r3, [r7, #4]
 800526e:	f340 8087 	ble.w	8005380 <_scanf_float+0x288>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	e764      	b.n	8005144 <_scanf_float+0x4c>
 800527a:	eb1a 0105 	adds.w	r1, sl, r5
 800527e:	f47f af6e 	bne.w	800515e <_scanf_float+0x66>
 8005282:	460d      	mov	r5, r1
 8005284:	468a      	mov	sl, r1
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800528c:	6022      	str	r2, [r4, #0]
 800528e:	f806 3b01 	strb.w	r3, [r6], #1
 8005292:	e7e2      	b.n	800525a <_scanf_float+0x162>
 8005294:	6822      	ldr	r2, [r4, #0]
 8005296:	0610      	lsls	r0, r2, #24
 8005298:	f57f af61 	bpl.w	800515e <_scanf_float+0x66>
 800529c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052a0:	6022      	str	r2, [r4, #0]
 80052a2:	e7f4      	b.n	800528e <_scanf_float+0x196>
 80052a4:	f1ba 0f00 	cmp.w	sl, #0
 80052a8:	d10e      	bne.n	80052c8 <_scanf_float+0x1d0>
 80052aa:	f1b9 0f00 	cmp.w	r9, #0
 80052ae:	d10e      	bne.n	80052ce <_scanf_float+0x1d6>
 80052b0:	6822      	ldr	r2, [r4, #0]
 80052b2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80052b6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80052ba:	d108      	bne.n	80052ce <_scanf_float+0x1d6>
 80052bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80052c0:	f04f 0a01 	mov.w	sl, #1
 80052c4:	6022      	str	r2, [r4, #0]
 80052c6:	e7e2      	b.n	800528e <_scanf_float+0x196>
 80052c8:	f1ba 0f02 	cmp.w	sl, #2
 80052cc:	d055      	beq.n	800537a <_scanf_float+0x282>
 80052ce:	2d01      	cmp	r5, #1
 80052d0:	d002      	beq.n	80052d8 <_scanf_float+0x1e0>
 80052d2:	2d04      	cmp	r5, #4
 80052d4:	f47f af43 	bne.w	800515e <_scanf_float+0x66>
 80052d8:	3501      	adds	r5, #1
 80052da:	b2ed      	uxtb	r5, r5
 80052dc:	e7d7      	b.n	800528e <_scanf_float+0x196>
 80052de:	f1ba 0f01 	cmp.w	sl, #1
 80052e2:	f47f af3c 	bne.w	800515e <_scanf_float+0x66>
 80052e6:	f04f 0a02 	mov.w	sl, #2
 80052ea:	e7d0      	b.n	800528e <_scanf_float+0x196>
 80052ec:	b97d      	cbnz	r5, 800530e <_scanf_float+0x216>
 80052ee:	f1b9 0f00 	cmp.w	r9, #0
 80052f2:	f47f af37 	bne.w	8005164 <_scanf_float+0x6c>
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80052fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005300:	f040 8103 	bne.w	800550a <_scanf_float+0x412>
 8005304:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005308:	2501      	movs	r5, #1
 800530a:	6022      	str	r2, [r4, #0]
 800530c:	e7bf      	b.n	800528e <_scanf_float+0x196>
 800530e:	2d03      	cmp	r5, #3
 8005310:	d0e2      	beq.n	80052d8 <_scanf_float+0x1e0>
 8005312:	2d05      	cmp	r5, #5
 8005314:	e7de      	b.n	80052d4 <_scanf_float+0x1dc>
 8005316:	2d02      	cmp	r5, #2
 8005318:	f47f af21 	bne.w	800515e <_scanf_float+0x66>
 800531c:	2503      	movs	r5, #3
 800531e:	e7b6      	b.n	800528e <_scanf_float+0x196>
 8005320:	2d06      	cmp	r5, #6
 8005322:	f47f af1c 	bne.w	800515e <_scanf_float+0x66>
 8005326:	2507      	movs	r5, #7
 8005328:	e7b1      	b.n	800528e <_scanf_float+0x196>
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	0591      	lsls	r1, r2, #22
 800532e:	f57f af16 	bpl.w	800515e <_scanf_float+0x66>
 8005332:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005336:	6022      	str	r2, [r4, #0]
 8005338:	f8cd 9008 	str.w	r9, [sp, #8]
 800533c:	e7a7      	b.n	800528e <_scanf_float+0x196>
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005344:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005348:	d006      	beq.n	8005358 <_scanf_float+0x260>
 800534a:	0550      	lsls	r0, r2, #21
 800534c:	f57f af07 	bpl.w	800515e <_scanf_float+0x66>
 8005350:	f1b9 0f00 	cmp.w	r9, #0
 8005354:	f000 80d9 	beq.w	800550a <_scanf_float+0x412>
 8005358:	0591      	lsls	r1, r2, #22
 800535a:	bf58      	it	pl
 800535c:	9902      	ldrpl	r1, [sp, #8]
 800535e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005362:	bf58      	it	pl
 8005364:	eba9 0101 	subpl.w	r1, r9, r1
 8005368:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800536c:	f04f 0900 	mov.w	r9, #0
 8005370:	bf58      	it	pl
 8005372:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005376:	6022      	str	r2, [r4, #0]
 8005378:	e789      	b.n	800528e <_scanf_float+0x196>
 800537a:	f04f 0a03 	mov.w	sl, #3
 800537e:	e786      	b.n	800528e <_scanf_float+0x196>
 8005380:	4639      	mov	r1, r7
 8005382:	4640      	mov	r0, r8
 8005384:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005388:	4798      	blx	r3
 800538a:	2800      	cmp	r0, #0
 800538c:	f43f aeda 	beq.w	8005144 <_scanf_float+0x4c>
 8005390:	e6e5      	b.n	800515e <_scanf_float+0x66>
 8005392:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005396:	463a      	mov	r2, r7
 8005398:	4640      	mov	r0, r8
 800539a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800539e:	4798      	blx	r3
 80053a0:	6923      	ldr	r3, [r4, #16]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	6123      	str	r3, [r4, #16]
 80053a6:	e6e7      	b.n	8005178 <_scanf_float+0x80>
 80053a8:	1e6b      	subs	r3, r5, #1
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d824      	bhi.n	80053f8 <_scanf_float+0x300>
 80053ae:	2d02      	cmp	r5, #2
 80053b0:	d836      	bhi.n	8005420 <_scanf_float+0x328>
 80053b2:	9b01      	ldr	r3, [sp, #4]
 80053b4:	429e      	cmp	r6, r3
 80053b6:	f67f aee3 	bls.w	8005180 <_scanf_float+0x88>
 80053ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053be:	463a      	mov	r2, r7
 80053c0:	4640      	mov	r0, r8
 80053c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053c6:	4798      	blx	r3
 80053c8:	6923      	ldr	r3, [r4, #16]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	6123      	str	r3, [r4, #16]
 80053ce:	e7f0      	b.n	80053b2 <_scanf_float+0x2ba>
 80053d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053d4:	463a      	mov	r2, r7
 80053d6:	4640      	mov	r0, r8
 80053d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80053dc:	4798      	blx	r3
 80053de:	6923      	ldr	r3, [r4, #16]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	6123      	str	r3, [r4, #16]
 80053e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053e8:	fa5f fa8a 	uxtb.w	sl, sl
 80053ec:	f1ba 0f02 	cmp.w	sl, #2
 80053f0:	d1ee      	bne.n	80053d0 <_scanf_float+0x2d8>
 80053f2:	3d03      	subs	r5, #3
 80053f4:	b2ed      	uxtb	r5, r5
 80053f6:	1b76      	subs	r6, r6, r5
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	05da      	lsls	r2, r3, #23
 80053fc:	d530      	bpl.n	8005460 <_scanf_float+0x368>
 80053fe:	055b      	lsls	r3, r3, #21
 8005400:	d511      	bpl.n	8005426 <_scanf_float+0x32e>
 8005402:	9b01      	ldr	r3, [sp, #4]
 8005404:	429e      	cmp	r6, r3
 8005406:	f67f aebb 	bls.w	8005180 <_scanf_float+0x88>
 800540a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800540e:	463a      	mov	r2, r7
 8005410:	4640      	mov	r0, r8
 8005412:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005416:	4798      	blx	r3
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	3b01      	subs	r3, #1
 800541c:	6123      	str	r3, [r4, #16]
 800541e:	e7f0      	b.n	8005402 <_scanf_float+0x30a>
 8005420:	46aa      	mov	sl, r5
 8005422:	46b3      	mov	fp, r6
 8005424:	e7de      	b.n	80053e4 <_scanf_float+0x2ec>
 8005426:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	2965      	cmp	r1, #101	@ 0x65
 800542e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005432:	f106 35ff 	add.w	r5, r6, #4294967295
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	d00c      	beq.n	8005454 <_scanf_float+0x35c>
 800543a:	2945      	cmp	r1, #69	@ 0x45
 800543c:	d00a      	beq.n	8005454 <_scanf_float+0x35c>
 800543e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005442:	463a      	mov	r2, r7
 8005444:	4640      	mov	r0, r8
 8005446:	4798      	blx	r3
 8005448:	6923      	ldr	r3, [r4, #16]
 800544a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800544e:	3b01      	subs	r3, #1
 8005450:	1eb5      	subs	r5, r6, #2
 8005452:	6123      	str	r3, [r4, #16]
 8005454:	463a      	mov	r2, r7
 8005456:	4640      	mov	r0, r8
 8005458:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800545c:	4798      	blx	r3
 800545e:	462e      	mov	r6, r5
 8005460:	6822      	ldr	r2, [r4, #0]
 8005462:	f012 0210 	ands.w	r2, r2, #16
 8005466:	d001      	beq.n	800546c <_scanf_float+0x374>
 8005468:	2000      	movs	r0, #0
 800546a:	e68a      	b.n	8005182 <_scanf_float+0x8a>
 800546c:	7032      	strb	r2, [r6, #0]
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005478:	d11c      	bne.n	80054b4 <_scanf_float+0x3bc>
 800547a:	9b02      	ldr	r3, [sp, #8]
 800547c:	454b      	cmp	r3, r9
 800547e:	eba3 0209 	sub.w	r2, r3, r9
 8005482:	d123      	bne.n	80054cc <_scanf_float+0x3d4>
 8005484:	2200      	movs	r2, #0
 8005486:	4640      	mov	r0, r8
 8005488:	9901      	ldr	r1, [sp, #4]
 800548a:	f002 fd01 	bl	8007e90 <_strtod_r>
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	6825      	ldr	r5, [r4, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f015 0f02 	tst.w	r5, #2
 8005498:	4606      	mov	r6, r0
 800549a:	460f      	mov	r7, r1
 800549c:	f103 0204 	add.w	r2, r3, #4
 80054a0:	d01f      	beq.n	80054e2 <_scanf_float+0x3ea>
 80054a2:	9903      	ldr	r1, [sp, #12]
 80054a4:	600a      	str	r2, [r1, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	e9c3 6700 	strd	r6, r7, [r3]
 80054ac:	68e3      	ldr	r3, [r4, #12]
 80054ae:	3301      	adds	r3, #1
 80054b0:	60e3      	str	r3, [r4, #12]
 80054b2:	e7d9      	b.n	8005468 <_scanf_float+0x370>
 80054b4:	9b04      	ldr	r3, [sp, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0e4      	beq.n	8005484 <_scanf_float+0x38c>
 80054ba:	9905      	ldr	r1, [sp, #20]
 80054bc:	230a      	movs	r3, #10
 80054be:	4640      	mov	r0, r8
 80054c0:	3101      	adds	r1, #1
 80054c2:	f002 fd65 	bl	8007f90 <_strtol_r>
 80054c6:	9b04      	ldr	r3, [sp, #16]
 80054c8:	9e05      	ldr	r6, [sp, #20]
 80054ca:	1ac2      	subs	r2, r0, r3
 80054cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80054d0:	429e      	cmp	r6, r3
 80054d2:	bf28      	it	cs
 80054d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80054d8:	4630      	mov	r0, r6
 80054da:	490d      	ldr	r1, [pc, #52]	@ (8005510 <_scanf_float+0x418>)
 80054dc:	f000 f94e 	bl	800577c <siprintf>
 80054e0:	e7d0      	b.n	8005484 <_scanf_float+0x38c>
 80054e2:	076d      	lsls	r5, r5, #29
 80054e4:	d4dd      	bmi.n	80054a2 <_scanf_float+0x3aa>
 80054e6:	9d03      	ldr	r5, [sp, #12]
 80054e8:	602a      	str	r2, [r5, #0]
 80054ea:	681d      	ldr	r5, [r3, #0]
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	f7fb fa8c 	bl	8000a0c <__aeabi_dcmpun>
 80054f4:	b120      	cbz	r0, 8005500 <_scanf_float+0x408>
 80054f6:	4807      	ldr	r0, [pc, #28]	@ (8005514 <_scanf_float+0x41c>)
 80054f8:	f000 fad4 	bl	8005aa4 <nanf>
 80054fc:	6028      	str	r0, [r5, #0]
 80054fe:	e7d5      	b.n	80054ac <_scanf_float+0x3b4>
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f7fb fae0 	bl	8000ac8 <__aeabi_d2f>
 8005508:	e7f8      	b.n	80054fc <_scanf_float+0x404>
 800550a:	f04f 0900 	mov.w	r9, #0
 800550e:	e62d      	b.n	800516c <_scanf_float+0x74>
 8005510:	0800ae02 	.word	0x0800ae02
 8005514:	0800b19d 	.word	0x0800b19d

08005518 <std>:
 8005518:	2300      	movs	r3, #0
 800551a:	b510      	push	{r4, lr}
 800551c:	4604      	mov	r4, r0
 800551e:	e9c0 3300 	strd	r3, r3, [r0]
 8005522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005526:	6083      	str	r3, [r0, #8]
 8005528:	8181      	strh	r1, [r0, #12]
 800552a:	6643      	str	r3, [r0, #100]	@ 0x64
 800552c:	81c2      	strh	r2, [r0, #14]
 800552e:	6183      	str	r3, [r0, #24]
 8005530:	4619      	mov	r1, r3
 8005532:	2208      	movs	r2, #8
 8005534:	305c      	adds	r0, #92	@ 0x5c
 8005536:	f000 fa19 	bl	800596c <memset>
 800553a:	4b0d      	ldr	r3, [pc, #52]	@ (8005570 <std+0x58>)
 800553c:	6224      	str	r4, [r4, #32]
 800553e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005540:	4b0c      	ldr	r3, [pc, #48]	@ (8005574 <std+0x5c>)
 8005542:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005544:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <std+0x60>)
 8005546:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005548:	4b0c      	ldr	r3, [pc, #48]	@ (800557c <std+0x64>)
 800554a:	6323      	str	r3, [r4, #48]	@ 0x30
 800554c:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <std+0x68>)
 800554e:	429c      	cmp	r4, r3
 8005550:	d006      	beq.n	8005560 <std+0x48>
 8005552:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005556:	4294      	cmp	r4, r2
 8005558:	d002      	beq.n	8005560 <std+0x48>
 800555a:	33d0      	adds	r3, #208	@ 0xd0
 800555c:	429c      	cmp	r4, r3
 800555e:	d105      	bne.n	800556c <std+0x54>
 8005560:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005568:	f000 ba7c 	b.w	8005a64 <__retarget_lock_init_recursive>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	bf00      	nop
 8005570:	080057bd 	.word	0x080057bd
 8005574:	080057df 	.word	0x080057df
 8005578:	08005817 	.word	0x08005817
 800557c:	0800583b 	.word	0x0800583b
 8005580:	20004148 	.word	0x20004148

08005584 <stdio_exit_handler>:
 8005584:	4a02      	ldr	r2, [pc, #8]	@ (8005590 <stdio_exit_handler+0xc>)
 8005586:	4903      	ldr	r1, [pc, #12]	@ (8005594 <stdio_exit_handler+0x10>)
 8005588:	4803      	ldr	r0, [pc, #12]	@ (8005598 <stdio_exit_handler+0x14>)
 800558a:	f000 b869 	b.w	8005660 <_fwalk_sglue>
 800558e:	bf00      	nop
 8005590:	20000030 	.word	0x20000030
 8005594:	080085c5 	.word	0x080085c5
 8005598:	20000040 	.word	0x20000040

0800559c <cleanup_stdio>:
 800559c:	6841      	ldr	r1, [r0, #4]
 800559e:	4b0c      	ldr	r3, [pc, #48]	@ (80055d0 <cleanup_stdio+0x34>)
 80055a0:	b510      	push	{r4, lr}
 80055a2:	4299      	cmp	r1, r3
 80055a4:	4604      	mov	r4, r0
 80055a6:	d001      	beq.n	80055ac <cleanup_stdio+0x10>
 80055a8:	f003 f80c 	bl	80085c4 <_fflush_r>
 80055ac:	68a1      	ldr	r1, [r4, #8]
 80055ae:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <cleanup_stdio+0x38>)
 80055b0:	4299      	cmp	r1, r3
 80055b2:	d002      	beq.n	80055ba <cleanup_stdio+0x1e>
 80055b4:	4620      	mov	r0, r4
 80055b6:	f003 f805 	bl	80085c4 <_fflush_r>
 80055ba:	68e1      	ldr	r1, [r4, #12]
 80055bc:	4b06      	ldr	r3, [pc, #24]	@ (80055d8 <cleanup_stdio+0x3c>)
 80055be:	4299      	cmp	r1, r3
 80055c0:	d004      	beq.n	80055cc <cleanup_stdio+0x30>
 80055c2:	4620      	mov	r0, r4
 80055c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c8:	f002 bffc 	b.w	80085c4 <_fflush_r>
 80055cc:	bd10      	pop	{r4, pc}
 80055ce:	bf00      	nop
 80055d0:	20004148 	.word	0x20004148
 80055d4:	200041b0 	.word	0x200041b0
 80055d8:	20004218 	.word	0x20004218

080055dc <global_stdio_init.part.0>:
 80055dc:	b510      	push	{r4, lr}
 80055de:	4b0b      	ldr	r3, [pc, #44]	@ (800560c <global_stdio_init.part.0+0x30>)
 80055e0:	4c0b      	ldr	r4, [pc, #44]	@ (8005610 <global_stdio_init.part.0+0x34>)
 80055e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005614 <global_stdio_init.part.0+0x38>)
 80055e4:	4620      	mov	r0, r4
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	2104      	movs	r1, #4
 80055ea:	2200      	movs	r2, #0
 80055ec:	f7ff ff94 	bl	8005518 <std>
 80055f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055f4:	2201      	movs	r2, #1
 80055f6:	2109      	movs	r1, #9
 80055f8:	f7ff ff8e 	bl	8005518 <std>
 80055fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005600:	2202      	movs	r2, #2
 8005602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005606:	2112      	movs	r1, #18
 8005608:	f7ff bf86 	b.w	8005518 <std>
 800560c:	20004280 	.word	0x20004280
 8005610:	20004148 	.word	0x20004148
 8005614:	08005585 	.word	0x08005585

08005618 <__sfp_lock_acquire>:
 8005618:	4801      	ldr	r0, [pc, #4]	@ (8005620 <__sfp_lock_acquire+0x8>)
 800561a:	f000 ba24 	b.w	8005a66 <__retarget_lock_acquire_recursive>
 800561e:	bf00      	nop
 8005620:	20004289 	.word	0x20004289

08005624 <__sfp_lock_release>:
 8005624:	4801      	ldr	r0, [pc, #4]	@ (800562c <__sfp_lock_release+0x8>)
 8005626:	f000 ba1f 	b.w	8005a68 <__retarget_lock_release_recursive>
 800562a:	bf00      	nop
 800562c:	20004289 	.word	0x20004289

08005630 <__sinit>:
 8005630:	b510      	push	{r4, lr}
 8005632:	4604      	mov	r4, r0
 8005634:	f7ff fff0 	bl	8005618 <__sfp_lock_acquire>
 8005638:	6a23      	ldr	r3, [r4, #32]
 800563a:	b11b      	cbz	r3, 8005644 <__sinit+0x14>
 800563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005640:	f7ff bff0 	b.w	8005624 <__sfp_lock_release>
 8005644:	4b04      	ldr	r3, [pc, #16]	@ (8005658 <__sinit+0x28>)
 8005646:	6223      	str	r3, [r4, #32]
 8005648:	4b04      	ldr	r3, [pc, #16]	@ (800565c <__sinit+0x2c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f5      	bne.n	800563c <__sinit+0xc>
 8005650:	f7ff ffc4 	bl	80055dc <global_stdio_init.part.0>
 8005654:	e7f2      	b.n	800563c <__sinit+0xc>
 8005656:	bf00      	nop
 8005658:	0800559d 	.word	0x0800559d
 800565c:	20004280 	.word	0x20004280

08005660 <_fwalk_sglue>:
 8005660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005664:	4607      	mov	r7, r0
 8005666:	4688      	mov	r8, r1
 8005668:	4614      	mov	r4, r2
 800566a:	2600      	movs	r6, #0
 800566c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005670:	f1b9 0901 	subs.w	r9, r9, #1
 8005674:	d505      	bpl.n	8005682 <_fwalk_sglue+0x22>
 8005676:	6824      	ldr	r4, [r4, #0]
 8005678:	2c00      	cmp	r4, #0
 800567a:	d1f7      	bne.n	800566c <_fwalk_sglue+0xc>
 800567c:	4630      	mov	r0, r6
 800567e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005682:	89ab      	ldrh	r3, [r5, #12]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d907      	bls.n	8005698 <_fwalk_sglue+0x38>
 8005688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800568c:	3301      	adds	r3, #1
 800568e:	d003      	beq.n	8005698 <_fwalk_sglue+0x38>
 8005690:	4629      	mov	r1, r5
 8005692:	4638      	mov	r0, r7
 8005694:	47c0      	blx	r8
 8005696:	4306      	orrs	r6, r0
 8005698:	3568      	adds	r5, #104	@ 0x68
 800569a:	e7e9      	b.n	8005670 <_fwalk_sglue+0x10>

0800569c <iprintf>:
 800569c:	b40f      	push	{r0, r1, r2, r3}
 800569e:	b507      	push	{r0, r1, r2, lr}
 80056a0:	4906      	ldr	r1, [pc, #24]	@ (80056bc <iprintf+0x20>)
 80056a2:	ab04      	add	r3, sp, #16
 80056a4:	6808      	ldr	r0, [r1, #0]
 80056a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056aa:	6881      	ldr	r1, [r0, #8]
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	f002 fdf1 	bl	8008294 <_vfiprintf_r>
 80056b2:	b003      	add	sp, #12
 80056b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b8:	b004      	add	sp, #16
 80056ba:	4770      	bx	lr
 80056bc:	2000003c 	.word	0x2000003c

080056c0 <_puts_r>:
 80056c0:	6a03      	ldr	r3, [r0, #32]
 80056c2:	b570      	push	{r4, r5, r6, lr}
 80056c4:	4605      	mov	r5, r0
 80056c6:	460e      	mov	r6, r1
 80056c8:	6884      	ldr	r4, [r0, #8]
 80056ca:	b90b      	cbnz	r3, 80056d0 <_puts_r+0x10>
 80056cc:	f7ff ffb0 	bl	8005630 <__sinit>
 80056d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056d2:	07db      	lsls	r3, r3, #31
 80056d4:	d405      	bmi.n	80056e2 <_puts_r+0x22>
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	0598      	lsls	r0, r3, #22
 80056da:	d402      	bmi.n	80056e2 <_puts_r+0x22>
 80056dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056de:	f000 f9c2 	bl	8005a66 <__retarget_lock_acquire_recursive>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	0719      	lsls	r1, r3, #28
 80056e6:	d502      	bpl.n	80056ee <_puts_r+0x2e>
 80056e8:	6923      	ldr	r3, [r4, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d135      	bne.n	800575a <_puts_r+0x9a>
 80056ee:	4621      	mov	r1, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 f8e5 	bl	80058c0 <__swsetup_r>
 80056f6:	b380      	cbz	r0, 800575a <_puts_r+0x9a>
 80056f8:	f04f 35ff 	mov.w	r5, #4294967295
 80056fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056fe:	07da      	lsls	r2, r3, #31
 8005700:	d405      	bmi.n	800570e <_puts_r+0x4e>
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	059b      	lsls	r3, r3, #22
 8005706:	d402      	bmi.n	800570e <_puts_r+0x4e>
 8005708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800570a:	f000 f9ad 	bl	8005a68 <__retarget_lock_release_recursive>
 800570e:	4628      	mov	r0, r5
 8005710:	bd70      	pop	{r4, r5, r6, pc}
 8005712:	2b00      	cmp	r3, #0
 8005714:	da04      	bge.n	8005720 <_puts_r+0x60>
 8005716:	69a2      	ldr	r2, [r4, #24]
 8005718:	429a      	cmp	r2, r3
 800571a:	dc17      	bgt.n	800574c <_puts_r+0x8c>
 800571c:	290a      	cmp	r1, #10
 800571e:	d015      	beq.n	800574c <_puts_r+0x8c>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	6022      	str	r2, [r4, #0]
 8005726:	7019      	strb	r1, [r3, #0]
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800572e:	3b01      	subs	r3, #1
 8005730:	60a3      	str	r3, [r4, #8]
 8005732:	2900      	cmp	r1, #0
 8005734:	d1ed      	bne.n	8005712 <_puts_r+0x52>
 8005736:	2b00      	cmp	r3, #0
 8005738:	da11      	bge.n	800575e <_puts_r+0x9e>
 800573a:	4622      	mov	r2, r4
 800573c:	210a      	movs	r1, #10
 800573e:	4628      	mov	r0, r5
 8005740:	f000 f87f 	bl	8005842 <__swbuf_r>
 8005744:	3001      	adds	r0, #1
 8005746:	d0d7      	beq.n	80056f8 <_puts_r+0x38>
 8005748:	250a      	movs	r5, #10
 800574a:	e7d7      	b.n	80056fc <_puts_r+0x3c>
 800574c:	4622      	mov	r2, r4
 800574e:	4628      	mov	r0, r5
 8005750:	f000 f877 	bl	8005842 <__swbuf_r>
 8005754:	3001      	adds	r0, #1
 8005756:	d1e7      	bne.n	8005728 <_puts_r+0x68>
 8005758:	e7ce      	b.n	80056f8 <_puts_r+0x38>
 800575a:	3e01      	subs	r6, #1
 800575c:	e7e4      	b.n	8005728 <_puts_r+0x68>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	6022      	str	r2, [r4, #0]
 8005764:	220a      	movs	r2, #10
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	e7ee      	b.n	8005748 <_puts_r+0x88>
	...

0800576c <puts>:
 800576c:	4b02      	ldr	r3, [pc, #8]	@ (8005778 <puts+0xc>)
 800576e:	4601      	mov	r1, r0
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	f7ff bfa5 	b.w	80056c0 <_puts_r>
 8005776:	bf00      	nop
 8005778:	2000003c 	.word	0x2000003c

0800577c <siprintf>:
 800577c:	b40e      	push	{r1, r2, r3}
 800577e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005782:	b500      	push	{lr}
 8005784:	b09c      	sub	sp, #112	@ 0x70
 8005786:	ab1d      	add	r3, sp, #116	@ 0x74
 8005788:	9002      	str	r0, [sp, #8]
 800578a:	9006      	str	r0, [sp, #24]
 800578c:	9107      	str	r1, [sp, #28]
 800578e:	9104      	str	r1, [sp, #16]
 8005790:	4808      	ldr	r0, [pc, #32]	@ (80057b4 <siprintf+0x38>)
 8005792:	4909      	ldr	r1, [pc, #36]	@ (80057b8 <siprintf+0x3c>)
 8005794:	f853 2b04 	ldr.w	r2, [r3], #4
 8005798:	9105      	str	r1, [sp, #20]
 800579a:	6800      	ldr	r0, [r0, #0]
 800579c:	a902      	add	r1, sp, #8
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	f002 fc54 	bl	800804c <_svfiprintf_r>
 80057a4:	2200      	movs	r2, #0
 80057a6:	9b02      	ldr	r3, [sp, #8]
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	b01c      	add	sp, #112	@ 0x70
 80057ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80057b0:	b003      	add	sp, #12
 80057b2:	4770      	bx	lr
 80057b4:	2000003c 	.word	0x2000003c
 80057b8:	ffff0208 	.word	0xffff0208

080057bc <__sread>:
 80057bc:	b510      	push	{r4, lr}
 80057be:	460c      	mov	r4, r1
 80057c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c4:	f000 f900 	bl	80059c8 <_read_r>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	bfab      	itete	ge
 80057cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057ce:	89a3      	ldrhlt	r3, [r4, #12]
 80057d0:	181b      	addge	r3, r3, r0
 80057d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057d6:	bfac      	ite	ge
 80057d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057da:	81a3      	strhlt	r3, [r4, #12]
 80057dc:	bd10      	pop	{r4, pc}

080057de <__swrite>:
 80057de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e2:	461f      	mov	r7, r3
 80057e4:	898b      	ldrh	r3, [r1, #12]
 80057e6:	4605      	mov	r5, r0
 80057e8:	05db      	lsls	r3, r3, #23
 80057ea:	460c      	mov	r4, r1
 80057ec:	4616      	mov	r6, r2
 80057ee:	d505      	bpl.n	80057fc <__swrite+0x1e>
 80057f0:	2302      	movs	r3, #2
 80057f2:	2200      	movs	r2, #0
 80057f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f8:	f000 f8d4 	bl	80059a4 <_lseek_r>
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	4632      	mov	r2, r6
 8005800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005804:	81a3      	strh	r3, [r4, #12]
 8005806:	4628      	mov	r0, r5
 8005808:	463b      	mov	r3, r7
 800580a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800580e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005812:	f000 b8eb 	b.w	80059ec <_write_r>

08005816 <__sseek>:
 8005816:	b510      	push	{r4, lr}
 8005818:	460c      	mov	r4, r1
 800581a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800581e:	f000 f8c1 	bl	80059a4 <_lseek_r>
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	bf15      	itete	ne
 8005828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800582a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800582e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005832:	81a3      	strheq	r3, [r4, #12]
 8005834:	bf18      	it	ne
 8005836:	81a3      	strhne	r3, [r4, #12]
 8005838:	bd10      	pop	{r4, pc}

0800583a <__sclose>:
 800583a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583e:	f000 b8a1 	b.w	8005984 <_close_r>

08005842 <__swbuf_r>:
 8005842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005844:	460e      	mov	r6, r1
 8005846:	4614      	mov	r4, r2
 8005848:	4605      	mov	r5, r0
 800584a:	b118      	cbz	r0, 8005854 <__swbuf_r+0x12>
 800584c:	6a03      	ldr	r3, [r0, #32]
 800584e:	b90b      	cbnz	r3, 8005854 <__swbuf_r+0x12>
 8005850:	f7ff feee 	bl	8005630 <__sinit>
 8005854:	69a3      	ldr	r3, [r4, #24]
 8005856:	60a3      	str	r3, [r4, #8]
 8005858:	89a3      	ldrh	r3, [r4, #12]
 800585a:	071a      	lsls	r2, r3, #28
 800585c:	d501      	bpl.n	8005862 <__swbuf_r+0x20>
 800585e:	6923      	ldr	r3, [r4, #16]
 8005860:	b943      	cbnz	r3, 8005874 <__swbuf_r+0x32>
 8005862:	4621      	mov	r1, r4
 8005864:	4628      	mov	r0, r5
 8005866:	f000 f82b 	bl	80058c0 <__swsetup_r>
 800586a:	b118      	cbz	r0, 8005874 <__swbuf_r+0x32>
 800586c:	f04f 37ff 	mov.w	r7, #4294967295
 8005870:	4638      	mov	r0, r7
 8005872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	6922      	ldr	r2, [r4, #16]
 8005878:	b2f6      	uxtb	r6, r6
 800587a:	1a98      	subs	r0, r3, r2
 800587c:	6963      	ldr	r3, [r4, #20]
 800587e:	4637      	mov	r7, r6
 8005880:	4283      	cmp	r3, r0
 8005882:	dc05      	bgt.n	8005890 <__swbuf_r+0x4e>
 8005884:	4621      	mov	r1, r4
 8005886:	4628      	mov	r0, r5
 8005888:	f002 fe9c 	bl	80085c4 <_fflush_r>
 800588c:	2800      	cmp	r0, #0
 800588e:	d1ed      	bne.n	800586c <__swbuf_r+0x2a>
 8005890:	68a3      	ldr	r3, [r4, #8]
 8005892:	3b01      	subs	r3, #1
 8005894:	60a3      	str	r3, [r4, #8]
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	6022      	str	r2, [r4, #0]
 800589c:	701e      	strb	r6, [r3, #0]
 800589e:	6962      	ldr	r2, [r4, #20]
 80058a0:	1c43      	adds	r3, r0, #1
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d004      	beq.n	80058b0 <__swbuf_r+0x6e>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	07db      	lsls	r3, r3, #31
 80058aa:	d5e1      	bpl.n	8005870 <__swbuf_r+0x2e>
 80058ac:	2e0a      	cmp	r6, #10
 80058ae:	d1df      	bne.n	8005870 <__swbuf_r+0x2e>
 80058b0:	4621      	mov	r1, r4
 80058b2:	4628      	mov	r0, r5
 80058b4:	f002 fe86 	bl	80085c4 <_fflush_r>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d0d9      	beq.n	8005870 <__swbuf_r+0x2e>
 80058bc:	e7d6      	b.n	800586c <__swbuf_r+0x2a>
	...

080058c0 <__swsetup_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4b29      	ldr	r3, [pc, #164]	@ (8005968 <__swsetup_r+0xa8>)
 80058c4:	4605      	mov	r5, r0
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	460c      	mov	r4, r1
 80058ca:	b118      	cbz	r0, 80058d4 <__swsetup_r+0x14>
 80058cc:	6a03      	ldr	r3, [r0, #32]
 80058ce:	b90b      	cbnz	r3, 80058d4 <__swsetup_r+0x14>
 80058d0:	f7ff feae 	bl	8005630 <__sinit>
 80058d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058d8:	0719      	lsls	r1, r3, #28
 80058da:	d422      	bmi.n	8005922 <__swsetup_r+0x62>
 80058dc:	06da      	lsls	r2, r3, #27
 80058de:	d407      	bmi.n	80058f0 <__swsetup_r+0x30>
 80058e0:	2209      	movs	r2, #9
 80058e2:	602a      	str	r2, [r5, #0]
 80058e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	e033      	b.n	8005958 <__swsetup_r+0x98>
 80058f0:	0758      	lsls	r0, r3, #29
 80058f2:	d512      	bpl.n	800591a <__swsetup_r+0x5a>
 80058f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058f6:	b141      	cbz	r1, 800590a <__swsetup_r+0x4a>
 80058f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058fc:	4299      	cmp	r1, r3
 80058fe:	d002      	beq.n	8005906 <__swsetup_r+0x46>
 8005900:	4628      	mov	r0, r5
 8005902:	f000 ff25 	bl	8006750 <_free_r>
 8005906:	2300      	movs	r3, #0
 8005908:	6363      	str	r3, [r4, #52]	@ 0x34
 800590a:	89a3      	ldrh	r3, [r4, #12]
 800590c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005910:	81a3      	strh	r3, [r4, #12]
 8005912:	2300      	movs	r3, #0
 8005914:	6063      	str	r3, [r4, #4]
 8005916:	6923      	ldr	r3, [r4, #16]
 8005918:	6023      	str	r3, [r4, #0]
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f043 0308 	orr.w	r3, r3, #8
 8005920:	81a3      	strh	r3, [r4, #12]
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	b94b      	cbnz	r3, 800593a <__swsetup_r+0x7a>
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800592c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005930:	d003      	beq.n	800593a <__swsetup_r+0x7a>
 8005932:	4621      	mov	r1, r4
 8005934:	4628      	mov	r0, r5
 8005936:	f002 fe92 	bl	800865e <__smakebuf_r>
 800593a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800593e:	f013 0201 	ands.w	r2, r3, #1
 8005942:	d00a      	beq.n	800595a <__swsetup_r+0x9a>
 8005944:	2200      	movs	r2, #0
 8005946:	60a2      	str	r2, [r4, #8]
 8005948:	6962      	ldr	r2, [r4, #20]
 800594a:	4252      	negs	r2, r2
 800594c:	61a2      	str	r2, [r4, #24]
 800594e:	6922      	ldr	r2, [r4, #16]
 8005950:	b942      	cbnz	r2, 8005964 <__swsetup_r+0xa4>
 8005952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005956:	d1c5      	bne.n	80058e4 <__swsetup_r+0x24>
 8005958:	bd38      	pop	{r3, r4, r5, pc}
 800595a:	0799      	lsls	r1, r3, #30
 800595c:	bf58      	it	pl
 800595e:	6962      	ldrpl	r2, [r4, #20]
 8005960:	60a2      	str	r2, [r4, #8]
 8005962:	e7f4      	b.n	800594e <__swsetup_r+0x8e>
 8005964:	2000      	movs	r0, #0
 8005966:	e7f7      	b.n	8005958 <__swsetup_r+0x98>
 8005968:	2000003c 	.word	0x2000003c

0800596c <memset>:
 800596c:	4603      	mov	r3, r0
 800596e:	4402      	add	r2, r0
 8005970:	4293      	cmp	r3, r2
 8005972:	d100      	bne.n	8005976 <memset+0xa>
 8005974:	4770      	bx	lr
 8005976:	f803 1b01 	strb.w	r1, [r3], #1
 800597a:	e7f9      	b.n	8005970 <memset+0x4>

0800597c <_localeconv_r>:
 800597c:	4800      	ldr	r0, [pc, #0]	@ (8005980 <_localeconv_r+0x4>)
 800597e:	4770      	bx	lr
 8005980:	2000017c 	.word	0x2000017c

08005984 <_close_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	2300      	movs	r3, #0
 8005988:	4d05      	ldr	r5, [pc, #20]	@ (80059a0 <_close_r+0x1c>)
 800598a:	4604      	mov	r4, r0
 800598c:	4608      	mov	r0, r1
 800598e:	602b      	str	r3, [r5, #0]
 8005990:	f7fb ff6d 	bl	800186e <_close>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_close_r+0x1a>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_close_r+0x1a>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	20004284 	.word	0x20004284

080059a4 <_lseek_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4604      	mov	r4, r0
 80059a8:	4608      	mov	r0, r1
 80059aa:	4611      	mov	r1, r2
 80059ac:	2200      	movs	r2, #0
 80059ae:	4d05      	ldr	r5, [pc, #20]	@ (80059c4 <_lseek_r+0x20>)
 80059b0:	602a      	str	r2, [r5, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f7fb ff7f 	bl	80018b6 <_lseek>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_lseek_r+0x1e>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_lseek_r+0x1e>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	20004284 	.word	0x20004284

080059c8 <_read_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4604      	mov	r4, r0
 80059cc:	4608      	mov	r0, r1
 80059ce:	4611      	mov	r1, r2
 80059d0:	2200      	movs	r2, #0
 80059d2:	4d05      	ldr	r5, [pc, #20]	@ (80059e8 <_read_r+0x20>)
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f7fb ff2c 	bl	8001834 <_read>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d102      	bne.n	80059e6 <_read_r+0x1e>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	b103      	cbz	r3, 80059e6 <_read_r+0x1e>
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	20004284 	.word	0x20004284

080059ec <_write_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4604      	mov	r4, r0
 80059f0:	4608      	mov	r0, r1
 80059f2:	4611      	mov	r1, r2
 80059f4:	2200      	movs	r2, #0
 80059f6:	4d05      	ldr	r5, [pc, #20]	@ (8005a0c <_write_r+0x20>)
 80059f8:	602a      	str	r2, [r5, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f7fd fcac 	bl	8003358 <_write>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_write_r+0x1e>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_write_r+0x1e>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	20004284 	.word	0x20004284

08005a10 <__errno>:
 8005a10:	4b01      	ldr	r3, [pc, #4]	@ (8005a18 <__errno+0x8>)
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	2000003c 	.word	0x2000003c

08005a1c <__libc_init_array>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	2600      	movs	r6, #0
 8005a20:	4d0c      	ldr	r5, [pc, #48]	@ (8005a54 <__libc_init_array+0x38>)
 8005a22:	4c0d      	ldr	r4, [pc, #52]	@ (8005a58 <__libc_init_array+0x3c>)
 8005a24:	1b64      	subs	r4, r4, r5
 8005a26:	10a4      	asrs	r4, r4, #2
 8005a28:	42a6      	cmp	r6, r4
 8005a2a:	d109      	bne.n	8005a40 <__libc_init_array+0x24>
 8005a2c:	f004 f926 	bl	8009c7c <_init>
 8005a30:	2600      	movs	r6, #0
 8005a32:	4d0a      	ldr	r5, [pc, #40]	@ (8005a5c <__libc_init_array+0x40>)
 8005a34:	4c0a      	ldr	r4, [pc, #40]	@ (8005a60 <__libc_init_array+0x44>)
 8005a36:	1b64      	subs	r4, r4, r5
 8005a38:	10a4      	asrs	r4, r4, #2
 8005a3a:	42a6      	cmp	r6, r4
 8005a3c:	d105      	bne.n	8005a4a <__libc_init_array+0x2e>
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a44:	4798      	blx	r3
 8005a46:	3601      	adds	r6, #1
 8005a48:	e7ee      	b.n	8005a28 <__libc_init_array+0xc>
 8005a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4e:	4798      	blx	r3
 8005a50:	3601      	adds	r6, #1
 8005a52:	e7f2      	b.n	8005a3a <__libc_init_array+0x1e>
 8005a54:	0800b220 	.word	0x0800b220
 8005a58:	0800b220 	.word	0x0800b220
 8005a5c:	0800b220 	.word	0x0800b220
 8005a60:	0800b224 	.word	0x0800b224

08005a64 <__retarget_lock_init_recursive>:
 8005a64:	4770      	bx	lr

08005a66 <__retarget_lock_acquire_recursive>:
 8005a66:	4770      	bx	lr

08005a68 <__retarget_lock_release_recursive>:
 8005a68:	4770      	bx	lr

08005a6a <memchr>:
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	b510      	push	{r4, lr}
 8005a6e:	b2c9      	uxtb	r1, r1
 8005a70:	4402      	add	r2, r0
 8005a72:	4293      	cmp	r3, r2
 8005a74:	4618      	mov	r0, r3
 8005a76:	d101      	bne.n	8005a7c <memchr+0x12>
 8005a78:	2000      	movs	r0, #0
 8005a7a:	e003      	b.n	8005a84 <memchr+0x1a>
 8005a7c:	7804      	ldrb	r4, [r0, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	428c      	cmp	r4, r1
 8005a82:	d1f6      	bne.n	8005a72 <memchr+0x8>
 8005a84:	bd10      	pop	{r4, pc}

08005a86 <memcpy>:
 8005a86:	440a      	add	r2, r1
 8005a88:	4291      	cmp	r1, r2
 8005a8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a8e:	d100      	bne.n	8005a92 <memcpy+0xc>
 8005a90:	4770      	bx	lr
 8005a92:	b510      	push	{r4, lr}
 8005a94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a98:	4291      	cmp	r1, r2
 8005a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9e:	d1f9      	bne.n	8005a94 <memcpy+0xe>
 8005aa0:	bd10      	pop	{r4, pc}
	...

08005aa4 <nanf>:
 8005aa4:	4800      	ldr	r0, [pc, #0]	@ (8005aa8 <nanf+0x4>)
 8005aa6:	4770      	bx	lr
 8005aa8:	7fc00000 	.word	0x7fc00000

08005aac <quorem>:
 8005aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab0:	6903      	ldr	r3, [r0, #16]
 8005ab2:	690c      	ldr	r4, [r1, #16]
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	db7e      	blt.n	8005bb8 <quorem+0x10c>
 8005aba:	3c01      	subs	r4, #1
 8005abc:	00a3      	lsls	r3, r4, #2
 8005abe:	f100 0514 	add.w	r5, r0, #20
 8005ac2:	f101 0814 	add.w	r8, r1, #20
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005acc:	9301      	str	r3, [sp, #4]
 8005ace:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ad2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ade:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ae2:	d32e      	bcc.n	8005b42 <quorem+0x96>
 8005ae4:	f04f 0a00 	mov.w	sl, #0
 8005ae8:	46c4      	mov	ip, r8
 8005aea:	46ae      	mov	lr, r5
 8005aec:	46d3      	mov	fp, sl
 8005aee:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005af2:	b298      	uxth	r0, r3
 8005af4:	fb06 a000 	mla	r0, r6, r0, sl
 8005af8:	0c1b      	lsrs	r3, r3, #16
 8005afa:	0c02      	lsrs	r2, r0, #16
 8005afc:	fb06 2303 	mla	r3, r6, r3, r2
 8005b00:	f8de 2000 	ldr.w	r2, [lr]
 8005b04:	b280      	uxth	r0, r0
 8005b06:	b292      	uxth	r2, r2
 8005b08:	1a12      	subs	r2, r2, r0
 8005b0a:	445a      	add	r2, fp
 8005b0c:	f8de 0000 	ldr.w	r0, [lr]
 8005b10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b1a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b1e:	b292      	uxth	r2, r2
 8005b20:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b24:	45e1      	cmp	r9, ip
 8005b26:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b2a:	f84e 2b04 	str.w	r2, [lr], #4
 8005b2e:	d2de      	bcs.n	8005aee <quorem+0x42>
 8005b30:	9b00      	ldr	r3, [sp, #0]
 8005b32:	58eb      	ldr	r3, [r5, r3]
 8005b34:	b92b      	cbnz	r3, 8005b42 <quorem+0x96>
 8005b36:	9b01      	ldr	r3, [sp, #4]
 8005b38:	3b04      	subs	r3, #4
 8005b3a:	429d      	cmp	r5, r3
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	d32f      	bcc.n	8005ba0 <quorem+0xf4>
 8005b40:	613c      	str	r4, [r7, #16]
 8005b42:	4638      	mov	r0, r7
 8005b44:	f001 f9c4 	bl	8006ed0 <__mcmp>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	db25      	blt.n	8005b98 <quorem+0xec>
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	2000      	movs	r0, #0
 8005b50:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b54:	f8d1 c000 	ldr.w	ip, [r1]
 8005b58:	fa1f fe82 	uxth.w	lr, r2
 8005b5c:	fa1f f38c 	uxth.w	r3, ip
 8005b60:	eba3 030e 	sub.w	r3, r3, lr
 8005b64:	4403      	add	r3, r0
 8005b66:	0c12      	lsrs	r2, r2, #16
 8005b68:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005b6c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b76:	45c1      	cmp	r9, r8
 8005b78:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b7c:	f841 3b04 	str.w	r3, [r1], #4
 8005b80:	d2e6      	bcs.n	8005b50 <quorem+0xa4>
 8005b82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b8a:	b922      	cbnz	r2, 8005b96 <quorem+0xea>
 8005b8c:	3b04      	subs	r3, #4
 8005b8e:	429d      	cmp	r5, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	d30b      	bcc.n	8005bac <quorem+0x100>
 8005b94:	613c      	str	r4, [r7, #16]
 8005b96:	3601      	adds	r6, #1
 8005b98:	4630      	mov	r0, r6
 8005b9a:	b003      	add	sp, #12
 8005b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	3b04      	subs	r3, #4
 8005ba4:	2a00      	cmp	r2, #0
 8005ba6:	d1cb      	bne.n	8005b40 <quorem+0x94>
 8005ba8:	3c01      	subs	r4, #1
 8005baa:	e7c6      	b.n	8005b3a <quorem+0x8e>
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	3b04      	subs	r3, #4
 8005bb0:	2a00      	cmp	r2, #0
 8005bb2:	d1ef      	bne.n	8005b94 <quorem+0xe8>
 8005bb4:	3c01      	subs	r4, #1
 8005bb6:	e7ea      	b.n	8005b8e <quorem+0xe2>
 8005bb8:	2000      	movs	r0, #0
 8005bba:	e7ee      	b.n	8005b9a <quorem+0xee>
 8005bbc:	0000      	movs	r0, r0
	...

08005bc0 <_dtoa_r>:
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	69c7      	ldr	r7, [r0, #28]
 8005bca:	b097      	sub	sp, #92	@ 0x5c
 8005bcc:	4683      	mov	fp, r0
 8005bce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005bd2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005bd4:	b97f      	cbnz	r7, 8005bf6 <_dtoa_r+0x36>
 8005bd6:	2010      	movs	r0, #16
 8005bd8:	f000 fe02 	bl	80067e0 <malloc>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f8cb 001c 	str.w	r0, [fp, #28]
 8005be2:	b920      	cbnz	r0, 8005bee <_dtoa_r+0x2e>
 8005be4:	21ef      	movs	r1, #239	@ 0xef
 8005be6:	4ba8      	ldr	r3, [pc, #672]	@ (8005e88 <_dtoa_r+0x2c8>)
 8005be8:	48a8      	ldr	r0, [pc, #672]	@ (8005e8c <_dtoa_r+0x2cc>)
 8005bea:	f002 fdd9 	bl	80087a0 <__assert_func>
 8005bee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005bf2:	6007      	str	r7, [r0, #0]
 8005bf4:	60c7      	str	r7, [r0, #12]
 8005bf6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bfa:	6819      	ldr	r1, [r3, #0]
 8005bfc:	b159      	cbz	r1, 8005c16 <_dtoa_r+0x56>
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	2301      	movs	r3, #1
 8005c02:	4093      	lsls	r3, r2
 8005c04:	604a      	str	r2, [r1, #4]
 8005c06:	608b      	str	r3, [r1, #8]
 8005c08:	4658      	mov	r0, fp
 8005c0a:	f000 fedf 	bl	80069cc <_Bfree>
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	1e2b      	subs	r3, r5, #0
 8005c18:	bfaf      	iteee	ge
 8005c1a:	2300      	movge	r3, #0
 8005c1c:	2201      	movlt	r2, #1
 8005c1e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c22:	9303      	strlt	r3, [sp, #12]
 8005c24:	bfa8      	it	ge
 8005c26:	6033      	strge	r3, [r6, #0]
 8005c28:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c2c:	4b98      	ldr	r3, [pc, #608]	@ (8005e90 <_dtoa_r+0x2d0>)
 8005c2e:	bfb8      	it	lt
 8005c30:	6032      	strlt	r2, [r6, #0]
 8005c32:	ea33 0308 	bics.w	r3, r3, r8
 8005c36:	d112      	bne.n	8005c5e <_dtoa_r+0x9e>
 8005c38:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c3c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c44:	4323      	orrs	r3, r4
 8005c46:	f000 8550 	beq.w	80066ea <_dtoa_r+0xb2a>
 8005c4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c4c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005e94 <_dtoa_r+0x2d4>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 8552 	beq.w	80066fa <_dtoa_r+0xb3a>
 8005c56:	f10a 0303 	add.w	r3, sl, #3
 8005c5a:	f000 bd4c 	b.w	80066f6 <_dtoa_r+0xb36>
 8005c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c62:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f7fa fe9b 	bl	80009a8 <__aeabi_dcmpeq>
 8005c72:	4607      	mov	r7, r0
 8005c74:	b158      	cbz	r0, 8005c8e <_dtoa_r+0xce>
 8005c76:	2301      	movs	r3, #1
 8005c78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c7e:	b113      	cbz	r3, 8005c86 <_dtoa_r+0xc6>
 8005c80:	4b85      	ldr	r3, [pc, #532]	@ (8005e98 <_dtoa_r+0x2d8>)
 8005c82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005e9c <_dtoa_r+0x2dc>
 8005c8a:	f000 bd36 	b.w	80066fa <_dtoa_r+0xb3a>
 8005c8e:	ab14      	add	r3, sp, #80	@ 0x50
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	ab15      	add	r3, sp, #84	@ 0x54
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	4658      	mov	r0, fp
 8005c98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005c9c:	f001 fa30 	bl	8007100 <__d2b>
 8005ca0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005ca4:	4681      	mov	r9, r0
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	d077      	beq.n	8005d9a <_dtoa_r+0x1da>
 8005caa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cb0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cb8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005cbc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005cc0:	9712      	str	r7, [sp, #72]	@ 0x48
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4b76      	ldr	r3, [pc, #472]	@ (8005ea0 <_dtoa_r+0x2e0>)
 8005cc8:	f7fa fa4e 	bl	8000168 <__aeabi_dsub>
 8005ccc:	a368      	add	r3, pc, #416	@ (adr r3, 8005e70 <_dtoa_r+0x2b0>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fc01 	bl	80004d8 <__aeabi_dmul>
 8005cd6:	a368      	add	r3, pc, #416	@ (adr r3, 8005e78 <_dtoa_r+0x2b8>)
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f7fa fa46 	bl	800016c <__adddf3>
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	460d      	mov	r5, r1
 8005ce6:	f7fa fb8d 	bl	8000404 <__aeabi_i2d>
 8005cea:	a365      	add	r3, pc, #404	@ (adr r3, 8005e80 <_dtoa_r+0x2c0>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	f7fa fbf2 	bl	80004d8 <__aeabi_dmul>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	f7fa fa36 	bl	800016c <__adddf3>
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	f7fa fe98 	bl	8000a38 <__aeabi_d2iz>
 8005d08:	2200      	movs	r2, #0
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4620      	mov	r0, r4
 8005d10:	4629      	mov	r1, r5
 8005d12:	f7fa fe53 	bl	80009bc <__aeabi_dcmplt>
 8005d16:	b140      	cbz	r0, 8005d2a <_dtoa_r+0x16a>
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f7fa fb73 	bl	8000404 <__aeabi_i2d>
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	f7fa fe41 	bl	80009a8 <__aeabi_dcmpeq>
 8005d26:	b900      	cbnz	r0, 8005d2a <_dtoa_r+0x16a>
 8005d28:	3f01      	subs	r7, #1
 8005d2a:	2f16      	cmp	r7, #22
 8005d2c:	d853      	bhi.n	8005dd6 <_dtoa_r+0x216>
 8005d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d32:	4b5c      	ldr	r3, [pc, #368]	@ (8005ea4 <_dtoa_r+0x2e4>)
 8005d34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f7fa fe3e 	bl	80009bc <__aeabi_dcmplt>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d04a      	beq.n	8005dda <_dtoa_r+0x21a>
 8005d44:	2300      	movs	r3, #0
 8005d46:	3f01      	subs	r7, #1
 8005d48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d4c:	1b9b      	subs	r3, r3, r6
 8005d4e:	1e5a      	subs	r2, r3, #1
 8005d50:	bf46      	itte	mi
 8005d52:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d56:	2300      	movmi	r3, #0
 8005d58:	f04f 0800 	movpl.w	r8, #0
 8005d5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d5e:	bf48      	it	mi
 8005d60:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005d62:	2f00      	cmp	r7, #0
 8005d64:	db3b      	blt.n	8005dde <_dtoa_r+0x21e>
 8005d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d68:	970e      	str	r7, [sp, #56]	@ 0x38
 8005d6a:	443b      	add	r3, r7
 8005d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d6e:	2300      	movs	r3, #0
 8005d70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d74:	2b09      	cmp	r3, #9
 8005d76:	d866      	bhi.n	8005e46 <_dtoa_r+0x286>
 8005d78:	2b05      	cmp	r3, #5
 8005d7a:	bfc4      	itt	gt
 8005d7c:	3b04      	subgt	r3, #4
 8005d7e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005d80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d82:	bfc8      	it	gt
 8005d84:	2400      	movgt	r4, #0
 8005d86:	f1a3 0302 	sub.w	r3, r3, #2
 8005d8a:	bfd8      	it	le
 8005d8c:	2401      	movle	r4, #1
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d864      	bhi.n	8005e5c <_dtoa_r+0x29c>
 8005d92:	e8df f003 	tbb	[pc, r3]
 8005d96:	382b      	.short	0x382b
 8005d98:	5636      	.short	0x5636
 8005d9a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005d9e:	441e      	add	r6, r3
 8005da0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	bfc1      	itttt	gt
 8005da8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005dac:	fa08 f803 	lslgt.w	r8, r8, r3
 8005db0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005db4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005db8:	bfd6      	itet	le
 8005dba:	f1c3 0320 	rsble	r3, r3, #32
 8005dbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005dc2:	fa04 f003 	lslle.w	r0, r4, r3
 8005dc6:	f7fa fb0d 	bl	80003e4 <__aeabi_ui2d>
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005dd0:	3e01      	subs	r6, #1
 8005dd2:	9212      	str	r2, [sp, #72]	@ 0x48
 8005dd4:	e775      	b.n	8005cc2 <_dtoa_r+0x102>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e7b6      	b.n	8005d48 <_dtoa_r+0x188>
 8005dda:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005ddc:	e7b5      	b.n	8005d4a <_dtoa_r+0x18a>
 8005dde:	427b      	negs	r3, r7
 8005de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de2:	2300      	movs	r3, #0
 8005de4:	eba8 0807 	sub.w	r8, r8, r7
 8005de8:	930e      	str	r3, [sp, #56]	@ 0x38
 8005dea:	e7c2      	b.n	8005d72 <_dtoa_r+0x1b2>
 8005dec:	2300      	movs	r3, #0
 8005dee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005df0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dc35      	bgt.n	8005e62 <_dtoa_r+0x2a2>
 8005df6:	2301      	movs	r3, #1
 8005df8:	461a      	mov	r2, r3
 8005dfa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005dfe:	9221      	str	r2, [sp, #132]	@ 0x84
 8005e00:	e00b      	b.n	8005e1a <_dtoa_r+0x25a>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e7f3      	b.n	8005dee <_dtoa_r+0x22e>
 8005e06:	2300      	movs	r3, #0
 8005e08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	9308      	str	r3, [sp, #32]
 8005e10:	3301      	adds	r3, #1
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	9307      	str	r3, [sp, #28]
 8005e16:	bfb8      	it	lt
 8005e18:	2301      	movlt	r3, #1
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e22:	f102 0514 	add.w	r5, r2, #20
 8005e26:	429d      	cmp	r5, r3
 8005e28:	d91f      	bls.n	8005e6a <_dtoa_r+0x2aa>
 8005e2a:	6041      	str	r1, [r0, #4]
 8005e2c:	4658      	mov	r0, fp
 8005e2e:	f000 fd8d 	bl	800694c <_Balloc>
 8005e32:	4682      	mov	sl, r0
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d139      	bne.n	8005eac <_dtoa_r+0x2ec>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea8 <_dtoa_r+0x2e8>)
 8005e40:	e6d2      	b.n	8005be8 <_dtoa_r+0x28>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e7e0      	b.n	8005e08 <_dtoa_r+0x248>
 8005e46:	2401      	movs	r4, #1
 8005e48:	2300      	movs	r3, #0
 8005e4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e4c:	9320      	str	r3, [sp, #128]	@ 0x80
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e52:	2200      	movs	r2, #0
 8005e54:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e58:	2312      	movs	r3, #18
 8005e5a:	e7d0      	b.n	8005dfe <_dtoa_r+0x23e>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e60:	e7f5      	b.n	8005e4e <_dtoa_r+0x28e>
 8005e62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e68:	e7d7      	b.n	8005e1a <_dtoa_r+0x25a>
 8005e6a:	3101      	adds	r1, #1
 8005e6c:	0052      	lsls	r2, r2, #1
 8005e6e:	e7d8      	b.n	8005e22 <_dtoa_r+0x262>
 8005e70:	636f4361 	.word	0x636f4361
 8005e74:	3fd287a7 	.word	0x3fd287a7
 8005e78:	8b60c8b3 	.word	0x8b60c8b3
 8005e7c:	3fc68a28 	.word	0x3fc68a28
 8005e80:	509f79fb 	.word	0x509f79fb
 8005e84:	3fd34413 	.word	0x3fd34413
 8005e88:	0800ae14 	.word	0x0800ae14
 8005e8c:	0800ae2b 	.word	0x0800ae2b
 8005e90:	7ff00000 	.word	0x7ff00000
 8005e94:	0800ae10 	.word	0x0800ae10
 8005e98:	0800addf 	.word	0x0800addf
 8005e9c:	0800adde 	.word	0x0800adde
 8005ea0:	3ff80000 	.word	0x3ff80000
 8005ea4:	0800af28 	.word	0x0800af28
 8005ea8:	0800ae83 	.word	0x0800ae83
 8005eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005eb0:	6018      	str	r0, [r3, #0]
 8005eb2:	9b07      	ldr	r3, [sp, #28]
 8005eb4:	2b0e      	cmp	r3, #14
 8005eb6:	f200 80a4 	bhi.w	8006002 <_dtoa_r+0x442>
 8005eba:	2c00      	cmp	r4, #0
 8005ebc:	f000 80a1 	beq.w	8006002 <_dtoa_r+0x442>
 8005ec0:	2f00      	cmp	r7, #0
 8005ec2:	dd33      	ble.n	8005f2c <_dtoa_r+0x36c>
 8005ec4:	4b86      	ldr	r3, [pc, #536]	@ (80060e0 <_dtoa_r+0x520>)
 8005ec6:	f007 020f 	and.w	r2, r7, #15
 8005eca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ece:	05f8      	lsls	r0, r7, #23
 8005ed0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ed4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ed8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005edc:	d516      	bpl.n	8005f0c <_dtoa_r+0x34c>
 8005ede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ee2:	4b80      	ldr	r3, [pc, #512]	@ (80060e4 <_dtoa_r+0x524>)
 8005ee4:	2603      	movs	r6, #3
 8005ee6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005eea:	f7fa fc1f 	bl	800072c <__aeabi_ddiv>
 8005eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef2:	f004 040f 	and.w	r4, r4, #15
 8005ef6:	4d7b      	ldr	r5, [pc, #492]	@ (80060e4 <_dtoa_r+0x524>)
 8005ef8:	b954      	cbnz	r4, 8005f10 <_dtoa_r+0x350>
 8005efa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f02:	f7fa fc13 	bl	800072c <__aeabi_ddiv>
 8005f06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f0a:	e028      	b.n	8005f5e <_dtoa_r+0x39e>
 8005f0c:	2602      	movs	r6, #2
 8005f0e:	e7f2      	b.n	8005ef6 <_dtoa_r+0x336>
 8005f10:	07e1      	lsls	r1, r4, #31
 8005f12:	d508      	bpl.n	8005f26 <_dtoa_r+0x366>
 8005f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f1c:	f7fa fadc 	bl	80004d8 <__aeabi_dmul>
 8005f20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f24:	3601      	adds	r6, #1
 8005f26:	1064      	asrs	r4, r4, #1
 8005f28:	3508      	adds	r5, #8
 8005f2a:	e7e5      	b.n	8005ef8 <_dtoa_r+0x338>
 8005f2c:	f000 80d2 	beq.w	80060d4 <_dtoa_r+0x514>
 8005f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f34:	427c      	negs	r4, r7
 8005f36:	4b6a      	ldr	r3, [pc, #424]	@ (80060e0 <_dtoa_r+0x520>)
 8005f38:	f004 020f 	and.w	r2, r4, #15
 8005f3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f7fa fac8 	bl	80004d8 <__aeabi_dmul>
 8005f48:	2602      	movs	r6, #2
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f50:	4d64      	ldr	r5, [pc, #400]	@ (80060e4 <_dtoa_r+0x524>)
 8005f52:	1124      	asrs	r4, r4, #4
 8005f54:	2c00      	cmp	r4, #0
 8005f56:	f040 80b2 	bne.w	80060be <_dtoa_r+0x4fe>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1d3      	bne.n	8005f06 <_dtoa_r+0x346>
 8005f5e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80b7 	beq.w	80060d8 <_dtoa_r+0x518>
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4b5d      	ldr	r3, [pc, #372]	@ (80060e8 <_dtoa_r+0x528>)
 8005f72:	f7fa fd23 	bl	80009bc <__aeabi_dcmplt>
 8005f76:	2800      	cmp	r0, #0
 8005f78:	f000 80ae 	beq.w	80060d8 <_dtoa_r+0x518>
 8005f7c:	9b07      	ldr	r3, [sp, #28]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80aa 	beq.w	80060d8 <_dtoa_r+0x518>
 8005f84:	9b08      	ldr	r3, [sp, #32]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	dd37      	ble.n	8005ffa <_dtoa_r+0x43a>
 8005f8a:	1e7b      	subs	r3, r7, #1
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	2200      	movs	r2, #0
 8005f92:	4629      	mov	r1, r5
 8005f94:	4b55      	ldr	r3, [pc, #340]	@ (80060ec <_dtoa_r+0x52c>)
 8005f96:	f7fa fa9f 	bl	80004d8 <__aeabi_dmul>
 8005f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f9e:	9c08      	ldr	r4, [sp, #32]
 8005fa0:	3601      	adds	r6, #1
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f7fa fa2e 	bl	8000404 <__aeabi_i2d>
 8005fa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fac:	f7fa fa94 	bl	80004d8 <__aeabi_dmul>
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80060f0 <_dtoa_r+0x530>)
 8005fb4:	f7fa f8da 	bl	800016c <__adddf3>
 8005fb8:	4605      	mov	r5, r0
 8005fba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005fbe:	2c00      	cmp	r4, #0
 8005fc0:	f040 809a 	bne.w	80060f8 <_dtoa_r+0x538>
 8005fc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	4b4a      	ldr	r3, [pc, #296]	@ (80060f4 <_dtoa_r+0x534>)
 8005fcc:	f7fa f8cc 	bl	8000168 <__aeabi_dsub>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4633      	mov	r3, r6
 8005fdc:	f7fa fd0c 	bl	80009f8 <__aeabi_dcmpgt>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	f040 828e 	bne.w	8006502 <_dtoa_r+0x942>
 8005fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fea:	462a      	mov	r2, r5
 8005fec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ff0:	f7fa fce4 	bl	80009bc <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	f040 8127 	bne.w	8006248 <_dtoa_r+0x688>
 8005ffa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ffe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006002:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006004:	2b00      	cmp	r3, #0
 8006006:	f2c0 8163 	blt.w	80062d0 <_dtoa_r+0x710>
 800600a:	2f0e      	cmp	r7, #14
 800600c:	f300 8160 	bgt.w	80062d0 <_dtoa_r+0x710>
 8006010:	4b33      	ldr	r3, [pc, #204]	@ (80060e0 <_dtoa_r+0x520>)
 8006012:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800601a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800601e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006020:	2b00      	cmp	r3, #0
 8006022:	da03      	bge.n	800602c <_dtoa_r+0x46c>
 8006024:	9b07      	ldr	r3, [sp, #28]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f340 8100 	ble.w	800622c <_dtoa_r+0x66c>
 800602c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006030:	4656      	mov	r6, sl
 8006032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006036:	4620      	mov	r0, r4
 8006038:	4629      	mov	r1, r5
 800603a:	f7fa fb77 	bl	800072c <__aeabi_ddiv>
 800603e:	f7fa fcfb 	bl	8000a38 <__aeabi_d2iz>
 8006042:	4680      	mov	r8, r0
 8006044:	f7fa f9de 	bl	8000404 <__aeabi_i2d>
 8006048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800604c:	f7fa fa44 	bl	80004d8 <__aeabi_dmul>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4620      	mov	r0, r4
 8006056:	4629      	mov	r1, r5
 8006058:	f7fa f886 	bl	8000168 <__aeabi_dsub>
 800605c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006060:	9d07      	ldr	r5, [sp, #28]
 8006062:	f806 4b01 	strb.w	r4, [r6], #1
 8006066:	eba6 040a 	sub.w	r4, r6, sl
 800606a:	42a5      	cmp	r5, r4
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	f040 8116 	bne.w	80062a0 <_dtoa_r+0x6e0>
 8006074:	f7fa f87a 	bl	800016c <__adddf3>
 8006078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800607c:	4604      	mov	r4, r0
 800607e:	460d      	mov	r5, r1
 8006080:	f7fa fcba 	bl	80009f8 <__aeabi_dcmpgt>
 8006084:	2800      	cmp	r0, #0
 8006086:	f040 80f8 	bne.w	800627a <_dtoa_r+0x6ba>
 800608a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800608e:	4620      	mov	r0, r4
 8006090:	4629      	mov	r1, r5
 8006092:	f7fa fc89 	bl	80009a8 <__aeabi_dcmpeq>
 8006096:	b118      	cbz	r0, 80060a0 <_dtoa_r+0x4e0>
 8006098:	f018 0f01 	tst.w	r8, #1
 800609c:	f040 80ed 	bne.w	800627a <_dtoa_r+0x6ba>
 80060a0:	4649      	mov	r1, r9
 80060a2:	4658      	mov	r0, fp
 80060a4:	f000 fc92 	bl	80069cc <_Bfree>
 80060a8:	2300      	movs	r3, #0
 80060aa:	7033      	strb	r3, [r6, #0]
 80060ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060ae:	3701      	adds	r7, #1
 80060b0:	601f      	str	r7, [r3, #0]
 80060b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8320 	beq.w	80066fa <_dtoa_r+0xb3a>
 80060ba:	601e      	str	r6, [r3, #0]
 80060bc:	e31d      	b.n	80066fa <_dtoa_r+0xb3a>
 80060be:	07e2      	lsls	r2, r4, #31
 80060c0:	d505      	bpl.n	80060ce <_dtoa_r+0x50e>
 80060c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060c6:	f7fa fa07 	bl	80004d8 <__aeabi_dmul>
 80060ca:	2301      	movs	r3, #1
 80060cc:	3601      	adds	r6, #1
 80060ce:	1064      	asrs	r4, r4, #1
 80060d0:	3508      	adds	r5, #8
 80060d2:	e73f      	b.n	8005f54 <_dtoa_r+0x394>
 80060d4:	2602      	movs	r6, #2
 80060d6:	e742      	b.n	8005f5e <_dtoa_r+0x39e>
 80060d8:	9c07      	ldr	r4, [sp, #28]
 80060da:	9704      	str	r7, [sp, #16]
 80060dc:	e761      	b.n	8005fa2 <_dtoa_r+0x3e2>
 80060de:	bf00      	nop
 80060e0:	0800af28 	.word	0x0800af28
 80060e4:	0800af00 	.word	0x0800af00
 80060e8:	3ff00000 	.word	0x3ff00000
 80060ec:	40240000 	.word	0x40240000
 80060f0:	401c0000 	.word	0x401c0000
 80060f4:	40140000 	.word	0x40140000
 80060f8:	4b70      	ldr	r3, [pc, #448]	@ (80062bc <_dtoa_r+0x6fc>)
 80060fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006100:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006104:	4454      	add	r4, sl
 8006106:	2900      	cmp	r1, #0
 8006108:	d045      	beq.n	8006196 <_dtoa_r+0x5d6>
 800610a:	2000      	movs	r0, #0
 800610c:	496c      	ldr	r1, [pc, #432]	@ (80062c0 <_dtoa_r+0x700>)
 800610e:	f7fa fb0d 	bl	800072c <__aeabi_ddiv>
 8006112:	4633      	mov	r3, r6
 8006114:	462a      	mov	r2, r5
 8006116:	f7fa f827 	bl	8000168 <__aeabi_dsub>
 800611a:	4656      	mov	r6, sl
 800611c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006124:	f7fa fc88 	bl	8000a38 <__aeabi_d2iz>
 8006128:	4605      	mov	r5, r0
 800612a:	f7fa f96b 	bl	8000404 <__aeabi_i2d>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006136:	f7fa f817 	bl	8000168 <__aeabi_dsub>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	3530      	adds	r5, #48	@ 0x30
 8006140:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006144:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006148:	f806 5b01 	strb.w	r5, [r6], #1
 800614c:	f7fa fc36 	bl	80009bc <__aeabi_dcmplt>
 8006150:	2800      	cmp	r0, #0
 8006152:	d163      	bne.n	800621c <_dtoa_r+0x65c>
 8006154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006158:	2000      	movs	r0, #0
 800615a:	495a      	ldr	r1, [pc, #360]	@ (80062c4 <_dtoa_r+0x704>)
 800615c:	f7fa f804 	bl	8000168 <__aeabi_dsub>
 8006160:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006164:	f7fa fc2a 	bl	80009bc <__aeabi_dcmplt>
 8006168:	2800      	cmp	r0, #0
 800616a:	f040 8087 	bne.w	800627c <_dtoa_r+0x6bc>
 800616e:	42a6      	cmp	r6, r4
 8006170:	f43f af43 	beq.w	8005ffa <_dtoa_r+0x43a>
 8006174:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006178:	2200      	movs	r2, #0
 800617a:	4b53      	ldr	r3, [pc, #332]	@ (80062c8 <_dtoa_r+0x708>)
 800617c:	f7fa f9ac 	bl	80004d8 <__aeabi_dmul>
 8006180:	2200      	movs	r2, #0
 8006182:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618a:	4b4f      	ldr	r3, [pc, #316]	@ (80062c8 <_dtoa_r+0x708>)
 800618c:	f7fa f9a4 	bl	80004d8 <__aeabi_dmul>
 8006190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006194:	e7c4      	b.n	8006120 <_dtoa_r+0x560>
 8006196:	4631      	mov	r1, r6
 8006198:	4628      	mov	r0, r5
 800619a:	f7fa f99d 	bl	80004d8 <__aeabi_dmul>
 800619e:	4656      	mov	r6, sl
 80061a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061a4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80061a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061aa:	f7fa fc45 	bl	8000a38 <__aeabi_d2iz>
 80061ae:	4605      	mov	r5, r0
 80061b0:	f7fa f928 	bl	8000404 <__aeabi_i2d>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061bc:	f7f9 ffd4 	bl	8000168 <__aeabi_dsub>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	3530      	adds	r5, #48	@ 0x30
 80061c6:	f806 5b01 	strb.w	r5, [r6], #1
 80061ca:	42a6      	cmp	r6, r4
 80061cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	d124      	bne.n	8006220 <_dtoa_r+0x660>
 80061d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061da:	4b39      	ldr	r3, [pc, #228]	@ (80062c0 <_dtoa_r+0x700>)
 80061dc:	f7f9 ffc6 	bl	800016c <__adddf3>
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e8:	f7fa fc06 	bl	80009f8 <__aeabi_dcmpgt>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d145      	bne.n	800627c <_dtoa_r+0x6bc>
 80061f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061f4:	2000      	movs	r0, #0
 80061f6:	4932      	ldr	r1, [pc, #200]	@ (80062c0 <_dtoa_r+0x700>)
 80061f8:	f7f9 ffb6 	bl	8000168 <__aeabi_dsub>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006204:	f7fa fbda 	bl	80009bc <__aeabi_dcmplt>
 8006208:	2800      	cmp	r0, #0
 800620a:	f43f aef6 	beq.w	8005ffa <_dtoa_r+0x43a>
 800620e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006210:	1e73      	subs	r3, r6, #1
 8006212:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006214:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006218:	2b30      	cmp	r3, #48	@ 0x30
 800621a:	d0f8      	beq.n	800620e <_dtoa_r+0x64e>
 800621c:	9f04      	ldr	r7, [sp, #16]
 800621e:	e73f      	b.n	80060a0 <_dtoa_r+0x4e0>
 8006220:	4b29      	ldr	r3, [pc, #164]	@ (80062c8 <_dtoa_r+0x708>)
 8006222:	f7fa f959 	bl	80004d8 <__aeabi_dmul>
 8006226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800622a:	e7bc      	b.n	80061a6 <_dtoa_r+0x5e6>
 800622c:	d10c      	bne.n	8006248 <_dtoa_r+0x688>
 800622e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006232:	2200      	movs	r2, #0
 8006234:	4b25      	ldr	r3, [pc, #148]	@ (80062cc <_dtoa_r+0x70c>)
 8006236:	f7fa f94f 	bl	80004d8 <__aeabi_dmul>
 800623a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800623e:	f7fa fbd1 	bl	80009e4 <__aeabi_dcmpge>
 8006242:	2800      	cmp	r0, #0
 8006244:	f000 815b 	beq.w	80064fe <_dtoa_r+0x93e>
 8006248:	2400      	movs	r4, #0
 800624a:	4625      	mov	r5, r4
 800624c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800624e:	4656      	mov	r6, sl
 8006250:	43db      	mvns	r3, r3
 8006252:	9304      	str	r3, [sp, #16]
 8006254:	2700      	movs	r7, #0
 8006256:	4621      	mov	r1, r4
 8006258:	4658      	mov	r0, fp
 800625a:	f000 fbb7 	bl	80069cc <_Bfree>
 800625e:	2d00      	cmp	r5, #0
 8006260:	d0dc      	beq.n	800621c <_dtoa_r+0x65c>
 8006262:	b12f      	cbz	r7, 8006270 <_dtoa_r+0x6b0>
 8006264:	42af      	cmp	r7, r5
 8006266:	d003      	beq.n	8006270 <_dtoa_r+0x6b0>
 8006268:	4639      	mov	r1, r7
 800626a:	4658      	mov	r0, fp
 800626c:	f000 fbae 	bl	80069cc <_Bfree>
 8006270:	4629      	mov	r1, r5
 8006272:	4658      	mov	r0, fp
 8006274:	f000 fbaa 	bl	80069cc <_Bfree>
 8006278:	e7d0      	b.n	800621c <_dtoa_r+0x65c>
 800627a:	9704      	str	r7, [sp, #16]
 800627c:	4633      	mov	r3, r6
 800627e:	461e      	mov	r6, r3
 8006280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006284:	2a39      	cmp	r2, #57	@ 0x39
 8006286:	d107      	bne.n	8006298 <_dtoa_r+0x6d8>
 8006288:	459a      	cmp	sl, r3
 800628a:	d1f8      	bne.n	800627e <_dtoa_r+0x6be>
 800628c:	9a04      	ldr	r2, [sp, #16]
 800628e:	3201      	adds	r2, #1
 8006290:	9204      	str	r2, [sp, #16]
 8006292:	2230      	movs	r2, #48	@ 0x30
 8006294:	f88a 2000 	strb.w	r2, [sl]
 8006298:	781a      	ldrb	r2, [r3, #0]
 800629a:	3201      	adds	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	e7bd      	b.n	800621c <_dtoa_r+0x65c>
 80062a0:	2200      	movs	r2, #0
 80062a2:	4b09      	ldr	r3, [pc, #36]	@ (80062c8 <_dtoa_r+0x708>)
 80062a4:	f7fa f918 	bl	80004d8 <__aeabi_dmul>
 80062a8:	2200      	movs	r2, #0
 80062aa:	2300      	movs	r3, #0
 80062ac:	4604      	mov	r4, r0
 80062ae:	460d      	mov	r5, r1
 80062b0:	f7fa fb7a 	bl	80009a8 <__aeabi_dcmpeq>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f43f aebc 	beq.w	8006032 <_dtoa_r+0x472>
 80062ba:	e6f1      	b.n	80060a0 <_dtoa_r+0x4e0>
 80062bc:	0800af28 	.word	0x0800af28
 80062c0:	3fe00000 	.word	0x3fe00000
 80062c4:	3ff00000 	.word	0x3ff00000
 80062c8:	40240000 	.word	0x40240000
 80062cc:	40140000 	.word	0x40140000
 80062d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	f000 80db 	beq.w	800648e <_dtoa_r+0x8ce>
 80062d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80062da:	2a01      	cmp	r2, #1
 80062dc:	f300 80bf 	bgt.w	800645e <_dtoa_r+0x89e>
 80062e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80062e2:	2a00      	cmp	r2, #0
 80062e4:	f000 80b7 	beq.w	8006456 <_dtoa_r+0x896>
 80062e8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80062ec:	4646      	mov	r6, r8
 80062ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80062f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062f2:	2101      	movs	r1, #1
 80062f4:	441a      	add	r2, r3
 80062f6:	4658      	mov	r0, fp
 80062f8:	4498      	add	r8, r3
 80062fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80062fc:	f000 fc64 	bl	8006bc8 <__i2b>
 8006300:	4605      	mov	r5, r0
 8006302:	b15e      	cbz	r6, 800631c <_dtoa_r+0x75c>
 8006304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	dd08      	ble.n	800631c <_dtoa_r+0x75c>
 800630a:	42b3      	cmp	r3, r6
 800630c:	bfa8      	it	ge
 800630e:	4633      	movge	r3, r6
 8006310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006312:	eba8 0803 	sub.w	r8, r8, r3
 8006316:	1af6      	subs	r6, r6, r3
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	9309      	str	r3, [sp, #36]	@ 0x24
 800631c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800631e:	b1f3      	cbz	r3, 800635e <_dtoa_r+0x79e>
 8006320:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 80b7 	beq.w	8006496 <_dtoa_r+0x8d6>
 8006328:	b18c      	cbz	r4, 800634e <_dtoa_r+0x78e>
 800632a:	4629      	mov	r1, r5
 800632c:	4622      	mov	r2, r4
 800632e:	4658      	mov	r0, fp
 8006330:	f000 fd08 	bl	8006d44 <__pow5mult>
 8006334:	464a      	mov	r2, r9
 8006336:	4601      	mov	r1, r0
 8006338:	4605      	mov	r5, r0
 800633a:	4658      	mov	r0, fp
 800633c:	f000 fc5a 	bl	8006bf4 <__multiply>
 8006340:	4649      	mov	r1, r9
 8006342:	9004      	str	r0, [sp, #16]
 8006344:	4658      	mov	r0, fp
 8006346:	f000 fb41 	bl	80069cc <_Bfree>
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	4699      	mov	r9, r3
 800634e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006350:	1b1a      	subs	r2, r3, r4
 8006352:	d004      	beq.n	800635e <_dtoa_r+0x79e>
 8006354:	4649      	mov	r1, r9
 8006356:	4658      	mov	r0, fp
 8006358:	f000 fcf4 	bl	8006d44 <__pow5mult>
 800635c:	4681      	mov	r9, r0
 800635e:	2101      	movs	r1, #1
 8006360:	4658      	mov	r0, fp
 8006362:	f000 fc31 	bl	8006bc8 <__i2b>
 8006366:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006368:	4604      	mov	r4, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 81c9 	beq.w	8006702 <_dtoa_r+0xb42>
 8006370:	461a      	mov	r2, r3
 8006372:	4601      	mov	r1, r0
 8006374:	4658      	mov	r0, fp
 8006376:	f000 fce5 	bl	8006d44 <__pow5mult>
 800637a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800637c:	4604      	mov	r4, r0
 800637e:	2b01      	cmp	r3, #1
 8006380:	f300 808f 	bgt.w	80064a2 <_dtoa_r+0x8e2>
 8006384:	9b02      	ldr	r3, [sp, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f040 8087 	bne.w	800649a <_dtoa_r+0x8da>
 800638c:	9b03      	ldr	r3, [sp, #12]
 800638e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 8083 	bne.w	800649e <_dtoa_r+0x8de>
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800639e:	0d1b      	lsrs	r3, r3, #20
 80063a0:	051b      	lsls	r3, r3, #20
 80063a2:	b12b      	cbz	r3, 80063b0 <_dtoa_r+0x7f0>
 80063a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a6:	f108 0801 	add.w	r8, r8, #1
 80063aa:	3301      	adds	r3, #1
 80063ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ae:	2301      	movs	r3, #1
 80063b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 81aa 	beq.w	800670e <_dtoa_r+0xb4e>
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063c0:	6918      	ldr	r0, [r3, #16]
 80063c2:	f000 fbb5 	bl	8006b30 <__hi0bits>
 80063c6:	f1c0 0020 	rsb	r0, r0, #32
 80063ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063cc:	4418      	add	r0, r3
 80063ce:	f010 001f 	ands.w	r0, r0, #31
 80063d2:	d071      	beq.n	80064b8 <_dtoa_r+0x8f8>
 80063d4:	f1c0 0320 	rsb	r3, r0, #32
 80063d8:	2b04      	cmp	r3, #4
 80063da:	dd65      	ble.n	80064a8 <_dtoa_r+0x8e8>
 80063dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063de:	f1c0 001c 	rsb	r0, r0, #28
 80063e2:	4403      	add	r3, r0
 80063e4:	4480      	add	r8, r0
 80063e6:	4406      	add	r6, r0
 80063e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ea:	f1b8 0f00 	cmp.w	r8, #0
 80063ee:	dd05      	ble.n	80063fc <_dtoa_r+0x83c>
 80063f0:	4649      	mov	r1, r9
 80063f2:	4642      	mov	r2, r8
 80063f4:	4658      	mov	r0, fp
 80063f6:	f000 fcff 	bl	8006df8 <__lshift>
 80063fa:	4681      	mov	r9, r0
 80063fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dd05      	ble.n	800640e <_dtoa_r+0x84e>
 8006402:	4621      	mov	r1, r4
 8006404:	461a      	mov	r2, r3
 8006406:	4658      	mov	r0, fp
 8006408:	f000 fcf6 	bl	8006df8 <__lshift>
 800640c:	4604      	mov	r4, r0
 800640e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d053      	beq.n	80064bc <_dtoa_r+0x8fc>
 8006414:	4621      	mov	r1, r4
 8006416:	4648      	mov	r0, r9
 8006418:	f000 fd5a 	bl	8006ed0 <__mcmp>
 800641c:	2800      	cmp	r0, #0
 800641e:	da4d      	bge.n	80064bc <_dtoa_r+0x8fc>
 8006420:	1e7b      	subs	r3, r7, #1
 8006422:	4649      	mov	r1, r9
 8006424:	9304      	str	r3, [sp, #16]
 8006426:	220a      	movs	r2, #10
 8006428:	2300      	movs	r3, #0
 800642a:	4658      	mov	r0, fp
 800642c:	f000 faf0 	bl	8006a10 <__multadd>
 8006430:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006432:	4681      	mov	r9, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 816c 	beq.w	8006712 <_dtoa_r+0xb52>
 800643a:	2300      	movs	r3, #0
 800643c:	4629      	mov	r1, r5
 800643e:	220a      	movs	r2, #10
 8006440:	4658      	mov	r0, fp
 8006442:	f000 fae5 	bl	8006a10 <__multadd>
 8006446:	9b08      	ldr	r3, [sp, #32]
 8006448:	4605      	mov	r5, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	dc61      	bgt.n	8006512 <_dtoa_r+0x952>
 800644e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006450:	2b02      	cmp	r3, #2
 8006452:	dc3b      	bgt.n	80064cc <_dtoa_r+0x90c>
 8006454:	e05d      	b.n	8006512 <_dtoa_r+0x952>
 8006456:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006458:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800645c:	e746      	b.n	80062ec <_dtoa_r+0x72c>
 800645e:	9b07      	ldr	r3, [sp, #28]
 8006460:	1e5c      	subs	r4, r3, #1
 8006462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006464:	42a3      	cmp	r3, r4
 8006466:	bfbf      	itttt	lt
 8006468:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800646a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800646c:	1ae3      	sublt	r3, r4, r3
 800646e:	18d2      	addlt	r2, r2, r3
 8006470:	bfa8      	it	ge
 8006472:	1b1c      	subge	r4, r3, r4
 8006474:	9b07      	ldr	r3, [sp, #28]
 8006476:	bfbe      	ittt	lt
 8006478:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800647a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800647c:	2400      	movlt	r4, #0
 800647e:	2b00      	cmp	r3, #0
 8006480:	bfb5      	itete	lt
 8006482:	eba8 0603 	sublt.w	r6, r8, r3
 8006486:	4646      	movge	r6, r8
 8006488:	2300      	movlt	r3, #0
 800648a:	9b07      	ldrge	r3, [sp, #28]
 800648c:	e730      	b.n	80062f0 <_dtoa_r+0x730>
 800648e:	4646      	mov	r6, r8
 8006490:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006492:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006494:	e735      	b.n	8006302 <_dtoa_r+0x742>
 8006496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006498:	e75c      	b.n	8006354 <_dtoa_r+0x794>
 800649a:	2300      	movs	r3, #0
 800649c:	e788      	b.n	80063b0 <_dtoa_r+0x7f0>
 800649e:	9b02      	ldr	r3, [sp, #8]
 80064a0:	e786      	b.n	80063b0 <_dtoa_r+0x7f0>
 80064a2:	2300      	movs	r3, #0
 80064a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80064a6:	e788      	b.n	80063ba <_dtoa_r+0x7fa>
 80064a8:	d09f      	beq.n	80063ea <_dtoa_r+0x82a>
 80064aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ac:	331c      	adds	r3, #28
 80064ae:	441a      	add	r2, r3
 80064b0:	4498      	add	r8, r3
 80064b2:	441e      	add	r6, r3
 80064b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80064b6:	e798      	b.n	80063ea <_dtoa_r+0x82a>
 80064b8:	4603      	mov	r3, r0
 80064ba:	e7f6      	b.n	80064aa <_dtoa_r+0x8ea>
 80064bc:	9b07      	ldr	r3, [sp, #28]
 80064be:	9704      	str	r7, [sp, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dc20      	bgt.n	8006506 <_dtoa_r+0x946>
 80064c4:	9308      	str	r3, [sp, #32]
 80064c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	dd1e      	ble.n	800650a <_dtoa_r+0x94a>
 80064cc:	9b08      	ldr	r3, [sp, #32]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f47f aebc 	bne.w	800624c <_dtoa_r+0x68c>
 80064d4:	4621      	mov	r1, r4
 80064d6:	2205      	movs	r2, #5
 80064d8:	4658      	mov	r0, fp
 80064da:	f000 fa99 	bl	8006a10 <__multadd>
 80064de:	4601      	mov	r1, r0
 80064e0:	4604      	mov	r4, r0
 80064e2:	4648      	mov	r0, r9
 80064e4:	f000 fcf4 	bl	8006ed0 <__mcmp>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	f77f aeaf 	ble.w	800624c <_dtoa_r+0x68c>
 80064ee:	2331      	movs	r3, #49	@ 0x31
 80064f0:	4656      	mov	r6, sl
 80064f2:	f806 3b01 	strb.w	r3, [r6], #1
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	3301      	adds	r3, #1
 80064fa:	9304      	str	r3, [sp, #16]
 80064fc:	e6aa      	b.n	8006254 <_dtoa_r+0x694>
 80064fe:	9c07      	ldr	r4, [sp, #28]
 8006500:	9704      	str	r7, [sp, #16]
 8006502:	4625      	mov	r5, r4
 8006504:	e7f3      	b.n	80064ee <_dtoa_r+0x92e>
 8006506:	9b07      	ldr	r3, [sp, #28]
 8006508:	9308      	str	r3, [sp, #32]
 800650a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8104 	beq.w	800671a <_dtoa_r+0xb5a>
 8006512:	2e00      	cmp	r6, #0
 8006514:	dd05      	ble.n	8006522 <_dtoa_r+0x962>
 8006516:	4629      	mov	r1, r5
 8006518:	4632      	mov	r2, r6
 800651a:	4658      	mov	r0, fp
 800651c:	f000 fc6c 	bl	8006df8 <__lshift>
 8006520:	4605      	mov	r5, r0
 8006522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006524:	2b00      	cmp	r3, #0
 8006526:	d05a      	beq.n	80065de <_dtoa_r+0xa1e>
 8006528:	4658      	mov	r0, fp
 800652a:	6869      	ldr	r1, [r5, #4]
 800652c:	f000 fa0e 	bl	800694c <_Balloc>
 8006530:	4606      	mov	r6, r0
 8006532:	b928      	cbnz	r0, 8006540 <_dtoa_r+0x980>
 8006534:	4602      	mov	r2, r0
 8006536:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800653a:	4b83      	ldr	r3, [pc, #524]	@ (8006748 <_dtoa_r+0xb88>)
 800653c:	f7ff bb54 	b.w	8005be8 <_dtoa_r+0x28>
 8006540:	692a      	ldr	r2, [r5, #16]
 8006542:	f105 010c 	add.w	r1, r5, #12
 8006546:	3202      	adds	r2, #2
 8006548:	0092      	lsls	r2, r2, #2
 800654a:	300c      	adds	r0, #12
 800654c:	f7ff fa9b 	bl	8005a86 <memcpy>
 8006550:	2201      	movs	r2, #1
 8006552:	4631      	mov	r1, r6
 8006554:	4658      	mov	r0, fp
 8006556:	f000 fc4f 	bl	8006df8 <__lshift>
 800655a:	462f      	mov	r7, r5
 800655c:	4605      	mov	r5, r0
 800655e:	f10a 0301 	add.w	r3, sl, #1
 8006562:	9307      	str	r3, [sp, #28]
 8006564:	9b08      	ldr	r3, [sp, #32]
 8006566:	4453      	add	r3, sl
 8006568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800656a:	9b02      	ldr	r3, [sp, #8]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	930a      	str	r3, [sp, #40]	@ 0x28
 8006572:	9b07      	ldr	r3, [sp, #28]
 8006574:	4621      	mov	r1, r4
 8006576:	3b01      	subs	r3, #1
 8006578:	4648      	mov	r0, r9
 800657a:	9302      	str	r3, [sp, #8]
 800657c:	f7ff fa96 	bl	8005aac <quorem>
 8006580:	4639      	mov	r1, r7
 8006582:	9008      	str	r0, [sp, #32]
 8006584:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006588:	4648      	mov	r0, r9
 800658a:	f000 fca1 	bl	8006ed0 <__mcmp>
 800658e:	462a      	mov	r2, r5
 8006590:	9009      	str	r0, [sp, #36]	@ 0x24
 8006592:	4621      	mov	r1, r4
 8006594:	4658      	mov	r0, fp
 8006596:	f000 fcb7 	bl	8006f08 <__mdiff>
 800659a:	68c2      	ldr	r2, [r0, #12]
 800659c:	4606      	mov	r6, r0
 800659e:	bb02      	cbnz	r2, 80065e2 <_dtoa_r+0xa22>
 80065a0:	4601      	mov	r1, r0
 80065a2:	4648      	mov	r0, r9
 80065a4:	f000 fc94 	bl	8006ed0 <__mcmp>
 80065a8:	4602      	mov	r2, r0
 80065aa:	4631      	mov	r1, r6
 80065ac:	4658      	mov	r0, fp
 80065ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80065b0:	f000 fa0c 	bl	80069cc <_Bfree>
 80065b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80065b8:	9e07      	ldr	r6, [sp, #28]
 80065ba:	ea43 0102 	orr.w	r1, r3, r2
 80065be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065c0:	4319      	orrs	r1, r3
 80065c2:	d110      	bne.n	80065e6 <_dtoa_r+0xa26>
 80065c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065c8:	d029      	beq.n	800661e <_dtoa_r+0xa5e>
 80065ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dd02      	ble.n	80065d6 <_dtoa_r+0xa16>
 80065d0:	9b08      	ldr	r3, [sp, #32]
 80065d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80065d6:	9b02      	ldr	r3, [sp, #8]
 80065d8:	f883 8000 	strb.w	r8, [r3]
 80065dc:	e63b      	b.n	8006256 <_dtoa_r+0x696>
 80065de:	4628      	mov	r0, r5
 80065e0:	e7bb      	b.n	800655a <_dtoa_r+0x99a>
 80065e2:	2201      	movs	r2, #1
 80065e4:	e7e1      	b.n	80065aa <_dtoa_r+0x9ea>
 80065e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	db04      	blt.n	80065f6 <_dtoa_r+0xa36>
 80065ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80065ee:	430b      	orrs	r3, r1
 80065f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065f2:	430b      	orrs	r3, r1
 80065f4:	d120      	bne.n	8006638 <_dtoa_r+0xa78>
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	dded      	ble.n	80065d6 <_dtoa_r+0xa16>
 80065fa:	4649      	mov	r1, r9
 80065fc:	2201      	movs	r2, #1
 80065fe:	4658      	mov	r0, fp
 8006600:	f000 fbfa 	bl	8006df8 <__lshift>
 8006604:	4621      	mov	r1, r4
 8006606:	4681      	mov	r9, r0
 8006608:	f000 fc62 	bl	8006ed0 <__mcmp>
 800660c:	2800      	cmp	r0, #0
 800660e:	dc03      	bgt.n	8006618 <_dtoa_r+0xa58>
 8006610:	d1e1      	bne.n	80065d6 <_dtoa_r+0xa16>
 8006612:	f018 0f01 	tst.w	r8, #1
 8006616:	d0de      	beq.n	80065d6 <_dtoa_r+0xa16>
 8006618:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800661c:	d1d8      	bne.n	80065d0 <_dtoa_r+0xa10>
 800661e:	2339      	movs	r3, #57	@ 0x39
 8006620:	9a02      	ldr	r2, [sp, #8]
 8006622:	7013      	strb	r3, [r2, #0]
 8006624:	4633      	mov	r3, r6
 8006626:	461e      	mov	r6, r3
 8006628:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800662c:	3b01      	subs	r3, #1
 800662e:	2a39      	cmp	r2, #57	@ 0x39
 8006630:	d052      	beq.n	80066d8 <_dtoa_r+0xb18>
 8006632:	3201      	adds	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e60e      	b.n	8006256 <_dtoa_r+0x696>
 8006638:	2a00      	cmp	r2, #0
 800663a:	dd07      	ble.n	800664c <_dtoa_r+0xa8c>
 800663c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006640:	d0ed      	beq.n	800661e <_dtoa_r+0xa5e>
 8006642:	9a02      	ldr	r2, [sp, #8]
 8006644:	f108 0301 	add.w	r3, r8, #1
 8006648:	7013      	strb	r3, [r2, #0]
 800664a:	e604      	b.n	8006256 <_dtoa_r+0x696>
 800664c:	9b07      	ldr	r3, [sp, #28]
 800664e:	9a07      	ldr	r2, [sp, #28]
 8006650:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006654:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006656:	4293      	cmp	r3, r2
 8006658:	d028      	beq.n	80066ac <_dtoa_r+0xaec>
 800665a:	4649      	mov	r1, r9
 800665c:	2300      	movs	r3, #0
 800665e:	220a      	movs	r2, #10
 8006660:	4658      	mov	r0, fp
 8006662:	f000 f9d5 	bl	8006a10 <__multadd>
 8006666:	42af      	cmp	r7, r5
 8006668:	4681      	mov	r9, r0
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	f04f 020a 	mov.w	r2, #10
 8006672:	4639      	mov	r1, r7
 8006674:	4658      	mov	r0, fp
 8006676:	d107      	bne.n	8006688 <_dtoa_r+0xac8>
 8006678:	f000 f9ca 	bl	8006a10 <__multadd>
 800667c:	4607      	mov	r7, r0
 800667e:	4605      	mov	r5, r0
 8006680:	9b07      	ldr	r3, [sp, #28]
 8006682:	3301      	adds	r3, #1
 8006684:	9307      	str	r3, [sp, #28]
 8006686:	e774      	b.n	8006572 <_dtoa_r+0x9b2>
 8006688:	f000 f9c2 	bl	8006a10 <__multadd>
 800668c:	4629      	mov	r1, r5
 800668e:	4607      	mov	r7, r0
 8006690:	2300      	movs	r3, #0
 8006692:	220a      	movs	r2, #10
 8006694:	4658      	mov	r0, fp
 8006696:	f000 f9bb 	bl	8006a10 <__multadd>
 800669a:	4605      	mov	r5, r0
 800669c:	e7f0      	b.n	8006680 <_dtoa_r+0xac0>
 800669e:	9b08      	ldr	r3, [sp, #32]
 80066a0:	2700      	movs	r7, #0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	bfcc      	ite	gt
 80066a6:	461e      	movgt	r6, r3
 80066a8:	2601      	movle	r6, #1
 80066aa:	4456      	add	r6, sl
 80066ac:	4649      	mov	r1, r9
 80066ae:	2201      	movs	r2, #1
 80066b0:	4658      	mov	r0, fp
 80066b2:	f000 fba1 	bl	8006df8 <__lshift>
 80066b6:	4621      	mov	r1, r4
 80066b8:	4681      	mov	r9, r0
 80066ba:	f000 fc09 	bl	8006ed0 <__mcmp>
 80066be:	2800      	cmp	r0, #0
 80066c0:	dcb0      	bgt.n	8006624 <_dtoa_r+0xa64>
 80066c2:	d102      	bne.n	80066ca <_dtoa_r+0xb0a>
 80066c4:	f018 0f01 	tst.w	r8, #1
 80066c8:	d1ac      	bne.n	8006624 <_dtoa_r+0xa64>
 80066ca:	4633      	mov	r3, r6
 80066cc:	461e      	mov	r6, r3
 80066ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066d2:	2a30      	cmp	r2, #48	@ 0x30
 80066d4:	d0fa      	beq.n	80066cc <_dtoa_r+0xb0c>
 80066d6:	e5be      	b.n	8006256 <_dtoa_r+0x696>
 80066d8:	459a      	cmp	sl, r3
 80066da:	d1a4      	bne.n	8006626 <_dtoa_r+0xa66>
 80066dc:	9b04      	ldr	r3, [sp, #16]
 80066de:	3301      	adds	r3, #1
 80066e0:	9304      	str	r3, [sp, #16]
 80066e2:	2331      	movs	r3, #49	@ 0x31
 80066e4:	f88a 3000 	strb.w	r3, [sl]
 80066e8:	e5b5      	b.n	8006256 <_dtoa_r+0x696>
 80066ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066ec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800674c <_dtoa_r+0xb8c>
 80066f0:	b11b      	cbz	r3, 80066fa <_dtoa_r+0xb3a>
 80066f2:	f10a 0308 	add.w	r3, sl, #8
 80066f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	4650      	mov	r0, sl
 80066fc:	b017      	add	sp, #92	@ 0x5c
 80066fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006702:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006704:	2b01      	cmp	r3, #1
 8006706:	f77f ae3d 	ble.w	8006384 <_dtoa_r+0x7c4>
 800670a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800670c:	930a      	str	r3, [sp, #40]	@ 0x28
 800670e:	2001      	movs	r0, #1
 8006710:	e65b      	b.n	80063ca <_dtoa_r+0x80a>
 8006712:	9b08      	ldr	r3, [sp, #32]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f77f aed6 	ble.w	80064c6 <_dtoa_r+0x906>
 800671a:	4656      	mov	r6, sl
 800671c:	4621      	mov	r1, r4
 800671e:	4648      	mov	r0, r9
 8006720:	f7ff f9c4 	bl	8005aac <quorem>
 8006724:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006728:	9b08      	ldr	r3, [sp, #32]
 800672a:	f806 8b01 	strb.w	r8, [r6], #1
 800672e:	eba6 020a 	sub.w	r2, r6, sl
 8006732:	4293      	cmp	r3, r2
 8006734:	ddb3      	ble.n	800669e <_dtoa_r+0xade>
 8006736:	4649      	mov	r1, r9
 8006738:	2300      	movs	r3, #0
 800673a:	220a      	movs	r2, #10
 800673c:	4658      	mov	r0, fp
 800673e:	f000 f967 	bl	8006a10 <__multadd>
 8006742:	4681      	mov	r9, r0
 8006744:	e7ea      	b.n	800671c <_dtoa_r+0xb5c>
 8006746:	bf00      	nop
 8006748:	0800ae83 	.word	0x0800ae83
 800674c:	0800ae07 	.word	0x0800ae07

08006750 <_free_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4605      	mov	r5, r0
 8006754:	2900      	cmp	r1, #0
 8006756:	d040      	beq.n	80067da <_free_r+0x8a>
 8006758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800675c:	1f0c      	subs	r4, r1, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	bfb8      	it	lt
 8006762:	18e4      	addlt	r4, r4, r3
 8006764:	f000 f8e6 	bl	8006934 <__malloc_lock>
 8006768:	4a1c      	ldr	r2, [pc, #112]	@ (80067dc <_free_r+0x8c>)
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	b933      	cbnz	r3, 800677c <_free_r+0x2c>
 800676e:	6063      	str	r3, [r4, #4]
 8006770:	6014      	str	r4, [r2, #0]
 8006772:	4628      	mov	r0, r5
 8006774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006778:	f000 b8e2 	b.w	8006940 <__malloc_unlock>
 800677c:	42a3      	cmp	r3, r4
 800677e:	d908      	bls.n	8006792 <_free_r+0x42>
 8006780:	6820      	ldr	r0, [r4, #0]
 8006782:	1821      	adds	r1, r4, r0
 8006784:	428b      	cmp	r3, r1
 8006786:	bf01      	itttt	eq
 8006788:	6819      	ldreq	r1, [r3, #0]
 800678a:	685b      	ldreq	r3, [r3, #4]
 800678c:	1809      	addeq	r1, r1, r0
 800678e:	6021      	streq	r1, [r4, #0]
 8006790:	e7ed      	b.n	800676e <_free_r+0x1e>
 8006792:	461a      	mov	r2, r3
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	b10b      	cbz	r3, 800679c <_free_r+0x4c>
 8006798:	42a3      	cmp	r3, r4
 800679a:	d9fa      	bls.n	8006792 <_free_r+0x42>
 800679c:	6811      	ldr	r1, [r2, #0]
 800679e:	1850      	adds	r0, r2, r1
 80067a0:	42a0      	cmp	r0, r4
 80067a2:	d10b      	bne.n	80067bc <_free_r+0x6c>
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	4401      	add	r1, r0
 80067a8:	1850      	adds	r0, r2, r1
 80067aa:	4283      	cmp	r3, r0
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	d1e0      	bne.n	8006772 <_free_r+0x22>
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4408      	add	r0, r1
 80067b6:	6010      	str	r0, [r2, #0]
 80067b8:	6053      	str	r3, [r2, #4]
 80067ba:	e7da      	b.n	8006772 <_free_r+0x22>
 80067bc:	d902      	bls.n	80067c4 <_free_r+0x74>
 80067be:	230c      	movs	r3, #12
 80067c0:	602b      	str	r3, [r5, #0]
 80067c2:	e7d6      	b.n	8006772 <_free_r+0x22>
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	1821      	adds	r1, r4, r0
 80067c8:	428b      	cmp	r3, r1
 80067ca:	bf01      	itttt	eq
 80067cc:	6819      	ldreq	r1, [r3, #0]
 80067ce:	685b      	ldreq	r3, [r3, #4]
 80067d0:	1809      	addeq	r1, r1, r0
 80067d2:	6021      	streq	r1, [r4, #0]
 80067d4:	6063      	str	r3, [r4, #4]
 80067d6:	6054      	str	r4, [r2, #4]
 80067d8:	e7cb      	b.n	8006772 <_free_r+0x22>
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	20004290 	.word	0x20004290

080067e0 <malloc>:
 80067e0:	4b02      	ldr	r3, [pc, #8]	@ (80067ec <malloc+0xc>)
 80067e2:	4601      	mov	r1, r0
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	f000 b825 	b.w	8006834 <_malloc_r>
 80067ea:	bf00      	nop
 80067ec:	2000003c 	.word	0x2000003c

080067f0 <sbrk_aligned>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006830 <sbrk_aligned+0x40>)
 80067f4:	460c      	mov	r4, r1
 80067f6:	6831      	ldr	r1, [r6, #0]
 80067f8:	4605      	mov	r5, r0
 80067fa:	b911      	cbnz	r1, 8006802 <sbrk_aligned+0x12>
 80067fc:	f001 ffba 	bl	8008774 <_sbrk_r>
 8006800:	6030      	str	r0, [r6, #0]
 8006802:	4621      	mov	r1, r4
 8006804:	4628      	mov	r0, r5
 8006806:	f001 ffb5 	bl	8008774 <_sbrk_r>
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	d103      	bne.n	8006816 <sbrk_aligned+0x26>
 800680e:	f04f 34ff 	mov.w	r4, #4294967295
 8006812:	4620      	mov	r0, r4
 8006814:	bd70      	pop	{r4, r5, r6, pc}
 8006816:	1cc4      	adds	r4, r0, #3
 8006818:	f024 0403 	bic.w	r4, r4, #3
 800681c:	42a0      	cmp	r0, r4
 800681e:	d0f8      	beq.n	8006812 <sbrk_aligned+0x22>
 8006820:	1a21      	subs	r1, r4, r0
 8006822:	4628      	mov	r0, r5
 8006824:	f001 ffa6 	bl	8008774 <_sbrk_r>
 8006828:	3001      	adds	r0, #1
 800682a:	d1f2      	bne.n	8006812 <sbrk_aligned+0x22>
 800682c:	e7ef      	b.n	800680e <sbrk_aligned+0x1e>
 800682e:	bf00      	nop
 8006830:	2000428c 	.word	0x2000428c

08006834 <_malloc_r>:
 8006834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006838:	1ccd      	adds	r5, r1, #3
 800683a:	f025 0503 	bic.w	r5, r5, #3
 800683e:	3508      	adds	r5, #8
 8006840:	2d0c      	cmp	r5, #12
 8006842:	bf38      	it	cc
 8006844:	250c      	movcc	r5, #12
 8006846:	2d00      	cmp	r5, #0
 8006848:	4606      	mov	r6, r0
 800684a:	db01      	blt.n	8006850 <_malloc_r+0x1c>
 800684c:	42a9      	cmp	r1, r5
 800684e:	d904      	bls.n	800685a <_malloc_r+0x26>
 8006850:	230c      	movs	r3, #12
 8006852:	6033      	str	r3, [r6, #0]
 8006854:	2000      	movs	r0, #0
 8006856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006930 <_malloc_r+0xfc>
 800685e:	f000 f869 	bl	8006934 <__malloc_lock>
 8006862:	f8d8 3000 	ldr.w	r3, [r8]
 8006866:	461c      	mov	r4, r3
 8006868:	bb44      	cbnz	r4, 80068bc <_malloc_r+0x88>
 800686a:	4629      	mov	r1, r5
 800686c:	4630      	mov	r0, r6
 800686e:	f7ff ffbf 	bl	80067f0 <sbrk_aligned>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	4604      	mov	r4, r0
 8006876:	d158      	bne.n	800692a <_malloc_r+0xf6>
 8006878:	f8d8 4000 	ldr.w	r4, [r8]
 800687c:	4627      	mov	r7, r4
 800687e:	2f00      	cmp	r7, #0
 8006880:	d143      	bne.n	800690a <_malloc_r+0xd6>
 8006882:	2c00      	cmp	r4, #0
 8006884:	d04b      	beq.n	800691e <_malloc_r+0xea>
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	4639      	mov	r1, r7
 800688a:	4630      	mov	r0, r6
 800688c:	eb04 0903 	add.w	r9, r4, r3
 8006890:	f001 ff70 	bl	8008774 <_sbrk_r>
 8006894:	4581      	cmp	r9, r0
 8006896:	d142      	bne.n	800691e <_malloc_r+0xea>
 8006898:	6821      	ldr	r1, [r4, #0]
 800689a:	4630      	mov	r0, r6
 800689c:	1a6d      	subs	r5, r5, r1
 800689e:	4629      	mov	r1, r5
 80068a0:	f7ff ffa6 	bl	80067f0 <sbrk_aligned>
 80068a4:	3001      	adds	r0, #1
 80068a6:	d03a      	beq.n	800691e <_malloc_r+0xea>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	442b      	add	r3, r5
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	f8d8 3000 	ldr.w	r3, [r8]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	bb62      	cbnz	r2, 8006910 <_malloc_r+0xdc>
 80068b6:	f8c8 7000 	str.w	r7, [r8]
 80068ba:	e00f      	b.n	80068dc <_malloc_r+0xa8>
 80068bc:	6822      	ldr	r2, [r4, #0]
 80068be:	1b52      	subs	r2, r2, r5
 80068c0:	d420      	bmi.n	8006904 <_malloc_r+0xd0>
 80068c2:	2a0b      	cmp	r2, #11
 80068c4:	d917      	bls.n	80068f6 <_malloc_r+0xc2>
 80068c6:	1961      	adds	r1, r4, r5
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	6025      	str	r5, [r4, #0]
 80068cc:	bf18      	it	ne
 80068ce:	6059      	strne	r1, [r3, #4]
 80068d0:	6863      	ldr	r3, [r4, #4]
 80068d2:	bf08      	it	eq
 80068d4:	f8c8 1000 	streq.w	r1, [r8]
 80068d8:	5162      	str	r2, [r4, r5]
 80068da:	604b      	str	r3, [r1, #4]
 80068dc:	4630      	mov	r0, r6
 80068de:	f000 f82f 	bl	8006940 <__malloc_unlock>
 80068e2:	f104 000b 	add.w	r0, r4, #11
 80068e6:	1d23      	adds	r3, r4, #4
 80068e8:	f020 0007 	bic.w	r0, r0, #7
 80068ec:	1ac2      	subs	r2, r0, r3
 80068ee:	bf1c      	itt	ne
 80068f0:	1a1b      	subne	r3, r3, r0
 80068f2:	50a3      	strne	r3, [r4, r2]
 80068f4:	e7af      	b.n	8006856 <_malloc_r+0x22>
 80068f6:	6862      	ldr	r2, [r4, #4]
 80068f8:	42a3      	cmp	r3, r4
 80068fa:	bf0c      	ite	eq
 80068fc:	f8c8 2000 	streq.w	r2, [r8]
 8006900:	605a      	strne	r2, [r3, #4]
 8006902:	e7eb      	b.n	80068dc <_malloc_r+0xa8>
 8006904:	4623      	mov	r3, r4
 8006906:	6864      	ldr	r4, [r4, #4]
 8006908:	e7ae      	b.n	8006868 <_malloc_r+0x34>
 800690a:	463c      	mov	r4, r7
 800690c:	687f      	ldr	r7, [r7, #4]
 800690e:	e7b6      	b.n	800687e <_malloc_r+0x4a>
 8006910:	461a      	mov	r2, r3
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	42a3      	cmp	r3, r4
 8006916:	d1fb      	bne.n	8006910 <_malloc_r+0xdc>
 8006918:	2300      	movs	r3, #0
 800691a:	6053      	str	r3, [r2, #4]
 800691c:	e7de      	b.n	80068dc <_malloc_r+0xa8>
 800691e:	230c      	movs	r3, #12
 8006920:	4630      	mov	r0, r6
 8006922:	6033      	str	r3, [r6, #0]
 8006924:	f000 f80c 	bl	8006940 <__malloc_unlock>
 8006928:	e794      	b.n	8006854 <_malloc_r+0x20>
 800692a:	6005      	str	r5, [r0, #0]
 800692c:	e7d6      	b.n	80068dc <_malloc_r+0xa8>
 800692e:	bf00      	nop
 8006930:	20004290 	.word	0x20004290

08006934 <__malloc_lock>:
 8006934:	4801      	ldr	r0, [pc, #4]	@ (800693c <__malloc_lock+0x8>)
 8006936:	f7ff b896 	b.w	8005a66 <__retarget_lock_acquire_recursive>
 800693a:	bf00      	nop
 800693c:	20004288 	.word	0x20004288

08006940 <__malloc_unlock>:
 8006940:	4801      	ldr	r0, [pc, #4]	@ (8006948 <__malloc_unlock+0x8>)
 8006942:	f7ff b891 	b.w	8005a68 <__retarget_lock_release_recursive>
 8006946:	bf00      	nop
 8006948:	20004288 	.word	0x20004288

0800694c <_Balloc>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	69c6      	ldr	r6, [r0, #28]
 8006950:	4604      	mov	r4, r0
 8006952:	460d      	mov	r5, r1
 8006954:	b976      	cbnz	r6, 8006974 <_Balloc+0x28>
 8006956:	2010      	movs	r0, #16
 8006958:	f7ff ff42 	bl	80067e0 <malloc>
 800695c:	4602      	mov	r2, r0
 800695e:	61e0      	str	r0, [r4, #28]
 8006960:	b920      	cbnz	r0, 800696c <_Balloc+0x20>
 8006962:	216b      	movs	r1, #107	@ 0x6b
 8006964:	4b17      	ldr	r3, [pc, #92]	@ (80069c4 <_Balloc+0x78>)
 8006966:	4818      	ldr	r0, [pc, #96]	@ (80069c8 <_Balloc+0x7c>)
 8006968:	f001 ff1a 	bl	80087a0 <__assert_func>
 800696c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006970:	6006      	str	r6, [r0, #0]
 8006972:	60c6      	str	r6, [r0, #12]
 8006974:	69e6      	ldr	r6, [r4, #28]
 8006976:	68f3      	ldr	r3, [r6, #12]
 8006978:	b183      	cbz	r3, 800699c <_Balloc+0x50>
 800697a:	69e3      	ldr	r3, [r4, #28]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006982:	b9b8      	cbnz	r0, 80069b4 <_Balloc+0x68>
 8006984:	2101      	movs	r1, #1
 8006986:	fa01 f605 	lsl.w	r6, r1, r5
 800698a:	1d72      	adds	r2, r6, #5
 800698c:	4620      	mov	r0, r4
 800698e:	0092      	lsls	r2, r2, #2
 8006990:	f001 ff24 	bl	80087dc <_calloc_r>
 8006994:	b160      	cbz	r0, 80069b0 <_Balloc+0x64>
 8006996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800699a:	e00e      	b.n	80069ba <_Balloc+0x6e>
 800699c:	2221      	movs	r2, #33	@ 0x21
 800699e:	2104      	movs	r1, #4
 80069a0:	4620      	mov	r0, r4
 80069a2:	f001 ff1b 	bl	80087dc <_calloc_r>
 80069a6:	69e3      	ldr	r3, [r4, #28]
 80069a8:	60f0      	str	r0, [r6, #12]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e4      	bne.n	800697a <_Balloc+0x2e>
 80069b0:	2000      	movs	r0, #0
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	6802      	ldr	r2, [r0, #0]
 80069b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069ba:	2300      	movs	r3, #0
 80069bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069c0:	e7f7      	b.n	80069b2 <_Balloc+0x66>
 80069c2:	bf00      	nop
 80069c4:	0800ae14 	.word	0x0800ae14
 80069c8:	0800ae94 	.word	0x0800ae94

080069cc <_Bfree>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	69c6      	ldr	r6, [r0, #28]
 80069d0:	4605      	mov	r5, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	b976      	cbnz	r6, 80069f4 <_Bfree+0x28>
 80069d6:	2010      	movs	r0, #16
 80069d8:	f7ff ff02 	bl	80067e0 <malloc>
 80069dc:	4602      	mov	r2, r0
 80069de:	61e8      	str	r0, [r5, #28]
 80069e0:	b920      	cbnz	r0, 80069ec <_Bfree+0x20>
 80069e2:	218f      	movs	r1, #143	@ 0x8f
 80069e4:	4b08      	ldr	r3, [pc, #32]	@ (8006a08 <_Bfree+0x3c>)
 80069e6:	4809      	ldr	r0, [pc, #36]	@ (8006a0c <_Bfree+0x40>)
 80069e8:	f001 feda 	bl	80087a0 <__assert_func>
 80069ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069f0:	6006      	str	r6, [r0, #0]
 80069f2:	60c6      	str	r6, [r0, #12]
 80069f4:	b13c      	cbz	r4, 8006a06 <_Bfree+0x3a>
 80069f6:	69eb      	ldr	r3, [r5, #28]
 80069f8:	6862      	ldr	r2, [r4, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a00:	6021      	str	r1, [r4, #0]
 8006a02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a06:	bd70      	pop	{r4, r5, r6, pc}
 8006a08:	0800ae14 	.word	0x0800ae14
 8006a0c:	0800ae94 	.word	0x0800ae94

08006a10 <__multadd>:
 8006a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a14:	4607      	mov	r7, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	461e      	mov	r6, r3
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	690d      	ldr	r5, [r1, #16]
 8006a1e:	f101 0c14 	add.w	ip, r1, #20
 8006a22:	f8dc 3000 	ldr.w	r3, [ip]
 8006a26:	3001      	adds	r0, #1
 8006a28:	b299      	uxth	r1, r3
 8006a2a:	fb02 6101 	mla	r1, r2, r1, r6
 8006a2e:	0c1e      	lsrs	r6, r3, #16
 8006a30:	0c0b      	lsrs	r3, r1, #16
 8006a32:	fb02 3306 	mla	r3, r2, r6, r3
 8006a36:	b289      	uxth	r1, r1
 8006a38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a3c:	4285      	cmp	r5, r0
 8006a3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a42:	f84c 1b04 	str.w	r1, [ip], #4
 8006a46:	dcec      	bgt.n	8006a22 <__multadd+0x12>
 8006a48:	b30e      	cbz	r6, 8006a8e <__multadd+0x7e>
 8006a4a:	68a3      	ldr	r3, [r4, #8]
 8006a4c:	42ab      	cmp	r3, r5
 8006a4e:	dc19      	bgt.n	8006a84 <__multadd+0x74>
 8006a50:	6861      	ldr	r1, [r4, #4]
 8006a52:	4638      	mov	r0, r7
 8006a54:	3101      	adds	r1, #1
 8006a56:	f7ff ff79 	bl	800694c <_Balloc>
 8006a5a:	4680      	mov	r8, r0
 8006a5c:	b928      	cbnz	r0, 8006a6a <__multadd+0x5a>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	21ba      	movs	r1, #186	@ 0xba
 8006a62:	4b0c      	ldr	r3, [pc, #48]	@ (8006a94 <__multadd+0x84>)
 8006a64:	480c      	ldr	r0, [pc, #48]	@ (8006a98 <__multadd+0x88>)
 8006a66:	f001 fe9b 	bl	80087a0 <__assert_func>
 8006a6a:	6922      	ldr	r2, [r4, #16]
 8006a6c:	f104 010c 	add.w	r1, r4, #12
 8006a70:	3202      	adds	r2, #2
 8006a72:	0092      	lsls	r2, r2, #2
 8006a74:	300c      	adds	r0, #12
 8006a76:	f7ff f806 	bl	8005a86 <memcpy>
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f7ff ffa5 	bl	80069cc <_Bfree>
 8006a82:	4644      	mov	r4, r8
 8006a84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a88:	3501      	adds	r5, #1
 8006a8a:	615e      	str	r6, [r3, #20]
 8006a8c:	6125      	str	r5, [r4, #16]
 8006a8e:	4620      	mov	r0, r4
 8006a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a94:	0800ae83 	.word	0x0800ae83
 8006a98:	0800ae94 	.word	0x0800ae94

08006a9c <__s2b>:
 8006a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa0:	4615      	mov	r5, r2
 8006aa2:	2209      	movs	r2, #9
 8006aa4:	461f      	mov	r7, r3
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aae:	4606      	mov	r6, r0
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	db09      	blt.n	8006acc <__s2b+0x30>
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f7ff ff47 	bl	800694c <_Balloc>
 8006abe:	b940      	cbnz	r0, 8006ad2 <__s2b+0x36>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	21d3      	movs	r1, #211	@ 0xd3
 8006ac4:	4b18      	ldr	r3, [pc, #96]	@ (8006b28 <__s2b+0x8c>)
 8006ac6:	4819      	ldr	r0, [pc, #100]	@ (8006b2c <__s2b+0x90>)
 8006ac8:	f001 fe6a 	bl	80087a0 <__assert_func>
 8006acc:	0052      	lsls	r2, r2, #1
 8006ace:	3101      	adds	r1, #1
 8006ad0:	e7f0      	b.n	8006ab4 <__s2b+0x18>
 8006ad2:	9b08      	ldr	r3, [sp, #32]
 8006ad4:	2d09      	cmp	r5, #9
 8006ad6:	6143      	str	r3, [r0, #20]
 8006ad8:	f04f 0301 	mov.w	r3, #1
 8006adc:	6103      	str	r3, [r0, #16]
 8006ade:	dd16      	ble.n	8006b0e <__s2b+0x72>
 8006ae0:	f104 0909 	add.w	r9, r4, #9
 8006ae4:	46c8      	mov	r8, r9
 8006ae6:	442c      	add	r4, r5
 8006ae8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006aec:	4601      	mov	r1, r0
 8006aee:	220a      	movs	r2, #10
 8006af0:	4630      	mov	r0, r6
 8006af2:	3b30      	subs	r3, #48	@ 0x30
 8006af4:	f7ff ff8c 	bl	8006a10 <__multadd>
 8006af8:	45a0      	cmp	r8, r4
 8006afa:	d1f5      	bne.n	8006ae8 <__s2b+0x4c>
 8006afc:	f1a5 0408 	sub.w	r4, r5, #8
 8006b00:	444c      	add	r4, r9
 8006b02:	1b2d      	subs	r5, r5, r4
 8006b04:	1963      	adds	r3, r4, r5
 8006b06:	42bb      	cmp	r3, r7
 8006b08:	db04      	blt.n	8006b14 <__s2b+0x78>
 8006b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b0e:	2509      	movs	r5, #9
 8006b10:	340a      	adds	r4, #10
 8006b12:	e7f6      	b.n	8006b02 <__s2b+0x66>
 8006b14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b18:	4601      	mov	r1, r0
 8006b1a:	220a      	movs	r2, #10
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	3b30      	subs	r3, #48	@ 0x30
 8006b20:	f7ff ff76 	bl	8006a10 <__multadd>
 8006b24:	e7ee      	b.n	8006b04 <__s2b+0x68>
 8006b26:	bf00      	nop
 8006b28:	0800ae83 	.word	0x0800ae83
 8006b2c:	0800ae94 	.word	0x0800ae94

08006b30 <__hi0bits>:
 8006b30:	4603      	mov	r3, r0
 8006b32:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b36:	bf3a      	itte	cc
 8006b38:	0403      	lslcc	r3, r0, #16
 8006b3a:	2010      	movcc	r0, #16
 8006b3c:	2000      	movcs	r0, #0
 8006b3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b42:	bf3c      	itt	cc
 8006b44:	021b      	lslcc	r3, r3, #8
 8006b46:	3008      	addcc	r0, #8
 8006b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b4c:	bf3c      	itt	cc
 8006b4e:	011b      	lslcc	r3, r3, #4
 8006b50:	3004      	addcc	r0, #4
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b56:	bf3c      	itt	cc
 8006b58:	009b      	lslcc	r3, r3, #2
 8006b5a:	3002      	addcc	r0, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	db05      	blt.n	8006b6c <__hi0bits+0x3c>
 8006b60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b64:	f100 0001 	add.w	r0, r0, #1
 8006b68:	bf08      	it	eq
 8006b6a:	2020      	moveq	r0, #32
 8006b6c:	4770      	bx	lr

08006b6e <__lo0bits>:
 8006b6e:	6803      	ldr	r3, [r0, #0]
 8006b70:	4602      	mov	r2, r0
 8006b72:	f013 0007 	ands.w	r0, r3, #7
 8006b76:	d00b      	beq.n	8006b90 <__lo0bits+0x22>
 8006b78:	07d9      	lsls	r1, r3, #31
 8006b7a:	d421      	bmi.n	8006bc0 <__lo0bits+0x52>
 8006b7c:	0798      	lsls	r0, r3, #30
 8006b7e:	bf49      	itett	mi
 8006b80:	085b      	lsrmi	r3, r3, #1
 8006b82:	089b      	lsrpl	r3, r3, #2
 8006b84:	2001      	movmi	r0, #1
 8006b86:	6013      	strmi	r3, [r2, #0]
 8006b88:	bf5c      	itt	pl
 8006b8a:	2002      	movpl	r0, #2
 8006b8c:	6013      	strpl	r3, [r2, #0]
 8006b8e:	4770      	bx	lr
 8006b90:	b299      	uxth	r1, r3
 8006b92:	b909      	cbnz	r1, 8006b98 <__lo0bits+0x2a>
 8006b94:	2010      	movs	r0, #16
 8006b96:	0c1b      	lsrs	r3, r3, #16
 8006b98:	b2d9      	uxtb	r1, r3
 8006b9a:	b909      	cbnz	r1, 8006ba0 <__lo0bits+0x32>
 8006b9c:	3008      	adds	r0, #8
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	0719      	lsls	r1, r3, #28
 8006ba2:	bf04      	itt	eq
 8006ba4:	091b      	lsreq	r3, r3, #4
 8006ba6:	3004      	addeq	r0, #4
 8006ba8:	0799      	lsls	r1, r3, #30
 8006baa:	bf04      	itt	eq
 8006bac:	089b      	lsreq	r3, r3, #2
 8006bae:	3002      	addeq	r0, #2
 8006bb0:	07d9      	lsls	r1, r3, #31
 8006bb2:	d403      	bmi.n	8006bbc <__lo0bits+0x4e>
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	f100 0001 	add.w	r0, r0, #1
 8006bba:	d003      	beq.n	8006bc4 <__lo0bits+0x56>
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	4770      	bx	lr
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	4770      	bx	lr
 8006bc4:	2020      	movs	r0, #32
 8006bc6:	4770      	bx	lr

08006bc8 <__i2b>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	460c      	mov	r4, r1
 8006bcc:	2101      	movs	r1, #1
 8006bce:	f7ff febd 	bl	800694c <_Balloc>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	b928      	cbnz	r0, 8006be2 <__i2b+0x1a>
 8006bd6:	f240 1145 	movw	r1, #325	@ 0x145
 8006bda:	4b04      	ldr	r3, [pc, #16]	@ (8006bec <__i2b+0x24>)
 8006bdc:	4804      	ldr	r0, [pc, #16]	@ (8006bf0 <__i2b+0x28>)
 8006bde:	f001 fddf 	bl	80087a0 <__assert_func>
 8006be2:	2301      	movs	r3, #1
 8006be4:	6144      	str	r4, [r0, #20]
 8006be6:	6103      	str	r3, [r0, #16]
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	bf00      	nop
 8006bec:	0800ae83 	.word	0x0800ae83
 8006bf0:	0800ae94 	.word	0x0800ae94

08006bf4 <__multiply>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	690a      	ldr	r2, [r1, #16]
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	460f      	mov	r7, r1
 8006c00:	429a      	cmp	r2, r3
 8006c02:	bfa2      	ittt	ge
 8006c04:	4623      	movge	r3, r4
 8006c06:	460c      	movge	r4, r1
 8006c08:	461f      	movge	r7, r3
 8006c0a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c0e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c12:	68a3      	ldr	r3, [r4, #8]
 8006c14:	6861      	ldr	r1, [r4, #4]
 8006c16:	eb0a 0609 	add.w	r6, sl, r9
 8006c1a:	42b3      	cmp	r3, r6
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	bfb8      	it	lt
 8006c20:	3101      	addlt	r1, #1
 8006c22:	f7ff fe93 	bl	800694c <_Balloc>
 8006c26:	b930      	cbnz	r0, 8006c36 <__multiply+0x42>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c2e:	4b43      	ldr	r3, [pc, #268]	@ (8006d3c <__multiply+0x148>)
 8006c30:	4843      	ldr	r0, [pc, #268]	@ (8006d40 <__multiply+0x14c>)
 8006c32:	f001 fdb5 	bl	80087a0 <__assert_func>
 8006c36:	f100 0514 	add.w	r5, r0, #20
 8006c3a:	462b      	mov	r3, r5
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c42:	4543      	cmp	r3, r8
 8006c44:	d321      	bcc.n	8006c8a <__multiply+0x96>
 8006c46:	f107 0114 	add.w	r1, r7, #20
 8006c4a:	f104 0214 	add.w	r2, r4, #20
 8006c4e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c52:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c56:	9302      	str	r3, [sp, #8]
 8006c58:	1b13      	subs	r3, r2, r4
 8006c5a:	3b15      	subs	r3, #21
 8006c5c:	f023 0303 	bic.w	r3, r3, #3
 8006c60:	3304      	adds	r3, #4
 8006c62:	f104 0715 	add.w	r7, r4, #21
 8006c66:	42ba      	cmp	r2, r7
 8006c68:	bf38      	it	cc
 8006c6a:	2304      	movcc	r3, #4
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	9b02      	ldr	r3, [sp, #8]
 8006c70:	9103      	str	r1, [sp, #12]
 8006c72:	428b      	cmp	r3, r1
 8006c74:	d80c      	bhi.n	8006c90 <__multiply+0x9c>
 8006c76:	2e00      	cmp	r6, #0
 8006c78:	dd03      	ble.n	8006c82 <__multiply+0x8e>
 8006c7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d05a      	beq.n	8006d38 <__multiply+0x144>
 8006c82:	6106      	str	r6, [r0, #16]
 8006c84:	b005      	add	sp, #20
 8006c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8a:	f843 2b04 	str.w	r2, [r3], #4
 8006c8e:	e7d8      	b.n	8006c42 <__multiply+0x4e>
 8006c90:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c94:	f1ba 0f00 	cmp.w	sl, #0
 8006c98:	d023      	beq.n	8006ce2 <__multiply+0xee>
 8006c9a:	46a9      	mov	r9, r5
 8006c9c:	f04f 0c00 	mov.w	ip, #0
 8006ca0:	f104 0e14 	add.w	lr, r4, #20
 8006ca4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ca8:	f8d9 3000 	ldr.w	r3, [r9]
 8006cac:	fa1f fb87 	uxth.w	fp, r7
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cb6:	4463      	add	r3, ip
 8006cb8:	f8d9 c000 	ldr.w	ip, [r9]
 8006cbc:	0c3f      	lsrs	r7, r7, #16
 8006cbe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006cc2:	fb0a c707 	mla	r7, sl, r7, ip
 8006cc6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cd0:	4572      	cmp	r2, lr
 8006cd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cd6:	f849 3b04 	str.w	r3, [r9], #4
 8006cda:	d8e3      	bhi.n	8006ca4 <__multiply+0xb0>
 8006cdc:	9b01      	ldr	r3, [sp, #4]
 8006cde:	f845 c003 	str.w	ip, [r5, r3]
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	3104      	adds	r1, #4
 8006ce6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cea:	f1b9 0f00 	cmp.w	r9, #0
 8006cee:	d021      	beq.n	8006d34 <__multiply+0x140>
 8006cf0:	46ae      	mov	lr, r5
 8006cf2:	f04f 0a00 	mov.w	sl, #0
 8006cf6:	682b      	ldr	r3, [r5, #0]
 8006cf8:	f104 0c14 	add.w	ip, r4, #20
 8006cfc:	f8bc b000 	ldrh.w	fp, [ip]
 8006d00:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	fb09 770b 	mla	r7, r9, fp, r7
 8006d0a:	4457      	add	r7, sl
 8006d0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d10:	f84e 3b04 	str.w	r3, [lr], #4
 8006d14:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d1c:	f8be 3000 	ldrh.w	r3, [lr]
 8006d20:	4562      	cmp	r2, ip
 8006d22:	fb09 330a 	mla	r3, r9, sl, r3
 8006d26:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d2e:	d8e5      	bhi.n	8006cfc <__multiply+0x108>
 8006d30:	9f01      	ldr	r7, [sp, #4]
 8006d32:	51eb      	str	r3, [r5, r7]
 8006d34:	3504      	adds	r5, #4
 8006d36:	e79a      	b.n	8006c6e <__multiply+0x7a>
 8006d38:	3e01      	subs	r6, #1
 8006d3a:	e79c      	b.n	8006c76 <__multiply+0x82>
 8006d3c:	0800ae83 	.word	0x0800ae83
 8006d40:	0800ae94 	.word	0x0800ae94

08006d44 <__pow5mult>:
 8006d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d48:	4615      	mov	r5, r2
 8006d4a:	f012 0203 	ands.w	r2, r2, #3
 8006d4e:	4607      	mov	r7, r0
 8006d50:	460e      	mov	r6, r1
 8006d52:	d007      	beq.n	8006d64 <__pow5mult+0x20>
 8006d54:	4c25      	ldr	r4, [pc, #148]	@ (8006dec <__pow5mult+0xa8>)
 8006d56:	3a01      	subs	r2, #1
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d5e:	f7ff fe57 	bl	8006a10 <__multadd>
 8006d62:	4606      	mov	r6, r0
 8006d64:	10ad      	asrs	r5, r5, #2
 8006d66:	d03d      	beq.n	8006de4 <__pow5mult+0xa0>
 8006d68:	69fc      	ldr	r4, [r7, #28]
 8006d6a:	b97c      	cbnz	r4, 8006d8c <__pow5mult+0x48>
 8006d6c:	2010      	movs	r0, #16
 8006d6e:	f7ff fd37 	bl	80067e0 <malloc>
 8006d72:	4602      	mov	r2, r0
 8006d74:	61f8      	str	r0, [r7, #28]
 8006d76:	b928      	cbnz	r0, 8006d84 <__pow5mult+0x40>
 8006d78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8006df0 <__pow5mult+0xac>)
 8006d7e:	481d      	ldr	r0, [pc, #116]	@ (8006df4 <__pow5mult+0xb0>)
 8006d80:	f001 fd0e 	bl	80087a0 <__assert_func>
 8006d84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d88:	6004      	str	r4, [r0, #0]
 8006d8a:	60c4      	str	r4, [r0, #12]
 8006d8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d94:	b94c      	cbnz	r4, 8006daa <__pow5mult+0x66>
 8006d96:	f240 2171 	movw	r1, #625	@ 0x271
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	f7ff ff14 	bl	8006bc8 <__i2b>
 8006da0:	2300      	movs	r3, #0
 8006da2:	4604      	mov	r4, r0
 8006da4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006da8:	6003      	str	r3, [r0, #0]
 8006daa:	f04f 0900 	mov.w	r9, #0
 8006dae:	07eb      	lsls	r3, r5, #31
 8006db0:	d50a      	bpl.n	8006dc8 <__pow5mult+0x84>
 8006db2:	4631      	mov	r1, r6
 8006db4:	4622      	mov	r2, r4
 8006db6:	4638      	mov	r0, r7
 8006db8:	f7ff ff1c 	bl	8006bf4 <__multiply>
 8006dbc:	4680      	mov	r8, r0
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4638      	mov	r0, r7
 8006dc2:	f7ff fe03 	bl	80069cc <_Bfree>
 8006dc6:	4646      	mov	r6, r8
 8006dc8:	106d      	asrs	r5, r5, #1
 8006dca:	d00b      	beq.n	8006de4 <__pow5mult+0xa0>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	b938      	cbnz	r0, 8006de0 <__pow5mult+0x9c>
 8006dd0:	4622      	mov	r2, r4
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	f7ff ff0d 	bl	8006bf4 <__multiply>
 8006dda:	6020      	str	r0, [r4, #0]
 8006ddc:	f8c0 9000 	str.w	r9, [r0]
 8006de0:	4604      	mov	r4, r0
 8006de2:	e7e4      	b.n	8006dae <__pow5mult+0x6a>
 8006de4:	4630      	mov	r0, r6
 8006de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dea:	bf00      	nop
 8006dec:	0800aef0 	.word	0x0800aef0
 8006df0:	0800ae14 	.word	0x0800ae14
 8006df4:	0800ae94 	.word	0x0800ae94

08006df8 <__lshift>:
 8006df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	4607      	mov	r7, r0
 8006e00:	4691      	mov	r9, r2
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	6849      	ldr	r1, [r1, #4]
 8006e06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e0a:	68a3      	ldr	r3, [r4, #8]
 8006e0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e10:	f108 0601 	add.w	r6, r8, #1
 8006e14:	42b3      	cmp	r3, r6
 8006e16:	db0b      	blt.n	8006e30 <__lshift+0x38>
 8006e18:	4638      	mov	r0, r7
 8006e1a:	f7ff fd97 	bl	800694c <_Balloc>
 8006e1e:	4605      	mov	r5, r0
 8006e20:	b948      	cbnz	r0, 8006e36 <__lshift+0x3e>
 8006e22:	4602      	mov	r2, r0
 8006e24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e28:	4b27      	ldr	r3, [pc, #156]	@ (8006ec8 <__lshift+0xd0>)
 8006e2a:	4828      	ldr	r0, [pc, #160]	@ (8006ecc <__lshift+0xd4>)
 8006e2c:	f001 fcb8 	bl	80087a0 <__assert_func>
 8006e30:	3101      	adds	r1, #1
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	e7ee      	b.n	8006e14 <__lshift+0x1c>
 8006e36:	2300      	movs	r3, #0
 8006e38:	f100 0114 	add.w	r1, r0, #20
 8006e3c:	f100 0210 	add.w	r2, r0, #16
 8006e40:	4618      	mov	r0, r3
 8006e42:	4553      	cmp	r3, sl
 8006e44:	db33      	blt.n	8006eae <__lshift+0xb6>
 8006e46:	6920      	ldr	r0, [r4, #16]
 8006e48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e4c:	f104 0314 	add.w	r3, r4, #20
 8006e50:	f019 091f 	ands.w	r9, r9, #31
 8006e54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e5c:	d02b      	beq.n	8006eb6 <__lshift+0xbe>
 8006e5e:	468a      	mov	sl, r1
 8006e60:	2200      	movs	r2, #0
 8006e62:	f1c9 0e20 	rsb	lr, r9, #32
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	fa00 f009 	lsl.w	r0, r0, r9
 8006e6c:	4310      	orrs	r0, r2
 8006e6e:	f84a 0b04 	str.w	r0, [sl], #4
 8006e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e76:	459c      	cmp	ip, r3
 8006e78:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e7c:	d8f3      	bhi.n	8006e66 <__lshift+0x6e>
 8006e7e:	ebac 0304 	sub.w	r3, ip, r4
 8006e82:	3b15      	subs	r3, #21
 8006e84:	f023 0303 	bic.w	r3, r3, #3
 8006e88:	3304      	adds	r3, #4
 8006e8a:	f104 0015 	add.w	r0, r4, #21
 8006e8e:	4584      	cmp	ip, r0
 8006e90:	bf38      	it	cc
 8006e92:	2304      	movcc	r3, #4
 8006e94:	50ca      	str	r2, [r1, r3]
 8006e96:	b10a      	cbz	r2, 8006e9c <__lshift+0xa4>
 8006e98:	f108 0602 	add.w	r6, r8, #2
 8006e9c:	3e01      	subs	r6, #1
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	612e      	str	r6, [r5, #16]
 8006ea4:	f7ff fd92 	bl	80069cc <_Bfree>
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eae:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	e7c5      	b.n	8006e42 <__lshift+0x4a>
 8006eb6:	3904      	subs	r1, #4
 8006eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ebc:	459c      	cmp	ip, r3
 8006ebe:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ec2:	d8f9      	bhi.n	8006eb8 <__lshift+0xc0>
 8006ec4:	e7ea      	b.n	8006e9c <__lshift+0xa4>
 8006ec6:	bf00      	nop
 8006ec8:	0800ae83 	.word	0x0800ae83
 8006ecc:	0800ae94 	.word	0x0800ae94

08006ed0 <__mcmp>:
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	690a      	ldr	r2, [r1, #16]
 8006ed4:	6900      	ldr	r0, [r0, #16]
 8006ed6:	b530      	push	{r4, r5, lr}
 8006ed8:	1a80      	subs	r0, r0, r2
 8006eda:	d10e      	bne.n	8006efa <__mcmp+0x2a>
 8006edc:	3314      	adds	r3, #20
 8006ede:	3114      	adds	r1, #20
 8006ee0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ee4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ee8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006eec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ef0:	4295      	cmp	r5, r2
 8006ef2:	d003      	beq.n	8006efc <__mcmp+0x2c>
 8006ef4:	d205      	bcs.n	8006f02 <__mcmp+0x32>
 8006ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8006efa:	bd30      	pop	{r4, r5, pc}
 8006efc:	42a3      	cmp	r3, r4
 8006efe:	d3f3      	bcc.n	8006ee8 <__mcmp+0x18>
 8006f00:	e7fb      	b.n	8006efa <__mcmp+0x2a>
 8006f02:	2001      	movs	r0, #1
 8006f04:	e7f9      	b.n	8006efa <__mcmp+0x2a>
	...

08006f08 <__mdiff>:
 8006f08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	4689      	mov	r9, r1
 8006f0e:	4606      	mov	r6, r0
 8006f10:	4611      	mov	r1, r2
 8006f12:	4648      	mov	r0, r9
 8006f14:	4614      	mov	r4, r2
 8006f16:	f7ff ffdb 	bl	8006ed0 <__mcmp>
 8006f1a:	1e05      	subs	r5, r0, #0
 8006f1c:	d112      	bne.n	8006f44 <__mdiff+0x3c>
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7ff fd13 	bl	800694c <_Balloc>
 8006f26:	4602      	mov	r2, r0
 8006f28:	b928      	cbnz	r0, 8006f36 <__mdiff+0x2e>
 8006f2a:	f240 2137 	movw	r1, #567	@ 0x237
 8006f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8007028 <__mdiff+0x120>)
 8006f30:	483e      	ldr	r0, [pc, #248]	@ (800702c <__mdiff+0x124>)
 8006f32:	f001 fc35 	bl	80087a0 <__assert_func>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	b003      	add	sp, #12
 8006f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f44:	bfbc      	itt	lt
 8006f46:	464b      	movlt	r3, r9
 8006f48:	46a1      	movlt	r9, r4
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f50:	bfba      	itte	lt
 8006f52:	461c      	movlt	r4, r3
 8006f54:	2501      	movlt	r5, #1
 8006f56:	2500      	movge	r5, #0
 8006f58:	f7ff fcf8 	bl	800694c <_Balloc>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	b918      	cbnz	r0, 8006f68 <__mdiff+0x60>
 8006f60:	f240 2145 	movw	r1, #581	@ 0x245
 8006f64:	4b30      	ldr	r3, [pc, #192]	@ (8007028 <__mdiff+0x120>)
 8006f66:	e7e3      	b.n	8006f30 <__mdiff+0x28>
 8006f68:	f100 0b14 	add.w	fp, r0, #20
 8006f6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f70:	f109 0310 	add.w	r3, r9, #16
 8006f74:	60c5      	str	r5, [r0, #12]
 8006f76:	f04f 0c00 	mov.w	ip, #0
 8006f7a:	f109 0514 	add.w	r5, r9, #20
 8006f7e:	46d9      	mov	r9, fp
 8006f80:	6926      	ldr	r6, [r4, #16]
 8006f82:	f104 0e14 	add.w	lr, r4, #20
 8006f86:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f8a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	9b01      	ldr	r3, [sp, #4]
 8006f92:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f96:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f9a:	b281      	uxth	r1, r0
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	fa1f f38a 	uxth.w	r3, sl
 8006fa2:	1a5b      	subs	r3, r3, r1
 8006fa4:	0c00      	lsrs	r0, r0, #16
 8006fa6:	4463      	add	r3, ip
 8006fa8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fac:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006fb6:	4576      	cmp	r6, lr
 8006fb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006fbc:	f849 3b04 	str.w	r3, [r9], #4
 8006fc0:	d8e6      	bhi.n	8006f90 <__mdiff+0x88>
 8006fc2:	1b33      	subs	r3, r6, r4
 8006fc4:	3b15      	subs	r3, #21
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	3415      	adds	r4, #21
 8006fcc:	3304      	adds	r3, #4
 8006fce:	42a6      	cmp	r6, r4
 8006fd0:	bf38      	it	cc
 8006fd2:	2304      	movcc	r3, #4
 8006fd4:	441d      	add	r5, r3
 8006fd6:	445b      	add	r3, fp
 8006fd8:	461e      	mov	r6, r3
 8006fda:	462c      	mov	r4, r5
 8006fdc:	4544      	cmp	r4, r8
 8006fde:	d30e      	bcc.n	8006ffe <__mdiff+0xf6>
 8006fe0:	f108 0103 	add.w	r1, r8, #3
 8006fe4:	1b49      	subs	r1, r1, r5
 8006fe6:	f021 0103 	bic.w	r1, r1, #3
 8006fea:	3d03      	subs	r5, #3
 8006fec:	45a8      	cmp	r8, r5
 8006fee:	bf38      	it	cc
 8006ff0:	2100      	movcc	r1, #0
 8006ff2:	440b      	add	r3, r1
 8006ff4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ff8:	b199      	cbz	r1, 8007022 <__mdiff+0x11a>
 8006ffa:	6117      	str	r7, [r2, #16]
 8006ffc:	e79e      	b.n	8006f3c <__mdiff+0x34>
 8006ffe:	46e6      	mov	lr, ip
 8007000:	f854 1b04 	ldr.w	r1, [r4], #4
 8007004:	fa1f fc81 	uxth.w	ip, r1
 8007008:	44f4      	add	ip, lr
 800700a:	0c08      	lsrs	r0, r1, #16
 800700c:	4471      	add	r1, lr
 800700e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007012:	b289      	uxth	r1, r1
 8007014:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007018:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800701c:	f846 1b04 	str.w	r1, [r6], #4
 8007020:	e7dc      	b.n	8006fdc <__mdiff+0xd4>
 8007022:	3f01      	subs	r7, #1
 8007024:	e7e6      	b.n	8006ff4 <__mdiff+0xec>
 8007026:	bf00      	nop
 8007028:	0800ae83 	.word	0x0800ae83
 800702c:	0800ae94 	.word	0x0800ae94

08007030 <__ulp>:
 8007030:	4b0e      	ldr	r3, [pc, #56]	@ (800706c <__ulp+0x3c>)
 8007032:	400b      	ands	r3, r1
 8007034:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007038:	2b00      	cmp	r3, #0
 800703a:	dc08      	bgt.n	800704e <__ulp+0x1e>
 800703c:	425b      	negs	r3, r3
 800703e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007042:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007046:	da04      	bge.n	8007052 <__ulp+0x22>
 8007048:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800704c:	4113      	asrs	r3, r2
 800704e:	2200      	movs	r2, #0
 8007050:	e008      	b.n	8007064 <__ulp+0x34>
 8007052:	f1a2 0314 	sub.w	r3, r2, #20
 8007056:	2b1e      	cmp	r3, #30
 8007058:	bfd6      	itet	le
 800705a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800705e:	2201      	movgt	r2, #1
 8007060:	40da      	lsrle	r2, r3
 8007062:	2300      	movs	r3, #0
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	7ff00000 	.word	0x7ff00000

08007070 <__b2d>:
 8007070:	6902      	ldr	r2, [r0, #16]
 8007072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007074:	f100 0614 	add.w	r6, r0, #20
 8007078:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800707c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007080:	4f1e      	ldr	r7, [pc, #120]	@ (80070fc <__b2d+0x8c>)
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff fd54 	bl	8006b30 <__hi0bits>
 8007088:	4603      	mov	r3, r0
 800708a:	f1c0 0020 	rsb	r0, r0, #32
 800708e:	2b0a      	cmp	r3, #10
 8007090:	f1a2 0504 	sub.w	r5, r2, #4
 8007094:	6008      	str	r0, [r1, #0]
 8007096:	dc12      	bgt.n	80070be <__b2d+0x4e>
 8007098:	42ae      	cmp	r6, r5
 800709a:	bf2c      	ite	cs
 800709c:	2200      	movcs	r2, #0
 800709e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80070a2:	f1c3 0c0b 	rsb	ip, r3, #11
 80070a6:	3315      	adds	r3, #21
 80070a8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80070ac:	fa04 f303 	lsl.w	r3, r4, r3
 80070b0:	fa22 f20c 	lsr.w	r2, r2, ip
 80070b4:	ea4e 0107 	orr.w	r1, lr, r7
 80070b8:	431a      	orrs	r2, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070be:	42ae      	cmp	r6, r5
 80070c0:	bf36      	itet	cc
 80070c2:	f1a2 0508 	subcc.w	r5, r2, #8
 80070c6:	2200      	movcs	r2, #0
 80070c8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80070cc:	3b0b      	subs	r3, #11
 80070ce:	d012      	beq.n	80070f6 <__b2d+0x86>
 80070d0:	f1c3 0720 	rsb	r7, r3, #32
 80070d4:	fa22 f107 	lsr.w	r1, r2, r7
 80070d8:	409c      	lsls	r4, r3
 80070da:	430c      	orrs	r4, r1
 80070dc:	42b5      	cmp	r5, r6
 80070de:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80070e2:	bf94      	ite	ls
 80070e4:	2400      	movls	r4, #0
 80070e6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80070ea:	409a      	lsls	r2, r3
 80070ec:	40fc      	lsrs	r4, r7
 80070ee:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80070f2:	4322      	orrs	r2, r4
 80070f4:	e7e1      	b.n	80070ba <__b2d+0x4a>
 80070f6:	ea44 0107 	orr.w	r1, r4, r7
 80070fa:	e7de      	b.n	80070ba <__b2d+0x4a>
 80070fc:	3ff00000 	.word	0x3ff00000

08007100 <__d2b>:
 8007100:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007104:	2101      	movs	r1, #1
 8007106:	4690      	mov	r8, r2
 8007108:	4699      	mov	r9, r3
 800710a:	9e08      	ldr	r6, [sp, #32]
 800710c:	f7ff fc1e 	bl	800694c <_Balloc>
 8007110:	4604      	mov	r4, r0
 8007112:	b930      	cbnz	r0, 8007122 <__d2b+0x22>
 8007114:	4602      	mov	r2, r0
 8007116:	f240 310f 	movw	r1, #783	@ 0x30f
 800711a:	4b23      	ldr	r3, [pc, #140]	@ (80071a8 <__d2b+0xa8>)
 800711c:	4823      	ldr	r0, [pc, #140]	@ (80071ac <__d2b+0xac>)
 800711e:	f001 fb3f 	bl	80087a0 <__assert_func>
 8007122:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007126:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800712a:	b10d      	cbz	r5, 8007130 <__d2b+0x30>
 800712c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	f1b8 0300 	subs.w	r3, r8, #0
 8007136:	d024      	beq.n	8007182 <__d2b+0x82>
 8007138:	4668      	mov	r0, sp
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	f7ff fd17 	bl	8006b6e <__lo0bits>
 8007140:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007144:	b1d8      	cbz	r0, 800717e <__d2b+0x7e>
 8007146:	f1c0 0320 	rsb	r3, r0, #32
 800714a:	fa02 f303 	lsl.w	r3, r2, r3
 800714e:	430b      	orrs	r3, r1
 8007150:	40c2      	lsrs	r2, r0
 8007152:	6163      	str	r3, [r4, #20]
 8007154:	9201      	str	r2, [sp, #4]
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf0c      	ite	eq
 800715c:	2201      	moveq	r2, #1
 800715e:	2202      	movne	r2, #2
 8007160:	61a3      	str	r3, [r4, #24]
 8007162:	6122      	str	r2, [r4, #16]
 8007164:	b1ad      	cbz	r5, 8007192 <__d2b+0x92>
 8007166:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800716a:	4405      	add	r5, r0
 800716c:	6035      	str	r5, [r6, #0]
 800716e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007174:	6018      	str	r0, [r3, #0]
 8007176:	4620      	mov	r0, r4
 8007178:	b002      	add	sp, #8
 800717a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800717e:	6161      	str	r1, [r4, #20]
 8007180:	e7e9      	b.n	8007156 <__d2b+0x56>
 8007182:	a801      	add	r0, sp, #4
 8007184:	f7ff fcf3 	bl	8006b6e <__lo0bits>
 8007188:	9b01      	ldr	r3, [sp, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	6163      	str	r3, [r4, #20]
 800718e:	3020      	adds	r0, #32
 8007190:	e7e7      	b.n	8007162 <__d2b+0x62>
 8007192:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007196:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800719a:	6030      	str	r0, [r6, #0]
 800719c:	6918      	ldr	r0, [r3, #16]
 800719e:	f7ff fcc7 	bl	8006b30 <__hi0bits>
 80071a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071a6:	e7e4      	b.n	8007172 <__d2b+0x72>
 80071a8:	0800ae83 	.word	0x0800ae83
 80071ac:	0800ae94 	.word	0x0800ae94

080071b0 <__ratio>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	b085      	sub	sp, #20
 80071b6:	e9cd 1000 	strd	r1, r0, [sp]
 80071ba:	a902      	add	r1, sp, #8
 80071bc:	f7ff ff58 	bl	8007070 <__b2d>
 80071c0:	468b      	mov	fp, r1
 80071c2:	4606      	mov	r6, r0
 80071c4:	460f      	mov	r7, r1
 80071c6:	9800      	ldr	r0, [sp, #0]
 80071c8:	a903      	add	r1, sp, #12
 80071ca:	f7ff ff51 	bl	8007070 <__b2d>
 80071ce:	460d      	mov	r5, r1
 80071d0:	9b01      	ldr	r3, [sp, #4]
 80071d2:	4689      	mov	r9, r1
 80071d4:	6919      	ldr	r1, [r3, #16]
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	4604      	mov	r4, r0
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	4630      	mov	r0, r6
 80071de:	1ac9      	subs	r1, r1, r3
 80071e0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80071e4:	1a9b      	subs	r3, r3, r2
 80071e6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bfcd      	iteet	gt
 80071ee:	463a      	movgt	r2, r7
 80071f0:	462a      	movle	r2, r5
 80071f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80071f6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80071fa:	bfd8      	it	le
 80071fc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007200:	464b      	mov	r3, r9
 8007202:	4622      	mov	r2, r4
 8007204:	4659      	mov	r1, fp
 8007206:	f7f9 fa91 	bl	800072c <__aeabi_ddiv>
 800720a:	b005      	add	sp, #20
 800720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007210 <__copybits>:
 8007210:	3901      	subs	r1, #1
 8007212:	b570      	push	{r4, r5, r6, lr}
 8007214:	1149      	asrs	r1, r1, #5
 8007216:	6914      	ldr	r4, [r2, #16]
 8007218:	3101      	adds	r1, #1
 800721a:	f102 0314 	add.w	r3, r2, #20
 800721e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007222:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007226:	1f05      	subs	r5, r0, #4
 8007228:	42a3      	cmp	r3, r4
 800722a:	d30c      	bcc.n	8007246 <__copybits+0x36>
 800722c:	1aa3      	subs	r3, r4, r2
 800722e:	3b11      	subs	r3, #17
 8007230:	f023 0303 	bic.w	r3, r3, #3
 8007234:	3211      	adds	r2, #17
 8007236:	42a2      	cmp	r2, r4
 8007238:	bf88      	it	hi
 800723a:	2300      	movhi	r3, #0
 800723c:	4418      	add	r0, r3
 800723e:	2300      	movs	r3, #0
 8007240:	4288      	cmp	r0, r1
 8007242:	d305      	bcc.n	8007250 <__copybits+0x40>
 8007244:	bd70      	pop	{r4, r5, r6, pc}
 8007246:	f853 6b04 	ldr.w	r6, [r3], #4
 800724a:	f845 6f04 	str.w	r6, [r5, #4]!
 800724e:	e7eb      	b.n	8007228 <__copybits+0x18>
 8007250:	f840 3b04 	str.w	r3, [r0], #4
 8007254:	e7f4      	b.n	8007240 <__copybits+0x30>

08007256 <__any_on>:
 8007256:	f100 0214 	add.w	r2, r0, #20
 800725a:	6900      	ldr	r0, [r0, #16]
 800725c:	114b      	asrs	r3, r1, #5
 800725e:	4298      	cmp	r0, r3
 8007260:	b510      	push	{r4, lr}
 8007262:	db11      	blt.n	8007288 <__any_on+0x32>
 8007264:	dd0a      	ble.n	800727c <__any_on+0x26>
 8007266:	f011 011f 	ands.w	r1, r1, #31
 800726a:	d007      	beq.n	800727c <__any_on+0x26>
 800726c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007270:	fa24 f001 	lsr.w	r0, r4, r1
 8007274:	fa00 f101 	lsl.w	r1, r0, r1
 8007278:	428c      	cmp	r4, r1
 800727a:	d10b      	bne.n	8007294 <__any_on+0x3e>
 800727c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007280:	4293      	cmp	r3, r2
 8007282:	d803      	bhi.n	800728c <__any_on+0x36>
 8007284:	2000      	movs	r0, #0
 8007286:	bd10      	pop	{r4, pc}
 8007288:	4603      	mov	r3, r0
 800728a:	e7f7      	b.n	800727c <__any_on+0x26>
 800728c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007290:	2900      	cmp	r1, #0
 8007292:	d0f5      	beq.n	8007280 <__any_on+0x2a>
 8007294:	2001      	movs	r0, #1
 8007296:	e7f6      	b.n	8007286 <__any_on+0x30>

08007298 <sulp>:
 8007298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729c:	460f      	mov	r7, r1
 800729e:	4690      	mov	r8, r2
 80072a0:	f7ff fec6 	bl	8007030 <__ulp>
 80072a4:	4604      	mov	r4, r0
 80072a6:	460d      	mov	r5, r1
 80072a8:	f1b8 0f00 	cmp.w	r8, #0
 80072ac:	d011      	beq.n	80072d2 <sulp+0x3a>
 80072ae:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80072b2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dd0b      	ble.n	80072d2 <sulp+0x3a>
 80072ba:	2400      	movs	r4, #0
 80072bc:	051b      	lsls	r3, r3, #20
 80072be:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80072c2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80072c6:	4622      	mov	r2, r4
 80072c8:	462b      	mov	r3, r5
 80072ca:	f7f9 f905 	bl	80004d8 <__aeabi_dmul>
 80072ce:	4604      	mov	r4, r0
 80072d0:	460d      	mov	r5, r1
 80072d2:	4620      	mov	r0, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072da:	0000      	movs	r0, r0
 80072dc:	0000      	movs	r0, r0
	...

080072e0 <_strtod_l>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	b09f      	sub	sp, #124	@ 0x7c
 80072e6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80072e8:	2200      	movs	r2, #0
 80072ea:	460c      	mov	r4, r1
 80072ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80072ee:	f04f 0a00 	mov.w	sl, #0
 80072f2:	f04f 0b00 	mov.w	fp, #0
 80072f6:	460a      	mov	r2, r1
 80072f8:	9005      	str	r0, [sp, #20]
 80072fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80072fc:	7811      	ldrb	r1, [r2, #0]
 80072fe:	292b      	cmp	r1, #43	@ 0x2b
 8007300:	d048      	beq.n	8007394 <_strtod_l+0xb4>
 8007302:	d836      	bhi.n	8007372 <_strtod_l+0x92>
 8007304:	290d      	cmp	r1, #13
 8007306:	d830      	bhi.n	800736a <_strtod_l+0x8a>
 8007308:	2908      	cmp	r1, #8
 800730a:	d830      	bhi.n	800736e <_strtod_l+0x8e>
 800730c:	2900      	cmp	r1, #0
 800730e:	d039      	beq.n	8007384 <_strtod_l+0xa4>
 8007310:	2200      	movs	r2, #0
 8007312:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007314:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007316:	782a      	ldrb	r2, [r5, #0]
 8007318:	2a30      	cmp	r2, #48	@ 0x30
 800731a:	f040 80b1 	bne.w	8007480 <_strtod_l+0x1a0>
 800731e:	786a      	ldrb	r2, [r5, #1]
 8007320:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007324:	2a58      	cmp	r2, #88	@ 0x58
 8007326:	d16c      	bne.n	8007402 <_strtod_l+0x122>
 8007328:	9302      	str	r3, [sp, #8]
 800732a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800732c:	4a8e      	ldr	r2, [pc, #568]	@ (8007568 <_strtod_l+0x288>)
 800732e:	9301      	str	r3, [sp, #4]
 8007330:	ab1a      	add	r3, sp, #104	@ 0x68
 8007332:	9300      	str	r3, [sp, #0]
 8007334:	9805      	ldr	r0, [sp, #20]
 8007336:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007338:	a919      	add	r1, sp, #100	@ 0x64
 800733a:	f001 facb 	bl	80088d4 <__gethex>
 800733e:	f010 060f 	ands.w	r6, r0, #15
 8007342:	4604      	mov	r4, r0
 8007344:	d005      	beq.n	8007352 <_strtod_l+0x72>
 8007346:	2e06      	cmp	r6, #6
 8007348:	d126      	bne.n	8007398 <_strtod_l+0xb8>
 800734a:	2300      	movs	r3, #0
 800734c:	3501      	adds	r5, #1
 800734e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007350:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007352:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007354:	2b00      	cmp	r3, #0
 8007356:	f040 8584 	bne.w	8007e62 <_strtod_l+0xb82>
 800735a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800735c:	b1bb      	cbz	r3, 800738e <_strtod_l+0xae>
 800735e:	4650      	mov	r0, sl
 8007360:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007364:	b01f      	add	sp, #124	@ 0x7c
 8007366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736a:	2920      	cmp	r1, #32
 800736c:	d1d0      	bne.n	8007310 <_strtod_l+0x30>
 800736e:	3201      	adds	r2, #1
 8007370:	e7c3      	b.n	80072fa <_strtod_l+0x1a>
 8007372:	292d      	cmp	r1, #45	@ 0x2d
 8007374:	d1cc      	bne.n	8007310 <_strtod_l+0x30>
 8007376:	2101      	movs	r1, #1
 8007378:	910b      	str	r1, [sp, #44]	@ 0x2c
 800737a:	1c51      	adds	r1, r2, #1
 800737c:	9119      	str	r1, [sp, #100]	@ 0x64
 800737e:	7852      	ldrb	r2, [r2, #1]
 8007380:	2a00      	cmp	r2, #0
 8007382:	d1c7      	bne.n	8007314 <_strtod_l+0x34>
 8007384:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007386:	9419      	str	r4, [sp, #100]	@ 0x64
 8007388:	2b00      	cmp	r3, #0
 800738a:	f040 8568 	bne.w	8007e5e <_strtod_l+0xb7e>
 800738e:	4650      	mov	r0, sl
 8007390:	4659      	mov	r1, fp
 8007392:	e7e7      	b.n	8007364 <_strtod_l+0x84>
 8007394:	2100      	movs	r1, #0
 8007396:	e7ef      	b.n	8007378 <_strtod_l+0x98>
 8007398:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800739a:	b13a      	cbz	r2, 80073ac <_strtod_l+0xcc>
 800739c:	2135      	movs	r1, #53	@ 0x35
 800739e:	a81c      	add	r0, sp, #112	@ 0x70
 80073a0:	f7ff ff36 	bl	8007210 <__copybits>
 80073a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073a6:	9805      	ldr	r0, [sp, #20]
 80073a8:	f7ff fb10 	bl	80069cc <_Bfree>
 80073ac:	3e01      	subs	r6, #1
 80073ae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80073b0:	2e04      	cmp	r6, #4
 80073b2:	d806      	bhi.n	80073c2 <_strtod_l+0xe2>
 80073b4:	e8df f006 	tbb	[pc, r6]
 80073b8:	201d0314 	.word	0x201d0314
 80073bc:	14          	.byte	0x14
 80073bd:	00          	.byte	0x00
 80073be:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80073c2:	05e1      	lsls	r1, r4, #23
 80073c4:	bf48      	it	mi
 80073c6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80073ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073ce:	0d1b      	lsrs	r3, r3, #20
 80073d0:	051b      	lsls	r3, r3, #20
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1bd      	bne.n	8007352 <_strtod_l+0x72>
 80073d6:	f7fe fb1b 	bl	8005a10 <__errno>
 80073da:	2322      	movs	r3, #34	@ 0x22
 80073dc:	6003      	str	r3, [r0, #0]
 80073de:	e7b8      	b.n	8007352 <_strtod_l+0x72>
 80073e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80073e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80073e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80073ec:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80073f0:	e7e7      	b.n	80073c2 <_strtod_l+0xe2>
 80073f2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800756c <_strtod_l+0x28c>
 80073f6:	e7e4      	b.n	80073c2 <_strtod_l+0xe2>
 80073f8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80073fc:	f04f 3aff 	mov.w	sl, #4294967295
 8007400:	e7df      	b.n	80073c2 <_strtod_l+0xe2>
 8007402:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	9219      	str	r2, [sp, #100]	@ 0x64
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b30      	cmp	r3, #48	@ 0x30
 800740c:	d0f9      	beq.n	8007402 <_strtod_l+0x122>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d09f      	beq.n	8007352 <_strtod_l+0x72>
 8007412:	2301      	movs	r3, #1
 8007414:	9309      	str	r3, [sp, #36]	@ 0x24
 8007416:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007418:	220a      	movs	r2, #10
 800741a:	930c      	str	r3, [sp, #48]	@ 0x30
 800741c:	2300      	movs	r3, #0
 800741e:	461f      	mov	r7, r3
 8007420:	9308      	str	r3, [sp, #32]
 8007422:	930a      	str	r3, [sp, #40]	@ 0x28
 8007424:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007426:	7805      	ldrb	r5, [r0, #0]
 8007428:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800742c:	b2d9      	uxtb	r1, r3
 800742e:	2909      	cmp	r1, #9
 8007430:	d928      	bls.n	8007484 <_strtod_l+0x1a4>
 8007432:	2201      	movs	r2, #1
 8007434:	494e      	ldr	r1, [pc, #312]	@ (8007570 <_strtod_l+0x290>)
 8007436:	f001 f968 	bl	800870a <strncmp>
 800743a:	2800      	cmp	r0, #0
 800743c:	d032      	beq.n	80074a4 <_strtod_l+0x1c4>
 800743e:	2000      	movs	r0, #0
 8007440:	462a      	mov	r2, r5
 8007442:	4681      	mov	r9, r0
 8007444:	463d      	mov	r5, r7
 8007446:	4603      	mov	r3, r0
 8007448:	2a65      	cmp	r2, #101	@ 0x65
 800744a:	d001      	beq.n	8007450 <_strtod_l+0x170>
 800744c:	2a45      	cmp	r2, #69	@ 0x45
 800744e:	d114      	bne.n	800747a <_strtod_l+0x19a>
 8007450:	b91d      	cbnz	r5, 800745a <_strtod_l+0x17a>
 8007452:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007454:	4302      	orrs	r2, r0
 8007456:	d095      	beq.n	8007384 <_strtod_l+0xa4>
 8007458:	2500      	movs	r5, #0
 800745a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800745c:	1c62      	adds	r2, r4, #1
 800745e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007460:	7862      	ldrb	r2, [r4, #1]
 8007462:	2a2b      	cmp	r2, #43	@ 0x2b
 8007464:	d077      	beq.n	8007556 <_strtod_l+0x276>
 8007466:	2a2d      	cmp	r2, #45	@ 0x2d
 8007468:	d07b      	beq.n	8007562 <_strtod_l+0x282>
 800746a:	f04f 0c00 	mov.w	ip, #0
 800746e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007472:	2909      	cmp	r1, #9
 8007474:	f240 8082 	bls.w	800757c <_strtod_l+0x29c>
 8007478:	9419      	str	r4, [sp, #100]	@ 0x64
 800747a:	f04f 0800 	mov.w	r8, #0
 800747e:	e0a2      	b.n	80075c6 <_strtod_l+0x2e6>
 8007480:	2300      	movs	r3, #0
 8007482:	e7c7      	b.n	8007414 <_strtod_l+0x134>
 8007484:	2f08      	cmp	r7, #8
 8007486:	bfd5      	itete	le
 8007488:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800748a:	9908      	ldrgt	r1, [sp, #32]
 800748c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007490:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007494:	f100 0001 	add.w	r0, r0, #1
 8007498:	bfd4      	ite	le
 800749a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800749c:	9308      	strgt	r3, [sp, #32]
 800749e:	3701      	adds	r7, #1
 80074a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80074a2:	e7bf      	b.n	8007424 <_strtod_l+0x144>
 80074a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80074aa:	785a      	ldrb	r2, [r3, #1]
 80074ac:	b37f      	cbz	r7, 800750e <_strtod_l+0x22e>
 80074ae:	4681      	mov	r9, r0
 80074b0:	463d      	mov	r5, r7
 80074b2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80074b6:	2b09      	cmp	r3, #9
 80074b8:	d912      	bls.n	80074e0 <_strtod_l+0x200>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e7c4      	b.n	8007448 <_strtod_l+0x168>
 80074be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074c0:	3001      	adds	r0, #1
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80074c6:	785a      	ldrb	r2, [r3, #1]
 80074c8:	2a30      	cmp	r2, #48	@ 0x30
 80074ca:	d0f8      	beq.n	80074be <_strtod_l+0x1de>
 80074cc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	f200 84cb 	bhi.w	8007e6c <_strtod_l+0xb8c>
 80074d6:	4681      	mov	r9, r0
 80074d8:	2000      	movs	r0, #0
 80074da:	4605      	mov	r5, r0
 80074dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074de:	930c      	str	r3, [sp, #48]	@ 0x30
 80074e0:	3a30      	subs	r2, #48	@ 0x30
 80074e2:	f100 0301 	add.w	r3, r0, #1
 80074e6:	d02a      	beq.n	800753e <_strtod_l+0x25e>
 80074e8:	4499      	add	r9, r3
 80074ea:	210a      	movs	r1, #10
 80074ec:	462b      	mov	r3, r5
 80074ee:	eb00 0c05 	add.w	ip, r0, r5
 80074f2:	4563      	cmp	r3, ip
 80074f4:	d10d      	bne.n	8007512 <_strtod_l+0x232>
 80074f6:	1c69      	adds	r1, r5, #1
 80074f8:	4401      	add	r1, r0
 80074fa:	4428      	add	r0, r5
 80074fc:	2808      	cmp	r0, #8
 80074fe:	dc16      	bgt.n	800752e <_strtod_l+0x24e>
 8007500:	230a      	movs	r3, #10
 8007502:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007504:	fb03 2300 	mla	r3, r3, r0, r2
 8007508:	930a      	str	r3, [sp, #40]	@ 0x28
 800750a:	2300      	movs	r3, #0
 800750c:	e018      	b.n	8007540 <_strtod_l+0x260>
 800750e:	4638      	mov	r0, r7
 8007510:	e7da      	b.n	80074c8 <_strtod_l+0x1e8>
 8007512:	2b08      	cmp	r3, #8
 8007514:	f103 0301 	add.w	r3, r3, #1
 8007518:	dc03      	bgt.n	8007522 <_strtod_l+0x242>
 800751a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800751c:	434e      	muls	r6, r1
 800751e:	960a      	str	r6, [sp, #40]	@ 0x28
 8007520:	e7e7      	b.n	80074f2 <_strtod_l+0x212>
 8007522:	2b10      	cmp	r3, #16
 8007524:	bfde      	ittt	le
 8007526:	9e08      	ldrle	r6, [sp, #32]
 8007528:	434e      	mulle	r6, r1
 800752a:	9608      	strle	r6, [sp, #32]
 800752c:	e7e1      	b.n	80074f2 <_strtod_l+0x212>
 800752e:	280f      	cmp	r0, #15
 8007530:	dceb      	bgt.n	800750a <_strtod_l+0x22a>
 8007532:	230a      	movs	r3, #10
 8007534:	9808      	ldr	r0, [sp, #32]
 8007536:	fb03 2300 	mla	r3, r3, r0, r2
 800753a:	9308      	str	r3, [sp, #32]
 800753c:	e7e5      	b.n	800750a <_strtod_l+0x22a>
 800753e:	4629      	mov	r1, r5
 8007540:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007542:	460d      	mov	r5, r1
 8007544:	1c50      	adds	r0, r2, #1
 8007546:	9019      	str	r0, [sp, #100]	@ 0x64
 8007548:	7852      	ldrb	r2, [r2, #1]
 800754a:	4618      	mov	r0, r3
 800754c:	e7b1      	b.n	80074b2 <_strtod_l+0x1d2>
 800754e:	f04f 0900 	mov.w	r9, #0
 8007552:	2301      	movs	r3, #1
 8007554:	e77d      	b.n	8007452 <_strtod_l+0x172>
 8007556:	f04f 0c00 	mov.w	ip, #0
 800755a:	1ca2      	adds	r2, r4, #2
 800755c:	9219      	str	r2, [sp, #100]	@ 0x64
 800755e:	78a2      	ldrb	r2, [r4, #2]
 8007560:	e785      	b.n	800746e <_strtod_l+0x18e>
 8007562:	f04f 0c01 	mov.w	ip, #1
 8007566:	e7f8      	b.n	800755a <_strtod_l+0x27a>
 8007568:	0800b008 	.word	0x0800b008
 800756c:	7ff00000 	.word	0x7ff00000
 8007570:	0800aff0 	.word	0x0800aff0
 8007574:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007576:	1c51      	adds	r1, r2, #1
 8007578:	9119      	str	r1, [sp, #100]	@ 0x64
 800757a:	7852      	ldrb	r2, [r2, #1]
 800757c:	2a30      	cmp	r2, #48	@ 0x30
 800757e:	d0f9      	beq.n	8007574 <_strtod_l+0x294>
 8007580:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007584:	2908      	cmp	r1, #8
 8007586:	f63f af78 	bhi.w	800747a <_strtod_l+0x19a>
 800758a:	f04f 080a 	mov.w	r8, #10
 800758e:	3a30      	subs	r2, #48	@ 0x30
 8007590:	920e      	str	r2, [sp, #56]	@ 0x38
 8007592:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007594:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007596:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007598:	1c56      	adds	r6, r2, #1
 800759a:	9619      	str	r6, [sp, #100]	@ 0x64
 800759c:	7852      	ldrb	r2, [r2, #1]
 800759e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80075a2:	f1be 0f09 	cmp.w	lr, #9
 80075a6:	d939      	bls.n	800761c <_strtod_l+0x33c>
 80075a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80075aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80075ae:	1a76      	subs	r6, r6, r1
 80075b0:	2e08      	cmp	r6, #8
 80075b2:	dc03      	bgt.n	80075bc <_strtod_l+0x2dc>
 80075b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80075b6:	4588      	cmp	r8, r1
 80075b8:	bfa8      	it	ge
 80075ba:	4688      	movge	r8, r1
 80075bc:	f1bc 0f00 	cmp.w	ip, #0
 80075c0:	d001      	beq.n	80075c6 <_strtod_l+0x2e6>
 80075c2:	f1c8 0800 	rsb	r8, r8, #0
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	d14e      	bne.n	8007668 <_strtod_l+0x388>
 80075ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075cc:	4308      	orrs	r0, r1
 80075ce:	f47f aec0 	bne.w	8007352 <_strtod_l+0x72>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f47f aed6 	bne.w	8007384 <_strtod_l+0xa4>
 80075d8:	2a69      	cmp	r2, #105	@ 0x69
 80075da:	d028      	beq.n	800762e <_strtod_l+0x34e>
 80075dc:	dc25      	bgt.n	800762a <_strtod_l+0x34a>
 80075de:	2a49      	cmp	r2, #73	@ 0x49
 80075e0:	d025      	beq.n	800762e <_strtod_l+0x34e>
 80075e2:	2a4e      	cmp	r2, #78	@ 0x4e
 80075e4:	f47f aece 	bne.w	8007384 <_strtod_l+0xa4>
 80075e8:	499a      	ldr	r1, [pc, #616]	@ (8007854 <_strtod_l+0x574>)
 80075ea:	a819      	add	r0, sp, #100	@ 0x64
 80075ec:	f001 fb94 	bl	8008d18 <__match>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f43f aec7 	beq.w	8007384 <_strtod_l+0xa4>
 80075f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2b28      	cmp	r3, #40	@ 0x28
 80075fc:	d12e      	bne.n	800765c <_strtod_l+0x37c>
 80075fe:	4996      	ldr	r1, [pc, #600]	@ (8007858 <_strtod_l+0x578>)
 8007600:	aa1c      	add	r2, sp, #112	@ 0x70
 8007602:	a819      	add	r0, sp, #100	@ 0x64
 8007604:	f001 fb9c 	bl	8008d40 <__hexnan>
 8007608:	2805      	cmp	r0, #5
 800760a:	d127      	bne.n	800765c <_strtod_l+0x37c>
 800760c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800760e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007612:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007616:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800761a:	e69a      	b.n	8007352 <_strtod_l+0x72>
 800761c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800761e:	fb08 2101 	mla	r1, r8, r1, r2
 8007622:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007626:	920e      	str	r2, [sp, #56]	@ 0x38
 8007628:	e7b5      	b.n	8007596 <_strtod_l+0x2b6>
 800762a:	2a6e      	cmp	r2, #110	@ 0x6e
 800762c:	e7da      	b.n	80075e4 <_strtod_l+0x304>
 800762e:	498b      	ldr	r1, [pc, #556]	@ (800785c <_strtod_l+0x57c>)
 8007630:	a819      	add	r0, sp, #100	@ 0x64
 8007632:	f001 fb71 	bl	8008d18 <__match>
 8007636:	2800      	cmp	r0, #0
 8007638:	f43f aea4 	beq.w	8007384 <_strtod_l+0xa4>
 800763c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800763e:	4988      	ldr	r1, [pc, #544]	@ (8007860 <_strtod_l+0x580>)
 8007640:	3b01      	subs	r3, #1
 8007642:	a819      	add	r0, sp, #100	@ 0x64
 8007644:	9319      	str	r3, [sp, #100]	@ 0x64
 8007646:	f001 fb67 	bl	8008d18 <__match>
 800764a:	b910      	cbnz	r0, 8007652 <_strtod_l+0x372>
 800764c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800764e:	3301      	adds	r3, #1
 8007650:	9319      	str	r3, [sp, #100]	@ 0x64
 8007652:	f04f 0a00 	mov.w	sl, #0
 8007656:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007864 <_strtod_l+0x584>
 800765a:	e67a      	b.n	8007352 <_strtod_l+0x72>
 800765c:	4882      	ldr	r0, [pc, #520]	@ (8007868 <_strtod_l+0x588>)
 800765e:	f001 f899 	bl	8008794 <nan>
 8007662:	4682      	mov	sl, r0
 8007664:	468b      	mov	fp, r1
 8007666:	e674      	b.n	8007352 <_strtod_l+0x72>
 8007668:	eba8 0309 	sub.w	r3, r8, r9
 800766c:	2f00      	cmp	r7, #0
 800766e:	bf08      	it	eq
 8007670:	462f      	moveq	r7, r5
 8007672:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007674:	2d10      	cmp	r5, #16
 8007676:	462c      	mov	r4, r5
 8007678:	9309      	str	r3, [sp, #36]	@ 0x24
 800767a:	bfa8      	it	ge
 800767c:	2410      	movge	r4, #16
 800767e:	f7f8 feb1 	bl	80003e4 <__aeabi_ui2d>
 8007682:	2d09      	cmp	r5, #9
 8007684:	4682      	mov	sl, r0
 8007686:	468b      	mov	fp, r1
 8007688:	dc11      	bgt.n	80076ae <_strtod_l+0x3ce>
 800768a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	f43f ae60 	beq.w	8007352 <_strtod_l+0x72>
 8007692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007694:	dd76      	ble.n	8007784 <_strtod_l+0x4a4>
 8007696:	2b16      	cmp	r3, #22
 8007698:	dc5d      	bgt.n	8007756 <_strtod_l+0x476>
 800769a:	4974      	ldr	r1, [pc, #464]	@ (800786c <_strtod_l+0x58c>)
 800769c:	4652      	mov	r2, sl
 800769e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076a2:	465b      	mov	r3, fp
 80076a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076a8:	f7f8 ff16 	bl	80004d8 <__aeabi_dmul>
 80076ac:	e7d9      	b.n	8007662 <_strtod_l+0x382>
 80076ae:	4b6f      	ldr	r3, [pc, #444]	@ (800786c <_strtod_l+0x58c>)
 80076b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80076b8:	f7f8 ff0e 	bl	80004d8 <__aeabi_dmul>
 80076bc:	4682      	mov	sl, r0
 80076be:	9808      	ldr	r0, [sp, #32]
 80076c0:	468b      	mov	fp, r1
 80076c2:	f7f8 fe8f 	bl	80003e4 <__aeabi_ui2d>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4650      	mov	r0, sl
 80076cc:	4659      	mov	r1, fp
 80076ce:	f7f8 fd4d 	bl	800016c <__adddf3>
 80076d2:	2d0f      	cmp	r5, #15
 80076d4:	4682      	mov	sl, r0
 80076d6:	468b      	mov	fp, r1
 80076d8:	ddd7      	ble.n	800768a <_strtod_l+0x3aa>
 80076da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076dc:	1b2c      	subs	r4, r5, r4
 80076de:	441c      	add	r4, r3
 80076e0:	2c00      	cmp	r4, #0
 80076e2:	f340 8096 	ble.w	8007812 <_strtod_l+0x532>
 80076e6:	f014 030f 	ands.w	r3, r4, #15
 80076ea:	d00a      	beq.n	8007702 <_strtod_l+0x422>
 80076ec:	495f      	ldr	r1, [pc, #380]	@ (800786c <_strtod_l+0x58c>)
 80076ee:	4652      	mov	r2, sl
 80076f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076f8:	465b      	mov	r3, fp
 80076fa:	f7f8 feed 	bl	80004d8 <__aeabi_dmul>
 80076fe:	4682      	mov	sl, r0
 8007700:	468b      	mov	fp, r1
 8007702:	f034 040f 	bics.w	r4, r4, #15
 8007706:	d073      	beq.n	80077f0 <_strtod_l+0x510>
 8007708:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800770c:	dd48      	ble.n	80077a0 <_strtod_l+0x4c0>
 800770e:	2400      	movs	r4, #0
 8007710:	46a0      	mov	r8, r4
 8007712:	46a1      	mov	r9, r4
 8007714:	940a      	str	r4, [sp, #40]	@ 0x28
 8007716:	2322      	movs	r3, #34	@ 0x22
 8007718:	f04f 0a00 	mov.w	sl, #0
 800771c:	9a05      	ldr	r2, [sp, #20]
 800771e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007864 <_strtod_l+0x584>
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007726:	2b00      	cmp	r3, #0
 8007728:	f43f ae13 	beq.w	8007352 <_strtod_l+0x72>
 800772c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800772e:	9805      	ldr	r0, [sp, #20]
 8007730:	f7ff f94c 	bl	80069cc <_Bfree>
 8007734:	4649      	mov	r1, r9
 8007736:	9805      	ldr	r0, [sp, #20]
 8007738:	f7ff f948 	bl	80069cc <_Bfree>
 800773c:	4641      	mov	r1, r8
 800773e:	9805      	ldr	r0, [sp, #20]
 8007740:	f7ff f944 	bl	80069cc <_Bfree>
 8007744:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007746:	9805      	ldr	r0, [sp, #20]
 8007748:	f7ff f940 	bl	80069cc <_Bfree>
 800774c:	4621      	mov	r1, r4
 800774e:	9805      	ldr	r0, [sp, #20]
 8007750:	f7ff f93c 	bl	80069cc <_Bfree>
 8007754:	e5fd      	b.n	8007352 <_strtod_l+0x72>
 8007756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007758:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800775c:	4293      	cmp	r3, r2
 800775e:	dbbc      	blt.n	80076da <_strtod_l+0x3fa>
 8007760:	4c42      	ldr	r4, [pc, #264]	@ (800786c <_strtod_l+0x58c>)
 8007762:	f1c5 050f 	rsb	r5, r5, #15
 8007766:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800776a:	4652      	mov	r2, sl
 800776c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007770:	465b      	mov	r3, fp
 8007772:	f7f8 feb1 	bl	80004d8 <__aeabi_dmul>
 8007776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007778:	1b5d      	subs	r5, r3, r5
 800777a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800777e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007782:	e791      	b.n	80076a8 <_strtod_l+0x3c8>
 8007784:	3316      	adds	r3, #22
 8007786:	dba8      	blt.n	80076da <_strtod_l+0x3fa>
 8007788:	4b38      	ldr	r3, [pc, #224]	@ (800786c <_strtod_l+0x58c>)
 800778a:	eba9 0808 	sub.w	r8, r9, r8
 800778e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007792:	4650      	mov	r0, sl
 8007794:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007798:	4659      	mov	r1, fp
 800779a:	f7f8 ffc7 	bl	800072c <__aeabi_ddiv>
 800779e:	e760      	b.n	8007662 <_strtod_l+0x382>
 80077a0:	4b33      	ldr	r3, [pc, #204]	@ (8007870 <_strtod_l+0x590>)
 80077a2:	4650      	mov	r0, sl
 80077a4:	9308      	str	r3, [sp, #32]
 80077a6:	2300      	movs	r3, #0
 80077a8:	4659      	mov	r1, fp
 80077aa:	461e      	mov	r6, r3
 80077ac:	1124      	asrs	r4, r4, #4
 80077ae:	2c01      	cmp	r4, #1
 80077b0:	dc21      	bgt.n	80077f6 <_strtod_l+0x516>
 80077b2:	b10b      	cbz	r3, 80077b8 <_strtod_l+0x4d8>
 80077b4:	4682      	mov	sl, r0
 80077b6:	468b      	mov	fp, r1
 80077b8:	492d      	ldr	r1, [pc, #180]	@ (8007870 <_strtod_l+0x590>)
 80077ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80077be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80077c2:	4652      	mov	r2, sl
 80077c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c8:	465b      	mov	r3, fp
 80077ca:	f7f8 fe85 	bl	80004d8 <__aeabi_dmul>
 80077ce:	4b25      	ldr	r3, [pc, #148]	@ (8007864 <_strtod_l+0x584>)
 80077d0:	460a      	mov	r2, r1
 80077d2:	400b      	ands	r3, r1
 80077d4:	4927      	ldr	r1, [pc, #156]	@ (8007874 <_strtod_l+0x594>)
 80077d6:	4682      	mov	sl, r0
 80077d8:	428b      	cmp	r3, r1
 80077da:	d898      	bhi.n	800770e <_strtod_l+0x42e>
 80077dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80077e0:	428b      	cmp	r3, r1
 80077e2:	bf86      	itte	hi
 80077e4:	f04f 3aff 	movhi.w	sl, #4294967295
 80077e8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007878 <_strtod_l+0x598>
 80077ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80077f0:	2300      	movs	r3, #0
 80077f2:	9308      	str	r3, [sp, #32]
 80077f4:	e07a      	b.n	80078ec <_strtod_l+0x60c>
 80077f6:	07e2      	lsls	r2, r4, #31
 80077f8:	d505      	bpl.n	8007806 <_strtod_l+0x526>
 80077fa:	9b08      	ldr	r3, [sp, #32]
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f7f8 fe6a 	bl	80004d8 <__aeabi_dmul>
 8007804:	2301      	movs	r3, #1
 8007806:	9a08      	ldr	r2, [sp, #32]
 8007808:	3601      	adds	r6, #1
 800780a:	3208      	adds	r2, #8
 800780c:	1064      	asrs	r4, r4, #1
 800780e:	9208      	str	r2, [sp, #32]
 8007810:	e7cd      	b.n	80077ae <_strtod_l+0x4ce>
 8007812:	d0ed      	beq.n	80077f0 <_strtod_l+0x510>
 8007814:	4264      	negs	r4, r4
 8007816:	f014 020f 	ands.w	r2, r4, #15
 800781a:	d00a      	beq.n	8007832 <_strtod_l+0x552>
 800781c:	4b13      	ldr	r3, [pc, #76]	@ (800786c <_strtod_l+0x58c>)
 800781e:	4650      	mov	r0, sl
 8007820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007824:	4659      	mov	r1, fp
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 ff7f 	bl	800072c <__aeabi_ddiv>
 800782e:	4682      	mov	sl, r0
 8007830:	468b      	mov	fp, r1
 8007832:	1124      	asrs	r4, r4, #4
 8007834:	d0dc      	beq.n	80077f0 <_strtod_l+0x510>
 8007836:	2c1f      	cmp	r4, #31
 8007838:	dd20      	ble.n	800787c <_strtod_l+0x59c>
 800783a:	2400      	movs	r4, #0
 800783c:	46a0      	mov	r8, r4
 800783e:	46a1      	mov	r9, r4
 8007840:	940a      	str	r4, [sp, #40]	@ 0x28
 8007842:	2322      	movs	r3, #34	@ 0x22
 8007844:	9a05      	ldr	r2, [sp, #20]
 8007846:	f04f 0a00 	mov.w	sl, #0
 800784a:	f04f 0b00 	mov.w	fp, #0
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	e768      	b.n	8007724 <_strtod_l+0x444>
 8007852:	bf00      	nop
 8007854:	0800addb 	.word	0x0800addb
 8007858:	0800aff4 	.word	0x0800aff4
 800785c:	0800add3 	.word	0x0800add3
 8007860:	0800ae0a 	.word	0x0800ae0a
 8007864:	7ff00000 	.word	0x7ff00000
 8007868:	0800b19d 	.word	0x0800b19d
 800786c:	0800af28 	.word	0x0800af28
 8007870:	0800af00 	.word	0x0800af00
 8007874:	7ca00000 	.word	0x7ca00000
 8007878:	7fefffff 	.word	0x7fefffff
 800787c:	f014 0310 	ands.w	r3, r4, #16
 8007880:	bf18      	it	ne
 8007882:	236a      	movne	r3, #106	@ 0x6a
 8007884:	4650      	mov	r0, sl
 8007886:	9308      	str	r3, [sp, #32]
 8007888:	4659      	mov	r1, fp
 800788a:	2300      	movs	r3, #0
 800788c:	4ea9      	ldr	r6, [pc, #676]	@ (8007b34 <_strtod_l+0x854>)
 800788e:	07e2      	lsls	r2, r4, #31
 8007890:	d504      	bpl.n	800789c <_strtod_l+0x5bc>
 8007892:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007896:	f7f8 fe1f 	bl	80004d8 <__aeabi_dmul>
 800789a:	2301      	movs	r3, #1
 800789c:	1064      	asrs	r4, r4, #1
 800789e:	f106 0608 	add.w	r6, r6, #8
 80078a2:	d1f4      	bne.n	800788e <_strtod_l+0x5ae>
 80078a4:	b10b      	cbz	r3, 80078aa <_strtod_l+0x5ca>
 80078a6:	4682      	mov	sl, r0
 80078a8:	468b      	mov	fp, r1
 80078aa:	9b08      	ldr	r3, [sp, #32]
 80078ac:	b1b3      	cbz	r3, 80078dc <_strtod_l+0x5fc>
 80078ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80078b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	4659      	mov	r1, fp
 80078ba:	dd0f      	ble.n	80078dc <_strtod_l+0x5fc>
 80078bc:	2b1f      	cmp	r3, #31
 80078be:	dd57      	ble.n	8007970 <_strtod_l+0x690>
 80078c0:	2b34      	cmp	r3, #52	@ 0x34
 80078c2:	bfd8      	it	le
 80078c4:	f04f 33ff 	movle.w	r3, #4294967295
 80078c8:	f04f 0a00 	mov.w	sl, #0
 80078cc:	bfcf      	iteee	gt
 80078ce:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80078d2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80078d6:	4093      	lslle	r3, r2
 80078d8:	ea03 0b01 	andle.w	fp, r3, r1
 80078dc:	2200      	movs	r2, #0
 80078de:	2300      	movs	r3, #0
 80078e0:	4650      	mov	r0, sl
 80078e2:	4659      	mov	r1, fp
 80078e4:	f7f9 f860 	bl	80009a8 <__aeabi_dcmpeq>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d1a6      	bne.n	800783a <_strtod_l+0x55a>
 80078ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ee:	463a      	mov	r2, r7
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80078f4:	462b      	mov	r3, r5
 80078f6:	9805      	ldr	r0, [sp, #20]
 80078f8:	f7ff f8d0 	bl	8006a9c <__s2b>
 80078fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f af05 	beq.w	800770e <_strtod_l+0x42e>
 8007904:	2400      	movs	r4, #0
 8007906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007908:	eba9 0308 	sub.w	r3, r9, r8
 800790c:	2a00      	cmp	r2, #0
 800790e:	bfa8      	it	ge
 8007910:	2300      	movge	r3, #0
 8007912:	46a0      	mov	r8, r4
 8007914:	9312      	str	r3, [sp, #72]	@ 0x48
 8007916:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800791a:	9316      	str	r3, [sp, #88]	@ 0x58
 800791c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800791e:	9805      	ldr	r0, [sp, #20]
 8007920:	6859      	ldr	r1, [r3, #4]
 8007922:	f7ff f813 	bl	800694c <_Balloc>
 8007926:	4681      	mov	r9, r0
 8007928:	2800      	cmp	r0, #0
 800792a:	f43f aef4 	beq.w	8007716 <_strtod_l+0x436>
 800792e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007930:	300c      	adds	r0, #12
 8007932:	691a      	ldr	r2, [r3, #16]
 8007934:	f103 010c 	add.w	r1, r3, #12
 8007938:	3202      	adds	r2, #2
 800793a:	0092      	lsls	r2, r2, #2
 800793c:	f7fe f8a3 	bl	8005a86 <memcpy>
 8007940:	ab1c      	add	r3, sp, #112	@ 0x70
 8007942:	9301      	str	r3, [sp, #4]
 8007944:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	4652      	mov	r2, sl
 800794a:	465b      	mov	r3, fp
 800794c:	9805      	ldr	r0, [sp, #20]
 800794e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007952:	f7ff fbd5 	bl	8007100 <__d2b>
 8007956:	901a      	str	r0, [sp, #104]	@ 0x68
 8007958:	2800      	cmp	r0, #0
 800795a:	f43f aedc 	beq.w	8007716 <_strtod_l+0x436>
 800795e:	2101      	movs	r1, #1
 8007960:	9805      	ldr	r0, [sp, #20]
 8007962:	f7ff f931 	bl	8006bc8 <__i2b>
 8007966:	4680      	mov	r8, r0
 8007968:	b948      	cbnz	r0, 800797e <_strtod_l+0x69e>
 800796a:	f04f 0800 	mov.w	r8, #0
 800796e:	e6d2      	b.n	8007716 <_strtod_l+0x436>
 8007970:	f04f 32ff 	mov.w	r2, #4294967295
 8007974:	fa02 f303 	lsl.w	r3, r2, r3
 8007978:	ea03 0a0a 	and.w	sl, r3, sl
 800797c:	e7ae      	b.n	80078dc <_strtod_l+0x5fc>
 800797e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007980:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007982:	2d00      	cmp	r5, #0
 8007984:	bfab      	itete	ge
 8007986:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007988:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800798a:	18ef      	addge	r7, r5, r3
 800798c:	1b5e      	sublt	r6, r3, r5
 800798e:	9b08      	ldr	r3, [sp, #32]
 8007990:	bfa8      	it	ge
 8007992:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007994:	eba5 0503 	sub.w	r5, r5, r3
 8007998:	4415      	add	r5, r2
 800799a:	4b67      	ldr	r3, [pc, #412]	@ (8007b38 <_strtod_l+0x858>)
 800799c:	f105 35ff 	add.w	r5, r5, #4294967295
 80079a0:	bfb8      	it	lt
 80079a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80079a4:	429d      	cmp	r5, r3
 80079a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80079aa:	da50      	bge.n	8007a4e <_strtod_l+0x76e>
 80079ac:	1b5b      	subs	r3, r3, r5
 80079ae:	2b1f      	cmp	r3, #31
 80079b0:	f04f 0101 	mov.w	r1, #1
 80079b4:	eba2 0203 	sub.w	r2, r2, r3
 80079b8:	dc3d      	bgt.n	8007a36 <_strtod_l+0x756>
 80079ba:	fa01 f303 	lsl.w	r3, r1, r3
 80079be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079c0:	2300      	movs	r3, #0
 80079c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80079c4:	18bd      	adds	r5, r7, r2
 80079c6:	9b08      	ldr	r3, [sp, #32]
 80079c8:	42af      	cmp	r7, r5
 80079ca:	4416      	add	r6, r2
 80079cc:	441e      	add	r6, r3
 80079ce:	463b      	mov	r3, r7
 80079d0:	bfa8      	it	ge
 80079d2:	462b      	movge	r3, r5
 80079d4:	42b3      	cmp	r3, r6
 80079d6:	bfa8      	it	ge
 80079d8:	4633      	movge	r3, r6
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bfc2      	ittt	gt
 80079de:	1aed      	subgt	r5, r5, r3
 80079e0:	1af6      	subgt	r6, r6, r3
 80079e2:	1aff      	subgt	r7, r7, r3
 80079e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	dd16      	ble.n	8007a18 <_strtod_l+0x738>
 80079ea:	4641      	mov	r1, r8
 80079ec:	461a      	mov	r2, r3
 80079ee:	9805      	ldr	r0, [sp, #20]
 80079f0:	f7ff f9a8 	bl	8006d44 <__pow5mult>
 80079f4:	4680      	mov	r8, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d0b7      	beq.n	800796a <_strtod_l+0x68a>
 80079fa:	4601      	mov	r1, r0
 80079fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80079fe:	9805      	ldr	r0, [sp, #20]
 8007a00:	f7ff f8f8 	bl	8006bf4 <__multiply>
 8007a04:	900e      	str	r0, [sp, #56]	@ 0x38
 8007a06:	2800      	cmp	r0, #0
 8007a08:	f43f ae85 	beq.w	8007716 <_strtod_l+0x436>
 8007a0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a0e:	9805      	ldr	r0, [sp, #20]
 8007a10:	f7fe ffdc 	bl	80069cc <_Bfree>
 8007a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a16:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	dc1d      	bgt.n	8007a58 <_strtod_l+0x778>
 8007a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	dd23      	ble.n	8007a6a <_strtod_l+0x78a>
 8007a22:	4649      	mov	r1, r9
 8007a24:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007a26:	9805      	ldr	r0, [sp, #20]
 8007a28:	f7ff f98c 	bl	8006d44 <__pow5mult>
 8007a2c:	4681      	mov	r9, r0
 8007a2e:	b9e0      	cbnz	r0, 8007a6a <_strtod_l+0x78a>
 8007a30:	f04f 0900 	mov.w	r9, #0
 8007a34:	e66f      	b.n	8007716 <_strtod_l+0x436>
 8007a36:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007a3a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007a3e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007a42:	35e2      	adds	r5, #226	@ 0xe2
 8007a44:	fa01 f305 	lsl.w	r3, r1, r5
 8007a48:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a4a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007a4c:	e7ba      	b.n	80079c4 <_strtod_l+0x6e4>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a52:	2301      	movs	r3, #1
 8007a54:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a56:	e7b5      	b.n	80079c4 <_strtod_l+0x6e4>
 8007a58:	462a      	mov	r2, r5
 8007a5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a5c:	9805      	ldr	r0, [sp, #20]
 8007a5e:	f7ff f9cb 	bl	8006df8 <__lshift>
 8007a62:	901a      	str	r0, [sp, #104]	@ 0x68
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d1d9      	bne.n	8007a1c <_strtod_l+0x73c>
 8007a68:	e655      	b.n	8007716 <_strtod_l+0x436>
 8007a6a:	2e00      	cmp	r6, #0
 8007a6c:	dd07      	ble.n	8007a7e <_strtod_l+0x79e>
 8007a6e:	4649      	mov	r1, r9
 8007a70:	4632      	mov	r2, r6
 8007a72:	9805      	ldr	r0, [sp, #20]
 8007a74:	f7ff f9c0 	bl	8006df8 <__lshift>
 8007a78:	4681      	mov	r9, r0
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d0d8      	beq.n	8007a30 <_strtod_l+0x750>
 8007a7e:	2f00      	cmp	r7, #0
 8007a80:	dd08      	ble.n	8007a94 <_strtod_l+0x7b4>
 8007a82:	4641      	mov	r1, r8
 8007a84:	463a      	mov	r2, r7
 8007a86:	9805      	ldr	r0, [sp, #20]
 8007a88:	f7ff f9b6 	bl	8006df8 <__lshift>
 8007a8c:	4680      	mov	r8, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f ae41 	beq.w	8007716 <_strtod_l+0x436>
 8007a94:	464a      	mov	r2, r9
 8007a96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a98:	9805      	ldr	r0, [sp, #20]
 8007a9a:	f7ff fa35 	bl	8006f08 <__mdiff>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	f43f ae38 	beq.w	8007716 <_strtod_l+0x436>
 8007aa6:	68c3      	ldr	r3, [r0, #12]
 8007aa8:	4641      	mov	r1, r8
 8007aaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007aac:	2300      	movs	r3, #0
 8007aae:	60c3      	str	r3, [r0, #12]
 8007ab0:	f7ff fa0e 	bl	8006ed0 <__mcmp>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	da45      	bge.n	8007b44 <_strtod_l+0x864>
 8007ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aba:	ea53 030a 	orrs.w	r3, r3, sl
 8007abe:	d16b      	bne.n	8007b98 <_strtod_l+0x8b8>
 8007ac0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d167      	bne.n	8007b98 <_strtod_l+0x8b8>
 8007ac8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007acc:	0d1b      	lsrs	r3, r3, #20
 8007ace:	051b      	lsls	r3, r3, #20
 8007ad0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ad4:	d960      	bls.n	8007b98 <_strtod_l+0x8b8>
 8007ad6:	6963      	ldr	r3, [r4, #20]
 8007ad8:	b913      	cbnz	r3, 8007ae0 <_strtod_l+0x800>
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	dd5b      	ble.n	8007b98 <_strtod_l+0x8b8>
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	9805      	ldr	r0, [sp, #20]
 8007ae6:	f7ff f987 	bl	8006df8 <__lshift>
 8007aea:	4641      	mov	r1, r8
 8007aec:	4604      	mov	r4, r0
 8007aee:	f7ff f9ef 	bl	8006ed0 <__mcmp>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	dd50      	ble.n	8007b98 <_strtod_l+0x8b8>
 8007af6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007afa:	9a08      	ldr	r2, [sp, #32]
 8007afc:	0d1b      	lsrs	r3, r3, #20
 8007afe:	051b      	lsls	r3, r3, #20
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	d06a      	beq.n	8007bda <_strtod_l+0x8fa>
 8007b04:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b08:	d867      	bhi.n	8007bda <_strtod_l+0x8fa>
 8007b0a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007b0e:	f67f ae98 	bls.w	8007842 <_strtod_l+0x562>
 8007b12:	4650      	mov	r0, sl
 8007b14:	4659      	mov	r1, fp
 8007b16:	4b09      	ldr	r3, [pc, #36]	@ (8007b3c <_strtod_l+0x85c>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f7f8 fcdd 	bl	80004d8 <__aeabi_dmul>
 8007b1e:	4b08      	ldr	r3, [pc, #32]	@ (8007b40 <_strtod_l+0x860>)
 8007b20:	4682      	mov	sl, r0
 8007b22:	400b      	ands	r3, r1
 8007b24:	468b      	mov	fp, r1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f47f ae00 	bne.w	800772c <_strtod_l+0x44c>
 8007b2c:	2322      	movs	r3, #34	@ 0x22
 8007b2e:	9a05      	ldr	r2, [sp, #20]
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	e5fb      	b.n	800772c <_strtod_l+0x44c>
 8007b34:	0800b020 	.word	0x0800b020
 8007b38:	fffffc02 	.word	0xfffffc02
 8007b3c:	39500000 	.word	0x39500000
 8007b40:	7ff00000 	.word	0x7ff00000
 8007b44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007b48:	d165      	bne.n	8007c16 <_strtod_l+0x936>
 8007b4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007b4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b50:	b35a      	cbz	r2, 8007baa <_strtod_l+0x8ca>
 8007b52:	4a99      	ldr	r2, [pc, #612]	@ (8007db8 <_strtod_l+0xad8>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d12b      	bne.n	8007bb0 <_strtod_l+0x8d0>
 8007b58:	9b08      	ldr	r3, [sp, #32]
 8007b5a:	4651      	mov	r1, sl
 8007b5c:	b303      	cbz	r3, 8007ba0 <_strtod_l+0x8c0>
 8007b5e:	465a      	mov	r2, fp
 8007b60:	4b96      	ldr	r3, [pc, #600]	@ (8007dbc <_strtod_l+0xadc>)
 8007b62:	4013      	ands	r3, r2
 8007b64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007b68:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6c:	d81b      	bhi.n	8007ba6 <_strtod_l+0x8c6>
 8007b6e:	0d1b      	lsrs	r3, r3, #20
 8007b70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	4299      	cmp	r1, r3
 8007b7a:	d119      	bne.n	8007bb0 <_strtod_l+0x8d0>
 8007b7c:	4b90      	ldr	r3, [pc, #576]	@ (8007dc0 <_strtod_l+0xae0>)
 8007b7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d102      	bne.n	8007b8a <_strtod_l+0x8aa>
 8007b84:	3101      	adds	r1, #1
 8007b86:	f43f adc6 	beq.w	8007716 <_strtod_l+0x436>
 8007b8a:	f04f 0a00 	mov.w	sl, #0
 8007b8e:	4b8b      	ldr	r3, [pc, #556]	@ (8007dbc <_strtod_l+0xadc>)
 8007b90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b92:	401a      	ands	r2, r3
 8007b94:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007b98:	9b08      	ldr	r3, [sp, #32]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1b9      	bne.n	8007b12 <_strtod_l+0x832>
 8007b9e:	e5c5      	b.n	800772c <_strtod_l+0x44c>
 8007ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba4:	e7e8      	b.n	8007b78 <_strtod_l+0x898>
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	e7e6      	b.n	8007b78 <_strtod_l+0x898>
 8007baa:	ea53 030a 	orrs.w	r3, r3, sl
 8007bae:	d0a2      	beq.n	8007af6 <_strtod_l+0x816>
 8007bb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007bb2:	b1db      	cbz	r3, 8007bec <_strtod_l+0x90c>
 8007bb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bb6:	4213      	tst	r3, r2
 8007bb8:	d0ee      	beq.n	8007b98 <_strtod_l+0x8b8>
 8007bba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	4659      	mov	r1, fp
 8007bc0:	9a08      	ldr	r2, [sp, #32]
 8007bc2:	b1bb      	cbz	r3, 8007bf4 <_strtod_l+0x914>
 8007bc4:	f7ff fb68 	bl	8007298 <sulp>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bd0:	f7f8 facc 	bl	800016c <__adddf3>
 8007bd4:	4682      	mov	sl, r0
 8007bd6:	468b      	mov	fp, r1
 8007bd8:	e7de      	b.n	8007b98 <_strtod_l+0x8b8>
 8007bda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007bde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007be2:	f04f 3aff 	mov.w	sl, #4294967295
 8007be6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007bea:	e7d5      	b.n	8007b98 <_strtod_l+0x8b8>
 8007bec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bee:	ea13 0f0a 	tst.w	r3, sl
 8007bf2:	e7e1      	b.n	8007bb8 <_strtod_l+0x8d8>
 8007bf4:	f7ff fb50 	bl	8007298 <sulp>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c00:	f7f8 fab2 	bl	8000168 <__aeabi_dsub>
 8007c04:	2200      	movs	r2, #0
 8007c06:	2300      	movs	r3, #0
 8007c08:	4682      	mov	sl, r0
 8007c0a:	468b      	mov	fp, r1
 8007c0c:	f7f8 fecc 	bl	80009a8 <__aeabi_dcmpeq>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d0c1      	beq.n	8007b98 <_strtod_l+0x8b8>
 8007c14:	e615      	b.n	8007842 <_strtod_l+0x562>
 8007c16:	4641      	mov	r1, r8
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f7ff fac9 	bl	80071b0 <__ratio>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007c24:	4606      	mov	r6, r0
 8007c26:	460f      	mov	r7, r1
 8007c28:	f7f8 fed2 	bl	80009d0 <__aeabi_dcmple>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d06d      	beq.n	8007d0c <_strtod_l+0xa2c>
 8007c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d178      	bne.n	8007d28 <_strtod_l+0xa48>
 8007c36:	f1ba 0f00 	cmp.w	sl, #0
 8007c3a:	d156      	bne.n	8007cea <_strtod_l+0xa0a>
 8007c3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d158      	bne.n	8007cf8 <_strtod_l+0xa18>
 8007c46:	2200      	movs	r2, #0
 8007c48:	4630      	mov	r0, r6
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8007dc4 <_strtod_l+0xae4>)
 8007c4e:	f7f8 feb5 	bl	80009bc <__aeabi_dcmplt>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d157      	bne.n	8007d06 <_strtod_l+0xa26>
 8007c56:	4630      	mov	r0, r6
 8007c58:	4639      	mov	r1, r7
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	4b5a      	ldr	r3, [pc, #360]	@ (8007dc8 <_strtod_l+0xae8>)
 8007c5e:	f7f8 fc3b 	bl	80004d8 <__aeabi_dmul>
 8007c62:	4606      	mov	r6, r0
 8007c64:	460f      	mov	r7, r1
 8007c66:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007c6a:	9606      	str	r6, [sp, #24]
 8007c6c:	9307      	str	r3, [sp, #28]
 8007c6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c72:	4d52      	ldr	r5, [pc, #328]	@ (8007dbc <_strtod_l+0xadc>)
 8007c74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007c78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c7a:	401d      	ands	r5, r3
 8007c7c:	4b53      	ldr	r3, [pc, #332]	@ (8007dcc <_strtod_l+0xaec>)
 8007c7e:	429d      	cmp	r5, r3
 8007c80:	f040 80aa 	bne.w	8007dd8 <_strtod_l+0xaf8>
 8007c84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c86:	4650      	mov	r0, sl
 8007c88:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007c8c:	4659      	mov	r1, fp
 8007c8e:	f7ff f9cf 	bl	8007030 <__ulp>
 8007c92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c96:	f7f8 fc1f 	bl	80004d8 <__aeabi_dmul>
 8007c9a:	4652      	mov	r2, sl
 8007c9c:	465b      	mov	r3, fp
 8007c9e:	f7f8 fa65 	bl	800016c <__adddf3>
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4945      	ldr	r1, [pc, #276]	@ (8007dbc <_strtod_l+0xadc>)
 8007ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8007dd0 <_strtod_l+0xaf0>)
 8007ca8:	4019      	ands	r1, r3
 8007caa:	4291      	cmp	r1, r2
 8007cac:	4682      	mov	sl, r0
 8007cae:	d942      	bls.n	8007d36 <_strtod_l+0xa56>
 8007cb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007cb2:	4b43      	ldr	r3, [pc, #268]	@ (8007dc0 <_strtod_l+0xae0>)
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d103      	bne.n	8007cc0 <_strtod_l+0x9e0>
 8007cb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007cba:	3301      	adds	r3, #1
 8007cbc:	f43f ad2b 	beq.w	8007716 <_strtod_l+0x436>
 8007cc0:	f04f 3aff 	mov.w	sl, #4294967295
 8007cc4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007dc0 <_strtod_l+0xae0>
 8007cc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cca:	9805      	ldr	r0, [sp, #20]
 8007ccc:	f7fe fe7e 	bl	80069cc <_Bfree>
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	9805      	ldr	r0, [sp, #20]
 8007cd4:	f7fe fe7a 	bl	80069cc <_Bfree>
 8007cd8:	4641      	mov	r1, r8
 8007cda:	9805      	ldr	r0, [sp, #20]
 8007cdc:	f7fe fe76 	bl	80069cc <_Bfree>
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	9805      	ldr	r0, [sp, #20]
 8007ce4:	f7fe fe72 	bl	80069cc <_Bfree>
 8007ce8:	e618      	b.n	800791c <_strtod_l+0x63c>
 8007cea:	f1ba 0f01 	cmp.w	sl, #1
 8007cee:	d103      	bne.n	8007cf8 <_strtod_l+0xa18>
 8007cf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f43f ada5 	beq.w	8007842 <_strtod_l+0x562>
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	4b36      	ldr	r3, [pc, #216]	@ (8007dd4 <_strtod_l+0xaf4>)
 8007cfc:	2600      	movs	r6, #0
 8007cfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d02:	4f30      	ldr	r7, [pc, #192]	@ (8007dc4 <_strtod_l+0xae4>)
 8007d04:	e7b3      	b.n	8007c6e <_strtod_l+0x98e>
 8007d06:	2600      	movs	r6, #0
 8007d08:	4f2f      	ldr	r7, [pc, #188]	@ (8007dc8 <_strtod_l+0xae8>)
 8007d0a:	e7ac      	b.n	8007c66 <_strtod_l+0x986>
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	4639      	mov	r1, r7
 8007d10:	4b2d      	ldr	r3, [pc, #180]	@ (8007dc8 <_strtod_l+0xae8>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	f7f8 fbe0 	bl	80004d8 <__aeabi_dmul>
 8007d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	460f      	mov	r7, r1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0a1      	beq.n	8007c66 <_strtod_l+0x986>
 8007d22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007d26:	e7a2      	b.n	8007c6e <_strtod_l+0x98e>
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4b26      	ldr	r3, [pc, #152]	@ (8007dc4 <_strtod_l+0xae4>)
 8007d2c:	4616      	mov	r6, r2
 8007d2e:	461f      	mov	r7, r3
 8007d30:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d34:	e79b      	b.n	8007c6e <_strtod_l+0x98e>
 8007d36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007d3a:	9b08      	ldr	r3, [sp, #32]
 8007d3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1c1      	bne.n	8007cc8 <_strtod_l+0x9e8>
 8007d44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d48:	0d1b      	lsrs	r3, r3, #20
 8007d4a:	051b      	lsls	r3, r3, #20
 8007d4c:	429d      	cmp	r5, r3
 8007d4e:	d1bb      	bne.n	8007cc8 <_strtod_l+0x9e8>
 8007d50:	4630      	mov	r0, r6
 8007d52:	4639      	mov	r1, r7
 8007d54:	f7f9 fa12 	bl	800117c <__aeabi_d2lz>
 8007d58:	f7f8 fb90 	bl	800047c <__aeabi_l2d>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4630      	mov	r0, r6
 8007d62:	4639      	mov	r1, r7
 8007d64:	f7f8 fa00 	bl	8000168 <__aeabi_dsub>
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007d70:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d76:	ea46 060a 	orr.w	r6, r6, sl
 8007d7a:	431e      	orrs	r6, r3
 8007d7c:	d069      	beq.n	8007e52 <_strtod_l+0xb72>
 8007d7e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007da8 <_strtod_l+0xac8>)
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 fe1a 	bl	80009bc <__aeabi_dcmplt>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	f47f accf 	bne.w	800772c <_strtod_l+0x44c>
 8007d8e:	a308      	add	r3, pc, #32	@ (adr r3, 8007db0 <_strtod_l+0xad0>)
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d98:	f7f8 fe2e 	bl	80009f8 <__aeabi_dcmpgt>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d093      	beq.n	8007cc8 <_strtod_l+0x9e8>
 8007da0:	e4c4      	b.n	800772c <_strtod_l+0x44c>
 8007da2:	bf00      	nop
 8007da4:	f3af 8000 	nop.w
 8007da8:	94a03595 	.word	0x94a03595
 8007dac:	3fdfffff 	.word	0x3fdfffff
 8007db0:	35afe535 	.word	0x35afe535
 8007db4:	3fe00000 	.word	0x3fe00000
 8007db8:	000fffff 	.word	0x000fffff
 8007dbc:	7ff00000 	.word	0x7ff00000
 8007dc0:	7fefffff 	.word	0x7fefffff
 8007dc4:	3ff00000 	.word	0x3ff00000
 8007dc8:	3fe00000 	.word	0x3fe00000
 8007dcc:	7fe00000 	.word	0x7fe00000
 8007dd0:	7c9fffff 	.word	0x7c9fffff
 8007dd4:	bff00000 	.word	0xbff00000
 8007dd8:	9b08      	ldr	r3, [sp, #32]
 8007dda:	b323      	cbz	r3, 8007e26 <_strtod_l+0xb46>
 8007ddc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007de0:	d821      	bhi.n	8007e26 <_strtod_l+0xb46>
 8007de2:	a327      	add	r3, pc, #156	@ (adr r3, 8007e80 <_strtod_l+0xba0>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 fdf0 	bl	80009d0 <__aeabi_dcmple>
 8007df0:	b1a0      	cbz	r0, 8007e1c <_strtod_l+0xb3c>
 8007df2:	4639      	mov	r1, r7
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7f8 fe47 	bl	8000a88 <__aeabi_d2uiz>
 8007dfa:	2801      	cmp	r0, #1
 8007dfc:	bf38      	it	cc
 8007dfe:	2001      	movcc	r0, #1
 8007e00:	f7f8 faf0 	bl	80003e4 <__aeabi_ui2d>
 8007e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	b9fb      	cbnz	r3, 8007e4c <_strtod_l+0xb6c>
 8007e0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e10:	9014      	str	r0, [sp, #80]	@ 0x50
 8007e12:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007e18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e1e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007e22:	1b5b      	subs	r3, r3, r5
 8007e24:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e2a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007e2e:	f7ff f8ff 	bl	8007030 <__ulp>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4650      	mov	r0, sl
 8007e38:	4659      	mov	r1, fp
 8007e3a:	f7f8 fb4d 	bl	80004d8 <__aeabi_dmul>
 8007e3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007e42:	f7f8 f993 	bl	800016c <__adddf3>
 8007e46:	4682      	mov	sl, r0
 8007e48:	468b      	mov	fp, r1
 8007e4a:	e776      	b.n	8007d3a <_strtod_l+0xa5a>
 8007e4c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007e50:	e7e0      	b.n	8007e14 <_strtod_l+0xb34>
 8007e52:	a30d      	add	r3, pc, #52	@ (adr r3, 8007e88 <_strtod_l+0xba8>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 fdb0 	bl	80009bc <__aeabi_dcmplt>
 8007e5c:	e79e      	b.n	8007d9c <_strtod_l+0xabc>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e64:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	f7ff ba77 	b.w	800735a <_strtod_l+0x7a>
 8007e6c:	2a65      	cmp	r2, #101	@ 0x65
 8007e6e:	f43f ab6e 	beq.w	800754e <_strtod_l+0x26e>
 8007e72:	2a45      	cmp	r2, #69	@ 0x45
 8007e74:	f43f ab6b 	beq.w	800754e <_strtod_l+0x26e>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f7ff bba6 	b.w	80075ca <_strtod_l+0x2ea>
 8007e7e:	bf00      	nop
 8007e80:	ffc00000 	.word	0xffc00000
 8007e84:	41dfffff 	.word	0x41dfffff
 8007e88:	94a03595 	.word	0x94a03595
 8007e8c:	3fcfffff 	.word	0x3fcfffff

08007e90 <_strtod_r>:
 8007e90:	4b01      	ldr	r3, [pc, #4]	@ (8007e98 <_strtod_r+0x8>)
 8007e92:	f7ff ba25 	b.w	80072e0 <_strtod_l>
 8007e96:	bf00      	nop
 8007e98:	2000008c 	.word	0x2000008c

08007e9c <_strtol_l.constprop.0>:
 8007e9c:	2b24      	cmp	r3, #36	@ 0x24
 8007e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea2:	4686      	mov	lr, r0
 8007ea4:	4690      	mov	r8, r2
 8007ea6:	d801      	bhi.n	8007eac <_strtol_l.constprop.0+0x10>
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d106      	bne.n	8007eba <_strtol_l.constprop.0+0x1e>
 8007eac:	f7fd fdb0 	bl	8005a10 <__errno>
 8007eb0:	2316      	movs	r3, #22
 8007eb2:	6003      	str	r3, [r0, #0]
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eba:	460d      	mov	r5, r1
 8007ebc:	4833      	ldr	r0, [pc, #204]	@ (8007f8c <_strtol_l.constprop.0+0xf0>)
 8007ebe:	462a      	mov	r2, r5
 8007ec0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ec4:	5d06      	ldrb	r6, [r0, r4]
 8007ec6:	f016 0608 	ands.w	r6, r6, #8
 8007eca:	d1f8      	bne.n	8007ebe <_strtol_l.constprop.0+0x22>
 8007ecc:	2c2d      	cmp	r4, #45	@ 0x2d
 8007ece:	d12d      	bne.n	8007f2c <_strtol_l.constprop.0+0x90>
 8007ed0:	2601      	movs	r6, #1
 8007ed2:	782c      	ldrb	r4, [r5, #0]
 8007ed4:	1c95      	adds	r5, r2, #2
 8007ed6:	f033 0210 	bics.w	r2, r3, #16
 8007eda:	d109      	bne.n	8007ef0 <_strtol_l.constprop.0+0x54>
 8007edc:	2c30      	cmp	r4, #48	@ 0x30
 8007ede:	d12a      	bne.n	8007f36 <_strtol_l.constprop.0+0x9a>
 8007ee0:	782a      	ldrb	r2, [r5, #0]
 8007ee2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ee6:	2a58      	cmp	r2, #88	@ 0x58
 8007ee8:	d125      	bne.n	8007f36 <_strtol_l.constprop.0+0x9a>
 8007eea:	2310      	movs	r3, #16
 8007eec:	786c      	ldrb	r4, [r5, #1]
 8007eee:	3502      	adds	r5, #2
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007ef6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007efa:	fbbc f9f3 	udiv	r9, ip, r3
 8007efe:	4610      	mov	r0, r2
 8007f00:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f08:	2f09      	cmp	r7, #9
 8007f0a:	d81b      	bhi.n	8007f44 <_strtol_l.constprop.0+0xa8>
 8007f0c:	463c      	mov	r4, r7
 8007f0e:	42a3      	cmp	r3, r4
 8007f10:	dd27      	ble.n	8007f62 <_strtol_l.constprop.0+0xc6>
 8007f12:	1c57      	adds	r7, r2, #1
 8007f14:	d007      	beq.n	8007f26 <_strtol_l.constprop.0+0x8a>
 8007f16:	4581      	cmp	r9, r0
 8007f18:	d320      	bcc.n	8007f5c <_strtol_l.constprop.0+0xc0>
 8007f1a:	d101      	bne.n	8007f20 <_strtol_l.constprop.0+0x84>
 8007f1c:	45a2      	cmp	sl, r4
 8007f1e:	db1d      	blt.n	8007f5c <_strtol_l.constprop.0+0xc0>
 8007f20:	2201      	movs	r2, #1
 8007f22:	fb00 4003 	mla	r0, r0, r3, r4
 8007f26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f2a:	e7eb      	b.n	8007f04 <_strtol_l.constprop.0+0x68>
 8007f2c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f2e:	bf04      	itt	eq
 8007f30:	782c      	ldrbeq	r4, [r5, #0]
 8007f32:	1c95      	addeq	r5, r2, #2
 8007f34:	e7cf      	b.n	8007ed6 <_strtol_l.constprop.0+0x3a>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1da      	bne.n	8007ef0 <_strtol_l.constprop.0+0x54>
 8007f3a:	2c30      	cmp	r4, #48	@ 0x30
 8007f3c:	bf0c      	ite	eq
 8007f3e:	2308      	moveq	r3, #8
 8007f40:	230a      	movne	r3, #10
 8007f42:	e7d5      	b.n	8007ef0 <_strtol_l.constprop.0+0x54>
 8007f44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007f48:	2f19      	cmp	r7, #25
 8007f4a:	d801      	bhi.n	8007f50 <_strtol_l.constprop.0+0xb4>
 8007f4c:	3c37      	subs	r4, #55	@ 0x37
 8007f4e:	e7de      	b.n	8007f0e <_strtol_l.constprop.0+0x72>
 8007f50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007f54:	2f19      	cmp	r7, #25
 8007f56:	d804      	bhi.n	8007f62 <_strtol_l.constprop.0+0xc6>
 8007f58:	3c57      	subs	r4, #87	@ 0x57
 8007f5a:	e7d8      	b.n	8007f0e <_strtol_l.constprop.0+0x72>
 8007f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f60:	e7e1      	b.n	8007f26 <_strtol_l.constprop.0+0x8a>
 8007f62:	1c53      	adds	r3, r2, #1
 8007f64:	d108      	bne.n	8007f78 <_strtol_l.constprop.0+0xdc>
 8007f66:	2322      	movs	r3, #34	@ 0x22
 8007f68:	4660      	mov	r0, ip
 8007f6a:	f8ce 3000 	str.w	r3, [lr]
 8007f6e:	f1b8 0f00 	cmp.w	r8, #0
 8007f72:	d0a0      	beq.n	8007eb6 <_strtol_l.constprop.0+0x1a>
 8007f74:	1e69      	subs	r1, r5, #1
 8007f76:	e006      	b.n	8007f86 <_strtol_l.constprop.0+0xea>
 8007f78:	b106      	cbz	r6, 8007f7c <_strtol_l.constprop.0+0xe0>
 8007f7a:	4240      	negs	r0, r0
 8007f7c:	f1b8 0f00 	cmp.w	r8, #0
 8007f80:	d099      	beq.n	8007eb6 <_strtol_l.constprop.0+0x1a>
 8007f82:	2a00      	cmp	r2, #0
 8007f84:	d1f6      	bne.n	8007f74 <_strtol_l.constprop.0+0xd8>
 8007f86:	f8c8 1000 	str.w	r1, [r8]
 8007f8a:	e794      	b.n	8007eb6 <_strtol_l.constprop.0+0x1a>
 8007f8c:	0800b049 	.word	0x0800b049

08007f90 <_strtol_r>:
 8007f90:	f7ff bf84 	b.w	8007e9c <_strtol_l.constprop.0>

08007f94 <__ssputs_r>:
 8007f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f98:	461f      	mov	r7, r3
 8007f9a:	688e      	ldr	r6, [r1, #8]
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	42be      	cmp	r6, r7
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	4690      	mov	r8, r2
 8007fa4:	680b      	ldr	r3, [r1, #0]
 8007fa6:	d82d      	bhi.n	8008004 <__ssputs_r+0x70>
 8007fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fb0:	d026      	beq.n	8008000 <__ssputs_r+0x6c>
 8007fb2:	6965      	ldr	r5, [r4, #20]
 8007fb4:	6909      	ldr	r1, [r1, #16]
 8007fb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fba:	eba3 0901 	sub.w	r9, r3, r1
 8007fbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fc2:	1c7b      	adds	r3, r7, #1
 8007fc4:	444b      	add	r3, r9
 8007fc6:	106d      	asrs	r5, r5, #1
 8007fc8:	429d      	cmp	r5, r3
 8007fca:	bf38      	it	cc
 8007fcc:	461d      	movcc	r5, r3
 8007fce:	0553      	lsls	r3, r2, #21
 8007fd0:	d527      	bpl.n	8008022 <__ssputs_r+0x8e>
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	f7fe fc2e 	bl	8006834 <_malloc_r>
 8007fd8:	4606      	mov	r6, r0
 8007fda:	b360      	cbz	r0, 8008036 <__ssputs_r+0xa2>
 8007fdc:	464a      	mov	r2, r9
 8007fde:	6921      	ldr	r1, [r4, #16]
 8007fe0:	f7fd fd51 	bl	8005a86 <memcpy>
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fee:	81a3      	strh	r3, [r4, #12]
 8007ff0:	6126      	str	r6, [r4, #16]
 8007ff2:	444e      	add	r6, r9
 8007ff4:	6026      	str	r6, [r4, #0]
 8007ff6:	463e      	mov	r6, r7
 8007ff8:	6165      	str	r5, [r4, #20]
 8007ffa:	eba5 0509 	sub.w	r5, r5, r9
 8007ffe:	60a5      	str	r5, [r4, #8]
 8008000:	42be      	cmp	r6, r7
 8008002:	d900      	bls.n	8008006 <__ssputs_r+0x72>
 8008004:	463e      	mov	r6, r7
 8008006:	4632      	mov	r2, r6
 8008008:	4641      	mov	r1, r8
 800800a:	6820      	ldr	r0, [r4, #0]
 800800c:	f000 fb63 	bl	80086d6 <memmove>
 8008010:	2000      	movs	r0, #0
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	1b9b      	subs	r3, r3, r6
 8008016:	60a3      	str	r3, [r4, #8]
 8008018:	6823      	ldr	r3, [r4, #0]
 800801a:	4433      	add	r3, r6
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008022:	462a      	mov	r2, r5
 8008024:	f000 ff39 	bl	8008e9a <_realloc_r>
 8008028:	4606      	mov	r6, r0
 800802a:	2800      	cmp	r0, #0
 800802c:	d1e0      	bne.n	8007ff0 <__ssputs_r+0x5c>
 800802e:	4650      	mov	r0, sl
 8008030:	6921      	ldr	r1, [r4, #16]
 8008032:	f7fe fb8d 	bl	8006750 <_free_r>
 8008036:	230c      	movs	r3, #12
 8008038:	f8ca 3000 	str.w	r3, [sl]
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	f04f 30ff 	mov.w	r0, #4294967295
 8008042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	e7e9      	b.n	800801e <__ssputs_r+0x8a>
	...

0800804c <_svfiprintf_r>:
 800804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008050:	4698      	mov	r8, r3
 8008052:	898b      	ldrh	r3, [r1, #12]
 8008054:	4607      	mov	r7, r0
 8008056:	061b      	lsls	r3, r3, #24
 8008058:	460d      	mov	r5, r1
 800805a:	4614      	mov	r4, r2
 800805c:	b09d      	sub	sp, #116	@ 0x74
 800805e:	d510      	bpl.n	8008082 <_svfiprintf_r+0x36>
 8008060:	690b      	ldr	r3, [r1, #16]
 8008062:	b973      	cbnz	r3, 8008082 <_svfiprintf_r+0x36>
 8008064:	2140      	movs	r1, #64	@ 0x40
 8008066:	f7fe fbe5 	bl	8006834 <_malloc_r>
 800806a:	6028      	str	r0, [r5, #0]
 800806c:	6128      	str	r0, [r5, #16]
 800806e:	b930      	cbnz	r0, 800807e <_svfiprintf_r+0x32>
 8008070:	230c      	movs	r3, #12
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	b01d      	add	sp, #116	@ 0x74
 800807a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807e:	2340      	movs	r3, #64	@ 0x40
 8008080:	616b      	str	r3, [r5, #20]
 8008082:	2300      	movs	r3, #0
 8008084:	9309      	str	r3, [sp, #36]	@ 0x24
 8008086:	2320      	movs	r3, #32
 8008088:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800808c:	2330      	movs	r3, #48	@ 0x30
 800808e:	f04f 0901 	mov.w	r9, #1
 8008092:	f8cd 800c 	str.w	r8, [sp, #12]
 8008096:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008230 <_svfiprintf_r+0x1e4>
 800809a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800809e:	4623      	mov	r3, r4
 80080a0:	469a      	mov	sl, r3
 80080a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080a6:	b10a      	cbz	r2, 80080ac <_svfiprintf_r+0x60>
 80080a8:	2a25      	cmp	r2, #37	@ 0x25
 80080aa:	d1f9      	bne.n	80080a0 <_svfiprintf_r+0x54>
 80080ac:	ebba 0b04 	subs.w	fp, sl, r4
 80080b0:	d00b      	beq.n	80080ca <_svfiprintf_r+0x7e>
 80080b2:	465b      	mov	r3, fp
 80080b4:	4622      	mov	r2, r4
 80080b6:	4629      	mov	r1, r5
 80080b8:	4638      	mov	r0, r7
 80080ba:	f7ff ff6b 	bl	8007f94 <__ssputs_r>
 80080be:	3001      	adds	r0, #1
 80080c0:	f000 80a7 	beq.w	8008212 <_svfiprintf_r+0x1c6>
 80080c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080c6:	445a      	add	r2, fp
 80080c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80080ca:	f89a 3000 	ldrb.w	r3, [sl]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 809f 	beq.w	8008212 <_svfiprintf_r+0x1c6>
 80080d4:	2300      	movs	r3, #0
 80080d6:	f04f 32ff 	mov.w	r2, #4294967295
 80080da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080de:	f10a 0a01 	add.w	sl, sl, #1
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	9307      	str	r3, [sp, #28]
 80080e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80080ec:	4654      	mov	r4, sl
 80080ee:	2205      	movs	r2, #5
 80080f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f4:	484e      	ldr	r0, [pc, #312]	@ (8008230 <_svfiprintf_r+0x1e4>)
 80080f6:	f7fd fcb8 	bl	8005a6a <memchr>
 80080fa:	9a04      	ldr	r2, [sp, #16]
 80080fc:	b9d8      	cbnz	r0, 8008136 <_svfiprintf_r+0xea>
 80080fe:	06d0      	lsls	r0, r2, #27
 8008100:	bf44      	itt	mi
 8008102:	2320      	movmi	r3, #32
 8008104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008108:	0711      	lsls	r1, r2, #28
 800810a:	bf44      	itt	mi
 800810c:	232b      	movmi	r3, #43	@ 0x2b
 800810e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008112:	f89a 3000 	ldrb.w	r3, [sl]
 8008116:	2b2a      	cmp	r3, #42	@ 0x2a
 8008118:	d015      	beq.n	8008146 <_svfiprintf_r+0xfa>
 800811a:	4654      	mov	r4, sl
 800811c:	2000      	movs	r0, #0
 800811e:	f04f 0c0a 	mov.w	ip, #10
 8008122:	9a07      	ldr	r2, [sp, #28]
 8008124:	4621      	mov	r1, r4
 8008126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800812a:	3b30      	subs	r3, #48	@ 0x30
 800812c:	2b09      	cmp	r3, #9
 800812e:	d94b      	bls.n	80081c8 <_svfiprintf_r+0x17c>
 8008130:	b1b0      	cbz	r0, 8008160 <_svfiprintf_r+0x114>
 8008132:	9207      	str	r2, [sp, #28]
 8008134:	e014      	b.n	8008160 <_svfiprintf_r+0x114>
 8008136:	eba0 0308 	sub.w	r3, r0, r8
 800813a:	fa09 f303 	lsl.w	r3, r9, r3
 800813e:	4313      	orrs	r3, r2
 8008140:	46a2      	mov	sl, r4
 8008142:	9304      	str	r3, [sp, #16]
 8008144:	e7d2      	b.n	80080ec <_svfiprintf_r+0xa0>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	1d19      	adds	r1, r3, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	9103      	str	r1, [sp, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	bfbb      	ittet	lt
 8008152:	425b      	neglt	r3, r3
 8008154:	f042 0202 	orrlt.w	r2, r2, #2
 8008158:	9307      	strge	r3, [sp, #28]
 800815a:	9307      	strlt	r3, [sp, #28]
 800815c:	bfb8      	it	lt
 800815e:	9204      	strlt	r2, [sp, #16]
 8008160:	7823      	ldrb	r3, [r4, #0]
 8008162:	2b2e      	cmp	r3, #46	@ 0x2e
 8008164:	d10a      	bne.n	800817c <_svfiprintf_r+0x130>
 8008166:	7863      	ldrb	r3, [r4, #1]
 8008168:	2b2a      	cmp	r3, #42	@ 0x2a
 800816a:	d132      	bne.n	80081d2 <_svfiprintf_r+0x186>
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	3402      	adds	r4, #2
 8008170:	1d1a      	adds	r2, r3, #4
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	9203      	str	r2, [sp, #12]
 8008176:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008234 <_svfiprintf_r+0x1e8>
 8008180:	2203      	movs	r2, #3
 8008182:	4650      	mov	r0, sl
 8008184:	7821      	ldrb	r1, [r4, #0]
 8008186:	f7fd fc70 	bl	8005a6a <memchr>
 800818a:	b138      	cbz	r0, 800819c <_svfiprintf_r+0x150>
 800818c:	2240      	movs	r2, #64	@ 0x40
 800818e:	9b04      	ldr	r3, [sp, #16]
 8008190:	eba0 000a 	sub.w	r0, r0, sl
 8008194:	4082      	lsls	r2, r0
 8008196:	4313      	orrs	r3, r2
 8008198:	3401      	adds	r4, #1
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a0:	2206      	movs	r2, #6
 80081a2:	4825      	ldr	r0, [pc, #148]	@ (8008238 <_svfiprintf_r+0x1ec>)
 80081a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081a8:	f7fd fc5f 	bl	8005a6a <memchr>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d036      	beq.n	800821e <_svfiprintf_r+0x1d2>
 80081b0:	4b22      	ldr	r3, [pc, #136]	@ (800823c <_svfiprintf_r+0x1f0>)
 80081b2:	bb1b      	cbnz	r3, 80081fc <_svfiprintf_r+0x1b0>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	3307      	adds	r3, #7
 80081b8:	f023 0307 	bic.w	r3, r3, #7
 80081bc:	3308      	adds	r3, #8
 80081be:	9303      	str	r3, [sp, #12]
 80081c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c2:	4433      	add	r3, r6
 80081c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c6:	e76a      	b.n	800809e <_svfiprintf_r+0x52>
 80081c8:	460c      	mov	r4, r1
 80081ca:	2001      	movs	r0, #1
 80081cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80081d0:	e7a8      	b.n	8008124 <_svfiprintf_r+0xd8>
 80081d2:	2300      	movs	r3, #0
 80081d4:	f04f 0c0a 	mov.w	ip, #10
 80081d8:	4619      	mov	r1, r3
 80081da:	3401      	adds	r4, #1
 80081dc:	9305      	str	r3, [sp, #20]
 80081de:	4620      	mov	r0, r4
 80081e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081e4:	3a30      	subs	r2, #48	@ 0x30
 80081e6:	2a09      	cmp	r2, #9
 80081e8:	d903      	bls.n	80081f2 <_svfiprintf_r+0x1a6>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0c6      	beq.n	800817c <_svfiprintf_r+0x130>
 80081ee:	9105      	str	r1, [sp, #20]
 80081f0:	e7c4      	b.n	800817c <_svfiprintf_r+0x130>
 80081f2:	4604      	mov	r4, r0
 80081f4:	2301      	movs	r3, #1
 80081f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80081fa:	e7f0      	b.n	80081de <_svfiprintf_r+0x192>
 80081fc:	ab03      	add	r3, sp, #12
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	462a      	mov	r2, r5
 8008202:	4638      	mov	r0, r7
 8008204:	4b0e      	ldr	r3, [pc, #56]	@ (8008240 <_svfiprintf_r+0x1f4>)
 8008206:	a904      	add	r1, sp, #16
 8008208:	f7fc fbb8 	bl	800497c <_printf_float>
 800820c:	1c42      	adds	r2, r0, #1
 800820e:	4606      	mov	r6, r0
 8008210:	d1d6      	bne.n	80081c0 <_svfiprintf_r+0x174>
 8008212:	89ab      	ldrh	r3, [r5, #12]
 8008214:	065b      	lsls	r3, r3, #25
 8008216:	f53f af2d 	bmi.w	8008074 <_svfiprintf_r+0x28>
 800821a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800821c:	e72c      	b.n	8008078 <_svfiprintf_r+0x2c>
 800821e:	ab03      	add	r3, sp, #12
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	462a      	mov	r2, r5
 8008224:	4638      	mov	r0, r7
 8008226:	4b06      	ldr	r3, [pc, #24]	@ (8008240 <_svfiprintf_r+0x1f4>)
 8008228:	a904      	add	r1, sp, #16
 800822a:	f7fc fe45 	bl	8004eb8 <_printf_i>
 800822e:	e7ed      	b.n	800820c <_svfiprintf_r+0x1c0>
 8008230:	0800b149 	.word	0x0800b149
 8008234:	0800b14f 	.word	0x0800b14f
 8008238:	0800b153 	.word	0x0800b153
 800823c:	0800497d 	.word	0x0800497d
 8008240:	08007f95 	.word	0x08007f95

08008244 <__sfputc_r>:
 8008244:	6893      	ldr	r3, [r2, #8]
 8008246:	b410      	push	{r4}
 8008248:	3b01      	subs	r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	6093      	str	r3, [r2, #8]
 800824e:	da07      	bge.n	8008260 <__sfputc_r+0x1c>
 8008250:	6994      	ldr	r4, [r2, #24]
 8008252:	42a3      	cmp	r3, r4
 8008254:	db01      	blt.n	800825a <__sfputc_r+0x16>
 8008256:	290a      	cmp	r1, #10
 8008258:	d102      	bne.n	8008260 <__sfputc_r+0x1c>
 800825a:	bc10      	pop	{r4}
 800825c:	f7fd baf1 	b.w	8005842 <__swbuf_r>
 8008260:	6813      	ldr	r3, [r2, #0]
 8008262:	1c58      	adds	r0, r3, #1
 8008264:	6010      	str	r0, [r2, #0]
 8008266:	7019      	strb	r1, [r3, #0]
 8008268:	4608      	mov	r0, r1
 800826a:	bc10      	pop	{r4}
 800826c:	4770      	bx	lr

0800826e <__sfputs_r>:
 800826e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008270:	4606      	mov	r6, r0
 8008272:	460f      	mov	r7, r1
 8008274:	4614      	mov	r4, r2
 8008276:	18d5      	adds	r5, r2, r3
 8008278:	42ac      	cmp	r4, r5
 800827a:	d101      	bne.n	8008280 <__sfputs_r+0x12>
 800827c:	2000      	movs	r0, #0
 800827e:	e007      	b.n	8008290 <__sfputs_r+0x22>
 8008280:	463a      	mov	r2, r7
 8008282:	4630      	mov	r0, r6
 8008284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008288:	f7ff ffdc 	bl	8008244 <__sfputc_r>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d1f3      	bne.n	8008278 <__sfputs_r+0xa>
 8008290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008294 <_vfiprintf_r>:
 8008294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008298:	460d      	mov	r5, r1
 800829a:	4614      	mov	r4, r2
 800829c:	4698      	mov	r8, r3
 800829e:	4606      	mov	r6, r0
 80082a0:	b09d      	sub	sp, #116	@ 0x74
 80082a2:	b118      	cbz	r0, 80082ac <_vfiprintf_r+0x18>
 80082a4:	6a03      	ldr	r3, [r0, #32]
 80082a6:	b90b      	cbnz	r3, 80082ac <_vfiprintf_r+0x18>
 80082a8:	f7fd f9c2 	bl	8005630 <__sinit>
 80082ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082ae:	07d9      	lsls	r1, r3, #31
 80082b0:	d405      	bmi.n	80082be <_vfiprintf_r+0x2a>
 80082b2:	89ab      	ldrh	r3, [r5, #12]
 80082b4:	059a      	lsls	r2, r3, #22
 80082b6:	d402      	bmi.n	80082be <_vfiprintf_r+0x2a>
 80082b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082ba:	f7fd fbd4 	bl	8005a66 <__retarget_lock_acquire_recursive>
 80082be:	89ab      	ldrh	r3, [r5, #12]
 80082c0:	071b      	lsls	r3, r3, #28
 80082c2:	d501      	bpl.n	80082c8 <_vfiprintf_r+0x34>
 80082c4:	692b      	ldr	r3, [r5, #16]
 80082c6:	b99b      	cbnz	r3, 80082f0 <_vfiprintf_r+0x5c>
 80082c8:	4629      	mov	r1, r5
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7fd faf8 	bl	80058c0 <__swsetup_r>
 80082d0:	b170      	cbz	r0, 80082f0 <_vfiprintf_r+0x5c>
 80082d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082d4:	07dc      	lsls	r4, r3, #31
 80082d6:	d504      	bpl.n	80082e2 <_vfiprintf_r+0x4e>
 80082d8:	f04f 30ff 	mov.w	r0, #4294967295
 80082dc:	b01d      	add	sp, #116	@ 0x74
 80082de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e2:	89ab      	ldrh	r3, [r5, #12]
 80082e4:	0598      	lsls	r0, r3, #22
 80082e6:	d4f7      	bmi.n	80082d8 <_vfiprintf_r+0x44>
 80082e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082ea:	f7fd fbbd 	bl	8005a68 <__retarget_lock_release_recursive>
 80082ee:	e7f3      	b.n	80082d8 <_vfiprintf_r+0x44>
 80082f0:	2300      	movs	r3, #0
 80082f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80082f4:	2320      	movs	r3, #32
 80082f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082fa:	2330      	movs	r3, #48	@ 0x30
 80082fc:	f04f 0901 	mov.w	r9, #1
 8008300:	f8cd 800c 	str.w	r8, [sp, #12]
 8008304:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80084b0 <_vfiprintf_r+0x21c>
 8008308:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800830c:	4623      	mov	r3, r4
 800830e:	469a      	mov	sl, r3
 8008310:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008314:	b10a      	cbz	r2, 800831a <_vfiprintf_r+0x86>
 8008316:	2a25      	cmp	r2, #37	@ 0x25
 8008318:	d1f9      	bne.n	800830e <_vfiprintf_r+0x7a>
 800831a:	ebba 0b04 	subs.w	fp, sl, r4
 800831e:	d00b      	beq.n	8008338 <_vfiprintf_r+0xa4>
 8008320:	465b      	mov	r3, fp
 8008322:	4622      	mov	r2, r4
 8008324:	4629      	mov	r1, r5
 8008326:	4630      	mov	r0, r6
 8008328:	f7ff ffa1 	bl	800826e <__sfputs_r>
 800832c:	3001      	adds	r0, #1
 800832e:	f000 80a7 	beq.w	8008480 <_vfiprintf_r+0x1ec>
 8008332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008334:	445a      	add	r2, fp
 8008336:	9209      	str	r2, [sp, #36]	@ 0x24
 8008338:	f89a 3000 	ldrb.w	r3, [sl]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 809f 	beq.w	8008480 <_vfiprintf_r+0x1ec>
 8008342:	2300      	movs	r3, #0
 8008344:	f04f 32ff 	mov.w	r2, #4294967295
 8008348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800834c:	f10a 0a01 	add.w	sl, sl, #1
 8008350:	9304      	str	r3, [sp, #16]
 8008352:	9307      	str	r3, [sp, #28]
 8008354:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008358:	931a      	str	r3, [sp, #104]	@ 0x68
 800835a:	4654      	mov	r4, sl
 800835c:	2205      	movs	r2, #5
 800835e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008362:	4853      	ldr	r0, [pc, #332]	@ (80084b0 <_vfiprintf_r+0x21c>)
 8008364:	f7fd fb81 	bl	8005a6a <memchr>
 8008368:	9a04      	ldr	r2, [sp, #16]
 800836a:	b9d8      	cbnz	r0, 80083a4 <_vfiprintf_r+0x110>
 800836c:	06d1      	lsls	r1, r2, #27
 800836e:	bf44      	itt	mi
 8008370:	2320      	movmi	r3, #32
 8008372:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008376:	0713      	lsls	r3, r2, #28
 8008378:	bf44      	itt	mi
 800837a:	232b      	movmi	r3, #43	@ 0x2b
 800837c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008380:	f89a 3000 	ldrb.w	r3, [sl]
 8008384:	2b2a      	cmp	r3, #42	@ 0x2a
 8008386:	d015      	beq.n	80083b4 <_vfiprintf_r+0x120>
 8008388:	4654      	mov	r4, sl
 800838a:	2000      	movs	r0, #0
 800838c:	f04f 0c0a 	mov.w	ip, #10
 8008390:	9a07      	ldr	r2, [sp, #28]
 8008392:	4621      	mov	r1, r4
 8008394:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008398:	3b30      	subs	r3, #48	@ 0x30
 800839a:	2b09      	cmp	r3, #9
 800839c:	d94b      	bls.n	8008436 <_vfiprintf_r+0x1a2>
 800839e:	b1b0      	cbz	r0, 80083ce <_vfiprintf_r+0x13a>
 80083a0:	9207      	str	r2, [sp, #28]
 80083a2:	e014      	b.n	80083ce <_vfiprintf_r+0x13a>
 80083a4:	eba0 0308 	sub.w	r3, r0, r8
 80083a8:	fa09 f303 	lsl.w	r3, r9, r3
 80083ac:	4313      	orrs	r3, r2
 80083ae:	46a2      	mov	sl, r4
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	e7d2      	b.n	800835a <_vfiprintf_r+0xc6>
 80083b4:	9b03      	ldr	r3, [sp, #12]
 80083b6:	1d19      	adds	r1, r3, #4
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	9103      	str	r1, [sp, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	bfbb      	ittet	lt
 80083c0:	425b      	neglt	r3, r3
 80083c2:	f042 0202 	orrlt.w	r2, r2, #2
 80083c6:	9307      	strge	r3, [sp, #28]
 80083c8:	9307      	strlt	r3, [sp, #28]
 80083ca:	bfb8      	it	lt
 80083cc:	9204      	strlt	r2, [sp, #16]
 80083ce:	7823      	ldrb	r3, [r4, #0]
 80083d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80083d2:	d10a      	bne.n	80083ea <_vfiprintf_r+0x156>
 80083d4:	7863      	ldrb	r3, [r4, #1]
 80083d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80083d8:	d132      	bne.n	8008440 <_vfiprintf_r+0x1ac>
 80083da:	9b03      	ldr	r3, [sp, #12]
 80083dc:	3402      	adds	r4, #2
 80083de:	1d1a      	adds	r2, r3, #4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	9203      	str	r2, [sp, #12]
 80083e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80084b4 <_vfiprintf_r+0x220>
 80083ee:	2203      	movs	r2, #3
 80083f0:	4650      	mov	r0, sl
 80083f2:	7821      	ldrb	r1, [r4, #0]
 80083f4:	f7fd fb39 	bl	8005a6a <memchr>
 80083f8:	b138      	cbz	r0, 800840a <_vfiprintf_r+0x176>
 80083fa:	2240      	movs	r2, #64	@ 0x40
 80083fc:	9b04      	ldr	r3, [sp, #16]
 80083fe:	eba0 000a 	sub.w	r0, r0, sl
 8008402:	4082      	lsls	r2, r0
 8008404:	4313      	orrs	r3, r2
 8008406:	3401      	adds	r4, #1
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800840e:	2206      	movs	r2, #6
 8008410:	4829      	ldr	r0, [pc, #164]	@ (80084b8 <_vfiprintf_r+0x224>)
 8008412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008416:	f7fd fb28 	bl	8005a6a <memchr>
 800841a:	2800      	cmp	r0, #0
 800841c:	d03f      	beq.n	800849e <_vfiprintf_r+0x20a>
 800841e:	4b27      	ldr	r3, [pc, #156]	@ (80084bc <_vfiprintf_r+0x228>)
 8008420:	bb1b      	cbnz	r3, 800846a <_vfiprintf_r+0x1d6>
 8008422:	9b03      	ldr	r3, [sp, #12]
 8008424:	3307      	adds	r3, #7
 8008426:	f023 0307 	bic.w	r3, r3, #7
 800842a:	3308      	adds	r3, #8
 800842c:	9303      	str	r3, [sp, #12]
 800842e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008430:	443b      	add	r3, r7
 8008432:	9309      	str	r3, [sp, #36]	@ 0x24
 8008434:	e76a      	b.n	800830c <_vfiprintf_r+0x78>
 8008436:	460c      	mov	r4, r1
 8008438:	2001      	movs	r0, #1
 800843a:	fb0c 3202 	mla	r2, ip, r2, r3
 800843e:	e7a8      	b.n	8008392 <_vfiprintf_r+0xfe>
 8008440:	2300      	movs	r3, #0
 8008442:	f04f 0c0a 	mov.w	ip, #10
 8008446:	4619      	mov	r1, r3
 8008448:	3401      	adds	r4, #1
 800844a:	9305      	str	r3, [sp, #20]
 800844c:	4620      	mov	r0, r4
 800844e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008452:	3a30      	subs	r2, #48	@ 0x30
 8008454:	2a09      	cmp	r2, #9
 8008456:	d903      	bls.n	8008460 <_vfiprintf_r+0x1cc>
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0c6      	beq.n	80083ea <_vfiprintf_r+0x156>
 800845c:	9105      	str	r1, [sp, #20]
 800845e:	e7c4      	b.n	80083ea <_vfiprintf_r+0x156>
 8008460:	4604      	mov	r4, r0
 8008462:	2301      	movs	r3, #1
 8008464:	fb0c 2101 	mla	r1, ip, r1, r2
 8008468:	e7f0      	b.n	800844c <_vfiprintf_r+0x1b8>
 800846a:	ab03      	add	r3, sp, #12
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	462a      	mov	r2, r5
 8008470:	4630      	mov	r0, r6
 8008472:	4b13      	ldr	r3, [pc, #76]	@ (80084c0 <_vfiprintf_r+0x22c>)
 8008474:	a904      	add	r1, sp, #16
 8008476:	f7fc fa81 	bl	800497c <_printf_float>
 800847a:	4607      	mov	r7, r0
 800847c:	1c78      	adds	r0, r7, #1
 800847e:	d1d6      	bne.n	800842e <_vfiprintf_r+0x19a>
 8008480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008482:	07d9      	lsls	r1, r3, #31
 8008484:	d405      	bmi.n	8008492 <_vfiprintf_r+0x1fe>
 8008486:	89ab      	ldrh	r3, [r5, #12]
 8008488:	059a      	lsls	r2, r3, #22
 800848a:	d402      	bmi.n	8008492 <_vfiprintf_r+0x1fe>
 800848c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800848e:	f7fd faeb 	bl	8005a68 <__retarget_lock_release_recursive>
 8008492:	89ab      	ldrh	r3, [r5, #12]
 8008494:	065b      	lsls	r3, r3, #25
 8008496:	f53f af1f 	bmi.w	80082d8 <_vfiprintf_r+0x44>
 800849a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800849c:	e71e      	b.n	80082dc <_vfiprintf_r+0x48>
 800849e:	ab03      	add	r3, sp, #12
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	462a      	mov	r2, r5
 80084a4:	4630      	mov	r0, r6
 80084a6:	4b06      	ldr	r3, [pc, #24]	@ (80084c0 <_vfiprintf_r+0x22c>)
 80084a8:	a904      	add	r1, sp, #16
 80084aa:	f7fc fd05 	bl	8004eb8 <_printf_i>
 80084ae:	e7e4      	b.n	800847a <_vfiprintf_r+0x1e6>
 80084b0:	0800b149 	.word	0x0800b149
 80084b4:	0800b14f 	.word	0x0800b14f
 80084b8:	0800b153 	.word	0x0800b153
 80084bc:	0800497d 	.word	0x0800497d
 80084c0:	0800826f 	.word	0x0800826f

080084c4 <__sflush_r>:
 80084c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	0716      	lsls	r6, r2, #28
 80084cc:	4605      	mov	r5, r0
 80084ce:	460c      	mov	r4, r1
 80084d0:	d454      	bmi.n	800857c <__sflush_r+0xb8>
 80084d2:	684b      	ldr	r3, [r1, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	dc02      	bgt.n	80084de <__sflush_r+0x1a>
 80084d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	dd48      	ble.n	8008570 <__sflush_r+0xac>
 80084de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084e0:	2e00      	cmp	r6, #0
 80084e2:	d045      	beq.n	8008570 <__sflush_r+0xac>
 80084e4:	2300      	movs	r3, #0
 80084e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084ea:	682f      	ldr	r7, [r5, #0]
 80084ec:	6a21      	ldr	r1, [r4, #32]
 80084ee:	602b      	str	r3, [r5, #0]
 80084f0:	d030      	beq.n	8008554 <__sflush_r+0x90>
 80084f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	0759      	lsls	r1, r3, #29
 80084f8:	d505      	bpl.n	8008506 <__sflush_r+0x42>
 80084fa:	6863      	ldr	r3, [r4, #4]
 80084fc:	1ad2      	subs	r2, r2, r3
 80084fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008500:	b10b      	cbz	r3, 8008506 <__sflush_r+0x42>
 8008502:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008504:	1ad2      	subs	r2, r2, r3
 8008506:	2300      	movs	r3, #0
 8008508:	4628      	mov	r0, r5
 800850a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800850c:	6a21      	ldr	r1, [r4, #32]
 800850e:	47b0      	blx	r6
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	d106      	bne.n	8008524 <__sflush_r+0x60>
 8008516:	6829      	ldr	r1, [r5, #0]
 8008518:	291d      	cmp	r1, #29
 800851a:	d82b      	bhi.n	8008574 <__sflush_r+0xb0>
 800851c:	4a28      	ldr	r2, [pc, #160]	@ (80085c0 <__sflush_r+0xfc>)
 800851e:	410a      	asrs	r2, r1
 8008520:	07d6      	lsls	r6, r2, #31
 8008522:	d427      	bmi.n	8008574 <__sflush_r+0xb0>
 8008524:	2200      	movs	r2, #0
 8008526:	6062      	str	r2, [r4, #4]
 8008528:	6922      	ldr	r2, [r4, #16]
 800852a:	04d9      	lsls	r1, r3, #19
 800852c:	6022      	str	r2, [r4, #0]
 800852e:	d504      	bpl.n	800853a <__sflush_r+0x76>
 8008530:	1c42      	adds	r2, r0, #1
 8008532:	d101      	bne.n	8008538 <__sflush_r+0x74>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	b903      	cbnz	r3, 800853a <__sflush_r+0x76>
 8008538:	6560      	str	r0, [r4, #84]	@ 0x54
 800853a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800853c:	602f      	str	r7, [r5, #0]
 800853e:	b1b9      	cbz	r1, 8008570 <__sflush_r+0xac>
 8008540:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008544:	4299      	cmp	r1, r3
 8008546:	d002      	beq.n	800854e <__sflush_r+0x8a>
 8008548:	4628      	mov	r0, r5
 800854a:	f7fe f901 	bl	8006750 <_free_r>
 800854e:	2300      	movs	r3, #0
 8008550:	6363      	str	r3, [r4, #52]	@ 0x34
 8008552:	e00d      	b.n	8008570 <__sflush_r+0xac>
 8008554:	2301      	movs	r3, #1
 8008556:	4628      	mov	r0, r5
 8008558:	47b0      	blx	r6
 800855a:	4602      	mov	r2, r0
 800855c:	1c50      	adds	r0, r2, #1
 800855e:	d1c9      	bne.n	80084f4 <__sflush_r+0x30>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0c6      	beq.n	80084f4 <__sflush_r+0x30>
 8008566:	2b1d      	cmp	r3, #29
 8008568:	d001      	beq.n	800856e <__sflush_r+0xaa>
 800856a:	2b16      	cmp	r3, #22
 800856c:	d11d      	bne.n	80085aa <__sflush_r+0xe6>
 800856e:	602f      	str	r7, [r5, #0]
 8008570:	2000      	movs	r0, #0
 8008572:	e021      	b.n	80085b8 <__sflush_r+0xf4>
 8008574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008578:	b21b      	sxth	r3, r3
 800857a:	e01a      	b.n	80085b2 <__sflush_r+0xee>
 800857c:	690f      	ldr	r7, [r1, #16]
 800857e:	2f00      	cmp	r7, #0
 8008580:	d0f6      	beq.n	8008570 <__sflush_r+0xac>
 8008582:	0793      	lsls	r3, r2, #30
 8008584:	bf18      	it	ne
 8008586:	2300      	movne	r3, #0
 8008588:	680e      	ldr	r6, [r1, #0]
 800858a:	bf08      	it	eq
 800858c:	694b      	ldreq	r3, [r1, #20]
 800858e:	1bf6      	subs	r6, r6, r7
 8008590:	600f      	str	r7, [r1, #0]
 8008592:	608b      	str	r3, [r1, #8]
 8008594:	2e00      	cmp	r6, #0
 8008596:	ddeb      	ble.n	8008570 <__sflush_r+0xac>
 8008598:	4633      	mov	r3, r6
 800859a:	463a      	mov	r2, r7
 800859c:	4628      	mov	r0, r5
 800859e:	6a21      	ldr	r1, [r4, #32]
 80085a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80085a4:	47e0      	blx	ip
 80085a6:	2800      	cmp	r0, #0
 80085a8:	dc07      	bgt.n	80085ba <__sflush_r+0xf6>
 80085aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085b2:	f04f 30ff 	mov.w	r0, #4294967295
 80085b6:	81a3      	strh	r3, [r4, #12]
 80085b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ba:	4407      	add	r7, r0
 80085bc:	1a36      	subs	r6, r6, r0
 80085be:	e7e9      	b.n	8008594 <__sflush_r+0xd0>
 80085c0:	dfbffffe 	.word	0xdfbffffe

080085c4 <_fflush_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	690b      	ldr	r3, [r1, #16]
 80085c8:	4605      	mov	r5, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	b913      	cbnz	r3, 80085d4 <_fflush_r+0x10>
 80085ce:	2500      	movs	r5, #0
 80085d0:	4628      	mov	r0, r5
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	b118      	cbz	r0, 80085de <_fflush_r+0x1a>
 80085d6:	6a03      	ldr	r3, [r0, #32]
 80085d8:	b90b      	cbnz	r3, 80085de <_fflush_r+0x1a>
 80085da:	f7fd f829 	bl	8005630 <__sinit>
 80085de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0f3      	beq.n	80085ce <_fflush_r+0xa>
 80085e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085e8:	07d0      	lsls	r0, r2, #31
 80085ea:	d404      	bmi.n	80085f6 <_fflush_r+0x32>
 80085ec:	0599      	lsls	r1, r3, #22
 80085ee:	d402      	bmi.n	80085f6 <_fflush_r+0x32>
 80085f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085f2:	f7fd fa38 	bl	8005a66 <__retarget_lock_acquire_recursive>
 80085f6:	4628      	mov	r0, r5
 80085f8:	4621      	mov	r1, r4
 80085fa:	f7ff ff63 	bl	80084c4 <__sflush_r>
 80085fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008600:	4605      	mov	r5, r0
 8008602:	07da      	lsls	r2, r3, #31
 8008604:	d4e4      	bmi.n	80085d0 <_fflush_r+0xc>
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	059b      	lsls	r3, r3, #22
 800860a:	d4e1      	bmi.n	80085d0 <_fflush_r+0xc>
 800860c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800860e:	f7fd fa2b 	bl	8005a68 <__retarget_lock_release_recursive>
 8008612:	e7dd      	b.n	80085d0 <_fflush_r+0xc>

08008614 <__swhatbuf_r>:
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	460c      	mov	r4, r1
 8008618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800861c:	4615      	mov	r5, r2
 800861e:	2900      	cmp	r1, #0
 8008620:	461e      	mov	r6, r3
 8008622:	b096      	sub	sp, #88	@ 0x58
 8008624:	da0c      	bge.n	8008640 <__swhatbuf_r+0x2c>
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	2100      	movs	r1, #0
 800862a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800862e:	bf14      	ite	ne
 8008630:	2340      	movne	r3, #64	@ 0x40
 8008632:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008636:	2000      	movs	r0, #0
 8008638:	6031      	str	r1, [r6, #0]
 800863a:	602b      	str	r3, [r5, #0]
 800863c:	b016      	add	sp, #88	@ 0x58
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	466a      	mov	r2, sp
 8008642:	f000 f875 	bl	8008730 <_fstat_r>
 8008646:	2800      	cmp	r0, #0
 8008648:	dbed      	blt.n	8008626 <__swhatbuf_r+0x12>
 800864a:	9901      	ldr	r1, [sp, #4]
 800864c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008650:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008654:	4259      	negs	r1, r3
 8008656:	4159      	adcs	r1, r3
 8008658:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800865c:	e7eb      	b.n	8008636 <__swhatbuf_r+0x22>

0800865e <__smakebuf_r>:
 800865e:	898b      	ldrh	r3, [r1, #12]
 8008660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008662:	079d      	lsls	r5, r3, #30
 8008664:	4606      	mov	r6, r0
 8008666:	460c      	mov	r4, r1
 8008668:	d507      	bpl.n	800867a <__smakebuf_r+0x1c>
 800866a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	6123      	str	r3, [r4, #16]
 8008672:	2301      	movs	r3, #1
 8008674:	6163      	str	r3, [r4, #20]
 8008676:	b003      	add	sp, #12
 8008678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800867a:	466a      	mov	r2, sp
 800867c:	ab01      	add	r3, sp, #4
 800867e:	f7ff ffc9 	bl	8008614 <__swhatbuf_r>
 8008682:	9f00      	ldr	r7, [sp, #0]
 8008684:	4605      	mov	r5, r0
 8008686:	4639      	mov	r1, r7
 8008688:	4630      	mov	r0, r6
 800868a:	f7fe f8d3 	bl	8006834 <_malloc_r>
 800868e:	b948      	cbnz	r0, 80086a4 <__smakebuf_r+0x46>
 8008690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008694:	059a      	lsls	r2, r3, #22
 8008696:	d4ee      	bmi.n	8008676 <__smakebuf_r+0x18>
 8008698:	f023 0303 	bic.w	r3, r3, #3
 800869c:	f043 0302 	orr.w	r3, r3, #2
 80086a0:	81a3      	strh	r3, [r4, #12]
 80086a2:	e7e2      	b.n	800866a <__smakebuf_r+0xc>
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80086aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ae:	81a3      	strh	r3, [r4, #12]
 80086b0:	9b01      	ldr	r3, [sp, #4]
 80086b2:	6020      	str	r0, [r4, #0]
 80086b4:	b15b      	cbz	r3, 80086ce <__smakebuf_r+0x70>
 80086b6:	4630      	mov	r0, r6
 80086b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086bc:	f000 f84a 	bl	8008754 <_isatty_r>
 80086c0:	b128      	cbz	r0, 80086ce <__smakebuf_r+0x70>
 80086c2:	89a3      	ldrh	r3, [r4, #12]
 80086c4:	f023 0303 	bic.w	r3, r3, #3
 80086c8:	f043 0301 	orr.w	r3, r3, #1
 80086cc:	81a3      	strh	r3, [r4, #12]
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	431d      	orrs	r5, r3
 80086d2:	81a5      	strh	r5, [r4, #12]
 80086d4:	e7cf      	b.n	8008676 <__smakebuf_r+0x18>

080086d6 <memmove>:
 80086d6:	4288      	cmp	r0, r1
 80086d8:	b510      	push	{r4, lr}
 80086da:	eb01 0402 	add.w	r4, r1, r2
 80086de:	d902      	bls.n	80086e6 <memmove+0x10>
 80086e0:	4284      	cmp	r4, r0
 80086e2:	4623      	mov	r3, r4
 80086e4:	d807      	bhi.n	80086f6 <memmove+0x20>
 80086e6:	1e43      	subs	r3, r0, #1
 80086e8:	42a1      	cmp	r1, r4
 80086ea:	d008      	beq.n	80086fe <memmove+0x28>
 80086ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086f4:	e7f8      	b.n	80086e8 <memmove+0x12>
 80086f6:	4601      	mov	r1, r0
 80086f8:	4402      	add	r2, r0
 80086fa:	428a      	cmp	r2, r1
 80086fc:	d100      	bne.n	8008700 <memmove+0x2a>
 80086fe:	bd10      	pop	{r4, pc}
 8008700:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008704:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008708:	e7f7      	b.n	80086fa <memmove+0x24>

0800870a <strncmp>:
 800870a:	b510      	push	{r4, lr}
 800870c:	b16a      	cbz	r2, 800872a <strncmp+0x20>
 800870e:	3901      	subs	r1, #1
 8008710:	1884      	adds	r4, r0, r2
 8008712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008716:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800871a:	429a      	cmp	r2, r3
 800871c:	d103      	bne.n	8008726 <strncmp+0x1c>
 800871e:	42a0      	cmp	r0, r4
 8008720:	d001      	beq.n	8008726 <strncmp+0x1c>
 8008722:	2a00      	cmp	r2, #0
 8008724:	d1f5      	bne.n	8008712 <strncmp+0x8>
 8008726:	1ad0      	subs	r0, r2, r3
 8008728:	bd10      	pop	{r4, pc}
 800872a:	4610      	mov	r0, r2
 800872c:	e7fc      	b.n	8008728 <strncmp+0x1e>
	...

08008730 <_fstat_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	2300      	movs	r3, #0
 8008734:	4d06      	ldr	r5, [pc, #24]	@ (8008750 <_fstat_r+0x20>)
 8008736:	4604      	mov	r4, r0
 8008738:	4608      	mov	r0, r1
 800873a:	4611      	mov	r1, r2
 800873c:	602b      	str	r3, [r5, #0]
 800873e:	f7f9 f8a1 	bl	8001884 <_fstat>
 8008742:	1c43      	adds	r3, r0, #1
 8008744:	d102      	bne.n	800874c <_fstat_r+0x1c>
 8008746:	682b      	ldr	r3, [r5, #0]
 8008748:	b103      	cbz	r3, 800874c <_fstat_r+0x1c>
 800874a:	6023      	str	r3, [r4, #0]
 800874c:	bd38      	pop	{r3, r4, r5, pc}
 800874e:	bf00      	nop
 8008750:	20004284 	.word	0x20004284

08008754 <_isatty_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	2300      	movs	r3, #0
 8008758:	4d05      	ldr	r5, [pc, #20]	@ (8008770 <_isatty_r+0x1c>)
 800875a:	4604      	mov	r4, r0
 800875c:	4608      	mov	r0, r1
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	f7f9 f89f 	bl	80018a2 <_isatty>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_isatty_r+0x1a>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_isatty_r+0x1a>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	20004284 	.word	0x20004284

08008774 <_sbrk_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	2300      	movs	r3, #0
 8008778:	4d05      	ldr	r5, [pc, #20]	@ (8008790 <_sbrk_r+0x1c>)
 800877a:	4604      	mov	r4, r0
 800877c:	4608      	mov	r0, r1
 800877e:	602b      	str	r3, [r5, #0]
 8008780:	f7f9 f8a6 	bl	80018d0 <_sbrk>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d102      	bne.n	800878e <_sbrk_r+0x1a>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	b103      	cbz	r3, 800878e <_sbrk_r+0x1a>
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	bd38      	pop	{r3, r4, r5, pc}
 8008790:	20004284 	.word	0x20004284

08008794 <nan>:
 8008794:	2000      	movs	r0, #0
 8008796:	4901      	ldr	r1, [pc, #4]	@ (800879c <nan+0x8>)
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	7ff80000 	.word	0x7ff80000

080087a0 <__assert_func>:
 80087a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087a2:	4614      	mov	r4, r2
 80087a4:	461a      	mov	r2, r3
 80087a6:	4b09      	ldr	r3, [pc, #36]	@ (80087cc <__assert_func+0x2c>)
 80087a8:	4605      	mov	r5, r0
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68d8      	ldr	r0, [r3, #12]
 80087ae:	b954      	cbnz	r4, 80087c6 <__assert_func+0x26>
 80087b0:	4b07      	ldr	r3, [pc, #28]	@ (80087d0 <__assert_func+0x30>)
 80087b2:	461c      	mov	r4, r3
 80087b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087b8:	9100      	str	r1, [sp, #0]
 80087ba:	462b      	mov	r3, r5
 80087bc:	4905      	ldr	r1, [pc, #20]	@ (80087d4 <__assert_func+0x34>)
 80087be:	f000 fba7 	bl	8008f10 <fiprintf>
 80087c2:	f000 fbb7 	bl	8008f34 <abort>
 80087c6:	4b04      	ldr	r3, [pc, #16]	@ (80087d8 <__assert_func+0x38>)
 80087c8:	e7f4      	b.n	80087b4 <__assert_func+0x14>
 80087ca:	bf00      	nop
 80087cc:	2000003c 	.word	0x2000003c
 80087d0:	0800b19d 	.word	0x0800b19d
 80087d4:	0800b16f 	.word	0x0800b16f
 80087d8:	0800b162 	.word	0x0800b162

080087dc <_calloc_r>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	fba1 5402 	umull	r5, r4, r1, r2
 80087e2:	b93c      	cbnz	r4, 80087f4 <_calloc_r+0x18>
 80087e4:	4629      	mov	r1, r5
 80087e6:	f7fe f825 	bl	8006834 <_malloc_r>
 80087ea:	4606      	mov	r6, r0
 80087ec:	b928      	cbnz	r0, 80087fa <_calloc_r+0x1e>
 80087ee:	2600      	movs	r6, #0
 80087f0:	4630      	mov	r0, r6
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	220c      	movs	r2, #12
 80087f6:	6002      	str	r2, [r0, #0]
 80087f8:	e7f9      	b.n	80087ee <_calloc_r+0x12>
 80087fa:	462a      	mov	r2, r5
 80087fc:	4621      	mov	r1, r4
 80087fe:	f7fd f8b5 	bl	800596c <memset>
 8008802:	e7f5      	b.n	80087f0 <_calloc_r+0x14>

08008804 <rshift>:
 8008804:	6903      	ldr	r3, [r0, #16]
 8008806:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800880a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800880e:	f100 0414 	add.w	r4, r0, #20
 8008812:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008816:	dd46      	ble.n	80088a6 <rshift+0xa2>
 8008818:	f011 011f 	ands.w	r1, r1, #31
 800881c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008820:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008824:	d10c      	bne.n	8008840 <rshift+0x3c>
 8008826:	4629      	mov	r1, r5
 8008828:	f100 0710 	add.w	r7, r0, #16
 800882c:	42b1      	cmp	r1, r6
 800882e:	d335      	bcc.n	800889c <rshift+0x98>
 8008830:	1a9b      	subs	r3, r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	1eea      	subs	r2, r5, #3
 8008836:	4296      	cmp	r6, r2
 8008838:	bf38      	it	cc
 800883a:	2300      	movcc	r3, #0
 800883c:	4423      	add	r3, r4
 800883e:	e015      	b.n	800886c <rshift+0x68>
 8008840:	46a1      	mov	r9, r4
 8008842:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008846:	f1c1 0820 	rsb	r8, r1, #32
 800884a:	40cf      	lsrs	r7, r1
 800884c:	f105 0e04 	add.w	lr, r5, #4
 8008850:	4576      	cmp	r6, lr
 8008852:	46f4      	mov	ip, lr
 8008854:	d816      	bhi.n	8008884 <rshift+0x80>
 8008856:	1a9a      	subs	r2, r3, r2
 8008858:	0092      	lsls	r2, r2, #2
 800885a:	3a04      	subs	r2, #4
 800885c:	3501      	adds	r5, #1
 800885e:	42ae      	cmp	r6, r5
 8008860:	bf38      	it	cc
 8008862:	2200      	movcc	r2, #0
 8008864:	18a3      	adds	r3, r4, r2
 8008866:	50a7      	str	r7, [r4, r2]
 8008868:	b107      	cbz	r7, 800886c <rshift+0x68>
 800886a:	3304      	adds	r3, #4
 800886c:	42a3      	cmp	r3, r4
 800886e:	eba3 0204 	sub.w	r2, r3, r4
 8008872:	bf08      	it	eq
 8008874:	2300      	moveq	r3, #0
 8008876:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800887a:	6102      	str	r2, [r0, #16]
 800887c:	bf08      	it	eq
 800887e:	6143      	streq	r3, [r0, #20]
 8008880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008884:	f8dc c000 	ldr.w	ip, [ip]
 8008888:	fa0c fc08 	lsl.w	ip, ip, r8
 800888c:	ea4c 0707 	orr.w	r7, ip, r7
 8008890:	f849 7b04 	str.w	r7, [r9], #4
 8008894:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008898:	40cf      	lsrs	r7, r1
 800889a:	e7d9      	b.n	8008850 <rshift+0x4c>
 800889c:	f851 cb04 	ldr.w	ip, [r1], #4
 80088a0:	f847 cf04 	str.w	ip, [r7, #4]!
 80088a4:	e7c2      	b.n	800882c <rshift+0x28>
 80088a6:	4623      	mov	r3, r4
 80088a8:	e7e0      	b.n	800886c <rshift+0x68>

080088aa <__hexdig_fun>:
 80088aa:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80088ae:	2b09      	cmp	r3, #9
 80088b0:	d802      	bhi.n	80088b8 <__hexdig_fun+0xe>
 80088b2:	3820      	subs	r0, #32
 80088b4:	b2c0      	uxtb	r0, r0
 80088b6:	4770      	bx	lr
 80088b8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80088bc:	2b05      	cmp	r3, #5
 80088be:	d801      	bhi.n	80088c4 <__hexdig_fun+0x1a>
 80088c0:	3847      	subs	r0, #71	@ 0x47
 80088c2:	e7f7      	b.n	80088b4 <__hexdig_fun+0xa>
 80088c4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80088c8:	2b05      	cmp	r3, #5
 80088ca:	d801      	bhi.n	80088d0 <__hexdig_fun+0x26>
 80088cc:	3827      	subs	r0, #39	@ 0x27
 80088ce:	e7f1      	b.n	80088b4 <__hexdig_fun+0xa>
 80088d0:	2000      	movs	r0, #0
 80088d2:	4770      	bx	lr

080088d4 <__gethex>:
 80088d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	468a      	mov	sl, r1
 80088da:	4690      	mov	r8, r2
 80088dc:	b085      	sub	sp, #20
 80088de:	9302      	str	r3, [sp, #8]
 80088e0:	680b      	ldr	r3, [r1, #0]
 80088e2:	9001      	str	r0, [sp, #4]
 80088e4:	1c9c      	adds	r4, r3, #2
 80088e6:	46a1      	mov	r9, r4
 80088e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80088ec:	2830      	cmp	r0, #48	@ 0x30
 80088ee:	d0fa      	beq.n	80088e6 <__gethex+0x12>
 80088f0:	eba9 0303 	sub.w	r3, r9, r3
 80088f4:	f1a3 0b02 	sub.w	fp, r3, #2
 80088f8:	f7ff ffd7 	bl	80088aa <__hexdig_fun>
 80088fc:	4605      	mov	r5, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	d168      	bne.n	80089d4 <__gethex+0x100>
 8008902:	2201      	movs	r2, #1
 8008904:	4648      	mov	r0, r9
 8008906:	499f      	ldr	r1, [pc, #636]	@ (8008b84 <__gethex+0x2b0>)
 8008908:	f7ff feff 	bl	800870a <strncmp>
 800890c:	4607      	mov	r7, r0
 800890e:	2800      	cmp	r0, #0
 8008910:	d167      	bne.n	80089e2 <__gethex+0x10e>
 8008912:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008916:	4626      	mov	r6, r4
 8008918:	f7ff ffc7 	bl	80088aa <__hexdig_fun>
 800891c:	2800      	cmp	r0, #0
 800891e:	d062      	beq.n	80089e6 <__gethex+0x112>
 8008920:	4623      	mov	r3, r4
 8008922:	7818      	ldrb	r0, [r3, #0]
 8008924:	4699      	mov	r9, r3
 8008926:	2830      	cmp	r0, #48	@ 0x30
 8008928:	f103 0301 	add.w	r3, r3, #1
 800892c:	d0f9      	beq.n	8008922 <__gethex+0x4e>
 800892e:	f7ff ffbc 	bl	80088aa <__hexdig_fun>
 8008932:	fab0 f580 	clz	r5, r0
 8008936:	f04f 0b01 	mov.w	fp, #1
 800893a:	096d      	lsrs	r5, r5, #5
 800893c:	464a      	mov	r2, r9
 800893e:	4616      	mov	r6, r2
 8008940:	7830      	ldrb	r0, [r6, #0]
 8008942:	3201      	adds	r2, #1
 8008944:	f7ff ffb1 	bl	80088aa <__hexdig_fun>
 8008948:	2800      	cmp	r0, #0
 800894a:	d1f8      	bne.n	800893e <__gethex+0x6a>
 800894c:	2201      	movs	r2, #1
 800894e:	4630      	mov	r0, r6
 8008950:	498c      	ldr	r1, [pc, #560]	@ (8008b84 <__gethex+0x2b0>)
 8008952:	f7ff feda 	bl	800870a <strncmp>
 8008956:	2800      	cmp	r0, #0
 8008958:	d13f      	bne.n	80089da <__gethex+0x106>
 800895a:	b944      	cbnz	r4, 800896e <__gethex+0x9a>
 800895c:	1c74      	adds	r4, r6, #1
 800895e:	4622      	mov	r2, r4
 8008960:	4616      	mov	r6, r2
 8008962:	7830      	ldrb	r0, [r6, #0]
 8008964:	3201      	adds	r2, #1
 8008966:	f7ff ffa0 	bl	80088aa <__hexdig_fun>
 800896a:	2800      	cmp	r0, #0
 800896c:	d1f8      	bne.n	8008960 <__gethex+0x8c>
 800896e:	1ba4      	subs	r4, r4, r6
 8008970:	00a7      	lsls	r7, r4, #2
 8008972:	7833      	ldrb	r3, [r6, #0]
 8008974:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008978:	2b50      	cmp	r3, #80	@ 0x50
 800897a:	d13e      	bne.n	80089fa <__gethex+0x126>
 800897c:	7873      	ldrb	r3, [r6, #1]
 800897e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008980:	d033      	beq.n	80089ea <__gethex+0x116>
 8008982:	2b2d      	cmp	r3, #45	@ 0x2d
 8008984:	d034      	beq.n	80089f0 <__gethex+0x11c>
 8008986:	2400      	movs	r4, #0
 8008988:	1c71      	adds	r1, r6, #1
 800898a:	7808      	ldrb	r0, [r1, #0]
 800898c:	f7ff ff8d 	bl	80088aa <__hexdig_fun>
 8008990:	1e43      	subs	r3, r0, #1
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b18      	cmp	r3, #24
 8008996:	d830      	bhi.n	80089fa <__gethex+0x126>
 8008998:	f1a0 0210 	sub.w	r2, r0, #16
 800899c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80089a0:	f7ff ff83 	bl	80088aa <__hexdig_fun>
 80089a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80089a8:	fa5f fc8c 	uxtb.w	ip, ip
 80089ac:	f1bc 0f18 	cmp.w	ip, #24
 80089b0:	f04f 030a 	mov.w	r3, #10
 80089b4:	d91e      	bls.n	80089f4 <__gethex+0x120>
 80089b6:	b104      	cbz	r4, 80089ba <__gethex+0xe6>
 80089b8:	4252      	negs	r2, r2
 80089ba:	4417      	add	r7, r2
 80089bc:	f8ca 1000 	str.w	r1, [sl]
 80089c0:	b1ed      	cbz	r5, 80089fe <__gethex+0x12a>
 80089c2:	f1bb 0f00 	cmp.w	fp, #0
 80089c6:	bf0c      	ite	eq
 80089c8:	2506      	moveq	r5, #6
 80089ca:	2500      	movne	r5, #0
 80089cc:	4628      	mov	r0, r5
 80089ce:	b005      	add	sp, #20
 80089d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	2500      	movs	r5, #0
 80089d6:	462c      	mov	r4, r5
 80089d8:	e7b0      	b.n	800893c <__gethex+0x68>
 80089da:	2c00      	cmp	r4, #0
 80089dc:	d1c7      	bne.n	800896e <__gethex+0x9a>
 80089de:	4627      	mov	r7, r4
 80089e0:	e7c7      	b.n	8008972 <__gethex+0x9e>
 80089e2:	464e      	mov	r6, r9
 80089e4:	462f      	mov	r7, r5
 80089e6:	2501      	movs	r5, #1
 80089e8:	e7c3      	b.n	8008972 <__gethex+0x9e>
 80089ea:	2400      	movs	r4, #0
 80089ec:	1cb1      	adds	r1, r6, #2
 80089ee:	e7cc      	b.n	800898a <__gethex+0xb6>
 80089f0:	2401      	movs	r4, #1
 80089f2:	e7fb      	b.n	80089ec <__gethex+0x118>
 80089f4:	fb03 0002 	mla	r0, r3, r2, r0
 80089f8:	e7ce      	b.n	8008998 <__gethex+0xc4>
 80089fa:	4631      	mov	r1, r6
 80089fc:	e7de      	b.n	80089bc <__gethex+0xe8>
 80089fe:	4629      	mov	r1, r5
 8008a00:	eba6 0309 	sub.w	r3, r6, r9
 8008a04:	3b01      	subs	r3, #1
 8008a06:	2b07      	cmp	r3, #7
 8008a08:	dc0a      	bgt.n	8008a20 <__gethex+0x14c>
 8008a0a:	9801      	ldr	r0, [sp, #4]
 8008a0c:	f7fd ff9e 	bl	800694c <_Balloc>
 8008a10:	4604      	mov	r4, r0
 8008a12:	b940      	cbnz	r0, 8008a26 <__gethex+0x152>
 8008a14:	4602      	mov	r2, r0
 8008a16:	21e4      	movs	r1, #228	@ 0xe4
 8008a18:	4b5b      	ldr	r3, [pc, #364]	@ (8008b88 <__gethex+0x2b4>)
 8008a1a:	485c      	ldr	r0, [pc, #368]	@ (8008b8c <__gethex+0x2b8>)
 8008a1c:	f7ff fec0 	bl	80087a0 <__assert_func>
 8008a20:	3101      	adds	r1, #1
 8008a22:	105b      	asrs	r3, r3, #1
 8008a24:	e7ef      	b.n	8008a06 <__gethex+0x132>
 8008a26:	2300      	movs	r3, #0
 8008a28:	f100 0a14 	add.w	sl, r0, #20
 8008a2c:	4655      	mov	r5, sl
 8008a2e:	469b      	mov	fp, r3
 8008a30:	45b1      	cmp	r9, r6
 8008a32:	d337      	bcc.n	8008aa4 <__gethex+0x1d0>
 8008a34:	f845 bb04 	str.w	fp, [r5], #4
 8008a38:	eba5 050a 	sub.w	r5, r5, sl
 8008a3c:	10ad      	asrs	r5, r5, #2
 8008a3e:	6125      	str	r5, [r4, #16]
 8008a40:	4658      	mov	r0, fp
 8008a42:	f7fe f875 	bl	8006b30 <__hi0bits>
 8008a46:	016d      	lsls	r5, r5, #5
 8008a48:	f8d8 6000 	ldr.w	r6, [r8]
 8008a4c:	1a2d      	subs	r5, r5, r0
 8008a4e:	42b5      	cmp	r5, r6
 8008a50:	dd54      	ble.n	8008afc <__gethex+0x228>
 8008a52:	1bad      	subs	r5, r5, r6
 8008a54:	4629      	mov	r1, r5
 8008a56:	4620      	mov	r0, r4
 8008a58:	f7fe fbfd 	bl	8007256 <__any_on>
 8008a5c:	4681      	mov	r9, r0
 8008a5e:	b178      	cbz	r0, 8008a80 <__gethex+0x1ac>
 8008a60:	f04f 0901 	mov.w	r9, #1
 8008a64:	1e6b      	subs	r3, r5, #1
 8008a66:	1159      	asrs	r1, r3, #5
 8008a68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008a6c:	f003 021f 	and.w	r2, r3, #31
 8008a70:	fa09 f202 	lsl.w	r2, r9, r2
 8008a74:	420a      	tst	r2, r1
 8008a76:	d003      	beq.n	8008a80 <__gethex+0x1ac>
 8008a78:	454b      	cmp	r3, r9
 8008a7a:	dc36      	bgt.n	8008aea <__gethex+0x216>
 8008a7c:	f04f 0902 	mov.w	r9, #2
 8008a80:	4629      	mov	r1, r5
 8008a82:	4620      	mov	r0, r4
 8008a84:	f7ff febe 	bl	8008804 <rshift>
 8008a88:	442f      	add	r7, r5
 8008a8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a8e:	42bb      	cmp	r3, r7
 8008a90:	da42      	bge.n	8008b18 <__gethex+0x244>
 8008a92:	4621      	mov	r1, r4
 8008a94:	9801      	ldr	r0, [sp, #4]
 8008a96:	f7fd ff99 	bl	80069cc <_Bfree>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a9e:	25a3      	movs	r5, #163	@ 0xa3
 8008aa0:	6013      	str	r3, [r2, #0]
 8008aa2:	e793      	b.n	80089cc <__gethex+0xf8>
 8008aa4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008aa8:	2a2e      	cmp	r2, #46	@ 0x2e
 8008aaa:	d012      	beq.n	8008ad2 <__gethex+0x1fe>
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	d104      	bne.n	8008aba <__gethex+0x1e6>
 8008ab0:	f845 bb04 	str.w	fp, [r5], #4
 8008ab4:	f04f 0b00 	mov.w	fp, #0
 8008ab8:	465b      	mov	r3, fp
 8008aba:	7830      	ldrb	r0, [r6, #0]
 8008abc:	9303      	str	r3, [sp, #12]
 8008abe:	f7ff fef4 	bl	80088aa <__hexdig_fun>
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	f000 000f 	and.w	r0, r0, #15
 8008ac8:	4098      	lsls	r0, r3
 8008aca:	ea4b 0b00 	orr.w	fp, fp, r0
 8008ace:	3304      	adds	r3, #4
 8008ad0:	e7ae      	b.n	8008a30 <__gethex+0x15c>
 8008ad2:	45b1      	cmp	r9, r6
 8008ad4:	d8ea      	bhi.n	8008aac <__gethex+0x1d8>
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	4630      	mov	r0, r6
 8008ada:	492a      	ldr	r1, [pc, #168]	@ (8008b84 <__gethex+0x2b0>)
 8008adc:	9303      	str	r3, [sp, #12]
 8008ade:	f7ff fe14 	bl	800870a <strncmp>
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d1e1      	bne.n	8008aac <__gethex+0x1d8>
 8008ae8:	e7a2      	b.n	8008a30 <__gethex+0x15c>
 8008aea:	4620      	mov	r0, r4
 8008aec:	1ea9      	subs	r1, r5, #2
 8008aee:	f7fe fbb2 	bl	8007256 <__any_on>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d0c2      	beq.n	8008a7c <__gethex+0x1a8>
 8008af6:	f04f 0903 	mov.w	r9, #3
 8008afa:	e7c1      	b.n	8008a80 <__gethex+0x1ac>
 8008afc:	da09      	bge.n	8008b12 <__gethex+0x23e>
 8008afe:	1b75      	subs	r5, r6, r5
 8008b00:	4621      	mov	r1, r4
 8008b02:	462a      	mov	r2, r5
 8008b04:	9801      	ldr	r0, [sp, #4]
 8008b06:	f7fe f977 	bl	8006df8 <__lshift>
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	1b7f      	subs	r7, r7, r5
 8008b0e:	f100 0a14 	add.w	sl, r0, #20
 8008b12:	f04f 0900 	mov.w	r9, #0
 8008b16:	e7b8      	b.n	8008a8a <__gethex+0x1b6>
 8008b18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b1c:	42bd      	cmp	r5, r7
 8008b1e:	dd6f      	ble.n	8008c00 <__gethex+0x32c>
 8008b20:	1bed      	subs	r5, r5, r7
 8008b22:	42ae      	cmp	r6, r5
 8008b24:	dc34      	bgt.n	8008b90 <__gethex+0x2bc>
 8008b26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d022      	beq.n	8008b74 <__gethex+0x2a0>
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d024      	beq.n	8008b7c <__gethex+0x2a8>
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d115      	bne.n	8008b62 <__gethex+0x28e>
 8008b36:	42ae      	cmp	r6, r5
 8008b38:	d113      	bne.n	8008b62 <__gethex+0x28e>
 8008b3a:	2e01      	cmp	r6, #1
 8008b3c:	d10b      	bne.n	8008b56 <__gethex+0x282>
 8008b3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b42:	9a02      	ldr	r2, [sp, #8]
 8008b44:	2562      	movs	r5, #98	@ 0x62
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	2301      	movs	r3, #1
 8008b4a:	6123      	str	r3, [r4, #16]
 8008b4c:	f8ca 3000 	str.w	r3, [sl]
 8008b50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b52:	601c      	str	r4, [r3, #0]
 8008b54:	e73a      	b.n	80089cc <__gethex+0xf8>
 8008b56:	4620      	mov	r0, r4
 8008b58:	1e71      	subs	r1, r6, #1
 8008b5a:	f7fe fb7c 	bl	8007256 <__any_on>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d1ed      	bne.n	8008b3e <__gethex+0x26a>
 8008b62:	4621      	mov	r1, r4
 8008b64:	9801      	ldr	r0, [sp, #4]
 8008b66:	f7fd ff31 	bl	80069cc <_Bfree>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b6e:	2550      	movs	r5, #80	@ 0x50
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	e72b      	b.n	80089cc <__gethex+0xf8>
 8008b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1f3      	bne.n	8008b62 <__gethex+0x28e>
 8008b7a:	e7e0      	b.n	8008b3e <__gethex+0x26a>
 8008b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1dd      	bne.n	8008b3e <__gethex+0x26a>
 8008b82:	e7ee      	b.n	8008b62 <__gethex+0x28e>
 8008b84:	0800aff0 	.word	0x0800aff0
 8008b88:	0800ae83 	.word	0x0800ae83
 8008b8c:	0800b19e 	.word	0x0800b19e
 8008b90:	1e6f      	subs	r7, r5, #1
 8008b92:	f1b9 0f00 	cmp.w	r9, #0
 8008b96:	d130      	bne.n	8008bfa <__gethex+0x326>
 8008b98:	b127      	cbz	r7, 8008ba4 <__gethex+0x2d0>
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f7fe fb5a 	bl	8007256 <__any_on>
 8008ba2:	4681      	mov	r9, r0
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	1b76      	subs	r6, r6, r5
 8008baa:	2502      	movs	r5, #2
 8008bac:	117a      	asrs	r2, r7, #5
 8008bae:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008bb2:	f007 071f 	and.w	r7, r7, #31
 8008bb6:	40bb      	lsls	r3, r7
 8008bb8:	4213      	tst	r3, r2
 8008bba:	4620      	mov	r0, r4
 8008bbc:	bf18      	it	ne
 8008bbe:	f049 0902 	orrne.w	r9, r9, #2
 8008bc2:	f7ff fe1f 	bl	8008804 <rshift>
 8008bc6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008bca:	f1b9 0f00 	cmp.w	r9, #0
 8008bce:	d047      	beq.n	8008c60 <__gethex+0x38c>
 8008bd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d015      	beq.n	8008c04 <__gethex+0x330>
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d017      	beq.n	8008c0c <__gethex+0x338>
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d109      	bne.n	8008bf4 <__gethex+0x320>
 8008be0:	f019 0f02 	tst.w	r9, #2
 8008be4:	d006      	beq.n	8008bf4 <__gethex+0x320>
 8008be6:	f8da 3000 	ldr.w	r3, [sl]
 8008bea:	ea49 0903 	orr.w	r9, r9, r3
 8008bee:	f019 0f01 	tst.w	r9, #1
 8008bf2:	d10e      	bne.n	8008c12 <__gethex+0x33e>
 8008bf4:	f045 0510 	orr.w	r5, r5, #16
 8008bf8:	e032      	b.n	8008c60 <__gethex+0x38c>
 8008bfa:	f04f 0901 	mov.w	r9, #1
 8008bfe:	e7d1      	b.n	8008ba4 <__gethex+0x2d0>
 8008c00:	2501      	movs	r5, #1
 8008c02:	e7e2      	b.n	8008bca <__gethex+0x2f6>
 8008c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c06:	f1c3 0301 	rsb	r3, r3, #1
 8008c0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d0f0      	beq.n	8008bf4 <__gethex+0x320>
 8008c12:	f04f 0c00 	mov.w	ip, #0
 8008c16:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c1a:	f104 0314 	add.w	r3, r4, #20
 8008c1e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c22:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c30:	d01b      	beq.n	8008c6a <__gethex+0x396>
 8008c32:	3201      	adds	r2, #1
 8008c34:	6002      	str	r2, [r0, #0]
 8008c36:	2d02      	cmp	r5, #2
 8008c38:	f104 0314 	add.w	r3, r4, #20
 8008c3c:	d13c      	bne.n	8008cb8 <__gethex+0x3e4>
 8008c3e:	f8d8 2000 	ldr.w	r2, [r8]
 8008c42:	3a01      	subs	r2, #1
 8008c44:	42b2      	cmp	r2, r6
 8008c46:	d109      	bne.n	8008c5c <__gethex+0x388>
 8008c48:	2201      	movs	r2, #1
 8008c4a:	1171      	asrs	r1, r6, #5
 8008c4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c50:	f006 061f 	and.w	r6, r6, #31
 8008c54:	fa02 f606 	lsl.w	r6, r2, r6
 8008c58:	421e      	tst	r6, r3
 8008c5a:	d13a      	bne.n	8008cd2 <__gethex+0x3fe>
 8008c5c:	f045 0520 	orr.w	r5, r5, #32
 8008c60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c62:	601c      	str	r4, [r3, #0]
 8008c64:	9b02      	ldr	r3, [sp, #8]
 8008c66:	601f      	str	r7, [r3, #0]
 8008c68:	e6b0      	b.n	80089cc <__gethex+0xf8>
 8008c6a:	4299      	cmp	r1, r3
 8008c6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c70:	d8d9      	bhi.n	8008c26 <__gethex+0x352>
 8008c72:	68a3      	ldr	r3, [r4, #8]
 8008c74:	459b      	cmp	fp, r3
 8008c76:	db17      	blt.n	8008ca8 <__gethex+0x3d4>
 8008c78:	6861      	ldr	r1, [r4, #4]
 8008c7a:	9801      	ldr	r0, [sp, #4]
 8008c7c:	3101      	adds	r1, #1
 8008c7e:	f7fd fe65 	bl	800694c <_Balloc>
 8008c82:	4681      	mov	r9, r0
 8008c84:	b918      	cbnz	r0, 8008c8e <__gethex+0x3ba>
 8008c86:	4602      	mov	r2, r0
 8008c88:	2184      	movs	r1, #132	@ 0x84
 8008c8a:	4b19      	ldr	r3, [pc, #100]	@ (8008cf0 <__gethex+0x41c>)
 8008c8c:	e6c5      	b.n	8008a1a <__gethex+0x146>
 8008c8e:	6922      	ldr	r2, [r4, #16]
 8008c90:	f104 010c 	add.w	r1, r4, #12
 8008c94:	3202      	adds	r2, #2
 8008c96:	0092      	lsls	r2, r2, #2
 8008c98:	300c      	adds	r0, #12
 8008c9a:	f7fc fef4 	bl	8005a86 <memcpy>
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	9801      	ldr	r0, [sp, #4]
 8008ca2:	f7fd fe93 	bl	80069cc <_Bfree>
 8008ca6:	464c      	mov	r4, r9
 8008ca8:	6923      	ldr	r3, [r4, #16]
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	6122      	str	r2, [r4, #16]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cb4:	615a      	str	r2, [r3, #20]
 8008cb6:	e7be      	b.n	8008c36 <__gethex+0x362>
 8008cb8:	6922      	ldr	r2, [r4, #16]
 8008cba:	455a      	cmp	r2, fp
 8008cbc:	dd0b      	ble.n	8008cd6 <__gethex+0x402>
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f7ff fd9f 	bl	8008804 <rshift>
 8008cc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cca:	3701      	adds	r7, #1
 8008ccc:	42bb      	cmp	r3, r7
 8008cce:	f6ff aee0 	blt.w	8008a92 <__gethex+0x1be>
 8008cd2:	2501      	movs	r5, #1
 8008cd4:	e7c2      	b.n	8008c5c <__gethex+0x388>
 8008cd6:	f016 061f 	ands.w	r6, r6, #31
 8008cda:	d0fa      	beq.n	8008cd2 <__gethex+0x3fe>
 8008cdc:	4453      	add	r3, sl
 8008cde:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008ce2:	f7fd ff25 	bl	8006b30 <__hi0bits>
 8008ce6:	f1c6 0620 	rsb	r6, r6, #32
 8008cea:	42b0      	cmp	r0, r6
 8008cec:	dbe7      	blt.n	8008cbe <__gethex+0x3ea>
 8008cee:	e7f0      	b.n	8008cd2 <__gethex+0x3fe>
 8008cf0:	0800ae83 	.word	0x0800ae83

08008cf4 <L_shift>:
 8008cf4:	f1c2 0208 	rsb	r2, r2, #8
 8008cf8:	0092      	lsls	r2, r2, #2
 8008cfa:	b570      	push	{r4, r5, r6, lr}
 8008cfc:	f1c2 0620 	rsb	r6, r2, #32
 8008d00:	6843      	ldr	r3, [r0, #4]
 8008d02:	6804      	ldr	r4, [r0, #0]
 8008d04:	fa03 f506 	lsl.w	r5, r3, r6
 8008d08:	432c      	orrs	r4, r5
 8008d0a:	40d3      	lsrs	r3, r2
 8008d0c:	6004      	str	r4, [r0, #0]
 8008d0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d12:	4288      	cmp	r0, r1
 8008d14:	d3f4      	bcc.n	8008d00 <L_shift+0xc>
 8008d16:	bd70      	pop	{r4, r5, r6, pc}

08008d18 <__match>:
 8008d18:	b530      	push	{r4, r5, lr}
 8008d1a:	6803      	ldr	r3, [r0, #0]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d22:	b914      	cbnz	r4, 8008d2a <__match+0x12>
 8008d24:	6003      	str	r3, [r0, #0]
 8008d26:	2001      	movs	r0, #1
 8008d28:	bd30      	pop	{r4, r5, pc}
 8008d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008d32:	2d19      	cmp	r5, #25
 8008d34:	bf98      	it	ls
 8008d36:	3220      	addls	r2, #32
 8008d38:	42a2      	cmp	r2, r4
 8008d3a:	d0f0      	beq.n	8008d1e <__match+0x6>
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	e7f3      	b.n	8008d28 <__match+0x10>

08008d40 <__hexnan>:
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	2500      	movs	r5, #0
 8008d46:	680b      	ldr	r3, [r1, #0]
 8008d48:	4682      	mov	sl, r0
 8008d4a:	115e      	asrs	r6, r3, #5
 8008d4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d50:	f013 031f 	ands.w	r3, r3, #31
 8008d54:	bf18      	it	ne
 8008d56:	3604      	addne	r6, #4
 8008d58:	1f37      	subs	r7, r6, #4
 8008d5a:	4690      	mov	r8, r2
 8008d5c:	46b9      	mov	r9, r7
 8008d5e:	463c      	mov	r4, r7
 8008d60:	46ab      	mov	fp, r5
 8008d62:	b087      	sub	sp, #28
 8008d64:	6801      	ldr	r1, [r0, #0]
 8008d66:	9301      	str	r3, [sp, #4]
 8008d68:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d6c:	9502      	str	r5, [sp, #8]
 8008d6e:	784a      	ldrb	r2, [r1, #1]
 8008d70:	1c4b      	adds	r3, r1, #1
 8008d72:	9303      	str	r3, [sp, #12]
 8008d74:	b342      	cbz	r2, 8008dc8 <__hexnan+0x88>
 8008d76:	4610      	mov	r0, r2
 8008d78:	9105      	str	r1, [sp, #20]
 8008d7a:	9204      	str	r2, [sp, #16]
 8008d7c:	f7ff fd95 	bl	80088aa <__hexdig_fun>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d151      	bne.n	8008e28 <__hexnan+0xe8>
 8008d84:	9a04      	ldr	r2, [sp, #16]
 8008d86:	9905      	ldr	r1, [sp, #20]
 8008d88:	2a20      	cmp	r2, #32
 8008d8a:	d818      	bhi.n	8008dbe <__hexnan+0x7e>
 8008d8c:	9b02      	ldr	r3, [sp, #8]
 8008d8e:	459b      	cmp	fp, r3
 8008d90:	dd13      	ble.n	8008dba <__hexnan+0x7a>
 8008d92:	454c      	cmp	r4, r9
 8008d94:	d206      	bcs.n	8008da4 <__hexnan+0x64>
 8008d96:	2d07      	cmp	r5, #7
 8008d98:	dc04      	bgt.n	8008da4 <__hexnan+0x64>
 8008d9a:	462a      	mov	r2, r5
 8008d9c:	4649      	mov	r1, r9
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f7ff ffa8 	bl	8008cf4 <L_shift>
 8008da4:	4544      	cmp	r4, r8
 8008da6:	d952      	bls.n	8008e4e <__hexnan+0x10e>
 8008da8:	2300      	movs	r3, #0
 8008daa:	f1a4 0904 	sub.w	r9, r4, #4
 8008dae:	f844 3c04 	str.w	r3, [r4, #-4]
 8008db2:	461d      	mov	r5, r3
 8008db4:	464c      	mov	r4, r9
 8008db6:	f8cd b008 	str.w	fp, [sp, #8]
 8008dba:	9903      	ldr	r1, [sp, #12]
 8008dbc:	e7d7      	b.n	8008d6e <__hexnan+0x2e>
 8008dbe:	2a29      	cmp	r2, #41	@ 0x29
 8008dc0:	d157      	bne.n	8008e72 <__hexnan+0x132>
 8008dc2:	3102      	adds	r1, #2
 8008dc4:	f8ca 1000 	str.w	r1, [sl]
 8008dc8:	f1bb 0f00 	cmp.w	fp, #0
 8008dcc:	d051      	beq.n	8008e72 <__hexnan+0x132>
 8008dce:	454c      	cmp	r4, r9
 8008dd0:	d206      	bcs.n	8008de0 <__hexnan+0xa0>
 8008dd2:	2d07      	cmp	r5, #7
 8008dd4:	dc04      	bgt.n	8008de0 <__hexnan+0xa0>
 8008dd6:	462a      	mov	r2, r5
 8008dd8:	4649      	mov	r1, r9
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f7ff ff8a 	bl	8008cf4 <L_shift>
 8008de0:	4544      	cmp	r4, r8
 8008de2:	d936      	bls.n	8008e52 <__hexnan+0x112>
 8008de4:	4623      	mov	r3, r4
 8008de6:	f1a8 0204 	sub.w	r2, r8, #4
 8008dea:	f853 1b04 	ldr.w	r1, [r3], #4
 8008dee:	429f      	cmp	r7, r3
 8008df0:	f842 1f04 	str.w	r1, [r2, #4]!
 8008df4:	d2f9      	bcs.n	8008dea <__hexnan+0xaa>
 8008df6:	1b3b      	subs	r3, r7, r4
 8008df8:	f023 0303 	bic.w	r3, r3, #3
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	3401      	adds	r4, #1
 8008e00:	3e03      	subs	r6, #3
 8008e02:	42b4      	cmp	r4, r6
 8008e04:	bf88      	it	hi
 8008e06:	2304      	movhi	r3, #4
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4443      	add	r3, r8
 8008e0c:	f843 2b04 	str.w	r2, [r3], #4
 8008e10:	429f      	cmp	r7, r3
 8008e12:	d2fb      	bcs.n	8008e0c <__hexnan+0xcc>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	b91b      	cbnz	r3, 8008e20 <__hexnan+0xe0>
 8008e18:	4547      	cmp	r7, r8
 8008e1a:	d128      	bne.n	8008e6e <__hexnan+0x12e>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	2005      	movs	r0, #5
 8008e22:	b007      	add	sp, #28
 8008e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e28:	3501      	adds	r5, #1
 8008e2a:	2d08      	cmp	r5, #8
 8008e2c:	f10b 0b01 	add.w	fp, fp, #1
 8008e30:	dd06      	ble.n	8008e40 <__hexnan+0x100>
 8008e32:	4544      	cmp	r4, r8
 8008e34:	d9c1      	bls.n	8008dba <__hexnan+0x7a>
 8008e36:	2300      	movs	r3, #0
 8008e38:	2501      	movs	r5, #1
 8008e3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e3e:	3c04      	subs	r4, #4
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	f000 000f 	and.w	r0, r0, #15
 8008e46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008e4a:	6020      	str	r0, [r4, #0]
 8008e4c:	e7b5      	b.n	8008dba <__hexnan+0x7a>
 8008e4e:	2508      	movs	r5, #8
 8008e50:	e7b3      	b.n	8008dba <__hexnan+0x7a>
 8008e52:	9b01      	ldr	r3, [sp, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0dd      	beq.n	8008e14 <__hexnan+0xd4>
 8008e58:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5c:	f1c3 0320 	rsb	r3, r3, #32
 8008e60:	40da      	lsrs	r2, r3
 8008e62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008e66:	4013      	ands	r3, r2
 8008e68:	f846 3c04 	str.w	r3, [r6, #-4]
 8008e6c:	e7d2      	b.n	8008e14 <__hexnan+0xd4>
 8008e6e:	3f04      	subs	r7, #4
 8008e70:	e7d0      	b.n	8008e14 <__hexnan+0xd4>
 8008e72:	2004      	movs	r0, #4
 8008e74:	e7d5      	b.n	8008e22 <__hexnan+0xe2>

08008e76 <__ascii_mbtowc>:
 8008e76:	b082      	sub	sp, #8
 8008e78:	b901      	cbnz	r1, 8008e7c <__ascii_mbtowc+0x6>
 8008e7a:	a901      	add	r1, sp, #4
 8008e7c:	b142      	cbz	r2, 8008e90 <__ascii_mbtowc+0x1a>
 8008e7e:	b14b      	cbz	r3, 8008e94 <__ascii_mbtowc+0x1e>
 8008e80:	7813      	ldrb	r3, [r2, #0]
 8008e82:	600b      	str	r3, [r1, #0]
 8008e84:	7812      	ldrb	r2, [r2, #0]
 8008e86:	1e10      	subs	r0, r2, #0
 8008e88:	bf18      	it	ne
 8008e8a:	2001      	movne	r0, #1
 8008e8c:	b002      	add	sp, #8
 8008e8e:	4770      	bx	lr
 8008e90:	4610      	mov	r0, r2
 8008e92:	e7fb      	b.n	8008e8c <__ascii_mbtowc+0x16>
 8008e94:	f06f 0001 	mvn.w	r0, #1
 8008e98:	e7f8      	b.n	8008e8c <__ascii_mbtowc+0x16>

08008e9a <_realloc_r>:
 8008e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	4615      	mov	r5, r2
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	b921      	cbnz	r1, 8008eb0 <_realloc_r+0x16>
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eac:	f7fd bcc2 	b.w	8006834 <_malloc_r>
 8008eb0:	b92a      	cbnz	r2, 8008ebe <_realloc_r+0x24>
 8008eb2:	f7fd fc4d 	bl	8006750 <_free_r>
 8008eb6:	2400      	movs	r4, #0
 8008eb8:	4620      	mov	r0, r4
 8008eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ebe:	f000 f840 	bl	8008f42 <_malloc_usable_size_r>
 8008ec2:	4285      	cmp	r5, r0
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	d802      	bhi.n	8008ece <_realloc_r+0x34>
 8008ec8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ecc:	d8f4      	bhi.n	8008eb8 <_realloc_r+0x1e>
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	f7fd fcaf 	bl	8006834 <_malloc_r>
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d0ec      	beq.n	8008eb6 <_realloc_r+0x1c>
 8008edc:	42b5      	cmp	r5, r6
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	bf28      	it	cs
 8008ee4:	4632      	movcs	r2, r6
 8008ee6:	f7fc fdce 	bl	8005a86 <memcpy>
 8008eea:	4621      	mov	r1, r4
 8008eec:	4640      	mov	r0, r8
 8008eee:	f7fd fc2f 	bl	8006750 <_free_r>
 8008ef2:	463c      	mov	r4, r7
 8008ef4:	e7e0      	b.n	8008eb8 <_realloc_r+0x1e>

08008ef6 <__ascii_wctomb>:
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	4608      	mov	r0, r1
 8008efa:	b141      	cbz	r1, 8008f0e <__ascii_wctomb+0x18>
 8008efc:	2aff      	cmp	r2, #255	@ 0xff
 8008efe:	d904      	bls.n	8008f0a <__ascii_wctomb+0x14>
 8008f00:	228a      	movs	r2, #138	@ 0x8a
 8008f02:	f04f 30ff 	mov.w	r0, #4294967295
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	4770      	bx	lr
 8008f0a:	2001      	movs	r0, #1
 8008f0c:	700a      	strb	r2, [r1, #0]
 8008f0e:	4770      	bx	lr

08008f10 <fiprintf>:
 8008f10:	b40e      	push	{r1, r2, r3}
 8008f12:	b503      	push	{r0, r1, lr}
 8008f14:	4601      	mov	r1, r0
 8008f16:	ab03      	add	r3, sp, #12
 8008f18:	4805      	ldr	r0, [pc, #20]	@ (8008f30 <fiprintf+0x20>)
 8008f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f1e:	6800      	ldr	r0, [r0, #0]
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	f7ff f9b7 	bl	8008294 <_vfiprintf_r>
 8008f26:	b002      	add	sp, #8
 8008f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f2c:	b003      	add	sp, #12
 8008f2e:	4770      	bx	lr
 8008f30:	2000003c 	.word	0x2000003c

08008f34 <abort>:
 8008f34:	2006      	movs	r0, #6
 8008f36:	b508      	push	{r3, lr}
 8008f38:	f000 f834 	bl	8008fa4 <raise>
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	f7f8 fc6e 	bl	800181e <_exit>

08008f42 <_malloc_usable_size_r>:
 8008f42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f46:	1f18      	subs	r0, r3, #4
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	bfbc      	itt	lt
 8008f4c:	580b      	ldrlt	r3, [r1, r0]
 8008f4e:	18c0      	addlt	r0, r0, r3
 8008f50:	4770      	bx	lr

08008f52 <_raise_r>:
 8008f52:	291f      	cmp	r1, #31
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4605      	mov	r5, r0
 8008f58:	460c      	mov	r4, r1
 8008f5a:	d904      	bls.n	8008f66 <_raise_r+0x14>
 8008f5c:	2316      	movs	r3, #22
 8008f5e:	6003      	str	r3, [r0, #0]
 8008f60:	f04f 30ff 	mov.w	r0, #4294967295
 8008f64:	bd38      	pop	{r3, r4, r5, pc}
 8008f66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008f68:	b112      	cbz	r2, 8008f70 <_raise_r+0x1e>
 8008f6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f6e:	b94b      	cbnz	r3, 8008f84 <_raise_r+0x32>
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 f831 	bl	8008fd8 <_getpid_r>
 8008f76:	4622      	mov	r2, r4
 8008f78:	4601      	mov	r1, r0
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f80:	f000 b818 	b.w	8008fb4 <_kill_r>
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d00a      	beq.n	8008f9e <_raise_r+0x4c>
 8008f88:	1c59      	adds	r1, r3, #1
 8008f8a:	d103      	bne.n	8008f94 <_raise_r+0x42>
 8008f8c:	2316      	movs	r3, #22
 8008f8e:	6003      	str	r3, [r0, #0]
 8008f90:	2001      	movs	r0, #1
 8008f92:	e7e7      	b.n	8008f64 <_raise_r+0x12>
 8008f94:	2100      	movs	r1, #0
 8008f96:	4620      	mov	r0, r4
 8008f98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f9c:	4798      	blx	r3
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	e7e0      	b.n	8008f64 <_raise_r+0x12>
	...

08008fa4 <raise>:
 8008fa4:	4b02      	ldr	r3, [pc, #8]	@ (8008fb0 <raise+0xc>)
 8008fa6:	4601      	mov	r1, r0
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	f7ff bfd2 	b.w	8008f52 <_raise_r>
 8008fae:	bf00      	nop
 8008fb0:	2000003c 	.word	0x2000003c

08008fb4 <_kill_r>:
 8008fb4:	b538      	push	{r3, r4, r5, lr}
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	4d06      	ldr	r5, [pc, #24]	@ (8008fd4 <_kill_r+0x20>)
 8008fba:	4604      	mov	r4, r0
 8008fbc:	4608      	mov	r0, r1
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	602b      	str	r3, [r5, #0]
 8008fc2:	f7f8 fc1c 	bl	80017fe <_kill>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	d102      	bne.n	8008fd0 <_kill_r+0x1c>
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	b103      	cbz	r3, 8008fd0 <_kill_r+0x1c>
 8008fce:	6023      	str	r3, [r4, #0]
 8008fd0:	bd38      	pop	{r3, r4, r5, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20004284 	.word	0x20004284

08008fd8 <_getpid_r>:
 8008fd8:	f7f8 bc0a 	b.w	80017f0 <_getpid>

08008fdc <log10f>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4604      	mov	r4, r0
 8008fe0:	f000 f904 	bl	80091ec <__ieee754_log10f>
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4605      	mov	r5, r0
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f7f8 f891 	bl	8001110 <__aeabi_fcmpun>
 8008fee:	b970      	cbnz	r0, 800900e <log10f+0x32>
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f7f8 f86e 	bl	80010d4 <__aeabi_fcmple>
 8008ff8:	b148      	cbz	r0, 800900e <log10f+0x32>
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f7f8 f855 	bl	80010ac <__aeabi_fcmpeq>
 8009002:	b130      	cbz	r0, 8009012 <log10f+0x36>
 8009004:	f7fc fd04 	bl	8005a10 <__errno>
 8009008:	2322      	movs	r3, #34	@ 0x22
 800900a:	4d06      	ldr	r5, [pc, #24]	@ (8009024 <log10f+0x48>)
 800900c:	6003      	str	r3, [r0, #0]
 800900e:	4628      	mov	r0, r5
 8009010:	bd38      	pop	{r3, r4, r5, pc}
 8009012:	f7fc fcfd 	bl	8005a10 <__errno>
 8009016:	2321      	movs	r3, #33	@ 0x21
 8009018:	6003      	str	r3, [r0, #0]
 800901a:	4803      	ldr	r0, [pc, #12]	@ (8009028 <log10f+0x4c>)
 800901c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009020:	f7fc bd40 	b.w	8005aa4 <nanf>
 8009024:	ff800000 	.word	0xff800000
 8009028:	0800b19d 	.word	0x0800b19d

0800902c <powf>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	460c      	mov	r4, r1
 8009030:	4606      	mov	r6, r0
 8009032:	f000 f929 	bl	8009288 <__ieee754_powf>
 8009036:	4621      	mov	r1, r4
 8009038:	4605      	mov	r5, r0
 800903a:	4620      	mov	r0, r4
 800903c:	f7f8 f868 	bl	8001110 <__aeabi_fcmpun>
 8009040:	bb68      	cbnz	r0, 800909e <powf+0x72>
 8009042:	2100      	movs	r1, #0
 8009044:	4630      	mov	r0, r6
 8009046:	f7f8 f831 	bl	80010ac <__aeabi_fcmpeq>
 800904a:	b190      	cbz	r0, 8009072 <powf+0x46>
 800904c:	2100      	movs	r1, #0
 800904e:	4620      	mov	r0, r4
 8009050:	f7f8 f82c 	bl	80010ac <__aeabi_fcmpeq>
 8009054:	2800      	cmp	r0, #0
 8009056:	d133      	bne.n	80090c0 <powf+0x94>
 8009058:	4620      	mov	r0, r4
 800905a:	f000 f84e 	bl	80090fa <finitef>
 800905e:	b1f0      	cbz	r0, 800909e <powf+0x72>
 8009060:	2100      	movs	r1, #0
 8009062:	4620      	mov	r0, r4
 8009064:	f7f8 f82c 	bl	80010c0 <__aeabi_fcmplt>
 8009068:	b1c8      	cbz	r0, 800909e <powf+0x72>
 800906a:	f7fc fcd1 	bl	8005a10 <__errno>
 800906e:	2322      	movs	r3, #34	@ 0x22
 8009070:	e014      	b.n	800909c <powf+0x70>
 8009072:	4628      	mov	r0, r5
 8009074:	f000 f841 	bl	80090fa <finitef>
 8009078:	b998      	cbnz	r0, 80090a2 <powf+0x76>
 800907a:	4630      	mov	r0, r6
 800907c:	f000 f83d 	bl	80090fa <finitef>
 8009080:	b178      	cbz	r0, 80090a2 <powf+0x76>
 8009082:	4620      	mov	r0, r4
 8009084:	f000 f839 	bl	80090fa <finitef>
 8009088:	b158      	cbz	r0, 80090a2 <powf+0x76>
 800908a:	4629      	mov	r1, r5
 800908c:	4628      	mov	r0, r5
 800908e:	f7f8 f83f 	bl	8001110 <__aeabi_fcmpun>
 8009092:	2800      	cmp	r0, #0
 8009094:	d0e9      	beq.n	800906a <powf+0x3e>
 8009096:	f7fc fcbb 	bl	8005a10 <__errno>
 800909a:	2321      	movs	r3, #33	@ 0x21
 800909c:	6003      	str	r3, [r0, #0]
 800909e:	4628      	mov	r0, r5
 80090a0:	bd70      	pop	{r4, r5, r6, pc}
 80090a2:	2100      	movs	r1, #0
 80090a4:	4628      	mov	r0, r5
 80090a6:	f7f8 f801 	bl	80010ac <__aeabi_fcmpeq>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d0f7      	beq.n	800909e <powf+0x72>
 80090ae:	4630      	mov	r0, r6
 80090b0:	f000 f823 	bl	80090fa <finitef>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d0f2      	beq.n	800909e <powf+0x72>
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 f81e 	bl	80090fa <finitef>
 80090be:	e7d3      	b.n	8009068 <powf+0x3c>
 80090c0:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 80090c4:	e7eb      	b.n	800909e <powf+0x72>

080090c6 <sqrtf>:
 80090c6:	b538      	push	{r3, r4, r5, lr}
 80090c8:	4605      	mov	r5, r0
 80090ca:	f000 f81f 	bl	800910c <__ieee754_sqrtf>
 80090ce:	4629      	mov	r1, r5
 80090d0:	4604      	mov	r4, r0
 80090d2:	4628      	mov	r0, r5
 80090d4:	f7f8 f81c 	bl	8001110 <__aeabi_fcmpun>
 80090d8:	b968      	cbnz	r0, 80090f6 <sqrtf+0x30>
 80090da:	2100      	movs	r1, #0
 80090dc:	4628      	mov	r0, r5
 80090de:	f7f7 ffef 	bl	80010c0 <__aeabi_fcmplt>
 80090e2:	b140      	cbz	r0, 80090f6 <sqrtf+0x30>
 80090e4:	f7fc fc94 	bl	8005a10 <__errno>
 80090e8:	2321      	movs	r3, #33	@ 0x21
 80090ea:	2100      	movs	r1, #0
 80090ec:	6003      	str	r3, [r0, #0]
 80090ee:	4608      	mov	r0, r1
 80090f0:	f7f7 fefc 	bl	8000eec <__aeabi_fdiv>
 80090f4:	4604      	mov	r4, r0
 80090f6:	4620      	mov	r0, r4
 80090f8:	bd38      	pop	{r3, r4, r5, pc}

080090fa <finitef>:
 80090fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80090fe:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009102:	bfac      	ite	ge
 8009104:	2000      	movge	r0, #0
 8009106:	2001      	movlt	r0, #1
 8009108:	4770      	bx	lr
	...

0800910c <__ieee754_sqrtf>:
 800910c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8009110:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009118:	4603      	mov	r3, r0
 800911a:	4604      	mov	r4, r0
 800911c:	d30a      	bcc.n	8009134 <__ieee754_sqrtf+0x28>
 800911e:	4601      	mov	r1, r0
 8009120:	f7f7 fe30 	bl	8000d84 <__aeabi_fmul>
 8009124:	4601      	mov	r1, r0
 8009126:	4620      	mov	r0, r4
 8009128:	f7f7 fd24 	bl	8000b74 <__addsf3>
 800912c:	4604      	mov	r4, r0
 800912e:	4620      	mov	r0, r4
 8009130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009134:	2a00      	cmp	r2, #0
 8009136:	d0fa      	beq.n	800912e <__ieee754_sqrtf+0x22>
 8009138:	2800      	cmp	r0, #0
 800913a:	da06      	bge.n	800914a <__ieee754_sqrtf+0x3e>
 800913c:	4601      	mov	r1, r0
 800913e:	f7f7 fd17 	bl	8000b70 <__aeabi_fsub>
 8009142:	4601      	mov	r1, r0
 8009144:	f7f7 fed2 	bl	8000eec <__aeabi_fdiv>
 8009148:	e7f0      	b.n	800912c <__ieee754_sqrtf+0x20>
 800914a:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800914e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8009152:	d03e      	beq.n	80091d2 <__ieee754_sqrtf+0xc6>
 8009154:	2400      	movs	r4, #0
 8009156:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800915a:	07ca      	lsls	r2, r1, #31
 800915c:	f04f 0019 	mov.w	r0, #25
 8009160:	4626      	mov	r6, r4
 8009162:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8009166:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800916a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800916e:	bf58      	it	pl
 8009170:	005b      	lslpl	r3, r3, #1
 8009172:	106d      	asrs	r5, r5, #1
 8009174:	005b      	lsls	r3, r3, #1
 8009176:	1872      	adds	r2, r6, r1
 8009178:	429a      	cmp	r2, r3
 800917a:	bfcf      	iteee	gt
 800917c:	461a      	movgt	r2, r3
 800917e:	1856      	addle	r6, r2, r1
 8009180:	1864      	addle	r4, r4, r1
 8009182:	1a9a      	suble	r2, r3, r2
 8009184:	3801      	subs	r0, #1
 8009186:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800918a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800918e:	d1f2      	bne.n	8009176 <__ieee754_sqrtf+0x6a>
 8009190:	b1ba      	cbz	r2, 80091c2 <__ieee754_sqrtf+0xb6>
 8009192:	4e14      	ldr	r6, [pc, #80]	@ (80091e4 <__ieee754_sqrtf+0xd8>)
 8009194:	4f14      	ldr	r7, [pc, #80]	@ (80091e8 <__ieee754_sqrtf+0xdc>)
 8009196:	6830      	ldr	r0, [r6, #0]
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	f7f7 fce9 	bl	8000b70 <__aeabi_fsub>
 800919e:	f8d6 8000 	ldr.w	r8, [r6]
 80091a2:	4601      	mov	r1, r0
 80091a4:	4640      	mov	r0, r8
 80091a6:	f7f7 ff95 	bl	80010d4 <__aeabi_fcmple>
 80091aa:	b150      	cbz	r0, 80091c2 <__ieee754_sqrtf+0xb6>
 80091ac:	6830      	ldr	r0, [r6, #0]
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	f7f7 fce0 	bl	8000b74 <__addsf3>
 80091b4:	6836      	ldr	r6, [r6, #0]
 80091b6:	4601      	mov	r1, r0
 80091b8:	4630      	mov	r0, r6
 80091ba:	f7f7 ff81 	bl	80010c0 <__aeabi_fcmplt>
 80091be:	b168      	cbz	r0, 80091dc <__ieee754_sqrtf+0xd0>
 80091c0:	3402      	adds	r4, #2
 80091c2:	1064      	asrs	r4, r4, #1
 80091c4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 80091c8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80091cc:	e7af      	b.n	800912e <__ieee754_sqrtf+0x22>
 80091ce:	005b      	lsls	r3, r3, #1
 80091d0:	3201      	adds	r2, #1
 80091d2:	0218      	lsls	r0, r3, #8
 80091d4:	d5fb      	bpl.n	80091ce <__ieee754_sqrtf+0xc2>
 80091d6:	3a01      	subs	r2, #1
 80091d8:	1a89      	subs	r1, r1, r2
 80091da:	e7bb      	b.n	8009154 <__ieee754_sqrtf+0x48>
 80091dc:	3401      	adds	r4, #1
 80091de:	f024 0401 	bic.w	r4, r4, #1
 80091e2:	e7ee      	b.n	80091c2 <__ieee754_sqrtf+0xb6>
 80091e4:	200001fc 	.word	0x200001fc
 80091e8:	200001f8 	.word	0x200001f8

080091ec <__ieee754_log10f>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	f030 4300 	bics.w	r3, r0, #2147483648	@ 0x80000000
 80091f2:	4601      	mov	r1, r0
 80091f4:	d105      	bne.n	8009202 <__ieee754_log10f+0x16>
 80091f6:	2100      	movs	r1, #0
 80091f8:	f04f 404c 	mov.w	r0, #3422552064	@ 0xcc000000
 80091fc:	f7f7 fe76 	bl	8000eec <__aeabi_fdiv>
 8009200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009202:	2800      	cmp	r0, #0
 8009204:	4603      	mov	r3, r0
 8009206:	da03      	bge.n	8009210 <__ieee754_log10f+0x24>
 8009208:	f7f7 fcb2 	bl	8000b70 <__aeabi_fsub>
 800920c:	2100      	movs	r1, #0
 800920e:	e7f5      	b.n	80091fc <__ieee754_log10f+0x10>
 8009210:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009214:	db02      	blt.n	800921c <__ieee754_log10f+0x30>
 8009216:	f7f7 fcad 	bl	8000b74 <__addsf3>
 800921a:	e7f1      	b.n	8009200 <__ieee754_log10f+0x14>
 800921c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8009220:	da29      	bge.n	8009276 <__ieee754_log10f+0x8a>
 8009222:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8009226:	f7f7 fdad 	bl	8000d84 <__aeabi_fmul>
 800922a:	f06f 0218 	mvn.w	r2, #24
 800922e:	4603      	mov	r3, r0
 8009230:	15d8      	asrs	r0, r3, #23
 8009232:	387f      	subs	r0, #127	@ 0x7f
 8009234:	4410      	add	r0, r2
 8009236:	0fc7      	lsrs	r7, r0, #31
 8009238:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800923c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8009240:	f7f7 fd4c 	bl	8000cdc <__aeabi_i2f>
 8009244:	490d      	ldr	r1, [pc, #52]	@ (800927c <__ieee754_log10f+0x90>)
 8009246:	4605      	mov	r5, r0
 8009248:	f7f7 fd9c 	bl	8000d84 <__aeabi_fmul>
 800924c:	4606      	mov	r6, r0
 800924e:	f1c7 007f 	rsb	r0, r7, #127	@ 0x7f
 8009252:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8009256:	f000 fbe3 	bl	8009a20 <__ieee754_logf>
 800925a:	4909      	ldr	r1, [pc, #36]	@ (8009280 <__ieee754_log10f+0x94>)
 800925c:	f7f7 fd92 	bl	8000d84 <__aeabi_fmul>
 8009260:	4631      	mov	r1, r6
 8009262:	f7f7 fc87 	bl	8000b74 <__addsf3>
 8009266:	4907      	ldr	r1, [pc, #28]	@ (8009284 <__ieee754_log10f+0x98>)
 8009268:	4604      	mov	r4, r0
 800926a:	4628      	mov	r0, r5
 800926c:	f7f7 fd8a 	bl	8000d84 <__aeabi_fmul>
 8009270:	4601      	mov	r1, r0
 8009272:	4620      	mov	r0, r4
 8009274:	e7cf      	b.n	8009216 <__ieee754_log10f+0x2a>
 8009276:	2200      	movs	r2, #0
 8009278:	e7da      	b.n	8009230 <__ieee754_log10f+0x44>
 800927a:	bf00      	nop
 800927c:	355427db 	.word	0x355427db
 8009280:	3ede5bd9 	.word	0x3ede5bd9
 8009284:	3e9a2080 	.word	0x3e9a2080

08009288 <__ieee754_powf>:
 8009288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928c:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8009290:	4680      	mov	r8, r0
 8009292:	460f      	mov	r7, r1
 8009294:	4606      	mov	r6, r0
 8009296:	460c      	mov	r4, r1
 8009298:	b087      	sub	sp, #28
 800929a:	d10c      	bne.n	80092b6 <__ieee754_powf+0x2e>
 800929c:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 80092a0:	0076      	lsls	r6, r6, #1
 80092a2:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80092a6:	f240 8336 	bls.w	8009916 <__ieee754_powf+0x68e>
 80092aa:	4639      	mov	r1, r7
 80092ac:	4640      	mov	r0, r8
 80092ae:	f7f7 fc61 	bl	8000b74 <__addsf3>
 80092b2:	4601      	mov	r1, r0
 80092b4:	e03e      	b.n	8009334 <__ieee754_powf+0xac>
 80092b6:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 80092ba:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80092be:	d802      	bhi.n	80092c6 <__ieee754_powf+0x3e>
 80092c0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80092c4:	d908      	bls.n	80092d8 <__ieee754_powf+0x50>
 80092c6:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80092ca:	d1ee      	bne.n	80092aa <__ieee754_powf+0x22>
 80092cc:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80092d0:	0064      	lsls	r4, r4, #1
 80092d2:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80092d6:	e7e6      	b.n	80092a6 <__ieee754_powf+0x1e>
 80092d8:	2800      	cmp	r0, #0
 80092da:	da1e      	bge.n	800931a <__ieee754_powf+0x92>
 80092dc:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 80092e0:	d22c      	bcs.n	800933c <__ieee754_powf+0xb4>
 80092e2:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80092e6:	d333      	bcc.n	8009350 <__ieee754_powf+0xc8>
 80092e8:	ea4f 53eb 	mov.w	r3, fp, asr #23
 80092ec:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80092f0:	fa4b f503 	asr.w	r5, fp, r3
 80092f4:	fa05 f303 	lsl.w	r3, r5, r3
 80092f8:	455b      	cmp	r3, fp
 80092fa:	d127      	bne.n	800934c <__ieee754_powf+0xc4>
 80092fc:	f005 0501 	and.w	r5, r5, #1
 8009300:	f1c5 0502 	rsb	r5, r5, #2
 8009304:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8009308:	d123      	bne.n	8009352 <__ieee754_powf+0xca>
 800930a:	2c00      	cmp	r4, #0
 800930c:	4641      	mov	r1, r8
 800930e:	da11      	bge.n	8009334 <__ieee754_powf+0xac>
 8009310:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009314:	f7f7 fdea 	bl	8000eec <__aeabi_fdiv>
 8009318:	e7cb      	b.n	80092b2 <__ieee754_powf+0x2a>
 800931a:	2500      	movs	r5, #0
 800931c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8009320:	d1f0      	bne.n	8009304 <__ieee754_powf+0x7c>
 8009322:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009326:	f000 82f6 	beq.w	8009916 <__ieee754_powf+0x68e>
 800932a:	d909      	bls.n	8009340 <__ieee754_powf+0xb8>
 800932c:	2c00      	cmp	r4, #0
 800932e:	f2c0 82f5 	blt.w	800991c <__ieee754_powf+0x694>
 8009332:	4639      	mov	r1, r7
 8009334:	4608      	mov	r0, r1
 8009336:	b007      	add	sp, #28
 8009338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933c:	2502      	movs	r5, #2
 800933e:	e7ed      	b.n	800931c <__ieee754_powf+0x94>
 8009340:	2c00      	cmp	r4, #0
 8009342:	f280 82eb 	bge.w	800991c <__ieee754_powf+0x694>
 8009346:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800934a:	e7f3      	b.n	8009334 <__ieee754_powf+0xac>
 800934c:	2500      	movs	r5, #0
 800934e:	e7d9      	b.n	8009304 <__ieee754_powf+0x7c>
 8009350:	2500      	movs	r5, #0
 8009352:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8009356:	d104      	bne.n	8009362 <__ieee754_powf+0xda>
 8009358:	4641      	mov	r1, r8
 800935a:	4640      	mov	r0, r8
 800935c:	f7f7 fd12 	bl	8000d84 <__aeabi_fmul>
 8009360:	e7a7      	b.n	80092b2 <__ieee754_powf+0x2a>
 8009362:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8009366:	d107      	bne.n	8009378 <__ieee754_powf+0xf0>
 8009368:	2e00      	cmp	r6, #0
 800936a:	db05      	blt.n	8009378 <__ieee754_powf+0xf0>
 800936c:	4640      	mov	r0, r8
 800936e:	b007      	add	sp, #28
 8009370:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	f7ff beca 	b.w	800910c <__ieee754_sqrtf>
 8009378:	4640      	mov	r0, r8
 800937a:	f000 fae3 	bl	8009944 <fabsf>
 800937e:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8009382:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009386:	46ca      	mov	sl, r9
 8009388:	4601      	mov	r1, r0
 800938a:	d002      	beq.n	8009392 <__ieee754_powf+0x10a>
 800938c:	f1b9 0f00 	cmp.w	r9, #0
 8009390:	d117      	bne.n	80093c2 <__ieee754_powf+0x13a>
 8009392:	2c00      	cmp	r4, #0
 8009394:	da04      	bge.n	80093a0 <__ieee754_powf+0x118>
 8009396:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800939a:	f7f7 fda7 	bl	8000eec <__aeabi_fdiv>
 800939e:	4601      	mov	r1, r0
 80093a0:	2e00      	cmp	r6, #0
 80093a2:	dac7      	bge.n	8009334 <__ieee754_powf+0xac>
 80093a4:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 80093a8:	ea59 0905 	orrs.w	r9, r9, r5
 80093ac:	d104      	bne.n	80093b8 <__ieee754_powf+0x130>
 80093ae:	4608      	mov	r0, r1
 80093b0:	f7f7 fbde 	bl	8000b70 <__aeabi_fsub>
 80093b4:	4601      	mov	r1, r0
 80093b6:	e7ad      	b.n	8009314 <__ieee754_powf+0x8c>
 80093b8:	2d01      	cmp	r5, #1
 80093ba:	d1bb      	bne.n	8009334 <__ieee754_powf+0xac>
 80093bc:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80093c0:	e777      	b.n	80092b2 <__ieee754_powf+0x2a>
 80093c2:	0ff3      	lsrs	r3, r6, #31
 80093c4:	3b01      	subs	r3, #1
 80093c6:	9303      	str	r3, [sp, #12]
 80093c8:	432b      	orrs	r3, r5
 80093ca:	d101      	bne.n	80093d0 <__ieee754_powf+0x148>
 80093cc:	4641      	mov	r1, r8
 80093ce:	e7ee      	b.n	80093ae <__ieee754_powf+0x126>
 80093d0:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 80093d4:	f240 809e 	bls.w	8009514 <__ieee754_powf+0x28c>
 80093d8:	4b47      	ldr	r3, [pc, #284]	@ (80094f8 <__ieee754_powf+0x270>)
 80093da:	4599      	cmp	r9, r3
 80093dc:	d807      	bhi.n	80093ee <__ieee754_powf+0x166>
 80093de:	2c00      	cmp	r4, #0
 80093e0:	da0a      	bge.n	80093f8 <__ieee754_powf+0x170>
 80093e2:	2000      	movs	r0, #0
 80093e4:	b007      	add	sp, #28
 80093e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ea:	f000 bb14 	b.w	8009a16 <__math_oflowf>
 80093ee:	4b43      	ldr	r3, [pc, #268]	@ (80094fc <__ieee754_powf+0x274>)
 80093f0:	4599      	cmp	r9, r3
 80093f2:	d907      	bls.n	8009404 <__ieee754_powf+0x17c>
 80093f4:	2c00      	cmp	r4, #0
 80093f6:	dcf4      	bgt.n	80093e2 <__ieee754_powf+0x15a>
 80093f8:	2000      	movs	r0, #0
 80093fa:	b007      	add	sp, #28
 80093fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009400:	f000 bb05 	b.w	8009a0e <__math_uflowf>
 8009404:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009408:	f7f7 fbb2 	bl	8000b70 <__aeabi_fsub>
 800940c:	493c      	ldr	r1, [pc, #240]	@ (8009500 <__ieee754_powf+0x278>)
 800940e:	4606      	mov	r6, r0
 8009410:	f7f7 fcb8 	bl	8000d84 <__aeabi_fmul>
 8009414:	493b      	ldr	r1, [pc, #236]	@ (8009504 <__ieee754_powf+0x27c>)
 8009416:	4680      	mov	r8, r0
 8009418:	4630      	mov	r0, r6
 800941a:	f7f7 fcb3 	bl	8000d84 <__aeabi_fmul>
 800941e:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8009422:	4681      	mov	r9, r0
 8009424:	4630      	mov	r0, r6
 8009426:	f7f7 fcad 	bl	8000d84 <__aeabi_fmul>
 800942a:	4601      	mov	r1, r0
 800942c:	4836      	ldr	r0, [pc, #216]	@ (8009508 <__ieee754_powf+0x280>)
 800942e:	f7f7 fb9f 	bl	8000b70 <__aeabi_fsub>
 8009432:	4631      	mov	r1, r6
 8009434:	f7f7 fca6 	bl	8000d84 <__aeabi_fmul>
 8009438:	4601      	mov	r1, r0
 800943a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800943e:	f7f7 fb97 	bl	8000b70 <__aeabi_fsub>
 8009442:	4631      	mov	r1, r6
 8009444:	4682      	mov	sl, r0
 8009446:	4630      	mov	r0, r6
 8009448:	f7f7 fc9c 	bl	8000d84 <__aeabi_fmul>
 800944c:	4601      	mov	r1, r0
 800944e:	4650      	mov	r0, sl
 8009450:	f7f7 fc98 	bl	8000d84 <__aeabi_fmul>
 8009454:	492d      	ldr	r1, [pc, #180]	@ (800950c <__ieee754_powf+0x284>)
 8009456:	f7f7 fc95 	bl	8000d84 <__aeabi_fmul>
 800945a:	4601      	mov	r1, r0
 800945c:	4648      	mov	r0, r9
 800945e:	f7f7 fb87 	bl	8000b70 <__aeabi_fsub>
 8009462:	4601      	mov	r1, r0
 8009464:	4606      	mov	r6, r0
 8009466:	4640      	mov	r0, r8
 8009468:	f7f7 fb84 	bl	8000b74 <__addsf3>
 800946c:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8009470:	f02b 0b0f 	bic.w	fp, fp, #15
 8009474:	4641      	mov	r1, r8
 8009476:	4658      	mov	r0, fp
 8009478:	f7f7 fb7a 	bl	8000b70 <__aeabi_fsub>
 800947c:	4601      	mov	r1, r0
 800947e:	4630      	mov	r0, r6
 8009480:	f7f7 fb76 	bl	8000b70 <__aeabi_fsub>
 8009484:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8009488:	9b03      	ldr	r3, [sp, #12]
 800948a:	3d01      	subs	r5, #1
 800948c:	f024 040f 	bic.w	r4, r4, #15
 8009490:	431d      	orrs	r5, r3
 8009492:	4606      	mov	r6, r0
 8009494:	4621      	mov	r1, r4
 8009496:	4638      	mov	r0, r7
 8009498:	bf14      	ite	ne
 800949a:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800949e:	4d1c      	ldreq	r5, [pc, #112]	@ (8009510 <__ieee754_powf+0x288>)
 80094a0:	f7f7 fb66 	bl	8000b70 <__aeabi_fsub>
 80094a4:	4659      	mov	r1, fp
 80094a6:	f7f7 fc6d 	bl	8000d84 <__aeabi_fmul>
 80094aa:	4639      	mov	r1, r7
 80094ac:	4680      	mov	r8, r0
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7f7 fc68 	bl	8000d84 <__aeabi_fmul>
 80094b4:	4601      	mov	r1, r0
 80094b6:	4640      	mov	r0, r8
 80094b8:	f7f7 fb5c 	bl	8000b74 <__addsf3>
 80094bc:	4621      	mov	r1, r4
 80094be:	4606      	mov	r6, r0
 80094c0:	4658      	mov	r0, fp
 80094c2:	f7f7 fc5f 	bl	8000d84 <__aeabi_fmul>
 80094c6:	4601      	mov	r1, r0
 80094c8:	4607      	mov	r7, r0
 80094ca:	4630      	mov	r0, r6
 80094cc:	f7f7 fb52 	bl	8000b74 <__addsf3>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	4604      	mov	r4, r0
 80094d4:	4680      	mov	r8, r0
 80094d6:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80094da:	f340 8141 	ble.w	8009760 <__ieee754_powf+0x4d8>
 80094de:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80094e2:	f240 812a 	bls.w	800973a <__ieee754_powf+0x4b2>
 80094e6:	2100      	movs	r1, #0
 80094e8:	4628      	mov	r0, r5
 80094ea:	f7f7 fde9 	bl	80010c0 <__aeabi_fcmplt>
 80094ee:	3800      	subs	r0, #0
 80094f0:	bf18      	it	ne
 80094f2:	2001      	movne	r0, #1
 80094f4:	e776      	b.n	80093e4 <__ieee754_powf+0x15c>
 80094f6:	bf00      	nop
 80094f8:	3f7ffff3 	.word	0x3f7ffff3
 80094fc:	3f800007 	.word	0x3f800007
 8009500:	3fb8aa00 	.word	0x3fb8aa00
 8009504:	36eca570 	.word	0x36eca570
 8009508:	3eaaaaab 	.word	0x3eaaaaab
 800950c:	3fb8aa3b 	.word	0x3fb8aa3b
 8009510:	bf800000 	.word	0xbf800000
 8009514:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009518:	f040 810b 	bne.w	8009732 <__ieee754_powf+0x4aa>
 800951c:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8009520:	f7f7 fc30 	bl	8000d84 <__aeabi_fmul>
 8009524:	f06f 0217 	mvn.w	r2, #23
 8009528:	4682      	mov	sl, r0
 800952a:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800952e:	3b7f      	subs	r3, #127	@ 0x7f
 8009530:	441a      	add	r2, r3
 8009532:	4b96      	ldr	r3, [pc, #600]	@ (800978c <__ieee754_powf+0x504>)
 8009534:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8009538:	459a      	cmp	sl, r3
 800953a:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800953e:	dd06      	ble.n	800954e <__ieee754_powf+0x2c6>
 8009540:	4b93      	ldr	r3, [pc, #588]	@ (8009790 <__ieee754_powf+0x508>)
 8009542:	459a      	cmp	sl, r3
 8009544:	f340 80f7 	ble.w	8009736 <__ieee754_powf+0x4ae>
 8009548:	3201      	adds	r2, #1
 800954a:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800954e:	2300      	movs	r3, #0
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	9205      	str	r2, [sp, #20]
 8009554:	4b8f      	ldr	r3, [pc, #572]	@ (8009794 <__ieee754_powf+0x50c>)
 8009556:	9a01      	ldr	r2, [sp, #4]
 8009558:	4630      	mov	r0, r6
 800955a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800955e:	46b2      	mov	sl, r6
 8009560:	4659      	mov	r1, fp
 8009562:	f7f7 fb05 	bl	8000b70 <__aeabi_fsub>
 8009566:	4631      	mov	r1, r6
 8009568:	4681      	mov	r9, r0
 800956a:	4658      	mov	r0, fp
 800956c:	f7f7 fb02 	bl	8000b74 <__addsf3>
 8009570:	4601      	mov	r1, r0
 8009572:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009576:	f7f7 fcb9 	bl	8000eec <__aeabi_fdiv>
 800957a:	4601      	mov	r1, r0
 800957c:	9004      	str	r0, [sp, #16]
 800957e:	4648      	mov	r0, r9
 8009580:	f7f7 fc00 	bl	8000d84 <__aeabi_fmul>
 8009584:	9002      	str	r0, [sp, #8]
 8009586:	9b02      	ldr	r3, [sp, #8]
 8009588:	1076      	asrs	r6, r6, #1
 800958a:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 800958e:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8009592:	9b01      	ldr	r3, [sp, #4]
 8009594:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8009598:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 800959c:	f028 080f 	bic.w	r8, r8, #15
 80095a0:	4631      	mov	r1, r6
 80095a2:	4640      	mov	r0, r8
 80095a4:	f7f7 fbee 	bl	8000d84 <__aeabi_fmul>
 80095a8:	4601      	mov	r1, r0
 80095aa:	4648      	mov	r0, r9
 80095ac:	f7f7 fae0 	bl	8000b70 <__aeabi_fsub>
 80095b0:	4659      	mov	r1, fp
 80095b2:	4681      	mov	r9, r0
 80095b4:	4630      	mov	r0, r6
 80095b6:	f7f7 fadb 	bl	8000b70 <__aeabi_fsub>
 80095ba:	4601      	mov	r1, r0
 80095bc:	4650      	mov	r0, sl
 80095be:	f7f7 fad7 	bl	8000b70 <__aeabi_fsub>
 80095c2:	4641      	mov	r1, r8
 80095c4:	f7f7 fbde 	bl	8000d84 <__aeabi_fmul>
 80095c8:	4601      	mov	r1, r0
 80095ca:	4648      	mov	r0, r9
 80095cc:	f7f7 fad0 	bl	8000b70 <__aeabi_fsub>
 80095d0:	9b04      	ldr	r3, [sp, #16]
 80095d2:	4619      	mov	r1, r3
 80095d4:	f7f7 fbd6 	bl	8000d84 <__aeabi_fmul>
 80095d8:	9902      	ldr	r1, [sp, #8]
 80095da:	4683      	mov	fp, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	f7f7 fbd1 	bl	8000d84 <__aeabi_fmul>
 80095e2:	4606      	mov	r6, r0
 80095e4:	496c      	ldr	r1, [pc, #432]	@ (8009798 <__ieee754_powf+0x510>)
 80095e6:	f7f7 fbcd 	bl	8000d84 <__aeabi_fmul>
 80095ea:	496c      	ldr	r1, [pc, #432]	@ (800979c <__ieee754_powf+0x514>)
 80095ec:	f7f7 fac2 	bl	8000b74 <__addsf3>
 80095f0:	4631      	mov	r1, r6
 80095f2:	f7f7 fbc7 	bl	8000d84 <__aeabi_fmul>
 80095f6:	496a      	ldr	r1, [pc, #424]	@ (80097a0 <__ieee754_powf+0x518>)
 80095f8:	f7f7 fabc 	bl	8000b74 <__addsf3>
 80095fc:	4631      	mov	r1, r6
 80095fe:	f7f7 fbc1 	bl	8000d84 <__aeabi_fmul>
 8009602:	4968      	ldr	r1, [pc, #416]	@ (80097a4 <__ieee754_powf+0x51c>)
 8009604:	f7f7 fab6 	bl	8000b74 <__addsf3>
 8009608:	4631      	mov	r1, r6
 800960a:	f7f7 fbbb 	bl	8000d84 <__aeabi_fmul>
 800960e:	4966      	ldr	r1, [pc, #408]	@ (80097a8 <__ieee754_powf+0x520>)
 8009610:	f7f7 fab0 	bl	8000b74 <__addsf3>
 8009614:	4631      	mov	r1, r6
 8009616:	f7f7 fbb5 	bl	8000d84 <__aeabi_fmul>
 800961a:	4964      	ldr	r1, [pc, #400]	@ (80097ac <__ieee754_powf+0x524>)
 800961c:	f7f7 faaa 	bl	8000b74 <__addsf3>
 8009620:	4631      	mov	r1, r6
 8009622:	4681      	mov	r9, r0
 8009624:	4630      	mov	r0, r6
 8009626:	f7f7 fbad 	bl	8000d84 <__aeabi_fmul>
 800962a:	4601      	mov	r1, r0
 800962c:	4648      	mov	r0, r9
 800962e:	f7f7 fba9 	bl	8000d84 <__aeabi_fmul>
 8009632:	4606      	mov	r6, r0
 8009634:	4641      	mov	r1, r8
 8009636:	9802      	ldr	r0, [sp, #8]
 8009638:	f7f7 fa9c 	bl	8000b74 <__addsf3>
 800963c:	4659      	mov	r1, fp
 800963e:	f7f7 fba1 	bl	8000d84 <__aeabi_fmul>
 8009642:	4631      	mov	r1, r6
 8009644:	f7f7 fa96 	bl	8000b74 <__addsf3>
 8009648:	4641      	mov	r1, r8
 800964a:	4681      	mov	r9, r0
 800964c:	4640      	mov	r0, r8
 800964e:	f7f7 fb99 	bl	8000d84 <__aeabi_fmul>
 8009652:	4957      	ldr	r1, [pc, #348]	@ (80097b0 <__ieee754_powf+0x528>)
 8009654:	4682      	mov	sl, r0
 8009656:	f7f7 fa8d 	bl	8000b74 <__addsf3>
 800965a:	4649      	mov	r1, r9
 800965c:	f7f7 fa8a 	bl	8000b74 <__addsf3>
 8009660:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8009664:	f026 060f 	bic.w	r6, r6, #15
 8009668:	4631      	mov	r1, r6
 800966a:	4640      	mov	r0, r8
 800966c:	f7f7 fb8a 	bl	8000d84 <__aeabi_fmul>
 8009670:	494f      	ldr	r1, [pc, #316]	@ (80097b0 <__ieee754_powf+0x528>)
 8009672:	4680      	mov	r8, r0
 8009674:	4630      	mov	r0, r6
 8009676:	f7f7 fa7b 	bl	8000b70 <__aeabi_fsub>
 800967a:	4651      	mov	r1, sl
 800967c:	f7f7 fa78 	bl	8000b70 <__aeabi_fsub>
 8009680:	4601      	mov	r1, r0
 8009682:	4648      	mov	r0, r9
 8009684:	f7f7 fa74 	bl	8000b70 <__aeabi_fsub>
 8009688:	9902      	ldr	r1, [sp, #8]
 800968a:	f7f7 fb7b 	bl	8000d84 <__aeabi_fmul>
 800968e:	4631      	mov	r1, r6
 8009690:	4681      	mov	r9, r0
 8009692:	4658      	mov	r0, fp
 8009694:	f7f7 fb76 	bl	8000d84 <__aeabi_fmul>
 8009698:	4601      	mov	r1, r0
 800969a:	4648      	mov	r0, r9
 800969c:	f7f7 fa6a 	bl	8000b74 <__addsf3>
 80096a0:	4682      	mov	sl, r0
 80096a2:	4601      	mov	r1, r0
 80096a4:	4640      	mov	r0, r8
 80096a6:	f7f7 fa65 	bl	8000b74 <__addsf3>
 80096aa:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80096ae:	f026 060f 	bic.w	r6, r6, #15
 80096b2:	4630      	mov	r0, r6
 80096b4:	493f      	ldr	r1, [pc, #252]	@ (80097b4 <__ieee754_powf+0x52c>)
 80096b6:	f7f7 fb65 	bl	8000d84 <__aeabi_fmul>
 80096ba:	4641      	mov	r1, r8
 80096bc:	4681      	mov	r9, r0
 80096be:	4630      	mov	r0, r6
 80096c0:	f7f7 fa56 	bl	8000b70 <__aeabi_fsub>
 80096c4:	4601      	mov	r1, r0
 80096c6:	4650      	mov	r0, sl
 80096c8:	f7f7 fa52 	bl	8000b70 <__aeabi_fsub>
 80096cc:	493a      	ldr	r1, [pc, #232]	@ (80097b8 <__ieee754_powf+0x530>)
 80096ce:	f7f7 fb59 	bl	8000d84 <__aeabi_fmul>
 80096d2:	493a      	ldr	r1, [pc, #232]	@ (80097bc <__ieee754_powf+0x534>)
 80096d4:	4680      	mov	r8, r0
 80096d6:	4630      	mov	r0, r6
 80096d8:	f7f7 fb54 	bl	8000d84 <__aeabi_fmul>
 80096dc:	4601      	mov	r1, r0
 80096de:	4640      	mov	r0, r8
 80096e0:	f7f7 fa48 	bl	8000b74 <__addsf3>
 80096e4:	4b36      	ldr	r3, [pc, #216]	@ (80097c0 <__ieee754_powf+0x538>)
 80096e6:	9a01      	ldr	r2, [sp, #4]
 80096e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096ec:	f7f7 fa42 	bl	8000b74 <__addsf3>
 80096f0:	9a05      	ldr	r2, [sp, #20]
 80096f2:	4606      	mov	r6, r0
 80096f4:	4610      	mov	r0, r2
 80096f6:	f7f7 faf1 	bl	8000cdc <__aeabi_i2f>
 80096fa:	4680      	mov	r8, r0
 80096fc:	4b31      	ldr	r3, [pc, #196]	@ (80097c4 <__ieee754_powf+0x53c>)
 80096fe:	9a01      	ldr	r2, [sp, #4]
 8009700:	4631      	mov	r1, r6
 8009702:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8009706:	4648      	mov	r0, r9
 8009708:	f7f7 fa34 	bl	8000b74 <__addsf3>
 800970c:	4651      	mov	r1, sl
 800970e:	f7f7 fa31 	bl	8000b74 <__addsf3>
 8009712:	4641      	mov	r1, r8
 8009714:	f7f7 fa2e 	bl	8000b74 <__addsf3>
 8009718:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800971c:	f02b 0b0f 	bic.w	fp, fp, #15
 8009720:	4641      	mov	r1, r8
 8009722:	4658      	mov	r0, fp
 8009724:	f7f7 fa24 	bl	8000b70 <__aeabi_fsub>
 8009728:	4651      	mov	r1, sl
 800972a:	f7f7 fa21 	bl	8000b70 <__aeabi_fsub>
 800972e:	4649      	mov	r1, r9
 8009730:	e6a2      	b.n	8009478 <__ieee754_powf+0x1f0>
 8009732:	2200      	movs	r2, #0
 8009734:	e6f9      	b.n	800952a <__ieee754_powf+0x2a2>
 8009736:	2301      	movs	r3, #1
 8009738:	e70a      	b.n	8009550 <__ieee754_powf+0x2c8>
 800973a:	d149      	bne.n	80097d0 <__ieee754_powf+0x548>
 800973c:	4922      	ldr	r1, [pc, #136]	@ (80097c8 <__ieee754_powf+0x540>)
 800973e:	4630      	mov	r0, r6
 8009740:	f7f7 fa18 	bl	8000b74 <__addsf3>
 8009744:	4639      	mov	r1, r7
 8009746:	4681      	mov	r9, r0
 8009748:	4620      	mov	r0, r4
 800974a:	f7f7 fa11 	bl	8000b70 <__aeabi_fsub>
 800974e:	4601      	mov	r1, r0
 8009750:	4648      	mov	r0, r9
 8009752:	f7f7 fcd3 	bl	80010fc <__aeabi_fcmpgt>
 8009756:	2800      	cmp	r0, #0
 8009758:	f47f aec5 	bne.w	80094e6 <__ieee754_powf+0x25e>
 800975c:	2386      	movs	r3, #134	@ 0x86
 800975e:	e03c      	b.n	80097da <__ieee754_powf+0x552>
 8009760:	4a1a      	ldr	r2, [pc, #104]	@ (80097cc <__ieee754_powf+0x544>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d907      	bls.n	8009776 <__ieee754_powf+0x4ee>
 8009766:	2100      	movs	r1, #0
 8009768:	4628      	mov	r0, r5
 800976a:	f7f7 fca9 	bl	80010c0 <__aeabi_fcmplt>
 800976e:	3800      	subs	r0, #0
 8009770:	bf18      	it	ne
 8009772:	2001      	movne	r0, #1
 8009774:	e641      	b.n	80093fa <__ieee754_powf+0x172>
 8009776:	d12b      	bne.n	80097d0 <__ieee754_powf+0x548>
 8009778:	4639      	mov	r1, r7
 800977a:	f7f7 f9f9 	bl	8000b70 <__aeabi_fsub>
 800977e:	4631      	mov	r1, r6
 8009780:	f7f7 fcb2 	bl	80010e8 <__aeabi_fcmpge>
 8009784:	2800      	cmp	r0, #0
 8009786:	d0e9      	beq.n	800975c <__ieee754_powf+0x4d4>
 8009788:	e7ed      	b.n	8009766 <__ieee754_powf+0x4de>
 800978a:	bf00      	nop
 800978c:	001cc471 	.word	0x001cc471
 8009790:	005db3d6 	.word	0x005db3d6
 8009794:	0800b210 	.word	0x0800b210
 8009798:	3e53f142 	.word	0x3e53f142
 800979c:	3e6c3255 	.word	0x3e6c3255
 80097a0:	3e8ba305 	.word	0x3e8ba305
 80097a4:	3eaaaaab 	.word	0x3eaaaaab
 80097a8:	3edb6db7 	.word	0x3edb6db7
 80097ac:	3f19999a 	.word	0x3f19999a
 80097b0:	40400000 	.word	0x40400000
 80097b4:	3f763800 	.word	0x3f763800
 80097b8:	3f76384f 	.word	0x3f76384f
 80097bc:	369dc3a0 	.word	0x369dc3a0
 80097c0:	0800b200 	.word	0x0800b200
 80097c4:	0800b208 	.word	0x0800b208
 80097c8:	3338aa3c 	.word	0x3338aa3c
 80097cc:	43160000 	.word	0x43160000
 80097d0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80097d4:	f240 809b 	bls.w	800990e <__ieee754_powf+0x686>
 80097d8:	15db      	asrs	r3, r3, #23
 80097da:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 80097de:	3b7e      	subs	r3, #126	@ 0x7e
 80097e0:	411c      	asrs	r4, r3
 80097e2:	4444      	add	r4, r8
 80097e4:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 80097e8:	494d      	ldr	r1, [pc, #308]	@ (8009920 <__ieee754_powf+0x698>)
 80097ea:	3b7f      	subs	r3, #127	@ 0x7f
 80097ec:	4119      	asrs	r1, r3
 80097ee:	4021      	ands	r1, r4
 80097f0:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80097f4:	f1c3 0317 	rsb	r3, r3, #23
 80097f8:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 80097fc:	4638      	mov	r0, r7
 80097fe:	411c      	asrs	r4, r3
 8009800:	f1b8 0f00 	cmp.w	r8, #0
 8009804:	bfb8      	it	lt
 8009806:	4264      	neglt	r4, r4
 8009808:	f7f7 f9b2 	bl	8000b70 <__aeabi_fsub>
 800980c:	4607      	mov	r7, r0
 800980e:	4631      	mov	r1, r6
 8009810:	4638      	mov	r0, r7
 8009812:	f7f7 f9af 	bl	8000b74 <__addsf3>
 8009816:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800981a:	f028 080f 	bic.w	r8, r8, #15
 800981e:	4640      	mov	r0, r8
 8009820:	4940      	ldr	r1, [pc, #256]	@ (8009924 <__ieee754_powf+0x69c>)
 8009822:	f7f7 faaf 	bl	8000d84 <__aeabi_fmul>
 8009826:	4639      	mov	r1, r7
 8009828:	4681      	mov	r9, r0
 800982a:	4640      	mov	r0, r8
 800982c:	f7f7 f9a0 	bl	8000b70 <__aeabi_fsub>
 8009830:	4601      	mov	r1, r0
 8009832:	4630      	mov	r0, r6
 8009834:	f7f7 f99c 	bl	8000b70 <__aeabi_fsub>
 8009838:	493b      	ldr	r1, [pc, #236]	@ (8009928 <__ieee754_powf+0x6a0>)
 800983a:	f7f7 faa3 	bl	8000d84 <__aeabi_fmul>
 800983e:	493b      	ldr	r1, [pc, #236]	@ (800992c <__ieee754_powf+0x6a4>)
 8009840:	4606      	mov	r6, r0
 8009842:	4640      	mov	r0, r8
 8009844:	f7f7 fa9e 	bl	8000d84 <__aeabi_fmul>
 8009848:	4601      	mov	r1, r0
 800984a:	4630      	mov	r0, r6
 800984c:	f7f7 f992 	bl	8000b74 <__addsf3>
 8009850:	4607      	mov	r7, r0
 8009852:	4601      	mov	r1, r0
 8009854:	4648      	mov	r0, r9
 8009856:	f7f7 f98d 	bl	8000b74 <__addsf3>
 800985a:	4649      	mov	r1, r9
 800985c:	4606      	mov	r6, r0
 800985e:	f7f7 f987 	bl	8000b70 <__aeabi_fsub>
 8009862:	4601      	mov	r1, r0
 8009864:	4638      	mov	r0, r7
 8009866:	f7f7 f983 	bl	8000b70 <__aeabi_fsub>
 800986a:	4631      	mov	r1, r6
 800986c:	4680      	mov	r8, r0
 800986e:	4630      	mov	r0, r6
 8009870:	f7f7 fa88 	bl	8000d84 <__aeabi_fmul>
 8009874:	4607      	mov	r7, r0
 8009876:	492e      	ldr	r1, [pc, #184]	@ (8009930 <__ieee754_powf+0x6a8>)
 8009878:	f7f7 fa84 	bl	8000d84 <__aeabi_fmul>
 800987c:	492d      	ldr	r1, [pc, #180]	@ (8009934 <__ieee754_powf+0x6ac>)
 800987e:	f7f7 f977 	bl	8000b70 <__aeabi_fsub>
 8009882:	4639      	mov	r1, r7
 8009884:	f7f7 fa7e 	bl	8000d84 <__aeabi_fmul>
 8009888:	492b      	ldr	r1, [pc, #172]	@ (8009938 <__ieee754_powf+0x6b0>)
 800988a:	f7f7 f973 	bl	8000b74 <__addsf3>
 800988e:	4639      	mov	r1, r7
 8009890:	f7f7 fa78 	bl	8000d84 <__aeabi_fmul>
 8009894:	4929      	ldr	r1, [pc, #164]	@ (800993c <__ieee754_powf+0x6b4>)
 8009896:	f7f7 f96b 	bl	8000b70 <__aeabi_fsub>
 800989a:	4639      	mov	r1, r7
 800989c:	f7f7 fa72 	bl	8000d84 <__aeabi_fmul>
 80098a0:	4927      	ldr	r1, [pc, #156]	@ (8009940 <__ieee754_powf+0x6b8>)
 80098a2:	f7f7 f967 	bl	8000b74 <__addsf3>
 80098a6:	4639      	mov	r1, r7
 80098a8:	f7f7 fa6c 	bl	8000d84 <__aeabi_fmul>
 80098ac:	4601      	mov	r1, r0
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7f7 f95e 	bl	8000b70 <__aeabi_fsub>
 80098b4:	4607      	mov	r7, r0
 80098b6:	4601      	mov	r1, r0
 80098b8:	4630      	mov	r0, r6
 80098ba:	f7f7 fa63 	bl	8000d84 <__aeabi_fmul>
 80098be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80098c2:	4681      	mov	r9, r0
 80098c4:	4638      	mov	r0, r7
 80098c6:	f7f7 f953 	bl	8000b70 <__aeabi_fsub>
 80098ca:	4601      	mov	r1, r0
 80098cc:	4648      	mov	r0, r9
 80098ce:	f7f7 fb0d 	bl	8000eec <__aeabi_fdiv>
 80098d2:	4641      	mov	r1, r8
 80098d4:	4607      	mov	r7, r0
 80098d6:	4630      	mov	r0, r6
 80098d8:	f7f7 fa54 	bl	8000d84 <__aeabi_fmul>
 80098dc:	4641      	mov	r1, r8
 80098de:	f7f7 f949 	bl	8000b74 <__addsf3>
 80098e2:	4601      	mov	r1, r0
 80098e4:	4638      	mov	r0, r7
 80098e6:	f7f7 f943 	bl	8000b70 <__aeabi_fsub>
 80098ea:	4631      	mov	r1, r6
 80098ec:	f7f7 f940 	bl	8000b70 <__aeabi_fsub>
 80098f0:	4601      	mov	r1, r0
 80098f2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80098f6:	f7f7 f93b 	bl	8000b70 <__aeabi_fsub>
 80098fa:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 80098fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009902:	da06      	bge.n	8009912 <__ieee754_powf+0x68a>
 8009904:	4621      	mov	r1, r4
 8009906:	f000 f821 	bl	800994c <scalbnf>
 800990a:	4629      	mov	r1, r5
 800990c:	e526      	b.n	800935c <__ieee754_powf+0xd4>
 800990e:	2400      	movs	r4, #0
 8009910:	e77d      	b.n	800980e <__ieee754_powf+0x586>
 8009912:	4618      	mov	r0, r3
 8009914:	e7f9      	b.n	800990a <__ieee754_powf+0x682>
 8009916:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800991a:	e50b      	b.n	8009334 <__ieee754_powf+0xac>
 800991c:	2100      	movs	r1, #0
 800991e:	e509      	b.n	8009334 <__ieee754_powf+0xac>
 8009920:	ff800000 	.word	0xff800000
 8009924:	3f317200 	.word	0x3f317200
 8009928:	3f317218 	.word	0x3f317218
 800992c:	35bfbe8c 	.word	0x35bfbe8c
 8009930:	3331bb4c 	.word	0x3331bb4c
 8009934:	35ddea0e 	.word	0x35ddea0e
 8009938:	388ab355 	.word	0x388ab355
 800993c:	3b360b61 	.word	0x3b360b61
 8009940:	3e2aaaab 	.word	0x3e2aaaab

08009944 <fabsf>:
 8009944:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009948:	4770      	bx	lr
	...

0800994c <scalbnf>:
 800994c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4603      	mov	r3, r0
 8009954:	460d      	mov	r5, r1
 8009956:	4604      	mov	r4, r0
 8009958:	d02e      	beq.n	80099b8 <scalbnf+0x6c>
 800995a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800995e:	d304      	bcc.n	800996a <scalbnf+0x1e>
 8009960:	4601      	mov	r1, r0
 8009962:	f7f7 f907 	bl	8000b74 <__addsf3>
 8009966:	4603      	mov	r3, r0
 8009968:	e026      	b.n	80099b8 <scalbnf+0x6c>
 800996a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800996e:	d118      	bne.n	80099a2 <scalbnf+0x56>
 8009970:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8009974:	f7f7 fa06 	bl	8000d84 <__aeabi_fmul>
 8009978:	4a17      	ldr	r2, [pc, #92]	@ (80099d8 <scalbnf+0x8c>)
 800997a:	4603      	mov	r3, r0
 800997c:	4295      	cmp	r5, r2
 800997e:	db0c      	blt.n	800999a <scalbnf+0x4e>
 8009980:	4604      	mov	r4, r0
 8009982:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009986:	3a19      	subs	r2, #25
 8009988:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800998c:	428d      	cmp	r5, r1
 800998e:	dd0a      	ble.n	80099a6 <scalbnf+0x5a>
 8009990:	4912      	ldr	r1, [pc, #72]	@ (80099dc <scalbnf+0x90>)
 8009992:	4618      	mov	r0, r3
 8009994:	f361 001e 	bfi	r0, r1, #0, #31
 8009998:	e000      	b.n	800999c <scalbnf+0x50>
 800999a:	4911      	ldr	r1, [pc, #68]	@ (80099e0 <scalbnf+0x94>)
 800999c:	f7f7 f9f2 	bl	8000d84 <__aeabi_fmul>
 80099a0:	e7e1      	b.n	8009966 <scalbnf+0x1a>
 80099a2:	0dd2      	lsrs	r2, r2, #23
 80099a4:	e7f0      	b.n	8009988 <scalbnf+0x3c>
 80099a6:	1951      	adds	r1, r2, r5
 80099a8:	29fe      	cmp	r1, #254	@ 0xfe
 80099aa:	dcf1      	bgt.n	8009990 <scalbnf+0x44>
 80099ac:	2900      	cmp	r1, #0
 80099ae:	dd05      	ble.n	80099bc <scalbnf+0x70>
 80099b0:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80099b4:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 80099b8:	4618      	mov	r0, r3
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	f111 0f16 	cmn.w	r1, #22
 80099c0:	da01      	bge.n	80099c6 <scalbnf+0x7a>
 80099c2:	4907      	ldr	r1, [pc, #28]	@ (80099e0 <scalbnf+0x94>)
 80099c4:	e7e5      	b.n	8009992 <scalbnf+0x46>
 80099c6:	f101 0019 	add.w	r0, r1, #25
 80099ca:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80099ce:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 80099d2:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 80099d6:	e7e1      	b.n	800999c <scalbnf+0x50>
 80099d8:	ffff3cb0 	.word	0xffff3cb0
 80099dc:	7149f2ca 	.word	0x7149f2ca
 80099e0:	0da24260 	.word	0x0da24260

080099e4 <with_errnof>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4604      	mov	r4, r0
 80099e8:	460d      	mov	r5, r1
 80099ea:	f7fc f811 	bl	8005a10 <__errno>
 80099ee:	6005      	str	r5, [r0, #0]
 80099f0:	4620      	mov	r0, r4
 80099f2:	bd38      	pop	{r3, r4, r5, pc}

080099f4 <xflowf>:
 80099f4:	b508      	push	{r3, lr}
 80099f6:	b140      	cbz	r0, 8009a0a <xflowf+0x16>
 80099f8:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80099fc:	f7f7 f9c2 	bl	8000d84 <__aeabi_fmul>
 8009a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009a04:	2122      	movs	r1, #34	@ 0x22
 8009a06:	f7ff bfed 	b.w	80099e4 <with_errnof>
 8009a0a:	4608      	mov	r0, r1
 8009a0c:	e7f6      	b.n	80099fc <xflowf+0x8>

08009a0e <__math_uflowf>:
 8009a0e:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8009a12:	f7ff bfef 	b.w	80099f4 <xflowf>

08009a16 <__math_oflowf>:
 8009a16:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8009a1a:	f7ff bfeb 	b.w	80099f4 <xflowf>
	...

08009a20 <__ieee754_logf>:
 8009a20:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8009a24:	4601      	mov	r1, r0
 8009a26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	d106      	bne.n	8009a3a <__ieee754_logf+0x1a>
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	f04f 404c 	mov.w	r0, #3422552064	@ 0xcc000000
 8009a32:	f7f7 fa5b 	bl	8000eec <__aeabi_fdiv>
 8009a36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	da03      	bge.n	8009a48 <__ieee754_logf+0x28>
 8009a40:	f7f7 f896 	bl	8000b70 <__aeabi_fsub>
 8009a44:	2100      	movs	r1, #0
 8009a46:	e7f4      	b.n	8009a32 <__ieee754_logf+0x12>
 8009a48:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009a4c:	db02      	blt.n	8009a54 <__ieee754_logf+0x34>
 8009a4e:	f7f7 f891 	bl	8000b74 <__addsf3>
 8009a52:	e7f0      	b.n	8009a36 <__ieee754_logf+0x16>
 8009a54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8009a58:	da35      	bge.n	8009ac6 <__ieee754_logf+0xa6>
 8009a5a:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8009a5e:	f7f7 f991 	bl	8000d84 <__aeabi_fmul>
 8009a62:	f06f 0318 	mvn.w	r3, #24
 8009a66:	4604      	mov	r4, r0
 8009a68:	15e7      	asrs	r7, r4, #23
 8009a6a:	3f7f      	subs	r7, #127	@ 0x7f
 8009a6c:	441f      	add	r7, r3
 8009a6e:	4b76      	ldr	r3, [pc, #472]	@ (8009c48 <__ieee754_logf+0x228>)
 8009a70:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8009a74:	4423      	add	r3, r4
 8009a76:	f403 0000 	and.w	r0, r3, #8388608	@ 0x800000
 8009a7a:	f080 507e 	eor.w	r0, r0, #1065353216	@ 0x3f800000
 8009a7e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009a82:	4320      	orrs	r0, r4
 8009a84:	eb07 57d3 	add.w	r7, r7, r3, lsr #23
 8009a88:	f7f7 f872 	bl	8000b70 <__aeabi_fsub>
 8009a8c:	4b6f      	ldr	r3, [pc, #444]	@ (8009c4c <__ieee754_logf+0x22c>)
 8009a8e:	f104 020f 	add.w	r2, r4, #15
 8009a92:	4013      	ands	r3, r2
 8009a94:	4606      	mov	r6, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d143      	bne.n	8009b22 <__ieee754_logf+0x102>
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	f7f7 fb06 	bl	80010ac <__aeabi_fcmpeq>
 8009aa0:	b198      	cbz	r0, 8009aca <__ieee754_logf+0xaa>
 8009aa2:	2f00      	cmp	r7, #0
 8009aa4:	f000 80cd 	beq.w	8009c42 <__ieee754_logf+0x222>
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	f7f7 f917 	bl	8000cdc <__aeabi_i2f>
 8009aae:	4968      	ldr	r1, [pc, #416]	@ (8009c50 <__ieee754_logf+0x230>)
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	f7f7 f967 	bl	8000d84 <__aeabi_fmul>
 8009ab6:	4967      	ldr	r1, [pc, #412]	@ (8009c54 <__ieee754_logf+0x234>)
 8009ab8:	4604      	mov	r4, r0
 8009aba:	4628      	mov	r0, r5
 8009abc:	f7f7 f962 	bl	8000d84 <__aeabi_fmul>
 8009ac0:	4601      	mov	r1, r0
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	e7c3      	b.n	8009a4e <__ieee754_logf+0x2e>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	e7ce      	b.n	8009a68 <__ieee754_logf+0x48>
 8009aca:	4963      	ldr	r1, [pc, #396]	@ (8009c58 <__ieee754_logf+0x238>)
 8009acc:	4630      	mov	r0, r6
 8009ace:	f7f7 f959 	bl	8000d84 <__aeabi_fmul>
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8009ad8:	f7f7 f84a 	bl	8000b70 <__aeabi_fsub>
 8009adc:	4631      	mov	r1, r6
 8009ade:	4604      	mov	r4, r0
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f7f7 f94f 	bl	8000d84 <__aeabi_fmul>
 8009ae6:	4601      	mov	r1, r0
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f7f7 f94b 	bl	8000d84 <__aeabi_fmul>
 8009aee:	4604      	mov	r4, r0
 8009af0:	b90f      	cbnz	r7, 8009af6 <__ieee754_logf+0xd6>
 8009af2:	4621      	mov	r1, r4
 8009af4:	e078      	b.n	8009be8 <__ieee754_logf+0x1c8>
 8009af6:	4638      	mov	r0, r7
 8009af8:	f7f7 f8f0 	bl	8000cdc <__aeabi_i2f>
 8009afc:	4954      	ldr	r1, [pc, #336]	@ (8009c50 <__ieee754_logf+0x230>)
 8009afe:	4607      	mov	r7, r0
 8009b00:	f7f7 f940 	bl	8000d84 <__aeabi_fmul>
 8009b04:	4605      	mov	r5, r0
 8009b06:	4638      	mov	r0, r7
 8009b08:	4952      	ldr	r1, [pc, #328]	@ (8009c54 <__ieee754_logf+0x234>)
 8009b0a:	f7f7 f93b 	bl	8000d84 <__aeabi_fmul>
 8009b0e:	4601      	mov	r1, r0
 8009b10:	4620      	mov	r0, r4
 8009b12:	f7f7 f82d 	bl	8000b70 <__aeabi_fsub>
 8009b16:	4631      	mov	r1, r6
 8009b18:	f7f7 f82a 	bl	8000b70 <__aeabi_fsub>
 8009b1c:	4601      	mov	r1, r0
 8009b1e:	4628      	mov	r0, r5
 8009b20:	e079      	b.n	8009c16 <__ieee754_logf+0x1f6>
 8009b22:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8009b26:	f7f7 f825 	bl	8000b74 <__addsf3>
 8009b2a:	4601      	mov	r1, r0
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f7f7 f9dd 	bl	8000eec <__aeabi_fdiv>
 8009b32:	4681      	mov	r9, r0
 8009b34:	4638      	mov	r0, r7
 8009b36:	f7f7 f8d1 	bl	8000cdc <__aeabi_i2f>
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	4680      	mov	r8, r0
 8009b3e:	4648      	mov	r0, r9
 8009b40:	f7f7 f920 	bl	8000d84 <__aeabi_fmul>
 8009b44:	4601      	mov	r1, r0
 8009b46:	4682      	mov	sl, r0
 8009b48:	f7f7 f91c 	bl	8000d84 <__aeabi_fmul>
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	4943      	ldr	r1, [pc, #268]	@ (8009c5c <__ieee754_logf+0x23c>)
 8009b50:	f7f7 f918 	bl	8000d84 <__aeabi_fmul>
 8009b54:	4942      	ldr	r1, [pc, #264]	@ (8009c60 <__ieee754_logf+0x240>)
 8009b56:	f7f7 f80d 	bl	8000b74 <__addsf3>
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	f7f7 f912 	bl	8000d84 <__aeabi_fmul>
 8009b60:	4940      	ldr	r1, [pc, #256]	@ (8009c64 <__ieee754_logf+0x244>)
 8009b62:	f7f7 f807 	bl	8000b74 <__addsf3>
 8009b66:	4629      	mov	r1, r5
 8009b68:	f7f7 f90c 	bl	8000d84 <__aeabi_fmul>
 8009b6c:	493e      	ldr	r1, [pc, #248]	@ (8009c68 <__ieee754_logf+0x248>)
 8009b6e:	f7f7 f801 	bl	8000b74 <__addsf3>
 8009b72:	4651      	mov	r1, sl
 8009b74:	f7f7 f906 	bl	8000d84 <__aeabi_fmul>
 8009b78:	493c      	ldr	r1, [pc, #240]	@ (8009c6c <__ieee754_logf+0x24c>)
 8009b7a:	4682      	mov	sl, r0
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	f7f7 f901 	bl	8000d84 <__aeabi_fmul>
 8009b82:	493b      	ldr	r1, [pc, #236]	@ (8009c70 <__ieee754_logf+0x250>)
 8009b84:	f7f6 fff6 	bl	8000b74 <__addsf3>
 8009b88:	4629      	mov	r1, r5
 8009b8a:	f7f7 f8fb 	bl	8000d84 <__aeabi_fmul>
 8009b8e:	4939      	ldr	r1, [pc, #228]	@ (8009c74 <__ieee754_logf+0x254>)
 8009b90:	f7f6 fff0 	bl	8000b74 <__addsf3>
 8009b94:	4629      	mov	r1, r5
 8009b96:	f7f7 f8f5 	bl	8000d84 <__aeabi_fmul>
 8009b9a:	4601      	mov	r1, r0
 8009b9c:	4650      	mov	r0, sl
 8009b9e:	f7f6 ffe9 	bl	8000b74 <__addsf3>
 8009ba2:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8009c78 <__ieee754_logf+0x258>
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	44a3      	add	fp, r4
 8009baa:	f5c4 1457 	rsb	r4, r4, #3522560	@ 0x35c000
 8009bae:	f504 7422 	add.w	r4, r4, #648	@ 0x288
 8009bb2:	ea44 040b 	orr.w	r4, r4, fp
 8009bb6:	2c00      	cmp	r4, #0
 8009bb8:	dd30      	ble.n	8009c1c <__ieee754_logf+0x1fc>
 8009bba:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f7f7 f8e0 	bl	8000d84 <__aeabi_fmul>
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	f7f7 f8dd 	bl	8000d84 <__aeabi_fmul>
 8009bca:	4601      	mov	r1, r0
 8009bcc:	4604      	mov	r4, r0
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f7f6 ffd0 	bl	8000b74 <__addsf3>
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	f7f7 f8d5 	bl	8000d84 <__aeabi_fmul>
 8009bda:	4605      	mov	r5, r0
 8009bdc:	b937      	cbnz	r7, 8009bec <__ieee754_logf+0x1cc>
 8009bde:	4601      	mov	r1, r0
 8009be0:	4620      	mov	r0, r4
 8009be2:	f7f6 ffc5 	bl	8000b70 <__aeabi_fsub>
 8009be6:	4601      	mov	r1, r0
 8009be8:	4630      	mov	r0, r6
 8009bea:	e014      	b.n	8009c16 <__ieee754_logf+0x1f6>
 8009bec:	4918      	ldr	r1, [pc, #96]	@ (8009c50 <__ieee754_logf+0x230>)
 8009bee:	4640      	mov	r0, r8
 8009bf0:	f7f7 f8c8 	bl	8000d84 <__aeabi_fmul>
 8009bf4:	4917      	ldr	r1, [pc, #92]	@ (8009c54 <__ieee754_logf+0x234>)
 8009bf6:	4607      	mov	r7, r0
 8009bf8:	4640      	mov	r0, r8
 8009bfa:	f7f7 f8c3 	bl	8000d84 <__aeabi_fmul>
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7f6 ffb8 	bl	8000b74 <__addsf3>
 8009c04:	4601      	mov	r1, r0
 8009c06:	4620      	mov	r0, r4
 8009c08:	f7f6 ffb2 	bl	8000b70 <__aeabi_fsub>
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	f7f6 ffaf 	bl	8000b70 <__aeabi_fsub>
 8009c12:	4601      	mov	r1, r0
 8009c14:	4638      	mov	r0, r7
 8009c16:	f7f6 ffab 	bl	8000b70 <__aeabi_fsub>
 8009c1a:	e70c      	b.n	8009a36 <__ieee754_logf+0x16>
 8009c1c:	4601      	mov	r1, r0
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f7f6 ffa6 	bl	8000b70 <__aeabi_fsub>
 8009c24:	4649      	mov	r1, r9
 8009c26:	f7f7 f8ad 	bl	8000d84 <__aeabi_fmul>
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	2f00      	cmp	r7, #0
 8009c2e:	f43f af60 	beq.w	8009af2 <__ieee754_logf+0xd2>
 8009c32:	4907      	ldr	r1, [pc, #28]	@ (8009c50 <__ieee754_logf+0x230>)
 8009c34:	4640      	mov	r0, r8
 8009c36:	f7f7 f8a5 	bl	8000d84 <__aeabi_fmul>
 8009c3a:	4906      	ldr	r1, [pc, #24]	@ (8009c54 <__ieee754_logf+0x234>)
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	4640      	mov	r0, r8
 8009c40:	e763      	b.n	8009b0a <__ieee754_logf+0xea>
 8009c42:	2000      	movs	r0, #0
 8009c44:	e6f7      	b.n	8009a36 <__ieee754_logf+0x16>
 8009c46:	bf00      	nop
 8009c48:	004afb20 	.word	0x004afb20
 8009c4c:	007ffff0 	.word	0x007ffff0
 8009c50:	3f317180 	.word	0x3f317180
 8009c54:	3717f7d1 	.word	0x3717f7d1
 8009c58:	3eaaaaab 	.word	0x3eaaaaab
 8009c5c:	3e178897 	.word	0x3e178897
 8009c60:	3e3a3325 	.word	0x3e3a3325
 8009c64:	3e924925 	.word	0x3e924925
 8009c68:	3f2aaaab 	.word	0x3f2aaaab
 8009c6c:	3e1cd04f 	.word	0x3e1cd04f
 8009c70:	3e638e29 	.word	0x3e638e29
 8009c74:	3ecccccd 	.word	0x3ecccccd
 8009c78:	ffcf5c30 	.word	0xffcf5c30

08009c7c <_init>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	bf00      	nop
 8009c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c82:	bc08      	pop	{r3}
 8009c84:	469e      	mov	lr, r3
 8009c86:	4770      	bx	lr

08009c88 <_fini>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	bf00      	nop
 8009c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c8e:	bc08      	pop	{r3}
 8009c90:	469e      	mov	lr, r3
 8009c92:	4770      	bx	lr
