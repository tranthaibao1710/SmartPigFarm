
SmartPigFarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008248  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001058  08008358  08008358  00009358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093b0  080093b0  0000b200  2**0
                  CONTENTS
  4 .ARM          00000008  080093b0  080093b0  0000a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093b8  080093b8  0000b200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093b8  080093b8  0000a3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093bc  080093bc  0000a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  080093c0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004094  20000200  080095c0  0000b200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004294  080095c0  0000b294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000503a  00000000  00000000  0000b229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a07  00000000  00000000  00010263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  00011c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000478  00000000  00000000  000122b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001877e  00000000  00000000  00012728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000919f  00000000  00000000  0002aea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ad2  00000000  00000000  00034045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6b17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f14  00000000  00000000  000b6b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000b9a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	08008340 	.word	0x08008340

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	08008340 	.word	0x08008340

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	2200      	movs	r2, #0
 8001140:	2300      	movs	r3, #0
 8001142:	4604      	mov	r4, r0
 8001144:	460d      	mov	r5, r1
 8001146:	f7ff fc39 	bl	80009bc <__aeabi_dcmplt>
 800114a:	b928      	cbnz	r0, 8001158 <__aeabi_d2lz+0x1c>
 800114c:	4620      	mov	r0, r4
 800114e:	4629      	mov	r1, r5
 8001150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001154:	f000 b80a 	b.w	800116c <__aeabi_d2ulz>
 8001158:	4620      	mov	r0, r4
 800115a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800115e:	f000 f805 	bl	800116c <__aeabi_d2ulz>
 8001162:	4240      	negs	r0, r0
 8001164:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001168:	bd38      	pop	{r3, r4, r5, pc}
 800116a:	bf00      	nop

0800116c <__aeabi_d2ulz>:
 800116c:	b5d0      	push	{r4, r6, r7, lr}
 800116e:	2200      	movs	r2, #0
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <__aeabi_d2ulz+0x34>)
 8001172:	4606      	mov	r6, r0
 8001174:	460f      	mov	r7, r1
 8001176:	f7ff f9af 	bl	80004d8 <__aeabi_dmul>
 800117a:	f7ff fc85 	bl	8000a88 <__aeabi_d2uiz>
 800117e:	4604      	mov	r4, r0
 8001180:	f7ff f930 	bl	80003e4 <__aeabi_ui2d>
 8001184:	2200      	movs	r2, #0
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <__aeabi_d2ulz+0x38>)
 8001188:	f7ff f9a6 	bl	80004d8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4630      	mov	r0, r6
 8001192:	4639      	mov	r1, r7
 8001194:	f7fe ffe8 	bl	8000168 <__aeabi_dsub>
 8001198:	f7ff fc76 	bl	8000a88 <__aeabi_d2uiz>
 800119c:	4621      	mov	r1, r4
 800119e:	bdd0      	pop	{r4, r6, r7, pc}
 80011a0:	3df00000 	.word	0x3df00000
 80011a4:	41f00000 	.word	0x41f00000

080011a8 <main>:
/**
 * @brief The application entry point.
 * @retval int
 */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
    // HAL Initialization
    HAL_Init();
 80011ae:	f000 fa61 	bl	8001674 <HAL_Init>
    SystemClock_Config();
 80011b2:	f000 f8c7 	bl	8001344 <SystemClock_Config>
   // GPIOx_Init();
   // ADCx_Init();
   // UARTx_Init();

    // Display welcome message
    printf("\r\n╔════════════════════════════════════════╗\r\n");
 80011b6:	484b      	ldr	r0, [pc, #300]	@ (80012e4 <main+0x13c>)
 80011b8:	f002 fff8 	bl	80041ac <puts>
    printf("║      HỆ THỐNG GIÁM SÁT KHÍ NH3 & CO2   ║\r\n");
 80011bc:	484a      	ldr	r0, [pc, #296]	@ (80012e8 <main+0x140>)
 80011be:	f002 fff5 	bl	80041ac <puts>
    printf("║      Phiên bản: 3.0 - Modular         ║\r\n");
 80011c2:	484a      	ldr	r0, [pc, #296]	@ (80012ec <main+0x144>)
 80011c4:	f002 fff2 	bl	80041ac <puts>
    printf("║      Cảm biến: MQ137 + MQ135          ║\r\n");
 80011c8:	4849      	ldr	r0, [pc, #292]	@ (80012f0 <main+0x148>)
 80011ca:	f002 ffef 	bl	80041ac <puts>
    printf("║      ADC: 3.3V (cần mạch chia áp)     ║\r\n");
 80011ce:	4849      	ldr	r0, [pc, #292]	@ (80012f4 <main+0x14c>)
 80011d0:	f002 ffec 	bl	80041ac <puts>
    printf("╚════════════════════════════════════════╝\r\n");
 80011d4:	4848      	ldr	r0, [pc, #288]	@ (80012f8 <main+0x150>)
 80011d6:	f002 ffe9 	bl	80041ac <puts>

    printf("\r\n⚠️  LƯU Ý QUAN TRỌNG:\r\n");
 80011da:	4848      	ldr	r0, [pc, #288]	@ (80012fc <main+0x154>)
 80011dc:	f002 ffe6 	bl	80041ac <puts>
    printf("   - STM32F103 chỉ đo ADC 0-3.3V\r\n");
 80011e0:	4847      	ldr	r0, [pc, #284]	@ (8001300 <main+0x158>)
 80011e2:	f002 ffe3 	bl	80041ac <puts>
    printf("   - Cảm biến MQ hoạt động ở 5V\r\n");
 80011e6:	4847      	ldr	r0, [pc, #284]	@ (8001304 <main+0x15c>)
 80011e8:	f002 ffe0 	bl	80041ac <puts>
    printf("   - CẦN mạch chia áp cho AOUT:\r\n");
 80011ec:	4846      	ldr	r0, [pc, #280]	@ (8001308 <main+0x160>)
 80011ee:	f002 ffdd 	bl	80041ac <puts>
    printf("     AOUT → R1(2.7kΩ) → ADC_PIN → R2(5.1kΩ) → GND\r\n");
 80011f2:	4846      	ldr	r0, [pc, #280]	@ (800130c <main+0x164>)
 80011f4:	f002 ffda 	bl	80041ac <puts>
    printf("   - Hoặc dùng Op-Amp buffer với gain = 0.66\r\n\r\n");
 80011f8:	4845      	ldr	r0, [pc, #276]	@ (8001310 <main+0x168>)
 80011fa:	f002 ffd7 	bl	80041ac <puts>

    // Khởi tạo hệ thống cảm biến
    InitSensorSystem();
 80011fe:	f001 fdcb 	bl	8002d98 <InitSensorSystem>

    // Test hệ thống
    TestSensorSystem();
 8001202:	f001 ff01 	bl	8003008 <TestSensorSystem>

    // Hiệu chuẩn nếu cần (uncomment để chạy)
    // CalibrateSensors();

    printf("\r\n🚀 BẮT ĐẦU GIÁM SÁT LIÊN TỤC\r\n");
 8001206:	4843      	ldr	r0, [pc, #268]	@ (8001314 <main+0x16c>)
 8001208:	f002 ffd0 	bl	80041ac <puts>
    printf("Press any key to stop...\r\n");
 800120c:	4842      	ldr	r0, [pc, #264]	@ (8001318 <main+0x170>)
 800120e:	f002 ffcd 	bl	80041ac <puts>

    // Main loop
    while (1)
    {
        // Xử lý tất cả cảm biến
        ProcessAllSensors();
 8001212:	f001 fe51 	bl	8002eb8 <ProcessAllSensors>

        // Hiển thị trạng thái
        DisplaySystemStatus();
 8001216:	f001 fe8b 	bl	8002f30 <DisplaySystemStatus>

        // Lấy giá trị để điều khiển
        float nh3_ppm = GetNH3_PPM();
 800121a:	f001 ff51 	bl	80030c0 <GetNH3_PPM>
 800121e:	60f8      	str	r0, [r7, #12]
        float co2_ppm = GetCO2_PPM();
 8001220:	f001 ff60 	bl	80030e4 <GetCO2_PPM>
 8001224:	60b8      	str	r0, [r7, #8]
        AlarmLevel_t nh3_alarm = GetNH3AlarmLevel();
 8001226:	f001 ff71 	bl	800310c <GetNH3AlarmLevel>
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
        AlarmLevel_t co2_alarm = GetCO2AlarmLevel();
 800122e:	f001 ff79 	bl	8003124 <GetCO2AlarmLevel>
 8001232:	4603      	mov	r3, r0
 8001234:	71bb      	strb	r3, [r7, #6]
        AlarmLevel_t system_alarm = GetSystemAlarmLevel();
 8001236:	f001 ff81 	bl	800313c <GetSystemAlarmLevel>
 800123a:	4603      	mov	r3, r0
 800123c:	717b      	strb	r3, [r7, #5]

        // Logic điều khiển NH3
        if (nh3_alarm >= ALARM_HIGH)
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d908      	bls.n	8001256 <main+0xae>
        {
            printf("🚨 NH3 = %.1f ppm - BẬT QUẠT THÔNG GIÓ!\r\n", nh3_ppm);
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f7ff f8ef 	bl	8000428 <__aeabi_f2d>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4833      	ldr	r0, [pc, #204]	@ (800131c <main+0x174>)
 8001250:	f002 ff44 	bl	80040dc <iprintf>
 8001254:	e00a      	b.n	800126c <main+0xc4>
            // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_SET);
        }
        else if (nh3_alarm <= ALARM_NORMAL)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d107      	bne.n	800126c <main+0xc4>
        {
            printf("✅ NH3 = %.1f ppm - Bình thường\r\n", nh3_ppm);
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff f8e3 	bl	8000428 <__aeabi_f2d>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	482e      	ldr	r0, [pc, #184]	@ (8001320 <main+0x178>)
 8001268:	f002 ff38 	bl	80040dc <iprintf>
            // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_RESET);
        }

        // Logic điều khiển CO2
        if (co2_alarm >= ALARM_HIGH)
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d908      	bls.n	8001284 <main+0xdc>
        {
            printf("🚨 CO2 = %.1f ppm - CẦN THÔNG GIÓ!\r\n", co2_ppm);
 8001272:	68b8      	ldr	r0, [r7, #8]
 8001274:	f7ff f8d8 	bl	8000428 <__aeabi_f2d>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4829      	ldr	r0, [pc, #164]	@ (8001324 <main+0x17c>)
 800127e:	f002 ff2d 	bl	80040dc <iprintf>
 8001282:	e00a      	b.n	800129a <main+0xf2>
            // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_SET);
        }
        else if (co2_alarm <= ALARM_NORMAL)
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d107      	bne.n	800129a <main+0xf2>
        {
            printf("✅ CO2 = %.1f ppm - Bình thường\r\n", co2_ppm);
 800128a:	68b8      	ldr	r0, [r7, #8]
 800128c:	f7ff f8cc 	bl	8000428 <__aeabi_f2d>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4824      	ldr	r0, [pc, #144]	@ (8001328 <main+0x180>)
 8001296:	f002 ff21 	bl	80040dc <iprintf>
            // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_RESET);
        }

        // Cảnh báo tổng thể
        switch (system_alarm)
 800129a:	797b      	ldrb	r3, [r7, #5]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d006      	beq.n	80012ae <main+0x106>
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	dc10      	bgt.n	80012c6 <main+0x11e>
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d00a      	beq.n	80012be <main+0x116>
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d004      	beq.n	80012b6 <main+0x10e>
 80012ac:	e00b      	b.n	80012c6 <main+0x11e>
        {
        case ALARM_DANGER:
            printf("🚨🚨 NGUY HIỂM! KIỂM TRA NGAY LẬP TỨC! 🚨🚨\r\n");
 80012ae:	481f      	ldr	r0, [pc, #124]	@ (800132c <main+0x184>)
 80012b0:	f002 ff7c 	bl	80041ac <puts>
            // HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
            break;
 80012b4:	e00b      	b.n	80012ce <main+0x126>
        case ALARM_HIGH:
            printf("⚠️ CẢNH BÁO CAO - Cần chú ý ngay\r\n");
 80012b6:	481e      	ldr	r0, [pc, #120]	@ (8001330 <main+0x188>)
 80012b8:	f002 ff78 	bl	80041ac <puts>
            break;
 80012bc:	e007      	b.n	80012ce <main+0x126>
        case ALARM_LOW:
            printf("⚠️ Cảnh báo thấp - Theo dõi\r\n");
 80012be:	481d      	ldr	r0, [pc, #116]	@ (8001334 <main+0x18c>)
 80012c0:	f002 ff74 	bl	80041ac <puts>
            break;
 80012c4:	e003      	b.n	80012ce <main+0x126>
        default:
            printf("✅ Hệ thống hoạt động bình thường\r\n");
 80012c6:	481c      	ldr	r0, [pc, #112]	@ (8001338 <main+0x190>)
 80012c8:	f002 ff70 	bl	80041ac <puts>
            // HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
            break;
 80012cc:	bf00      	nop
        // UpdateLCDDisplay(nh3_ppm, co2_ppm, system_alarm);

        // - Log dữ liệu
        // LogToFile(&g_sensor_system);

        printf("\r\n⏳ Chờ 60 giây để đo tiếp...\r\n");
 80012ce:	481b      	ldr	r0, [pc, #108]	@ (800133c <main+0x194>)
 80012d0:	f002 ff6c 	bl	80041ac <puts>
        printf("────────────────────────────────────────\r\n");
 80012d4:	481a      	ldr	r0, [pc, #104]	@ (8001340 <main+0x198>)
 80012d6:	f002 ff69 	bl	80041ac <puts>

        HAL_Delay(MAIN_LOOP_DELAY); // Chờ 1 phút
 80012da:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80012de:	f000 fa2b 	bl	8001738 <HAL_Delay>
    {
 80012e2:	e796      	b.n	8001212 <main+0x6a>
 80012e4:	08008358 	.word	0x08008358
 80012e8:	080083dc 	.word	0x080083dc
 80012ec:	08008414 	.word	0x08008414
 80012f0:	08008448 	.word	0x08008448
 80012f4:	0800847c 	.word	0x0800847c
 80012f8:	080084b0 	.word	0x080084b0
 80012fc:	08008530 	.word	0x08008530
 8001300:	08008554 	.word	0x08008554
 8001304:	0800857c 	.word	0x0800857c
 8001308:	080085a8 	.word	0x080085a8
 800130c:	080085d0 	.word	0x080085d0
 8001310:	08008610 	.word	0x08008610
 8001314:	08008648 	.word	0x08008648
 8001318:	08008674 	.word	0x08008674
 800131c:	08008690 	.word	0x08008690
 8001320:	080086c4 	.word	0x080086c4
 8001324:	080086ec 	.word	0x080086ec
 8001328:	08008718 	.word	0x08008718
 800132c:	08008740 	.word	0x08008740
 8001330:	08008780 	.word	0x08008780
 8001334:	080087b0 	.word	0x080087b0
 8001338:	080087d8 	.word	0x080087d8
 800133c:	0800880c 	.word	0x0800880c
 8001340:	08008838 	.word	0x08008838

08001344 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b090      	sub	sp, #64	@ 0x40
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	2228      	movs	r2, #40	@ 0x28
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f003 f82a 	bl	80043ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001366:	2301      	movs	r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800136a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800136e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001374:	2301      	movs	r3, #1
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001378:	2302      	movs	r3, #2
 800137a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001380:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001382:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fadb 	bl	8001948 <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001398:	f000 f819 	bl	80013ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2302      	movs	r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2102      	movs	r1, #2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fd48 	bl	8001e4c <HAL_RCC_ClockConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013c2:	f000 f804 	bl	80013ce <Error_Handler>
  }
}
 80013c6:	bf00      	nop
 80013c8:	3740      	adds	r7, #64	@ 0x40
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d2:	b672      	cpsid	i
}
 80013d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d6:	bf00      	nop
 80013d8:	e7fd      	b.n	80013d6 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_MspInit+0x5c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <HAL_MspInit+0x5c>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_MspInit+0x5c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <HAL_MspInit+0x5c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <HAL_MspInit+0x5c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <HAL_MspInit+0x5c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001412:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <HAL_MspInit+0x60>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	4a04      	ldr	r2, [pc, #16]	@ (800143c <HAL_MspInit+0x60>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <NMI_Handler+0x4>

08001448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <MemManage_Handler+0x4>

08001458 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <UsageFault_Handler+0x4>

08001468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f936 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return 1;
 800149c:	2301      	movs	r3, #1
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <_kill>:

int _kill(int pid, int sig)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b0:	f002 ffce 	bl	8004450 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2216      	movs	r2, #22
 80014b8:	601a      	str	r2, [r3, #0]
  return -1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_exit>:

void _exit (int status)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014ce:	f04f 31ff 	mov.w	r1, #4294967295
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffe7 	bl	80014a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <_exit+0x12>

080014dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e00a      	b.n	8001504 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ee:	f3af 8000 	nop.w
 80014f2:	4601      	mov	r1, r0
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	b2ca      	uxtb	r2, r1
 80014fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dbf0      	blt.n	80014ee <_read+0x12>
  }

  return len;
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e009      	b.n	800153c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f001 f8d9 	bl	80026e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf1      	blt.n	8001528 <_write+0x12>
  }
  return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_close>:

int _close(int file)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001574:	605a      	str	r2, [r3, #4]
  return 0;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <_isatty>:

int _isatty(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b8:	4a14      	ldr	r2, [pc, #80]	@ (800160c <_sbrk+0x5c>)
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <_sbrk+0x60>)
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <_sbrk+0x64>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <_sbrk+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d207      	bcs.n	80015f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e0:	f002 ff36 	bl	8004450 <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e009      	b.n	8001604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20005000 	.word	0x20005000
 8001610:	00000400 	.word	0x00000400
 8001614:	2000021c 	.word	0x2000021c
 8001618:	20004298 	.word	0x20004298

0800161c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001628:	f7ff fff8 	bl	800161c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480b      	ldr	r0, [pc, #44]	@ (800165c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800162e:	490c      	ldr	r1, [pc, #48]	@ (8001660 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001630:	4a0c      	ldr	r2, [pc, #48]	@ (8001664 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a09      	ldr	r2, [pc, #36]	@ (8001668 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001644:	4c09      	ldr	r4, [pc, #36]	@ (800166c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001652:	f002 ff03 	bl	800445c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001656:	f7ff fda7 	bl	80011a8 <main>
  bx lr
 800165a:	4770      	bx	lr
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001664:	080093c0 	.word	0x080093c0
  ldr r2, =_sbss
 8001668:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800166c:	20004294 	.word	0x20004294

08001670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_2_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_Init+0x28>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	@ (800169c <HAL_Init+0x28>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 f92b 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	200f      	movs	r0, #15
 800168c:	f000 f808 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fea4 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40022000 	.word	0x40022000

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f935 	bl	800192e <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f000 f90b 	bl	80018f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <HAL_IncTick+0x1c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <HAL_IncTick+0x20>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a03      	ldr	r2, [pc, #12]	@ (8001720 <HAL_IncTick+0x20>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000008 	.word	0x20000008
 8001720:	20000220 	.word	0x20000220

08001724 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b02      	ldr	r3, [pc, #8]	@ (8001734 <HAL_GetTick+0x10>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000220 	.word	0x20000220

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff fff0 	bl	8001724 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffe0 	bl	8001724 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	@ (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f7ff ff90 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff49 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff5e 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff90 	bl	8001838 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5f 	bl	80017e4 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffb0 	bl	800189c <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e272      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8087 	beq.w	8001a76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001968:	4b92      	ldr	r3, [pc, #584]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b04      	cmp	r3, #4
 8001972:	d00c      	beq.n	800198e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001974:	4b8f      	ldr	r3, [pc, #572]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d112      	bne.n	80019a6 <HAL_RCC_OscConfig+0x5e>
 8001980:	4b8c      	ldr	r3, [pc, #560]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198c:	d10b      	bne.n	80019a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198e:	4b89      	ldr	r3, [pc, #548]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d06c      	beq.n	8001a74 <HAL_RCC_OscConfig+0x12c>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d168      	bne.n	8001a74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e24c      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ae:	d106      	bne.n	80019be <HAL_RCC_OscConfig+0x76>
 80019b0:	4b80      	ldr	r3, [pc, #512]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a7f      	ldr	r2, [pc, #508]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	e02e      	b.n	8001a1c <HAL_RCC_OscConfig+0xd4>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x98>
 80019c6:	4b7b      	ldr	r3, [pc, #492]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a7a      	ldr	r2, [pc, #488]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	4b78      	ldr	r3, [pc, #480]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a77      	ldr	r2, [pc, #476]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e01d      	b.n	8001a1c <HAL_RCC_OscConfig+0xd4>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0xbc>
 80019ea:	4b72      	ldr	r3, [pc, #456]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a71      	ldr	r2, [pc, #452]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b6f      	ldr	r3, [pc, #444]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a6e      	ldr	r2, [pc, #440]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0xd4>
 8001a04:	4b6b      	ldr	r3, [pc, #428]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a6a      	ldr	r2, [pc, #424]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b68      	ldr	r3, [pc, #416]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a67      	ldr	r2, [pc, #412]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fe7e 	bl	8001724 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fe7a 	bl	8001724 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	@ 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e200      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe4>
 8001a4a:	e014      	b.n	8001a76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fe6a 	bl	8001724 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fe66 	bl	8001724 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	@ 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1ec      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	4b53      	ldr	r3, [pc, #332]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x10c>
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d063      	beq.n	8001b4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a82:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a8e:	4b49      	ldr	r3, [pc, #292]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d11c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x18c>
 8001a9a:	4b46      	ldr	r3, [pc, #280]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d116      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa6:	4b43      	ldr	r3, [pc, #268]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_RCC_OscConfig+0x176>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e1c0      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4939      	ldr	r1, [pc, #228]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	e03a      	b.n	8001b4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001adc:	4b36      	ldr	r3, [pc, #216]	@ (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fe1f 	bl	8001724 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff fe1b 	bl	8001724 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1a1      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4927      	ldr	r1, [pc, #156]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <HAL_RCC_OscConfig+0x270>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fdfe 	bl	8001724 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fdfa 	bl	8001724 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e180      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d03a      	beq.n	8001bcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d019      	beq.n	8001b92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5e:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <HAL_RCC_OscConfig+0x274>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff fdde 	bl	8001724 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fdda 	bl	8001724 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e160      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f000 fa9c 	bl	80020c8 <RCC_Delay>
 8001b90:	e01c      	b.n	8001bcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_RCC_OscConfig+0x274>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b98:	f7ff fdc4 	bl	8001724 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9e:	e00f      	b.n	8001bc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fdc0 	bl	8001724 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d908      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e146      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	42420000 	.word	0x42420000
 8001bbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc0:	4b92      	ldr	r3, [pc, #584]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1e9      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80a6 	beq.w	8001d26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bde:	4b8b      	ldr	r3, [pc, #556]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b88      	ldr	r3, [pc, #544]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a87      	ldr	r2, [pc, #540]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b85      	ldr	r3, [pc, #532]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c02:	2301      	movs	r3, #1
 8001c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c06:	4b82      	ldr	r3, [pc, #520]	@ (8001e10 <HAL_RCC_OscConfig+0x4c8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d118      	bne.n	8001c44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c12:	4b7f      	ldr	r3, [pc, #508]	@ (8001e10 <HAL_RCC_OscConfig+0x4c8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7e      	ldr	r2, [pc, #504]	@ (8001e10 <HAL_RCC_OscConfig+0x4c8>)
 8001c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fd81 	bl	8001724 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c26:	f7ff fd7d 	bl	8001724 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b64      	cmp	r3, #100	@ 0x64
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e103      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c38:	4b75      	ldr	r3, [pc, #468]	@ (8001e10 <HAL_RCC_OscConfig+0x4c8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x312>
 8001c4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4a6e      	ldr	r2, [pc, #440]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6213      	str	r3, [r2, #32]
 8001c58:	e02d      	b.n	8001cb6 <HAL_RCC_OscConfig+0x36e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x334>
 8001c62:	4b6a      	ldr	r3, [pc, #424]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a69      	ldr	r2, [pc, #420]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6213      	str	r3, [r2, #32]
 8001c6e:	4b67      	ldr	r3, [pc, #412]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a66      	ldr	r2, [pc, #408]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6213      	str	r3, [r2, #32]
 8001c7a:	e01c      	b.n	8001cb6 <HAL_RCC_OscConfig+0x36e>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d10c      	bne.n	8001c9e <HAL_RCC_OscConfig+0x356>
 8001c84:	4b61      	ldr	r3, [pc, #388]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4a60      	ldr	r2, [pc, #384]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6213      	str	r3, [r2, #32]
 8001c90:	4b5e      	ldr	r3, [pc, #376]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4a5d      	ldr	r2, [pc, #372]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6213      	str	r3, [r2, #32]
 8001c9c:	e00b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x36e>
 8001c9e:	4b5b      	ldr	r3, [pc, #364]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6213      	str	r3, [r2, #32]
 8001caa:	4b58      	ldr	r3, [pc, #352]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4a57      	ldr	r2, [pc, #348]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d015      	beq.n	8001cea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fd31 	bl	8001724 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7ff fd2d 	bl	8001724 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0b1      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0ee      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x37e>
 8001ce8:	e014      	b.n	8001d14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7ff fd1b 	bl	8001724 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7ff fd17 	bl	8001724 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e09b      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	4b40      	ldr	r3, [pc, #256]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ee      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d105      	bne.n	8001d26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8087 	beq.w	8001e3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d30:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d061      	beq.n	8001e00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d146      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d44:	4b33      	ldr	r3, [pc, #204]	@ (8001e14 <HAL_RCC_OscConfig+0x4cc>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7ff fceb 	bl	8001724 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d52:	f7ff fce7 	bl	8001724 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e06d      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d64:	4b29      	ldr	r3, [pc, #164]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f0      	bne.n	8001d52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d78:	d108      	bne.n	8001d8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d7a:	4b24      	ldr	r3, [pc, #144]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	4921      	ldr	r1, [pc, #132]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a19      	ldr	r1, [r3, #32]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	430b      	orrs	r3, r1
 8001d9e:	491b      	ldr	r1, [pc, #108]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <HAL_RCC_OscConfig+0x4cc>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fcbb 	bl	8001724 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff fcb7 	bl	8001724 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e03d      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x46a>
 8001dd0:	e035      	b.n	8001e3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <HAL_RCC_OscConfig+0x4cc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fca4 	bl	8001724 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff fca0 	bl	8001724 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e026      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x498>
 8001dfe:	e01e      	b.n	8001e3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d107      	bne.n	8001e18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e019      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40007000 	.word	0x40007000
 8001e14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e18:	4b0b      	ldr	r3, [pc, #44]	@ (8001e48 <HAL_RCC_OscConfig+0x500>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000

08001e4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0d0      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b6a      	ldr	r3, [pc, #424]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d910      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b67      	ldr	r3, [pc, #412]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0207 	bic.w	r2, r3, #7
 8001e76:	4965      	ldr	r1, [pc, #404]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b63      	ldr	r3, [pc, #396]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0b8      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d020      	beq.n	8001ede <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea8:	4b59      	ldr	r3, [pc, #356]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a58      	ldr	r2, [pc, #352]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001eb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec0:	4b53      	ldr	r3, [pc, #332]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a52      	ldr	r2, [pc, #328]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001eca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ecc:	4b50      	ldr	r3, [pc, #320]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	494d      	ldr	r1, [pc, #308]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d040      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d107      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b47      	ldr	r3, [pc, #284]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d115      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e07f      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b41      	ldr	r3, [pc, #260]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d109      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e073      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e06b      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2a:	4b39      	ldr	r3, [pc, #228]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f023 0203 	bic.w	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4936      	ldr	r1, [pc, #216]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f3c:	f7ff fbf2 	bl	8001724 <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f42:	e00a      	b.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7ff fbee 	bl	8001724 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e053      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 020c 	and.w	r2, r3, #12
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1eb      	bne.n	8001f44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6c:	4b27      	ldr	r3, [pc, #156]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d210      	bcs.n	8001f9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 0207 	bic.w	r2, r3, #7
 8001f82:	4922      	ldr	r1, [pc, #136]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e032      	b.n	8002002 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa8:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4916      	ldr	r1, [pc, #88]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fc6:	4b12      	ldr	r3, [pc, #72]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	490e      	ldr	r1, [pc, #56]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fda:	f000 f821 	bl	8002020 <HAL_RCC_GetSysClockFreq>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	490a      	ldr	r1, [pc, #40]	@ (8002014 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	5ccb      	ldrb	r3, [r1, r3]
 8001fee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff2:	4a09      	ldr	r2, [pc, #36]	@ (8002018 <HAL_RCC_ClockConfig+0x1cc>)
 8001ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ff6:	4b09      	ldr	r3, [pc, #36]	@ (800201c <HAL_RCC_ClockConfig+0x1d0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fb50 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40022000 	.word	0x40022000
 8002010:	40021000 	.word	0x40021000
 8002014:	08008f44 	.word	0x08008f44
 8002018:	20000000 	.word	0x20000000
 800201c:	20000004 	.word	0x20000004

08002020 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800203a:	4b1e      	ldr	r3, [pc, #120]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b04      	cmp	r3, #4
 8002048:	d002      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x30>
 800204a:	2b08      	cmp	r3, #8
 800204c:	d003      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0x36>
 800204e:	e027      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002050:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002052:	613b      	str	r3, [r7, #16]
      break;
 8002054:	e027      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	0c9b      	lsrs	r3, r3, #18
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	4a17      	ldr	r2, [pc, #92]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002060:	5cd3      	ldrb	r3, [r2, r3]
 8002062:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d010      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800206e:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0c5b      	lsrs	r3, r3, #17
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	4a11      	ldr	r2, [pc, #68]	@ (80020c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a0d      	ldr	r2, [pc, #52]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002082:	fb03 f202 	mul.w	r2, r3, r2
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e004      	b.n	800209a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a0c      	ldr	r2, [pc, #48]	@ (80020c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002094:	fb02 f303 	mul.w	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	613b      	str	r3, [r7, #16]
      break;
 800209e:	e002      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020a2:	613b      	str	r3, [r7, #16]
      break;
 80020a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a6:	693b      	ldr	r3, [r7, #16]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	371c      	adds	r7, #28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	007a1200 	.word	0x007a1200
 80020bc:	08008f54 	.word	0x08008f54
 80020c0:	08008f64 	.word	0x08008f64
 80020c4:	003d0900 	.word	0x003d0900

080020c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020d0:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <RCC_Delay+0x34>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <RCC_Delay+0x38>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0a5b      	lsrs	r3, r3, #9
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020e4:	bf00      	nop
  }
  while (Delay --);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	60fa      	str	r2, [r7, #12]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f9      	bne.n	80020e4 <RCC_Delay+0x1c>
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	20000000 	.word	0x20000000
 8002100:	10624dd3 	.word	0x10624dd3

08002104 <ADCx_Init>:
#include "adc.h"

void ADCx_Init(ADC_TypeDef *ADCx, uint8_t Channel) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af02      	add	r7, sp, #8
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	70fb      	strb	r3, [r7, #3]
    // Enable ADC clock
    if(ADCx == ADC1) RCC->APB2ENR |= 1<<9;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a84      	ldr	r2, [pc, #528]	@ (8002324 <ADCx_Init+0x220>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d105      	bne.n	8002124 <ADCx_Init+0x20>
 8002118:	4b83      	ldr	r3, [pc, #524]	@ (8002328 <ADCx_Init+0x224>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a82      	ldr	r2, [pc, #520]	@ (8002328 <ADCx_Init+0x224>)
 800211e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002122:	6193      	str	r3, [r2, #24]
    if(ADCx == ADC2) RCC->APB2ENR |= 1<<10;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a81      	ldr	r2, [pc, #516]	@ (800232c <ADCx_Init+0x228>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d105      	bne.n	8002138 <ADCx_Init+0x34>
 800212c:	4b7e      	ldr	r3, [pc, #504]	@ (8002328 <ADCx_Init+0x224>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4a7d      	ldr	r2, [pc, #500]	@ (8002328 <ADCx_Init+0x224>)
 8002132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002136:	6193      	str	r3, [r2, #24]
    
    // Configure GPIO pins for analog input
    if(Channel == ADC_Channel_0) GPIOx_Init(GPIOA, 0, INPUT_ANALOG, NOPULL, 0);
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <ADCx_Init+0x4a>
 800213e:	2300      	movs	r3, #0
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2300      	movs	r3, #0
 8002144:	2200      	movs	r2, #0
 8002146:	2100      	movs	r1, #0
 8002148:	4879      	ldr	r0, [pc, #484]	@ (8002330 <ADCx_Init+0x22c>)
 800214a:	f000 f987 	bl	800245c <GPIOx_Init>
    if(Channel == ADC_Channel_1) GPIOx_Init(GPIOA, 1, INPUT_ANALOG, NOPULL, 0);
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <ADCx_Init+0x60>
 8002154:	2300      	movs	r3, #0
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2300      	movs	r3, #0
 800215a:	2200      	movs	r2, #0
 800215c:	2101      	movs	r1, #1
 800215e:	4874      	ldr	r0, [pc, #464]	@ (8002330 <ADCx_Init+0x22c>)
 8002160:	f000 f97c 	bl	800245c <GPIOx_Init>
    if(Channel == ADC_Channel_2) GPIOx_Init(GPIOA, 2, INPUT_ANALOG, NOPULL, 0);
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d107      	bne.n	800217a <ADCx_Init+0x76>
 800216a:	2300      	movs	r3, #0
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	2200      	movs	r2, #0
 8002172:	2102      	movs	r1, #2
 8002174:	486e      	ldr	r0, [pc, #440]	@ (8002330 <ADCx_Init+0x22c>)
 8002176:	f000 f971 	bl	800245c <GPIOx_Init>
    if(Channel == ADC_Channel_3) GPIOx_Init(GPIOA, 3, INPUT_ANALOG, NOPULL, 0);
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d107      	bne.n	8002190 <ADCx_Init+0x8c>
 8002180:	2300      	movs	r3, #0
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2300      	movs	r3, #0
 8002186:	2200      	movs	r2, #0
 8002188:	2103      	movs	r1, #3
 800218a:	4869      	ldr	r0, [pc, #420]	@ (8002330 <ADCx_Init+0x22c>)
 800218c:	f000 f966 	bl	800245c <GPIOx_Init>
    if(Channel == ADC_Channel_4) GPIOx_Init(GPIOA, 4, INPUT_ANALOG, NOPULL, 0);
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d107      	bne.n	80021a6 <ADCx_Init+0xa2>
 8002196:	2300      	movs	r3, #0
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2300      	movs	r3, #0
 800219c:	2200      	movs	r2, #0
 800219e:	2104      	movs	r1, #4
 80021a0:	4863      	ldr	r0, [pc, #396]	@ (8002330 <ADCx_Init+0x22c>)
 80021a2:	f000 f95b 	bl	800245c <GPIOx_Init>
    if(Channel == ADC_Channel_5) GPIOx_Init(GPIOA, 5, INPUT_ANALOG, NOPULL, 0);
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d107      	bne.n	80021bc <ADCx_Init+0xb8>
 80021ac:	2300      	movs	r3, #0
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2300      	movs	r3, #0
 80021b2:	2200      	movs	r2, #0
 80021b4:	2105      	movs	r1, #5
 80021b6:	485e      	ldr	r0, [pc, #376]	@ (8002330 <ADCx_Init+0x22c>)
 80021b8:	f000 f950 	bl	800245c <GPIOx_Init>
    if(Channel == ADC_Channel_6) GPIOx_Init(GPIOA, 6, INPUT_ANALOG, NOPULL, 0);
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d107      	bne.n	80021d2 <ADCx_Init+0xce>
 80021c2:	2300      	movs	r3, #0
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2300      	movs	r3, #0
 80021c8:	2200      	movs	r2, #0
 80021ca:	2106      	movs	r1, #6
 80021cc:	4858      	ldr	r0, [pc, #352]	@ (8002330 <ADCx_Init+0x22c>)
 80021ce:	f000 f945 	bl	800245c <GPIOx_Init>
    if(Channel == ADC_Channel_7) GPIOx_Init(GPIOA, 7, INPUT_ANALOG, NOPULL, 0);
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	2b07      	cmp	r3, #7
 80021d6:	d107      	bne.n	80021e8 <ADCx_Init+0xe4>
 80021d8:	2300      	movs	r3, #0
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2300      	movs	r3, #0
 80021de:	2200      	movs	r2, #0
 80021e0:	2107      	movs	r1, #7
 80021e2:	4853      	ldr	r0, [pc, #332]	@ (8002330 <ADCx_Init+0x22c>)
 80021e4:	f000 f93a 	bl	800245c <GPIOx_Init>
    
    // ADC Configuration
    ADCx->CR1 |= 1<<8;              // SCAN MODE enable
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	605a      	str	r2, [r3, #4]
    ADCx->CR2 |= (1<<1) | (1<<0);   // CONT=1, ADON=1 (Continuous mode)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f043 0203 	orr.w	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= 1<<20;             // EXTEN[1:0] = 00 (External trigger disabled)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	609a      	str	r2, [r3, #8]
    ADCx->CR2 &= ~(1<<11);          // ALIGN=0 (Right alignment)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	609a      	str	r2, [r3, #8]
    ADCx->CR2 &= ~(0x7<<17);        // Clear EXTSEL bits
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f423 2260 	bic.w	r2, r3, #917504	@ 0xe0000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= (0x7<<17);         // EXTSEL = 111 (SWSTART)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f443 2260 	orr.w	r2, r3, #917504	@ 0xe0000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]
    
    // Set sequence length to 1 conversion
    ADCx->SQR1 &= ~(0xF<<20);       // Clear L[3:0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADCx->SQR1 |= (0x0<<20);        // L=0 (1 conversion)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    // Set sampling time (longest for better accuracy)
    if(Channel > 9) {
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	2b09      	cmp	r3, #9
 8002248:	d91f      	bls.n	800228a <ADCx_Init+0x186>
        ADCx->SMPR1 &= ~(7<<((Channel-10)*3)); 
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68d9      	ldr	r1, [r3, #12]
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	f1a3 020a 	sub.w	r2, r3, #10
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	2207      	movs	r2, #7
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	ea01 0203 	and.w	r2, r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60da      	str	r2, [r3, #12]
        ADCx->SMPR1 |= (7<<((Channel-10)*3));   // 480 cycles
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68d9      	ldr	r1, [r3, #12]
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f1a3 020a 	sub.w	r2, r3, #10
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	2207      	movs	r2, #7
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	ea41 0203 	orr.w	r2, r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	60da      	str	r2, [r3, #12]
 8002288:	e01a      	b.n	80022c0 <ADCx_Init+0x1bc>
    } else {
        ADCx->SMPR2 &= ~(7<<(Channel*3));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6919      	ldr	r1, [r3, #16]
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	2207      	movs	r2, #7
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	ea01 0203 	and.w	r2, r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	611a      	str	r2, [r3, #16]
        ADCx->SMPR2 |= (7<<(Channel*3));        // 480 cycles
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6919      	ldr	r1, [r3, #16]
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	2207      	movs	r2, #7
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	ea41 0203 	orr.w	r2, r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	611a      	str	r2, [r3, #16]
    }
    
    // Set first conversion in regular sequence
    ADCx->SQR3 &= 0xFFFFFFE0;       // Clear SQ1[4:0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c4:	f023 021f 	bic.w	r2, r3, #31
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	635a      	str	r2, [r3, #52]	@ 0x34
    ADCx->SQR3 |= Channel;          // Set channel for SQ1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // ADC Calibration
    ADCx->CR2 |= 1<<3;              // RSTCAL=1 (Reset calibration)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f043 0208 	orr.w	r2, r3, #8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]
    while(ADCx->CR2 & (1<<3));      // Wait for reset calibration to complete
 80022e4:	bf00      	nop
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f9      	bne.n	80022e6 <ADCx_Init+0x1e2>
    
    ADCx->CR2 |= 1<<2;              // CAL=1 (Start calibration)  
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f043 0204 	orr.w	r2, r3, #4
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	609a      	str	r2, [r3, #8]
    while(ADCx->CR2 & (1<<2));      // Wait for calibration to complete
 80022fe:	bf00      	nop
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f9      	bne.n	8002300 <ADCx_Init+0x1fc>
        
    // Enable ADC
    ADCx->CR2 |= (1<<22) | (1<<0);  // SWSTART=1, ADON=1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6093      	str	r3, [r2, #8]
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40012400 	.word	0x40012400
 8002328:	40021000 	.word	0x40021000
 800232c:	40012800 	.word	0x40012800
 8002330:	40010800 	.word	0x40010800

08002334 <ADCx_Read>:

uint16_t ADCx_Read(ADC_TypeDef *ADCx, uint8_t Channel) {
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
    // Set sampling time for the channel
    if(Channel > 9) {
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	2b09      	cmp	r3, #9
 8002344:	d91f      	bls.n	8002386 <ADCx_Read+0x52>
        ADCx->SMPR1 &= ~(7<<((Channel-10)*3)); 
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68d9      	ldr	r1, [r3, #12]
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f1a3 020a 	sub.w	r2, r3, #10
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	2207      	movs	r2, #7
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	ea01 0203 	and.w	r2, r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	60da      	str	r2, [r3, #12]
        ADCx->SMPR1 |= (7<<((Channel-10)*3));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68d9      	ldr	r1, [r3, #12]
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	f1a3 020a 	sub.w	r2, r3, #10
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	2207      	movs	r2, #7
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	ea41 0203 	orr.w	r2, r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	60da      	str	r2, [r3, #12]
 8002384:	e01a      	b.n	80023bc <ADCx_Read+0x88>
    } else {
        ADCx->SMPR2 &= ~(7<<(Channel*3));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6919      	ldr	r1, [r3, #16]
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	2207      	movs	r2, #7
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	ea01 0203 	and.w	r2, r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]
        ADCx->SMPR2 |= (7<<(Channel*3));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6919      	ldr	r1, [r3, #16]
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	2207      	movs	r2, #7
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	ea41 0203 	orr.w	r2, r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	611a      	str	r2, [r3, #16]
    }
    
    // Set channel in regular sequence
    ADCx->SQR3 &= 0xFFFFFFE0;       
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c0:	f023 021f 	bic.w	r2, r3, #31
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	635a      	str	r2, [r3, #52]	@ 0x34
    ADCx->SQR3 |= Channel;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Start conversion
    ADCx->CR2 |= (1<<22) | (1<<0);  // SWSTART=1, ADON=1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6093      	str	r3, [r2, #8]
    
    // Wait for conversion to complete
    while((ADCx->SR & (1<<1)) == 0);
 80023e4:	bf00      	nop
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f9      	beq.n	80023e6 <ADCx_Read+0xb2>
    
    // Clear EOC flag by reading DR
    return ADCx->DR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f6:	b29b      	uxth	r3, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <ADCx_Read_TB>:

// ✅ Sửa lỗi overflow và kiểu dữ liệu
uint16_t ADCx_Read_TB(ADC_TypeDef *ADCx, uint8_t Channel, uint8_t n) {
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	70fb      	strb	r3, [r7, #3]
 800240e:	4613      	mov	r3, r2
 8002410:	70bb      	strb	r3, [r7, #2]
    if(n == 0) return 0;            // Validation
 8002412:	78bb      	ldrb	r3, [r7, #2]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <ADCx_Read_TB+0x1a>
 8002418:	2300      	movs	r3, #0
 800241a:	e01a      	b.n	8002452 <ADCx_Read_TB+0x50>
    
    uint32_t sum = 0;               // ✅ Dùng uint32_t thay vì uint8_t
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
    
    for(int i = 0; i < n; i++) {
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	e00c      	b.n	8002440 <ADCx_Read_TB+0x3e>
        sum += ADCx_Read(ADCx, Channel);
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ff82 	bl	8002334 <ADCx_Read>
 8002430:	4603      	mov	r3, r0
 8002432:	461a      	mov	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < n; i++) {
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3301      	adds	r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	78bb      	ldrb	r3, [r7, #2]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	429a      	cmp	r2, r3
 8002446:	dbee      	blt.n	8002426 <ADCx_Read_TB+0x24>
        // Có thể thêm delay nhỏ giữa các lần đọc nếu cần
        // for(volatile int d = 0; d < 1000; d++);
    }
    
    return (uint16_t)(sum / n);     // Ép kiểu an toàn
 8002448:	78bb      	ldrb	r3, [r7, #2]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002450:	b29b      	uxth	r3, r3
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <GPIOx_Init>:
	
	 /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
void GPIOx_Init(GPIO_TypeDef *GPIOx ,uint8_t Pin ,uint8_t Mode ,uint8_t Pull,uint8_t Speed)
{ 
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	4608      	mov	r0, r1
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	4603      	mov	r3, r0
 800246c:	70fb      	strb	r3, [r7, #3]
 800246e:	460b      	mov	r3, r1
 8002470:	70bb      	strb	r3, [r7, #2]
 8002472:	4613      	mov	r3, r2
 8002474:	707b      	strb	r3, [r7, #1]
if(GPIOx == GPIOA ) RCC ->APB2ENR |= 1<<2 ;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a41      	ldr	r2, [pc, #260]	@ (8002580 <GPIOx_Init+0x124>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d105      	bne.n	800248a <GPIOx_Init+0x2e>
 800247e:	4b41      	ldr	r3, [pc, #260]	@ (8002584 <GPIOx_Init+0x128>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	4a40      	ldr	r2, [pc, #256]	@ (8002584 <GPIOx_Init+0x128>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOB ) RCC ->APB2ENR |= 1<<3 ;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a3e      	ldr	r2, [pc, #248]	@ (8002588 <GPIOx_Init+0x12c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d105      	bne.n	800249e <GPIOx_Init+0x42>
 8002492:	4b3c      	ldr	r3, [pc, #240]	@ (8002584 <GPIOx_Init+0x128>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	4a3b      	ldr	r2, [pc, #236]	@ (8002584 <GPIOx_Init+0x128>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOC ) RCC ->APB2ENR |= 1<<4 ;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a3a      	ldr	r2, [pc, #232]	@ (800258c <GPIOx_Init+0x130>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d105      	bne.n	80024b2 <GPIOx_Init+0x56>
 80024a6:	4b37      	ldr	r3, [pc, #220]	@ (8002584 <GPIOx_Init+0x128>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	4a36      	ldr	r2, [pc, #216]	@ (8002584 <GPIOx_Init+0x128>)
 80024ac:	f043 0310 	orr.w	r3, r3, #16
 80024b0:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOD ) RCC ->APB2ENR |= 1<<5 ;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a36      	ldr	r2, [pc, #216]	@ (8002590 <GPIOx_Init+0x134>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d105      	bne.n	80024c6 <GPIOx_Init+0x6a>
 80024ba:	4b32      	ldr	r3, [pc, #200]	@ (8002584 <GPIOx_Init+0x128>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	4a31      	ldr	r2, [pc, #196]	@ (8002584 <GPIOx_Init+0x128>)
 80024c0:	f043 0320 	orr.w	r3, r3, #32
 80024c4:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOE ) RCC ->APB2ENR |= 1<<6 ;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a32      	ldr	r2, [pc, #200]	@ (8002594 <GPIOx_Init+0x138>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d105      	bne.n	80024da <GPIOx_Init+0x7e>
 80024ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002584 <GPIOx_Init+0x128>)
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002584 <GPIOx_Init+0x128>)
 80024d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024d8:	6193      	str	r3, [r2, #24]
	if(Pin<8){
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	2b07      	cmp	r3, #7
 80024de:	d818      	bhi.n	8002512 <GPIOx_Init+0xb6>
	GPIOx->CRL &=~(0xF<<(Pin*4)) ;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	210f      	movs	r1, #15
 80024ea:	fa01 f202 	lsl.w	r2, r1, r2
 80024ee:	43d2      	mvns	r2, r2
 80024f0:	401a      	ands	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]
	GPIOx->CRL |=(((Mode<<2)+ Speed) <<(Pin*4)) ; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	78ba      	ldrb	r2, [r7, #2]
 80024fc:	0091      	lsls	r1, r2, #2
 80024fe:	7c3a      	ldrb	r2, [r7, #16]
 8002500:	4411      	add	r1, r2
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	0092      	lsls	r2, r2, #2
 8002506:	fa01 f202 	lsl.w	r2, r1, r2
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e019      	b.n	8002546 <GPIOx_Init+0xea>
	}
	else{
	GPIOx->CRH &=~(0xF<<((Pin-8)*4)) ;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	3a08      	subs	r2, #8
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	210f      	movs	r1, #15
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	43d2      	mvns	r2, r2
 8002524:	401a      	ands	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	605a      	str	r2, [r3, #4]
	GPIOx->CRH |=(((Mode<<2)+ Speed) <<((Pin-8)*4)) ;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	78ba      	ldrb	r2, [r7, #2]
 8002530:	0091      	lsls	r1, r2, #2
 8002532:	7c3a      	ldrb	r2, [r7, #16]
 8002534:	4411      	add	r1, r2
 8002536:	78fa      	ldrb	r2, [r7, #3]
 8002538:	3a08      	subs	r2, #8
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	fa01 f202 	lsl.w	r2, r1, r2
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	605a      	str	r2, [r3, #4]
	}
	if(Pull ==PU)
 8002546:	787b      	ldrb	r3, [r7, #1]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d109      	bne.n	8002560 <GPIOx_Init+0x104>
  GPIOx->ODR |= 1<<Pin ;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60da      	str	r2, [r3, #12]
  else GPIOx->ODR &= ~(1<<Pin); 	
}
 800255e:	e009      	b.n	8002574 <GPIOx_Init+0x118>
  else GPIOx->ODR &= ~(1<<Pin); 	
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	43d2      	mvns	r2, r2
 800256e:	401a      	ands	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	60da      	str	r2, [r3, #12]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40010800 	.word	0x40010800
 8002584:	40021000 	.word	0x40021000
 8002588:	40010c00 	.word	0x40010c00
 800258c:	40011000 	.word	0x40011000
 8002590:	40011400 	.word	0x40011400
 8002594:	40011800 	.word	0x40011800

08002598 <GPIOx_ReadPin>:
{
	if (bit==1) GPIOx->BSRR |= 1 << Pin ;
	else GPIOx->BSRR |= 1 << (Pin + 16);
}
uint8_t GPIOx_ReadPin(GPIO_TypeDef *GPIOx ,uint8_t Pin )
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70fb      	strb	r3, [r7, #3]
	return ((GPIOx->IDR)&(1<<Pin))==0 ? 0:1 ; 
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	2101      	movs	r1, #1
 80025ac:	fa01 f202 	lsl.w	r2, r1, r2
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf14      	ite	ne
 80025b6:	2301      	movne	r3, #1
 80025b8:	2300      	moveq	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <USARTtoBUFF>:
char USART3_BUFFER[USART3_BUFFER_SIZE];

USART_ST USART1_ST  ={USART1_BUFFER,USART1_BUFFER_SIZE , 0, 0, 0} ;
USART_ST USART2_ST  ={USART2_BUFFER,USART2_BUFFER_SIZE , 0, 0, 0} ;
USART_ST USART3_ST  ={USART3_BUFFER,USART3_BUFFER_SIZE , 0, 0, 0} ;
void USARTtoBUFF(USART_ST *u , char c){
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
	if(u->in<u->size){
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	88da      	ldrh	r2, [r3, #6]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	889b      	ldrh	r3, [r3, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d21b      	bcs.n	8002616 <USARTtoBUFF+0x50>
		 u->buffer[u->in] = c;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	88d2      	ldrh	r2, [r2, #6]
 80025e6:	4413      	add	r3, r2
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	701a      	strb	r2, [r3, #0]
		 u->in++;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	88db      	ldrh	r3, [r3, #6]
 80025f0:	3301      	adds	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	80da      	strh	r2, [r3, #6]
		 u->num++;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	895b      	ldrh	r3, [r3, #10]
 80025fc:	3301      	adds	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	815a      	strh	r2, [r3, #10]
		if(u->in==u->size) u->in = 0 ;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	88da      	ldrh	r2, [r3, #6]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	889b      	ldrh	r3, [r3, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d102      	bne.n	8002616 <USARTtoBUFF+0x50>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	80da      	strh	r2, [r3, #6]
	}
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <USART_PutC>:
    // Thêm null terminator
    if(i < len) str[i] = '\0';
    
    return i; 
}
void USART_PutC(USART_TypeDef * USARTx, char c) {
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	70fb      	strb	r3, [r7, #3]
    while(!(USARTx->SR & (1<<7)));  // Ð?i d?n khi TXE = 1
 800262c:	bf00      	nop
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f9      	beq.n	800262e <USART_PutC+0xe>
    USARTx->DR = c;
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	605a      	str	r2, [r3, #4]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <USART1_IRQHandler>:

 while(*str) USART_PutC(USARTx ,*str ++) ;

}
void USART1_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
    if(USART1->SR & (1<<5)) {           // ? USART1 check USART1
 8002652:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <USART1_IRQHandler+0x2c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <USART1_IRQHandler+0x22>
        char data = USART1->DR;                // ? Ð?c t? USART1
 800265e:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <USART1_IRQHandler+0x2c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART1_ST, data);         // ? Luu vào buffer USART1
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	4619      	mov	r1, r3
 8002668:	4804      	ldr	r0, [pc, #16]	@ (800267c <USART1_IRQHandler+0x30>)
 800266a:	f7ff ffac 	bl	80025c6 <USARTtoBUFF>
    }
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40013800 	.word	0x40013800
 800267c:	2000000c 	.word	0x2000000c

08002680 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
    if(USART2->SR & (1<<5)) {           // ? USART2 check USART2  
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <USART2_IRQHandler+0x2c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <USART2_IRQHandler+0x22>
        char data = USART2->DR;                // ? Ð?c t? USART2
 8002692:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <USART2_IRQHandler+0x2c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART2_ST, data);         // ? Luu vào buffer USART2
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	4619      	mov	r1, r3
 800269c:	4804      	ldr	r0, [pc, #16]	@ (80026b0 <USART2_IRQHandler+0x30>)
 800269e:	f7ff ff92 	bl	80025c6 <USARTtoBUFF>
    }
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40004400 	.word	0x40004400
 80026b0:	20000018 	.word	0x20000018

080026b4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
    if(USART3->SR & (1<<5)) {           // ? USART3 dã dúng
 80026ba:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <USART3_IRQHandler+0x2c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <USART3_IRQHandler+0x22>
        char data = USART3->DR;                // ? Ð?c t? USART3
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <USART3_IRQHandler+0x2c>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART3_ST, data);         // ? Luu vào buffer USART3
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4804      	ldr	r0, [pc, #16]	@ (80026e4 <USART3_IRQHandler+0x30>)
 80026d2:	f7ff ff78 	bl	80025c6 <USARTtoBUFF>
    }
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40004800 	.word	0x40004800
 80026e4:	20000024 	.word	0x20000024

080026e8 <__io_putchar>:

// =============================================================================
// PRINTF UART REDIRECT
// =============================================================================
#ifdef __GNUC__
int __io_putchar(int ch) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
    USART_PutC(USART1, (char)ch);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	4804      	ldr	r0, [pc, #16]	@ (8002708 <__io_putchar+0x20>)
 80026f8:	f7ff ff92 	bl	8002620 <USART_PutC>
    return ch;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40013800 	.word	0x40013800

0800270c <InitMQ137Sensor>:
 *
 *  Created on: Jun 30, 2025
 *      Author: FPTSHOP
 */
#include "gas_sensor.h"
void InitMQ137Sensor(GasSensor_t* sensor) {
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
    // Cấu hình base sensor
    sensor->base.sensor_id = 0;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
    sensor->base.sensor_type = SENSOR_TYPE_MQ137;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	705a      	strb	r2, [r3, #1]
    strcpy(sensor->base.sensor_name, "MQ137");
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3302      	adds	r3, #2
 8002724:	4a20      	ldr	r2, [pc, #128]	@ (80027a8 <InitMQ137Sensor+0x9c>)
 8002726:	6810      	ldr	r0, [r2, #0]
 8002728:	6018      	str	r0, [r3, #0]
 800272a:	8892      	ldrh	r2, [r2, #4]
 800272c:	809a      	strh	r2, [r3, #4]
    sensor->base.is_enabled = 1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	749a      	strb	r2, [r3, #18]
    sensor->base.adc_channel = MQ137_ADC_CHANNEL;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	615a      	str	r2, [r3, #20]
    sensor->base.digital_port = MQ137_DIGITAL_PORT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1b      	ldr	r2, [pc, #108]	@ (80027ac <InitMQ137Sensor+0xa0>)
 800273e:	619a      	str	r2, [r3, #24]
    sensor->base.digital_pin = MQ137_DIGITAL_PIN;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2208      	movs	r2, #8
 8002744:	839a      	strh	r2, [r3, #28]
    sensor->base.r0_value = 10000.0f; // Giá trị mặc định, cần hiệu chuẩn
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a19      	ldr	r2, [pc, #100]	@ (80027b0 <InitMQ137Sensor+0xa4>)
 800274a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Cấu hình gas sensor
    sensor->gas_type = GAS_TYPE_NH3;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    strcpy(sensor->gas_name, "NH3");
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3339      	adds	r3, #57	@ 0x39
 8002758:	4a16      	ldr	r2, [pc, #88]	@ (80027b4 <InitMQ137Sensor+0xa8>)
 800275a:	6810      	ldr	r0, [r2, #0]
 800275c:	6018      	str	r0, [r3, #0]
    strcpy(sensor->unit, "ppm");
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3341      	adds	r3, #65	@ 0x41
 8002762:	4a15      	ldr	r2, [pc, #84]	@ (80027b8 <InitMQ137Sensor+0xac>)
 8002764:	6810      	ldr	r0, [r2, #0]
 8002766:	6018      	str	r0, [r3, #0]
    
    // Ngưỡng cảnh báo NH3
    sensor->threshold_low = 15.0f;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a14      	ldr	r2, [pc, #80]	@ (80027bc <InitMQ137Sensor+0xb0>)
 800276c:	659a      	str	r2, [r3, #88]	@ 0x58
    sensor->threshold_high = 25.0f;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a13      	ldr	r2, [pc, #76]	@ (80027c0 <InitMQ137Sensor+0xb4>)
 8002772:	65da      	str	r2, [r3, #92]	@ 0x5c
    sensor->threshold_danger = 50.0f;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a13      	ldr	r2, [pc, #76]	@ (80027c4 <InitMQ137Sensor+0xb8>)
 8002778:	661a      	str	r2, [r3, #96]	@ 0x60
    
    // Thông số đặc tuyến MQ137 cho NH3
    sensor->curve_a = 102.2f;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a12      	ldr	r2, [pc, #72]	@ (80027c8 <InitMQ137Sensor+0xbc>)
 800277e:	669a      	str	r2, [r3, #104]	@ 0x68
    sensor->curve_b = -2.473f;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a12      	ldr	r2, [pc, #72]	@ (80027cc <InitMQ137Sensor+0xc0>)
 8002784:	66da      	str	r2, [r3, #108]	@ 0x6c
    sensor->min_ppm = 0.0f;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	671a      	str	r2, [r3, #112]	@ 0x70
    sensor->max_ppm = 500.0f;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a0f      	ldr	r2, [pc, #60]	@ (80027d0 <InitMQ137Sensor+0xc4>)
 8002792:	675a      	str	r2, [r3, #116]	@ 0x74
    
    // Khởi tạo giá trị
    sensor->alarm_level = ALARM_NORMAL;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	080088b4 	.word	0x080088b4
 80027ac:	40010800 	.word	0x40010800
 80027b0:	461c4000 	.word	0x461c4000
 80027b4:	080088bc 	.word	0x080088bc
 80027b8:	080088c0 	.word	0x080088c0
 80027bc:	41700000 	.word	0x41700000
 80027c0:	41c80000 	.word	0x41c80000
 80027c4:	42480000 	.word	0x42480000
 80027c8:	42cc6666 	.word	0x42cc6666
 80027cc:	c01e45a2 	.word	0xc01e45a2
 80027d0:	43fa0000 	.word	0x43fa0000

080027d4 <InitMQ135Sensor>:

/**
 * @brief Khởi tạo cảm biến MQ135 (CO2)
 */
void InitMQ135Sensor(GasSensor_t* sensor) {
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    // Cấu hình base sensor
    sensor->base.sensor_id = 1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
    sensor->base.sensor_type = SENSOR_TYPE_MQ135;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	705a      	strb	r2, [r3, #1]
    strcpy(sensor->base.sensor_name, "MQ135");
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3302      	adds	r3, #2
 80027ec:	4a1f      	ldr	r2, [pc, #124]	@ (800286c <InitMQ135Sensor+0x98>)
 80027ee:	6810      	ldr	r0, [r2, #0]
 80027f0:	6018      	str	r0, [r3, #0]
 80027f2:	8892      	ldrh	r2, [r2, #4]
 80027f4:	809a      	strh	r2, [r3, #4]
    sensor->base.is_enabled = 1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	749a      	strb	r2, [r3, #18]
    sensor->base.adc_channel = MQ135_ADC_CHANNEL;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	615a      	str	r2, [r3, #20]
    sensor->base.digital_port = MQ135_DIGITAL_PORT;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1a      	ldr	r2, [pc, #104]	@ (8002870 <InitMQ135Sensor+0x9c>)
 8002806:	619a      	str	r2, [r3, #24]
    sensor->base.digital_pin = MQ135_DIGITAL_PIN;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2210      	movs	r2, #16
 800280c:	839a      	strh	r2, [r3, #28]
    sensor->base.r0_value = 10000.0f; // Giá trị mặc định, cần hiệu chuẩn
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a18      	ldr	r2, [pc, #96]	@ (8002874 <InitMQ135Sensor+0xa0>)
 8002812:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Cấu hình gas sensor
    sensor->gas_type = GAS_TYPE_CO2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    strcpy(sensor->gas_name, "CO2");
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3339      	adds	r3, #57	@ 0x39
 8002820:	4a15      	ldr	r2, [pc, #84]	@ (8002878 <InitMQ135Sensor+0xa4>)
 8002822:	6810      	ldr	r0, [r2, #0]
 8002824:	6018      	str	r0, [r3, #0]
    strcpy(sensor->unit, "ppm");
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3341      	adds	r3, #65	@ 0x41
 800282a:	4a14      	ldr	r2, [pc, #80]	@ (800287c <InitMQ135Sensor+0xa8>)
 800282c:	6810      	ldr	r0, [r2, #0]
 800282e:	6018      	str	r0, [r3, #0]
    
    // Ngưỡng cảnh báo CO2
    sensor->threshold_low = 800.0f;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <InitMQ135Sensor+0xac>)
 8002834:	659a      	str	r2, [r3, #88]	@ 0x58
    sensor->threshold_high = 1200.0f;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <InitMQ135Sensor+0xb0>)
 800283a:	65da      	str	r2, [r3, #92]	@ 0x5c
    sensor->threshold_danger = 2000.0f;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <InitMQ135Sensor+0xb4>)
 8002840:	661a      	str	r2, [r3, #96]	@ 0x60
    
    // Thông số đặc tuyến MQ135 cho CO2
    sensor->curve_a = 116.6f;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a11      	ldr	r2, [pc, #68]	@ (800288c <InitMQ135Sensor+0xb8>)
 8002846:	669a      	str	r2, [r3, #104]	@ 0x68
    sensor->curve_b = -2.769f;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a11      	ldr	r2, [pc, #68]	@ (8002890 <InitMQ135Sensor+0xbc>)
 800284c:	66da      	str	r2, [r3, #108]	@ 0x6c
    sensor->min_ppm = 300.0f;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a10      	ldr	r2, [pc, #64]	@ (8002894 <InitMQ135Sensor+0xc0>)
 8002852:	671a      	str	r2, [r3, #112]	@ 0x70
    sensor->max_ppm = 5000.0f;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a10      	ldr	r2, [pc, #64]	@ (8002898 <InitMQ135Sensor+0xc4>)
 8002858:	675a      	str	r2, [r3, #116]	@ 0x74
    
    // Khởi tạo giá trị
    sensor->alarm_level = ALARM_NORMAL;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	080088c4 	.word	0x080088c4
 8002870:	40010800 	.word	0x40010800
 8002874:	461c4000 	.word	0x461c4000
 8002878:	080088cc 	.word	0x080088cc
 800287c:	080088c0 	.word	0x080088c0
 8002880:	44480000 	.word	0x44480000
 8002884:	44960000 	.word	0x44960000
 8002888:	44fa0000 	.word	0x44fa0000
 800288c:	42e93333 	.word	0x42e93333
 8002890:	c031374c 	.word	0xc031374c
 8002894:	43960000 	.word	0x43960000
 8002898:	459c4000 	.word	0x459c4000

0800289c <ProcessGasSensor>:

void ProcessGasSensor(GasSensor_t* sensor) {
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    // Đọc dữ liệu thô
    sensor->base.raw_voltage = ReadADC_Voltage(sensor->base.adc_channel);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 f9c5 	bl	8002c38 <ReadADC_Voltage>
 80028ae:	4602      	mov	r2, r0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	621a      	str	r2, [r3, #32]
    sensor->base.digital_state = ReadDigitalState(sensor->base.digital_port, sensor->base.digital_pin);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8b9b      	ldrh	r3, [r3, #28]
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f000 f9ea 	bl	8002c98 <ReadDigitalState>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    sensor->base.timestamp = HAL_GetTick();
 80028ce:	f7fe ff29 	bl	8001724 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    // Tính toán điện trở và tỷ lệ Rs/R0
    if(sensor->base.raw_voltage > 0.2f) { // Ngưỡng thấp hơn cho ADC 3.3V
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	493f      	ldr	r1, [pc, #252]	@ (80029dc <ProcessGasSensor+0x140>)
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fc0c 	bl	80010fc <__aeabi_fcmpgt>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d059      	beq.n	800299e <ProcessGasSensor+0x102>
        sensor->base.resistance = CalculateResistance(sensor->base.raw_voltage);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f9e4 	bl	8002cbc <CalculateResistance>
 80028f4:	4602      	mov	r2, r0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	625a      	str	r2, [r3, #36]	@ 0x24
        sensor->base.rs_r0_ratio = sensor->base.resistance / sensor->base.r0_value;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002902:	4619      	mov	r1, r3
 8002904:	4610      	mov	r0, r2
 8002906:	f7fe faf1 	bl	8000eec <__aeabi_fdiv>
 800290a:	4603      	mov	r3, r0
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	629a      	str	r2, [r3, #40]	@ 0x28
        
        // Tính nồng độ khí
        sensor->gas_ppm = CalculateGasPPM(sensor->base.rs_r0_ratio, sensor->curve_a, sensor->curve_b);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800291e:	461a      	mov	r2, r3
 8002920:	f000 f9f4 	bl	8002d0c <CalculateGasPPM>
 8002924:	4602      	mov	r2, r0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        // Giới hạn giá trị trong khoảng hợp lệ
        if(sensor->gas_ppm < sensor->min_ppm) sensor->gas_ppm = sensor->min_ppm;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f7fe fbc3 	bl	80010c0 <__aeabi_fcmplt>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <ProcessGasSensor+0xac>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	64da      	str	r2, [r3, #76]	@ 0x4c
        if(sensor->gas_ppm > sensor->max_ppm) sensor->gas_ppm = sensor->max_ppm;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002950:	4619      	mov	r1, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f7fe fbd2 	bl	80010fc <__aeabi_fcmpgt>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <ProcessGasSensor+0xca>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        // Lọc nhiễu đơn giản (moving average)
        sensor->filtered_ppm = 0.8f * sensor->filtered_ppm + 0.2f * sensor->gas_ppm;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800296a:	491d      	ldr	r1, [pc, #116]	@ (80029e0 <ProcessGasSensor+0x144>)
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fa09 	bl	8000d84 <__aeabi_fmul>
 8002972:	4603      	mov	r3, r0
 8002974:	461c      	mov	r4, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297a:	4918      	ldr	r1, [pc, #96]	@ (80029dc <ProcessGasSensor+0x140>)
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fa01 	bl	8000d84 <__aeabi_fmul>
 8002982:	4603      	mov	r3, r0
 8002984:	4619      	mov	r1, r3
 8002986:	4620      	mov	r0, r4
 8002988:	f7fe f8f4 	bl	8000b74 <__addsf3>
 800298c:	4603      	mov	r3, r0
 800298e:	461a      	mov	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	651a      	str	r2, [r3, #80]	@ 0x50
        sensor->average_ppm = sensor->filtered_ppm;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54
 800299c:	e00f      	b.n	80029be <ProcessGasSensor+0x122>
        
    } else {
        sensor->base.resistance = 0.0f;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24
        sensor->base.rs_r0_ratio = 0.0f;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	629a      	str	r2, [r3, #40]	@ 0x28
        sensor->gas_ppm = sensor->min_ppm;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	64da      	str	r2, [r3, #76]	@ 0x4c
        sensor->filtered_ppm = sensor->min_ppm;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    // Validate dữ liệu
    sensor->base.is_valid = ValidateGasSensor(sensor);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f810 	bl	80029e4 <ValidateGasSensor>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	74da      	strb	r2, [r3, #19]
    
    // Cập nhật mức cảnh báo
    UpdateAlarmLevel(sensor);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f85b 	bl	8002a88 <UpdateAlarmLevel>
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd90      	pop	{r4, r7, pc}
 80029da:	bf00      	nop
 80029dc:	3e4ccccd 	.word	0x3e4ccccd
 80029e0:	3f4ccccd 	.word	0x3f4ccccd

080029e4 <ValidateGasSensor>:

/**
 * @brief Validate dữ liệu cảm biến (cập nhật cho điện áp 3.3V)
 */
uint8_t ValidateGasSensor(GasSensor_t* sensor) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    // Kiểm tra điện áp trong khoảng hợp lệ (0.1V - 4.8V cho cảm biến 5V)
    // Sau khi qua mạch chia áp, tín hiệu sẽ từ 0.066V - 3.168V tại ADC
    if(sensor->base.raw_voltage < 0.2f || sensor->base.raw_voltage > 4.8f) {
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4921      	ldr	r1, [pc, #132]	@ (8002a78 <ValidateGasSensor+0x94>)
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fb64 	bl	80010c0 <__aeabi_fcmplt>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <ValidateGasSensor+0x2c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	491e      	ldr	r1, [pc, #120]	@ (8002a7c <ValidateGasSensor+0x98>)
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fb79 	bl	80010fc <__aeabi_fcmpgt>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <ValidateGasSensor+0x30>
        return 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e02c      	b.n	8002a6e <ValidateGasSensor+0x8a>
    }
    
    // Kiểm tra điện trở trong khoảng hợp lệ
    if(sensor->base.resistance < 1000.0f || sensor->base.resistance > 200000.0f) {
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	4919      	ldr	r1, [pc, #100]	@ (8002a80 <ValidateGasSensor+0x9c>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fb50 	bl	80010c0 <__aeabi_fcmplt>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d108      	bne.n	8002a38 <ValidateGasSensor+0x54>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	4916      	ldr	r1, [pc, #88]	@ (8002a84 <ValidateGasSensor+0xa0>)
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe fb65 	bl	80010fc <__aeabi_fcmpgt>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <ValidateGasSensor+0x58>
        return 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e018      	b.n	8002a6e <ValidateGasSensor+0x8a>
    }
    
    // Kiểm tra nồng độ khí trong khoảng hợp lệ
    if(sensor->gas_ppm < sensor->min_ppm || sensor->gas_ppm > sensor->max_ppm) {
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f7fe fb3a 	bl	80010c0 <__aeabi_fcmplt>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10a      	bne.n	8002a68 <ValidateGasSensor+0x84>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	f7fe fb4d 	bl	80010fc <__aeabi_fcmpgt>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <ValidateGasSensor+0x88>
        return 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <ValidateGasSensor+0x8a>
    }
    
    return 1; // Dữ liệu hợp lệ
 8002a6c:	2301      	movs	r3, #1
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	3e4ccccd 	.word	0x3e4ccccd
 8002a7c:	4099999a 	.word	0x4099999a
 8002a80:	447a0000 	.word	0x447a0000
 8002a84:	48435000 	.word	0x48435000

08002a88 <UpdateAlarmLevel>:

/**
 * @brief Cập nhật mức cảnh báo cho cảm biến
 */
void UpdateAlarmLevel(GasSensor_t* sensor) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
    sensor->alarm_level = DetermineAlarmLevel(sensor->filtered_ppm, 
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa0:	f000 f953 	bl	8002d4a <DetermineAlarmLevel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
                                            sensor->threshold_low,
                                            sensor->threshold_high, 
                                            sensor->threshold_danger);
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <PrintSensorDetails>:
void PrintSensorDetails(GasSensor_t* sensor) {
 8002ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002abc:	b08d      	sub	sp, #52	@ 0x34
 8002abe:	af06      	add	r7, sp, #24
 8002ac0:	6078      	str	r0, [r7, #4]
    printf("\r\n--- %s (%s) ---\r\n", sensor->base.sensor_name, sensor->gas_name);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	1c99      	adds	r1, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3339      	adds	r3, #57	@ 0x39
 8002aca:	461a      	mov	r2, r3
 8002acc:	484d      	ldr	r0, [pc, #308]	@ (8002c04 <PrintSensorDetails+0x14c>)
 8002ace:	f001 fb05 	bl	80040dc <iprintf>
    printf("ID: %d | Trạng thái: %s\r\n", 
           sensor->base.sensor_id, 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
    printf("ID: %d | Trạng thái: %s\r\n", 
 8002ad6:	4619      	mov	r1, r3
           sensor->base.is_enabled ? (sensor->base.is_valid ? "Hoạt động" : "Lỗi") : "Tắt");
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7c9b      	ldrb	r3, [r3, #18]
    printf("ID: %d | Trạng thái: %s\r\n", 
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <PrintSensorDetails+0x38>
           sensor->base.is_enabled ? (sensor->base.is_valid ? "Hoạt động" : "Lỗi") : "Tắt");
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7cdb      	ldrb	r3, [r3, #19]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <PrintSensorDetails+0x34>
 8002ae8:	4b47      	ldr	r3, [pc, #284]	@ (8002c08 <PrintSensorDetails+0x150>)
 8002aea:	e002      	b.n	8002af2 <PrintSensorDetails+0x3a>
 8002aec:	4b47      	ldr	r3, [pc, #284]	@ (8002c0c <PrintSensorDetails+0x154>)
 8002aee:	e000      	b.n	8002af2 <PrintSensorDetails+0x3a>
    printf("ID: %d | Trạng thái: %s\r\n", 
 8002af0:	4b47      	ldr	r3, [pc, #284]	@ (8002c10 <PrintSensorDetails+0x158>)
 8002af2:	461a      	mov	r2, r3
 8002af4:	4847      	ldr	r0, [pc, #284]	@ (8002c14 <PrintSensorDetails+0x15c>)
 8002af6:	f001 faf1 	bl	80040dc <iprintf>
    printf("Điện áp: %.3f V | Điện trở: %.1f Ω\r\n", 
           sensor->base.raw_voltage, sensor->base.resistance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
    printf("Điện áp: %.3f V | Điện trở: %.1f Ω\r\n", 
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd fc92 	bl	8000428 <__aeabi_f2d>
 8002b04:	4604      	mov	r4, r0
 8002b06:	460d      	mov	r5, r1
           sensor->base.raw_voltage, sensor->base.resistance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    printf("Điện áp: %.3f V | Điện trở: %.1f Ω\r\n", 
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fc8b 	bl	8000428 <__aeabi_f2d>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	e9cd 2300 	strd	r2, r3, [sp]
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	462b      	mov	r3, r5
 8002b1e:	483e      	ldr	r0, [pc, #248]	@ (8002c18 <PrintSensorDetails+0x160>)
 8002b20:	f001 fadc 	bl	80040dc <iprintf>
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
           sensor->base.rs_r0_ratio, sensor->base.r0_value);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fc7d 	bl	8000428 <__aeabi_f2d>
 8002b2e:	4604      	mov	r4, r0
 8002b30:	460d      	mov	r5, r1
           sensor->base.rs_r0_ratio, sensor->base.r0_value);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fc76 	bl	8000428 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	e9cd 2300 	strd	r2, r3, [sp]
 8002b44:	4622      	mov	r2, r4
 8002b46:	462b      	mov	r3, r5
 8002b48:	4834      	ldr	r0, [pc, #208]	@ (8002c1c <PrintSensorDetails+0x164>)
 8002b4a:	f001 fac7 	bl	80040dc <iprintf>
    printf("Nồng độ: %.1f %s (Lọc: %.1f %s)\r\n", 
           sensor->gas_ppm, sensor->unit, sensor->filtered_ppm, sensor->unit);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    printf("Nồng độ: %.1f %s (Lọc: %.1f %s)\r\n", 
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fc68 	bl	8000428 <__aeabi_f2d>
 8002b58:	4604      	mov	r4, r0
 8002b5a:	460d      	mov	r5, r1
           sensor->gas_ppm, sensor->unit, sensor->filtered_ppm, sensor->unit);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f103 0641 	add.w	r6, r3, #65	@ 0x41
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    printf("Nồng độ: %.1f %s (Lọc: %.1f %s)\r\n", 
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fc5e 	bl	8000428 <__aeabi_f2d>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
           sensor->gas_ppm, sensor->unit, sensor->filtered_ppm, sensor->unit);
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	3141      	adds	r1, #65	@ 0x41
    printf("Nồng độ: %.1f %s (Lọc: %.1f %s)\r\n", 
 8002b74:	9104      	str	r1, [sp, #16]
 8002b76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b7a:	9600      	str	r6, [sp, #0]
 8002b7c:	4622      	mov	r2, r4
 8002b7e:	462b      	mov	r3, r5
 8002b80:	4827      	ldr	r0, [pc, #156]	@ (8002c20 <PrintSensorDetails+0x168>)
 8002b82:	f001 faab 	bl	80040dc <iprintf>
    printf("Digital: %s\r\n", sensor->base.digital_state ? "HIGH" : "LOW");
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <PrintSensorDetails+0xdc>
 8002b90:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <PrintSensorDetails+0x16c>)
 8002b92:	e000      	b.n	8002b96 <PrintSensorDetails+0xde>
 8002b94:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <PrintSensorDetails+0x170>)
 8002b96:	4619      	mov	r1, r3
 8002b98:	4824      	ldr	r0, [pc, #144]	@ (8002c2c <PrintSensorDetails+0x174>)
 8002b9a:	f001 fa9f 	bl	80040dc <iprintf>
    
    const char* alarm_text[] = {"Bình thường", "Thấp", "Cao", "NGUY HIỂM"};
 8002b9e:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <PrintSensorDetails+0x178>)
 8002ba0:	f107 0408 	add.w	r4, r7, #8
 8002ba4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    printf("Cảnh báo: %s (%.1f/%.1f/%.1f)\r\n", 
           alarm_text[sensor->alarm_level],
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    printf("Cảnh báo: %s (%.1f/%.1f/%.1f)\r\n", 
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	3318      	adds	r3, #24
 8002bb4:	443b      	add	r3, r7
 8002bb6:	f853 6c10 	ldr.w	r6, [r3, #-16]
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    printf("Cảnh báo: %s (%.1f/%.1f/%.1f)\r\n", 
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fc32 	bl	8000428 <__aeabi_f2d>
 8002bc4:	4680      	mov	r8, r0
 8002bc6:	4689      	mov	r9, r1
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
    printf("Cảnh báo: %s (%.1f/%.1f/%.1f)\r\n", 
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fc2b 	bl	8000428 <__aeabi_f2d>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	460d      	mov	r5, r1
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    printf("Cảnh báo: %s (%.1f/%.1f/%.1f)\r\n", 
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fc24 	bl	8000428 <__aeabi_f2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002be8:	e9cd 4500 	strd	r4, r5, [sp]
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	4631      	mov	r1, r6
 8002bf2:	4810      	ldr	r0, [pc, #64]	@ (8002c34 <PrintSensorDetails+0x17c>)
 8002bf4:	f001 fa72 	bl	80040dc <iprintf>
}
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c02:	bf00      	nop
 8002c04:	080088d0 	.word	0x080088d0
 8002c08:	080088e4 	.word	0x080088e4
 8002c0c:	080088f4 	.word	0x080088f4
 8002c10:	080088fc 	.word	0x080088fc
 8002c14:	08008904 	.word	0x08008904
 8002c18:	08008924 	.word	0x08008924
 8002c1c:	08008954 	.word	0x08008954
 8002c20:	08008970 	.word	0x08008970
 8002c24:	0800899c 	.word	0x0800899c
 8002c28:	080089a4 	.word	0x080089a4
 8002c2c:	080089a8 	.word	0x080089a8
 8002c30:	08008a04 	.word	0x08008a04
 8002c34:	080089b8 	.word	0x080089b8

08002c38 <ReadADC_Voltage>:
 *
 *  Created on: Jun 30, 2025
 *      Author: FPTSHOP
 */
#include "sensor_hardware.h"
float ReadADC_Voltage(uint32_t channel) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
    // Đọc giá trị ADC trung bình
    float adc_avg = ADCx_Read_TB(ADC1, channel, 10);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	220a      	movs	r2, #10
 8002c46:	4619      	mov	r1, r3
 8002c48:	480f      	ldr	r0, [pc, #60]	@ (8002c88 <ReadADC_Voltage+0x50>)
 8002c4a:	f7ff fbda 	bl	8002402 <ADCx_Read_TB>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe f83f 	bl	8000cd4 <__aeabi_ui2f>
 8002c56:	4603      	mov	r3, r0
 8002c58:	617b      	str	r3, [r7, #20]
    
    // Chuyển đổi giá trị ADC sang điện áp tại chân ADC
    float adc_voltage = adc_avg * ADC_VREF / ADC_RESOLUTION;
 8002c5a:	490c      	ldr	r1, [pc, #48]	@ (8002c8c <ReadADC_Voltage+0x54>)
 8002c5c:	6978      	ldr	r0, [r7, #20]
 8002c5e:	f7fe f891 	bl	8000d84 <__aeabi_fmul>
 8002c62:	4603      	mov	r3, r0
 8002c64:	490a      	ldr	r1, [pc, #40]	@ (8002c90 <ReadADC_Voltage+0x58>)
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe f940 	bl	8000eec <__aeabi_fdiv>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	613b      	str	r3, [r7, #16]
    
    // Hiệu chỉnh cho mạch chia áp để có điện áp thực của cảm biến
    float sensor_voltage = adc_voltage / VOLTAGE_DIVIDER_RATIO;
 8002c70:	4908      	ldr	r1, [pc, #32]	@ (8002c94 <ReadADC_Voltage+0x5c>)
 8002c72:	6938      	ldr	r0, [r7, #16]
 8002c74:	f7fe f93a 	bl	8000eec <__aeabi_fdiv>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	60fb      	str	r3, [r7, #12]
    
    return sensor_voltage;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40012400 	.word	0x40012400
 8002c8c:	40533333 	.word	0x40533333
 8002c90:	457ff000 	.word	0x457ff000
 8002c94:	3f28f5c3 	.word	0x3f28f5c3

08002c98 <ReadDigitalState>:
/**
 * @brief Đọc trạng thái digital
 */
uint8_t ReadDigitalState(GPIO_TypeDef* port, uint16_t pin) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
    return GPIOx_ReadPin(port , pin );
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	4619      	mov	r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fc74 	bl	8002598 <GPIOx_ReadPin>
 8002cb0:	4603      	mov	r3, r0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <CalculateResistance>:

/**
 * @brief Tính điện trở cảm biến (hiệu chỉnh cho nguồn 5V)
 */
float CalculateResistance(float voltage) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
    if(voltage <= 0.1f) return 0.0f;
 8002cc4:	490e      	ldr	r1, [pc, #56]	@ (8002d00 <CalculateResistance+0x44>)
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fe fa04 	bl	80010d4 <__aeabi_fcmple>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <CalculateResistance+0x1c>
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	e00e      	b.n	8002cf6 <CalculateResistance+0x3a>
    
    // Công thức tính điện trở cảm biến với nguồn cấp 5V
    // Rs = (Vcc - Vs) / Vs * RL
    // Trong đó: Vcc = 5V, Vs = điện áp đo được, RL = điện trở tải
    return ((SENSOR_VCC - voltage) / voltage) * LOAD_RESISTANCE;
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	480a      	ldr	r0, [pc, #40]	@ (8002d04 <CalculateResistance+0x48>)
 8002cdc:	f7fd ff48 	bl	8000b70 <__aeabi_fsub>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe f901 	bl	8000eec <__aeabi_fdiv>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4906      	ldr	r1, [pc, #24]	@ (8002d08 <CalculateResistance+0x4c>)
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe f848 	bl	8000d84 <__aeabi_fmul>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	3dcccccd 	.word	0x3dcccccd
 8002d04:	40a00000 	.word	0x40a00000
 8002d08:	461c4000 	.word	0x461c4000

08002d0c <CalculateGasPPM>:

/**
 * @brief Tính nồng độ khí từ tỷ lệ Rs/R0
 */
float CalculateGasPPM(float rs_r0_ratio, float curve_a, float curve_b) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
    if(rs_r0_ratio <= 0) return 0.0f;
 8002d18:	f04f 0100 	mov.w	r1, #0
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f7fe f9d9 	bl	80010d4 <__aeabi_fcmple>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <CalculateGasPPM+0x22>
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e009      	b.n	8002d42 <CalculateGasPPM+0x36>
    return curve_a * powf(rs_r0_ratio, curve_b);
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f004 fe73 	bl	8007a1c <powf>
 8002d36:	4603      	mov	r3, r0
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe f822 	bl	8000d84 <__aeabi_fmul>
 8002d40:	4603      	mov	r3, r0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <DetermineAlarmLevel>:

/**
 * @brief Xác định mức cảnh báo
 */
AlarmLevel_t DetermineAlarmLevel(float ppm, float low, float high, float danger) {
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	603b      	str	r3, [r7, #0]
    if(ppm >= danger) return ALARM_DANGER;
 8002d58:	6839      	ldr	r1, [r7, #0]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7fe f9c4 	bl	80010e8 <__aeabi_fcmpge>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <DetermineAlarmLevel+0x20>
 8002d66:	2303      	movs	r3, #3
 8002d68:	e012      	b.n	8002d90 <DetermineAlarmLevel+0x46>
    if(ppm >= high) return ALARM_HIGH;
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7fe f9bb 	bl	80010e8 <__aeabi_fcmpge>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <DetermineAlarmLevel+0x32>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e009      	b.n	8002d90 <DetermineAlarmLevel+0x46>
    if(ppm >= low) return ALARM_LOW;
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7fe f9b2 	bl	80010e8 <__aeabi_fcmpge>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <DetermineAlarmLevel+0x44>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <DetermineAlarmLevel+0x46>
    return ALARM_NORMAL;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <InitSensorSystem>:
static SensorSystem_t history_buffer[HISTORY_BUFFER_SIZE];
static uint8_t history_index = 0;

// Các define khác cần thiết
#define MAIN_LOOP_DELAY 60000  // 1 phút = 60000ms
void InitSensorSystem(void) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af02      	add	r7, sp, #8
    printf("\r\n=== KHỞI TẠO HỆ THỐNG CẢM BIẾN ===\r\n");
 8002d9e:	4838      	ldr	r0, [pc, #224]	@ (8002e80 <InitSensorSystem+0xe8>)
 8002da0:	f001 fa04 	bl	80041ac <puts>
    
    // Reset toàn bộ hệ thống
    memset(&g_sensor_system, 0, sizeof(SensorSystem_t));
 8002da4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002da8:	2100      	movs	r1, #0
 8002daa:	4836      	ldr	r0, [pc, #216]	@ (8002e84 <InitSensorSystem+0xec>)
 8002dac:	f001 fafe 	bl	80043ac <memset>
    memset(history_buffer, 0, sizeof(history_buffer));
 8002db0:	f643 42f0 	movw	r2, #15600	@ 0x3cf0
 8002db4:	2100      	movs	r1, #0
 8002db6:	4834      	ldr	r0, [pc, #208]	@ (8002e88 <InitSensorSystem+0xf0>)
 8002db8:	f001 faf8 	bl	80043ac <memset>
    
    // Khởi tạo từng cảm biến
    InitMQ137Sensor(&g_sensor_system.mq137);
 8002dbc:	4831      	ldr	r0, [pc, #196]	@ (8002e84 <InitSensorSystem+0xec>)
 8002dbe:	f7ff fca5 	bl	800270c <InitMQ137Sensor>
    InitMQ135Sensor(&g_sensor_system.mq135);
 8002dc2:	4832      	ldr	r0, [pc, #200]	@ (8002e8c <InitSensorSystem+0xf4>)
 8002dc4:	f7ff fd06 	bl	80027d4 <InitMQ135Sensor>
    
    // MQ137 Digital Pin
    GPIOx_Init(MQ137_DIGITAL_PORT ,MQ137_DIGITAL_PIN ,MODE_INPUT ,PU,0)  ; 
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2108      	movs	r1, #8
 8002dd2:	482f      	ldr	r0, [pc, #188]	@ (8002e90 <InitSensorSystem+0xf8>)
 8002dd4:	f7ff fb42 	bl	800245c <GPIOx_Init>
    // MQ135 Digital Pin
    GPIOx_Init(MQ135_DIGITAL_PORT ,MQ135_DIGITAL_PIN ,MODE_INPUT ,PU,0)  ;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2301      	movs	r3, #1
 8002dde:	2200      	movs	r2, #0
 8002de0:	2110      	movs	r1, #16
 8002de2:	482b      	ldr	r0, [pc, #172]	@ (8002e90 <InitSensorSystem+0xf8>)
 8002de4:	f7ff fb3a 	bl	800245c <GPIOx_Init>
// Khởi tạo ADC cho các channel analog
    ADCx_Init(ADC1, MQ137_ADC_CHANNEL);
 8002de8:	2100      	movs	r1, #0
 8002dea:	482a      	ldr	r0, [pc, #168]	@ (8002e94 <InitSensorSystem+0xfc>)
 8002dec:	f7ff f98a 	bl	8002104 <ADCx_Init>
    ADCx_Init(ADC1, MQ135_ADC_CHANNEL);
 8002df0:	2101      	movs	r1, #1
 8002df2:	4828      	ldr	r0, [pc, #160]	@ (8002e94 <InitSensorSystem+0xfc>)
 8002df4:	f7ff f986 	bl	8002104 <ADCx_Init>
    
    
    // Cập nhật trạng thái hệ thống
    g_sensor_system.active_sensor_count = 2;
 8002df8:	4b22      	ldr	r3, [pc, #136]	@ (8002e84 <InitSensorSystem+0xec>)
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    g_sensor_system.last_update = HAL_GetTick();
 8002e00:	f7fe fc90 	bl	8001724 <HAL_GetTick>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4a1f      	ldr	r2, [pc, #124]	@ (8002e84 <InitSensorSystem+0xec>)
 8002e08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    
    printf("✓ Khởi tạo MQ137 (NH3): %s\r\n", g_sensor_system.mq137.base.is_enabled ? "OK" : "FAIL");
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <InitSensorSystem+0xec>)
 8002e0e:	7c9b      	ldrb	r3, [r3, #18]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <InitSensorSystem+0x80>
 8002e14:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <InitSensorSystem+0x100>)
 8002e16:	e000      	b.n	8002e1a <InitSensorSystem+0x82>
 8002e18:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <InitSensorSystem+0x104>)
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4820      	ldr	r0, [pc, #128]	@ (8002ea0 <InitSensorSystem+0x108>)
 8002e1e:	f001 f95d 	bl	80040dc <iprintf>
    printf("✓ Khởi tạo MQ135 (CO2): %s\r\n", g_sensor_system.mq135.base.is_enabled ? "OK" : "FAIL");
 8002e22:	4b18      	ldr	r3, [pc, #96]	@ (8002e84 <InitSensorSystem+0xec>)
 8002e24:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <InitSensorSystem+0x98>
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e98 <InitSensorSystem+0x100>)
 8002e2e:	e000      	b.n	8002e32 <InitSensorSystem+0x9a>
 8002e30:	4b1a      	ldr	r3, [pc, #104]	@ (8002e9c <InitSensorSystem+0x104>)
 8002e32:	4619      	mov	r1, r3
 8002e34:	481b      	ldr	r0, [pc, #108]	@ (8002ea4 <InitSensorSystem+0x10c>)
 8002e36:	f001 f951 	bl	80040dc <iprintf>
    printf("✓ Cảm biến hoạt động: %d/2\r\n", g_sensor_system.active_sensor_count);
 8002e3a:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <InitSensorSystem+0xec>)
 8002e3c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8002e40:	4619      	mov	r1, r3
 8002e42:	4819      	ldr	r0, [pc, #100]	@ (8002ea8 <InitSensorSystem+0x110>)
 8002e44:	f001 f94a 	bl	80040dc <iprintf>
    
    // Thời gian ổn định
    printf("✓ Đang ổn định cảm biến...\r\n");
 8002e48:	4818      	ldr	r0, [pc, #96]	@ (8002eac <InitSensorSystem+0x114>)
 8002e4a:	f001 f9af 	bl	80041ac <puts>
    for(int i = 30; i > 0; i--) {
 8002e4e:	231e      	movs	r3, #30
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	e00a      	b.n	8002e6a <InitSensorSystem+0xd2>
        printf("Ổn định: %d giây\r", i);
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4816      	ldr	r0, [pc, #88]	@ (8002eb0 <InitSensorSystem+0x118>)
 8002e58:	f001 f940 	bl	80040dc <iprintf>
        HAL_Delay(1000);
 8002e5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e60:	f7fe fc6a 	bl	8001738 <HAL_Delay>
    for(int i = 30; i > 0; i--) {
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	dcf1      	bgt.n	8002e54 <InitSensorSystem+0xbc>
    }
    printf("\r\n✓ Hệ thống sẵn sàng!\r\n");
 8002e70:	4810      	ldr	r0, [pc, #64]	@ (8002eb4 <InitSensorSystem+0x11c>)
 8002e72:	f001 f99b 	bl	80041ac <puts>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	08008a14 	.word	0x08008a14
 8002e84:	20000350 	.word	0x20000350
 8002e88:	20000454 	.word	0x20000454
 8002e8c:	200003c8 	.word	0x200003c8
 8002e90:	40010800 	.word	0x40010800
 8002e94:	40012400 	.word	0x40012400
 8002e98:	08008a48 	.word	0x08008a48
 8002e9c:	08008a4c 	.word	0x08008a4c
 8002ea0:	08008a54 	.word	0x08008a54
 8002ea4:	08008a78 	.word	0x08008a78
 8002ea8:	08008a9c 	.word	0x08008a9c
 8002eac:	08008ac4 	.word	0x08008ac4
 8002eb0:	08008aec 	.word	0x08008aec
 8002eb4:	08008b04 	.word	0x08008b04

08002eb8 <ProcessAllSensors>:
void ProcessAllSensors(void) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8002ebe:	f7fe fc31 	bl	8001724 <HAL_GetTick>
 8002ec2:	6078      	str	r0, [r7, #4]
    
    // Xử lý từng cảm biến
    if(g_sensor_system.mq137.base.is_enabled) {
 8002ec4:	4b17      	ldr	r3, [pc, #92]	@ (8002f24 <ProcessAllSensors+0x6c>)
 8002ec6:	7c9b      	ldrb	r3, [r3, #18]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <ProcessAllSensors+0x1a>
        ProcessGasSensor(&g_sensor_system.mq137);
 8002ecc:	4815      	ldr	r0, [pc, #84]	@ (8002f24 <ProcessAllSensors+0x6c>)
 8002ece:	f7ff fce5 	bl	800289c <ProcessGasSensor>
    }
    
    if(g_sensor_system.mq135.base.is_enabled) {
 8002ed2:	4b14      	ldr	r3, [pc, #80]	@ (8002f24 <ProcessAllSensors+0x6c>)
 8002ed4:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <ProcessAllSensors+0x2a>
        ProcessGasSensor(&g_sensor_system.mq135);
 8002edc:	4812      	ldr	r0, [pc, #72]	@ (8002f28 <ProcessAllSensors+0x70>)
 8002ede:	f7ff fcdd 	bl	800289c <ProcessGasSensor>
    }
    
    // Cập nhật trạng thái hệ thống
    UpdateSystemStatus();
 8002ee2:	f000 f973 	bl	80031cc <UpdateSystemStatus>
    
    // Lưu lịch sử
    SaveToHistory();
 8002ee6:	f000 f941 	bl	800316c <SaveToHistory>
    
    // Cập nhật thống kê
    g_sensor_system.total_readings++;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	@ (8002f24 <ProcessAllSensors+0x6c>)
 8002eec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8002f24 <ProcessAllSensors+0x6c>)
 8002ef4:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
    g_sensor_system.last_update = current_time;
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <ProcessAllSensors+0x6c>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    g_sensor_system.uptime_minutes = current_time / 60000.0f;
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7fd fee7 	bl	8000cd4 <__aeabi_ui2f>
 8002f06:	4603      	mov	r3, r0
 8002f08:	4908      	ldr	r1, [pc, #32]	@ (8002f2c <ProcessAllSensors+0x74>)
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd ffee 	bl	8000eec <__aeabi_fdiv>
 8002f10:	4603      	mov	r3, r0
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b03      	ldr	r3, [pc, #12]	@ (8002f24 <ProcessAllSensors+0x6c>)
 8002f16:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000350 	.word	0x20000350
 8002f28:	200003c8 	.word	0x200003c8
 8002f2c:	476a6000 	.word	0x476a6000

08002f30 <DisplaySystemStatus>:
/**
 * @brief Hiển thị trạng thái hệ thống
 */
void DisplaySystemStatus(void) {
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b089      	sub	sp, #36	@ 0x24
 8002f34:	af00      	add	r7, sp, #0
    printf("\r\n=== TRẠNG THÁI HỆ THỐNG CẢM BIẾN ===\r\n");
 8002f36:	4829      	ldr	r0, [pc, #164]	@ (8002fdc <DisplaySystemStatus+0xac>)
 8002f38:	f001 f938 	bl	80041ac <puts>
    printf("Thời gian: %lu ms | Uptime: %.1f phút\r\n", 
 8002f3c:	f7fe fbf2 	bl	8001724 <HAL_GetTick>
 8002f40:	4604      	mov	r4, r0
           HAL_GetTick(), g_sensor_system.uptime_minutes);
 8002f42:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <DisplaySystemStatus+0xb0>)
 8002f44:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
    printf("Thời gian: %lu ms | Uptime: %.1f phút\r\n", 
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd fa6d 	bl	8000428 <__aeabi_f2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4621      	mov	r1, r4
 8002f54:	4823      	ldr	r0, [pc, #140]	@ (8002fe4 <DisplaySystemStatus+0xb4>)
 8002f56:	f001 f8c1 	bl	80040dc <iprintf>
    
    // Hiển thị MQ137
    PrintSensorDetails(&g_sensor_system.mq137);
 8002f5a:	4821      	ldr	r0, [pc, #132]	@ (8002fe0 <DisplaySystemStatus+0xb0>)
 8002f5c:	f7ff fdac 	bl	8002ab8 <PrintSensorDetails>
    
    // Hiển thị MQ135
    PrintSensorDetails(&g_sensor_system.mq135);
 8002f60:	4821      	ldr	r0, [pc, #132]	@ (8002fe8 <DisplaySystemStatus+0xb8>)
 8002f62:	f7ff fda9 	bl	8002ab8 <PrintSensorDetails>
    
    // Trạng thái tổng thể
    printf("\r\n--- HỆ THỐNG ---\r\n");
 8002f66:	4821      	ldr	r0, [pc, #132]	@ (8002fec <DisplaySystemStatus+0xbc>)
 8002f68:	f001 f920 	bl	80041ac <puts>
    const char* status_text[] = {"LỖI", "Cơ bản", "Tốt", "Tối ưu"};
 8002f6c:	4b20      	ldr	r3, [pc, #128]	@ (8002ff0 <DisplaySystemStatus+0xc0>)
 8002f6e:	f107 0410 	add.w	r4, r7, #16
 8002f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const char* alarm_text[] = {"Bình thường", "Thấp", "Cao", "NGUY HIỂM"};
 8002f78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <DisplaySystemStatus+0xc4>)
 8002f7a:	463c      	mov	r4, r7
 8002f7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    printf("Trạng thái: %s (%d/2 cảm biến hoạt động)\r\n", 
           status_text[g_sensor_system.system_status], g_sensor_system.active_sensor_count);
 8002f82:	4b17      	ldr	r3, [pc, #92]	@ (8002fe0 <DisplaySystemStatus+0xb0>)
 8002f84:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
    printf("Trạng thái: %s (%d/2 cảm biến hoạt động)\r\n", 
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	3320      	adds	r3, #32
 8002f8c:	443b      	add	r3, r7
 8002f8e:	f853 3c10 	ldr.w	r3, [r3, #-16]
           status_text[g_sensor_system.system_status], g_sensor_system.active_sensor_count);
 8002f92:	4a13      	ldr	r2, [pc, #76]	@ (8002fe0 <DisplaySystemStatus+0xb0>)
 8002f94:	f892 20f0 	ldrb.w	r2, [r2, #240]	@ 0xf0
    printf("Trạng thái: %s (%d/2 cảm biến hoạt động)\r\n", 
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4817      	ldr	r0, [pc, #92]	@ (8002ff8 <DisplaySystemStatus+0xc8>)
 8002f9c:	f001 f89e 	bl	80040dc <iprintf>
    printf("Cảnh báo tổng thể: %s\r\n", alarm_text[g_sensor_system.system_alarm]);
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe0 <DisplaySystemStatus+0xb0>)
 8002fa2:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	3320      	adds	r3, #32
 8002faa:	443b      	add	r3, r7
 8002fac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4812      	ldr	r0, [pc, #72]	@ (8002ffc <DisplaySystemStatus+0xcc>)
 8002fb4:	f001 f892 	bl	80040dc <iprintf>
    printf("Tổng số đo: %lu | Lỗi: %lu\r\n", 
 8002fb8:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <DisplaySystemStatus+0xb0>)
 8002fba:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8002fbe:	4a08      	ldr	r2, [pc, #32]	@ (8002fe0 <DisplaySystemStatus+0xb0>)
 8002fc0:	f8d2 20fc 	ldr.w	r2, [r2, #252]	@ 0xfc
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	480e      	ldr	r0, [pc, #56]	@ (8003000 <DisplaySystemStatus+0xd0>)
 8002fc8:	f001 f888 	bl	80040dc <iprintf>
           g_sensor_system.total_readings, g_sensor_system.error_count);
    
    printf("=====================================\r\n");
 8002fcc:	480d      	ldr	r0, [pc, #52]	@ (8003004 <DisplaySystemStatus+0xd4>)
 8002fce:	f001 f8ed 	bl	80041ac <puts>
}
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	08008b28 	.word	0x08008b28
 8002fe0:	20000350 	.word	0x20000350
 8002fe4:	08008b5c 	.word	0x08008b5c
 8002fe8:	200003c8 	.word	0x200003c8
 8002fec:	08008b88 	.word	0x08008b88
 8002ff0:	08008c6c 	.word	0x08008c6c
 8002ff4:	08008ca4 	.word	0x08008ca4
 8002ff8:	08008ba0 	.word	0x08008ba0
 8002ffc:	08008bd8 	.word	0x08008bd8
 8003000:	08008bf8 	.word	0x08008bf8
 8003004:	08008c1c 	.word	0x08008c1c

08003008 <TestSensorSystem>:

/**
 * @brief Test hệ thống
 */
void TestSensorSystem(void) {
 8003008:	b5b0      	push	{r4, r5, r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af02      	add	r7, sp, #8
    printf("\r\n=== TEST HỆ THỐNG CẢM BIẾN ===\r\n");
 800300e:	4826      	ldr	r0, [pc, #152]	@ (80030a8 <TestSensorSystem+0xa0>)
 8003010:	f001 f8cc 	bl	80041ac <puts>
    
    for(int i = 0; i < 10; i++) {
 8003014:	2300      	movs	r3, #0
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	e03c      	b.n	8003094 <TestSensorSystem+0x8c>
        printf("Test lần %d:\r\n", i + 1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3301      	adds	r3, #1
 800301e:	4619      	mov	r1, r3
 8003020:	4822      	ldr	r0, [pc, #136]	@ (80030ac <TestSensorSystem+0xa4>)
 8003022:	f001 f85b 	bl	80040dc <iprintf>
        
        ProcessAllSensors();
 8003026:	f7ff ff47 	bl	8002eb8 <ProcessAllSensors>
        
        printf("  MQ137: %.1f ppm NH3 (Alarm: %d)\r\n", 
               GetNH3_PPM(), GetNH3AlarmLevel());
 800302a:	f000 f849 	bl	80030c0 <GetNH3_PPM>
 800302e:	4603      	mov	r3, r0
        printf("  MQ137: %.1f ppm NH3 (Alarm: %d)\r\n", 
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd f9f9 	bl	8000428 <__aeabi_f2d>
 8003036:	4604      	mov	r4, r0
 8003038:	460d      	mov	r5, r1
               GetNH3_PPM(), GetNH3AlarmLevel());
 800303a:	f000 f867 	bl	800310c <GetNH3AlarmLevel>
 800303e:	4603      	mov	r3, r0
        printf("  MQ137: %.1f ppm NH3 (Alarm: %d)\r\n", 
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	4622      	mov	r2, r4
 8003044:	462b      	mov	r3, r5
 8003046:	481a      	ldr	r0, [pc, #104]	@ (80030b0 <TestSensorSystem+0xa8>)
 8003048:	f001 f848 	bl	80040dc <iprintf>
        printf("  MQ135: %.1f ppm CO2 (Alarm: %d)\r\n", 
               GetCO2_PPM(), GetCO2AlarmLevel());
 800304c:	f000 f84a 	bl	80030e4 <GetCO2_PPM>
 8003050:	4603      	mov	r3, r0
        printf("  MQ135: %.1f ppm CO2 (Alarm: %d)\r\n", 
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd f9e8 	bl	8000428 <__aeabi_f2d>
 8003058:	4604      	mov	r4, r0
 800305a:	460d      	mov	r5, r1
               GetCO2_PPM(), GetCO2AlarmLevel());
 800305c:	f000 f862 	bl	8003124 <GetCO2AlarmLevel>
 8003060:	4603      	mov	r3, r0
        printf("  MQ135: %.1f ppm CO2 (Alarm: %d)\r\n", 
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	4622      	mov	r2, r4
 8003066:	462b      	mov	r3, r5
 8003068:	4812      	ldr	r0, [pc, #72]	@ (80030b4 <TestSensorSystem+0xac>)
 800306a:	f001 f837 	bl	80040dc <iprintf>
        printf("  Hệ thống: Status=%d, Alarm=%d\r\n\r\n", 
               GetSystemStatus(), GetSystemAlarmLevel());
 800306e:	f000 f871 	bl	8003154 <GetSystemStatus>
 8003072:	4603      	mov	r3, r0
        printf("  Hệ thống: Status=%d, Alarm=%d\r\n\r\n", 
 8003074:	461c      	mov	r4, r3
               GetSystemStatus(), GetSystemAlarmLevel());
 8003076:	f000 f861 	bl	800313c <GetSystemAlarmLevel>
 800307a:	4603      	mov	r3, r0
        printf("  Hệ thống: Status=%d, Alarm=%d\r\n\r\n", 
 800307c:	461a      	mov	r2, r3
 800307e:	4621      	mov	r1, r4
 8003080:	480d      	ldr	r0, [pc, #52]	@ (80030b8 <TestSensorSystem+0xb0>)
 8003082:	f001 f82b 	bl	80040dc <iprintf>
        
        HAL_Delay(3000);
 8003086:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800308a:	f7fe fb55 	bl	8001738 <HAL_Delay>
    for(int i = 0; i < 10; i++) {
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3301      	adds	r3, #1
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b09      	cmp	r3, #9
 8003098:	ddbf      	ble.n	800301a <TestSensorSystem+0x12>
    }
    
    printf("✓ Test hoàn tất!\r\n");
 800309a:	4808      	ldr	r0, [pc, #32]	@ (80030bc <TestSensorSystem+0xb4>)
 800309c:	f001 f886 	bl	80041ac <puts>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bdb0      	pop	{r4, r5, r7, pc}
 80030a8:	08008cb4 	.word	0x08008cb4
 80030ac:	08008ce0 	.word	0x08008ce0
 80030b0:	08008cf4 	.word	0x08008cf4
 80030b4:	08008d18 	.word	0x08008d18
 80030b8:	08008d3c 	.word	0x08008d3c
 80030bc:	08008d64 	.word	0x08008d64

080030c0 <GetNH3_PPM>:
// =============================================================================

/**
 * @brief Lấy nồng độ NH3 hiện tại
 */
float GetNH3_PPM(void) {
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
    return g_sensor_system.mq137.base.is_valid ? g_sensor_system.mq137.filtered_ppm : 0.0f;
 80030c4:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <GetNH3_PPM+0x20>)
 80030c6:	7cdb      	ldrb	r3, [r3, #19]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <GetNH3_PPM+0x12>
 80030cc:	4b04      	ldr	r3, [pc, #16]	@ (80030e0 <GetNH3_PPM+0x20>)
 80030ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d0:	e001      	b.n	80030d6 <GetNH3_PPM+0x16>
 80030d2:	f04f 0300 	mov.w	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000350 	.word	0x20000350

080030e4 <GetCO2_PPM>:

/**
 * @brief Lấy nồng độ CO2 hiện tại
 */
float GetCO2_PPM(void) {
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
    return g_sensor_system.mq135.base.is_valid ? g_sensor_system.mq135.filtered_ppm : 0.0f;
 80030e8:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <GetCO2_PPM+0x24>)
 80030ea:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <GetCO2_PPM+0x16>
 80030f2:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <GetCO2_PPM+0x24>)
 80030f4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80030f8:	e001      	b.n	80030fe <GetCO2_PPM+0x1a>
 80030fa:	f04f 0300 	mov.w	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000350 	.word	0x20000350

0800310c <GetNH3AlarmLevel>:

/**
 * @brief Lấy mức cảnh báo NH3
 */
AlarmLevel_t GetNH3AlarmLevel(void) {
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
    return g_sensor_system.mq137.alarm_level;
 8003110:	4b03      	ldr	r3, [pc, #12]	@ (8003120 <GetNH3AlarmLevel+0x14>)
 8003112:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000350 	.word	0x20000350

08003124 <GetCO2AlarmLevel>:

/**
 * @brief Lấy mức cảnh báo CO2
 */
AlarmLevel_t GetCO2AlarmLevel(void) {
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
    return g_sensor_system.mq135.alarm_level;
 8003128:	4b03      	ldr	r3, [pc, #12]	@ (8003138 <GetCO2AlarmLevel+0x14>)
 800312a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000350 	.word	0x20000350

0800313c <GetSystemAlarmLevel>:

/**
 * @brief Lấy mức cảnh báo tổng thể
 */
AlarmLevel_t GetSystemAlarmLevel(void) {
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
    return g_sensor_system.system_alarm;
 8003140:	4b03      	ldr	r3, [pc, #12]	@ (8003150 <GetSystemAlarmLevel+0x14>)
 8003142:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000350 	.word	0x20000350

08003154 <GetSystemStatus>:

/**
 * @brief Lấy trạng thái hệ thống
 */
uint8_t GetSystemStatus(void) {
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
    return g_sensor_system.system_status;
 8003158:	4b03      	ldr	r3, [pc, #12]	@ (8003168 <GetSystemStatus+0x14>)
 800315a:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000350 	.word	0x20000350

0800316c <SaveToHistory>:
/**
 * @brief Lưu dữ liệu vào buffer lịch sử
 */
void SaveToHistory(void) {
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
    history_buffer[history_index] = g_sensor_system;
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <SaveToHistory+0x50>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	4a12      	ldr	r2, [pc, #72]	@ (80031c0 <SaveToHistory+0x54>)
 8003178:	460b      	mov	r3, r1
 800317a:	019b      	lsls	r3, r3, #6
 800317c:	440b      	add	r3, r1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	4a10      	ldr	r2, [pc, #64]	@ (80031c4 <SaveToHistory+0x58>)
 8003184:	4618      	mov	r0, r3
 8003186:	4611      	mov	r1, r2
 8003188:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800318c:	461a      	mov	r2, r3
 800318e:	f001 f99a 	bl	80044c6 <memcpy>
    history_index = (history_index + 1) % HISTORY_SIZE;
 8003192:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <SaveToHistory+0x50>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <SaveToHistory+0x5c>)
 800319a:	fb83 1302 	smull	r1, r3, r3, r2
 800319e:	4413      	add	r3, r2
 80031a0:	1159      	asrs	r1, r3, #5
 80031a2:	17d3      	asrs	r3, r2, #31
 80031a4:	1ac9      	subs	r1, r1, r3
 80031a6:	460b      	mov	r3, r1
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a5b      	subs	r3, r3, r1
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	1ad1      	subs	r1, r2, r3
 80031b0:	b2ca      	uxtb	r2, r1
 80031b2:	4b02      	ldr	r3, [pc, #8]	@ (80031bc <SaveToHistory+0x50>)
 80031b4:	701a      	strb	r2, [r3, #0]
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20004144 	.word	0x20004144
 80031c0:	20000454 	.word	0x20000454
 80031c4:	20000350 	.word	0x20000350
 80031c8:	88888889 	.word	0x88888889

080031cc <UpdateSystemStatus>:
/**
 * @brief Cập nhật trạng thái hệ thống
 */         

void UpdateSystemStatus(void) {
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
    uint8_t valid_sensors = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	71fb      	strb	r3, [r7, #7]
    AlarmLevel_t max_alarm = ALARM_NORMAL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	71bb      	strb	r3, [r7, #6]
    
    // Đếm cảm biến hợp lệ và tìm mức cảnh báo cao nhất
    if(g_sensor_system.mq137.base.is_enabled && g_sensor_system.mq137.base.is_valid) {
 80031da:	4b28      	ldr	r3, [pc, #160]	@ (800327c <UpdateSystemStatus+0xb0>)
 80031dc:	7c9b      	ldrb	r3, [r3, #18]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d010      	beq.n	8003204 <UpdateSystemStatus+0x38>
 80031e2:	4b26      	ldr	r3, [pc, #152]	@ (800327c <UpdateSystemStatus+0xb0>)
 80031e4:	7cdb      	ldrb	r3, [r3, #19]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <UpdateSystemStatus+0x38>
        valid_sensors++;
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	3301      	adds	r3, #1
 80031ee:	71fb      	strb	r3, [r7, #7]
        if(g_sensor_system.mq137.alarm_level > max_alarm) {
 80031f0:	4b22      	ldr	r3, [pc, #136]	@ (800327c <UpdateSystemStatus+0xb0>)
 80031f2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80031f6:	79ba      	ldrb	r2, [r7, #6]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d203      	bcs.n	8003204 <UpdateSystemStatus+0x38>
            max_alarm = g_sensor_system.mq137.alarm_level;
 80031fc:	4b1f      	ldr	r3, [pc, #124]	@ (800327c <UpdateSystemStatus+0xb0>)
 80031fe:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8003202:	71bb      	strb	r3, [r7, #6]
        }
    }
    
    if(g_sensor_system.mq135.base.is_enabled && g_sensor_system.mq135.base.is_valid) {
 8003204:	4b1d      	ldr	r3, [pc, #116]	@ (800327c <UpdateSystemStatus+0xb0>)
 8003206:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 800320a:	2b00      	cmp	r3, #0
 800320c:	d011      	beq.n	8003232 <UpdateSystemStatus+0x66>
 800320e:	4b1b      	ldr	r3, [pc, #108]	@ (800327c <UpdateSystemStatus+0xb0>)
 8003210:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00c      	beq.n	8003232 <UpdateSystemStatus+0x66>
        valid_sensors++;
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	3301      	adds	r3, #1
 800321c:	71fb      	strb	r3, [r7, #7]
        if(g_sensor_system.mq135.alarm_level > max_alarm) {
 800321e:	4b17      	ldr	r3, [pc, #92]	@ (800327c <UpdateSystemStatus+0xb0>)
 8003220:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8003224:	79ba      	ldrb	r2, [r7, #6]
 8003226:	429a      	cmp	r2, r3
 8003228:	d203      	bcs.n	8003232 <UpdateSystemStatus+0x66>
            max_alarm = g_sensor_system.mq135.alarm_level;
 800322a:	4b14      	ldr	r3, [pc, #80]	@ (800327c <UpdateSystemStatus+0xb0>)
 800322c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8003230:	71bb      	strb	r3, [r7, #6]
        }
    }
    
    // Cập nhật trạng thái hệ thống
    if(valid_sensors == 2) {
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d104      	bne.n	8003242 <UpdateSystemStatus+0x76>
        g_sensor_system.system_status = 3; // Tối ưu
 8003238:	4b10      	ldr	r3, [pc, #64]	@ (800327c <UpdateSystemStatus+0xb0>)
 800323a:	2203      	movs	r2, #3
 800323c:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
 8003240:	e012      	b.n	8003268 <UpdateSystemStatus+0x9c>
    } else if(valid_sensors == 1) {
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d104      	bne.n	8003252 <UpdateSystemStatus+0x86>
        g_sensor_system.system_status = 2; // Tốt
 8003248:	4b0c      	ldr	r3, [pc, #48]	@ (800327c <UpdateSystemStatus+0xb0>)
 800324a:	2202      	movs	r2, #2
 800324c:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
 8003250:	e00a      	b.n	8003268 <UpdateSystemStatus+0x9c>
    } else {
        g_sensor_system.system_status = 0; // Lỗi
 8003252:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <UpdateSystemStatus+0xb0>)
 8003254:	2200      	movs	r2, #0
 8003256:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
        g_sensor_system.error_count++;
 800325a:	4b08      	ldr	r3, [pc, #32]	@ (800327c <UpdateSystemStatus+0xb0>)
 800325c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8003260:	3301      	adds	r3, #1
 8003262:	4a06      	ldr	r2, [pc, #24]	@ (800327c <UpdateSystemStatus+0xb0>)
 8003264:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
    }
    
    g_sensor_system.system_alarm = max_alarm;
 8003268:	4a04      	ldr	r2, [pc, #16]	@ (800327c <UpdateSystemStatus+0xb0>)
 800326a:	79bb      	ldrb	r3, [r7, #6]
 800326c:	f882 30f2 	strb.w	r3, [r2, #242]	@ 0xf2
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000350 	.word	0x20000350

08003280 <__cvt>:
 8003280:	2b00      	cmp	r3, #0
 8003282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003286:	461d      	mov	r5, r3
 8003288:	bfbb      	ittet	lt
 800328a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800328e:	461d      	movlt	r5, r3
 8003290:	2300      	movge	r3, #0
 8003292:	232d      	movlt	r3, #45	@ 0x2d
 8003294:	b088      	sub	sp, #32
 8003296:	4614      	mov	r4, r2
 8003298:	bfb8      	it	lt
 800329a:	4614      	movlt	r4, r2
 800329c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800329e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80032a0:	7013      	strb	r3, [r2, #0]
 80032a2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80032a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80032a8:	f023 0820 	bic.w	r8, r3, #32
 80032ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80032b0:	d005      	beq.n	80032be <__cvt+0x3e>
 80032b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80032b6:	d100      	bne.n	80032ba <__cvt+0x3a>
 80032b8:	3601      	adds	r6, #1
 80032ba:	2302      	movs	r3, #2
 80032bc:	e000      	b.n	80032c0 <__cvt+0x40>
 80032be:	2303      	movs	r3, #3
 80032c0:	aa07      	add	r2, sp, #28
 80032c2:	9204      	str	r2, [sp, #16]
 80032c4:	aa06      	add	r2, sp, #24
 80032c6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80032ca:	e9cd 3600 	strd	r3, r6, [sp]
 80032ce:	4622      	mov	r2, r4
 80032d0:	462b      	mov	r3, r5
 80032d2:	f001 f995 	bl	8004600 <_dtoa_r>
 80032d6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80032da:	4607      	mov	r7, r0
 80032dc:	d119      	bne.n	8003312 <__cvt+0x92>
 80032de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80032e0:	07db      	lsls	r3, r3, #31
 80032e2:	d50e      	bpl.n	8003302 <__cvt+0x82>
 80032e4:	eb00 0906 	add.w	r9, r0, r6
 80032e8:	2200      	movs	r2, #0
 80032ea:	2300      	movs	r3, #0
 80032ec:	4620      	mov	r0, r4
 80032ee:	4629      	mov	r1, r5
 80032f0:	f7fd fb5a 	bl	80009a8 <__aeabi_dcmpeq>
 80032f4:	b108      	cbz	r0, 80032fa <__cvt+0x7a>
 80032f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80032fa:	2230      	movs	r2, #48	@ 0x30
 80032fc:	9b07      	ldr	r3, [sp, #28]
 80032fe:	454b      	cmp	r3, r9
 8003300:	d31e      	bcc.n	8003340 <__cvt+0xc0>
 8003302:	4638      	mov	r0, r7
 8003304:	9b07      	ldr	r3, [sp, #28]
 8003306:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003308:	1bdb      	subs	r3, r3, r7
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	b008      	add	sp, #32
 800330e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003312:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003316:	eb00 0906 	add.w	r9, r0, r6
 800331a:	d1e5      	bne.n	80032e8 <__cvt+0x68>
 800331c:	7803      	ldrb	r3, [r0, #0]
 800331e:	2b30      	cmp	r3, #48	@ 0x30
 8003320:	d10a      	bne.n	8003338 <__cvt+0xb8>
 8003322:	2200      	movs	r2, #0
 8003324:	2300      	movs	r3, #0
 8003326:	4620      	mov	r0, r4
 8003328:	4629      	mov	r1, r5
 800332a:	f7fd fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800332e:	b918      	cbnz	r0, 8003338 <__cvt+0xb8>
 8003330:	f1c6 0601 	rsb	r6, r6, #1
 8003334:	f8ca 6000 	str.w	r6, [sl]
 8003338:	f8da 3000 	ldr.w	r3, [sl]
 800333c:	4499      	add	r9, r3
 800333e:	e7d3      	b.n	80032e8 <__cvt+0x68>
 8003340:	1c59      	adds	r1, r3, #1
 8003342:	9107      	str	r1, [sp, #28]
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e7d9      	b.n	80032fc <__cvt+0x7c>

08003348 <__exponent>:
 8003348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800334a:	2900      	cmp	r1, #0
 800334c:	bfb6      	itet	lt
 800334e:	232d      	movlt	r3, #45	@ 0x2d
 8003350:	232b      	movge	r3, #43	@ 0x2b
 8003352:	4249      	neglt	r1, r1
 8003354:	2909      	cmp	r1, #9
 8003356:	7002      	strb	r2, [r0, #0]
 8003358:	7043      	strb	r3, [r0, #1]
 800335a:	dd29      	ble.n	80033b0 <__exponent+0x68>
 800335c:	f10d 0307 	add.w	r3, sp, #7
 8003360:	461d      	mov	r5, r3
 8003362:	270a      	movs	r7, #10
 8003364:	fbb1 f6f7 	udiv	r6, r1, r7
 8003368:	461a      	mov	r2, r3
 800336a:	fb07 1416 	mls	r4, r7, r6, r1
 800336e:	3430      	adds	r4, #48	@ 0x30
 8003370:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003374:	460c      	mov	r4, r1
 8003376:	2c63      	cmp	r4, #99	@ 0x63
 8003378:	4631      	mov	r1, r6
 800337a:	f103 33ff 	add.w	r3, r3, #4294967295
 800337e:	dcf1      	bgt.n	8003364 <__exponent+0x1c>
 8003380:	3130      	adds	r1, #48	@ 0x30
 8003382:	1e94      	subs	r4, r2, #2
 8003384:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003388:	4623      	mov	r3, r4
 800338a:	1c41      	adds	r1, r0, #1
 800338c:	42ab      	cmp	r3, r5
 800338e:	d30a      	bcc.n	80033a6 <__exponent+0x5e>
 8003390:	f10d 0309 	add.w	r3, sp, #9
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	42ac      	cmp	r4, r5
 8003398:	bf88      	it	hi
 800339a:	2300      	movhi	r3, #0
 800339c:	3302      	adds	r3, #2
 800339e:	4403      	add	r3, r0
 80033a0:	1a18      	subs	r0, r3, r0
 80033a2:	b003      	add	sp, #12
 80033a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80033aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80033ae:	e7ed      	b.n	800338c <__exponent+0x44>
 80033b0:	2330      	movs	r3, #48	@ 0x30
 80033b2:	3130      	adds	r1, #48	@ 0x30
 80033b4:	7083      	strb	r3, [r0, #2]
 80033b6:	70c1      	strb	r1, [r0, #3]
 80033b8:	1d03      	adds	r3, r0, #4
 80033ba:	e7f1      	b.n	80033a0 <__exponent+0x58>

080033bc <_printf_float>:
 80033bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c0:	b091      	sub	sp, #68	@ 0x44
 80033c2:	460c      	mov	r4, r1
 80033c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80033c8:	4616      	mov	r6, r2
 80033ca:	461f      	mov	r7, r3
 80033cc:	4605      	mov	r5, r0
 80033ce:	f000 fff5 	bl	80043bc <_localeconv_r>
 80033d2:	6803      	ldr	r3, [r0, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	9308      	str	r3, [sp, #32]
 80033d8:	f7fc feba 	bl	8000150 <strlen>
 80033dc:	2300      	movs	r3, #0
 80033de:	930e      	str	r3, [sp, #56]	@ 0x38
 80033e0:	f8d8 3000 	ldr.w	r3, [r8]
 80033e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80033e6:	3307      	adds	r3, #7
 80033e8:	f023 0307 	bic.w	r3, r3, #7
 80033ec:	f103 0208 	add.w	r2, r3, #8
 80033f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80033f4:	f8d4 b000 	ldr.w	fp, [r4]
 80033f8:	f8c8 2000 	str.w	r2, [r8]
 80033fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003400:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003404:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003406:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800340a:	f04f 32ff 	mov.w	r2, #4294967295
 800340e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003412:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003416:	4b9c      	ldr	r3, [pc, #624]	@ (8003688 <_printf_float+0x2cc>)
 8003418:	f7fd faf8 	bl	8000a0c <__aeabi_dcmpun>
 800341c:	bb70      	cbnz	r0, 800347c <_printf_float+0xc0>
 800341e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003422:	f04f 32ff 	mov.w	r2, #4294967295
 8003426:	4b98      	ldr	r3, [pc, #608]	@ (8003688 <_printf_float+0x2cc>)
 8003428:	f7fd fad2 	bl	80009d0 <__aeabi_dcmple>
 800342c:	bb30      	cbnz	r0, 800347c <_printf_float+0xc0>
 800342e:	2200      	movs	r2, #0
 8003430:	2300      	movs	r3, #0
 8003432:	4640      	mov	r0, r8
 8003434:	4649      	mov	r1, r9
 8003436:	f7fd fac1 	bl	80009bc <__aeabi_dcmplt>
 800343a:	b110      	cbz	r0, 8003442 <_printf_float+0x86>
 800343c:	232d      	movs	r3, #45	@ 0x2d
 800343e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003442:	4a92      	ldr	r2, [pc, #584]	@ (800368c <_printf_float+0x2d0>)
 8003444:	4b92      	ldr	r3, [pc, #584]	@ (8003690 <_printf_float+0x2d4>)
 8003446:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800344a:	bf94      	ite	ls
 800344c:	4690      	movls	r8, r2
 800344e:	4698      	movhi	r8, r3
 8003450:	2303      	movs	r3, #3
 8003452:	f04f 0900 	mov.w	r9, #0
 8003456:	6123      	str	r3, [r4, #16]
 8003458:	f02b 0304 	bic.w	r3, fp, #4
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	4633      	mov	r3, r6
 8003460:	4621      	mov	r1, r4
 8003462:	4628      	mov	r0, r5
 8003464:	9700      	str	r7, [sp, #0]
 8003466:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003468:	f000 f9d4 	bl	8003814 <_printf_common>
 800346c:	3001      	adds	r0, #1
 800346e:	f040 8090 	bne.w	8003592 <_printf_float+0x1d6>
 8003472:	f04f 30ff 	mov.w	r0, #4294967295
 8003476:	b011      	add	sp, #68	@ 0x44
 8003478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347c:	4642      	mov	r2, r8
 800347e:	464b      	mov	r3, r9
 8003480:	4640      	mov	r0, r8
 8003482:	4649      	mov	r1, r9
 8003484:	f7fd fac2 	bl	8000a0c <__aeabi_dcmpun>
 8003488:	b148      	cbz	r0, 800349e <_printf_float+0xe2>
 800348a:	464b      	mov	r3, r9
 800348c:	2b00      	cmp	r3, #0
 800348e:	bfb8      	it	lt
 8003490:	232d      	movlt	r3, #45	@ 0x2d
 8003492:	4a80      	ldr	r2, [pc, #512]	@ (8003694 <_printf_float+0x2d8>)
 8003494:	bfb8      	it	lt
 8003496:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800349a:	4b7f      	ldr	r3, [pc, #508]	@ (8003698 <_printf_float+0x2dc>)
 800349c:	e7d3      	b.n	8003446 <_printf_float+0x8a>
 800349e:	6863      	ldr	r3, [r4, #4]
 80034a0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	d13f      	bne.n	8003528 <_printf_float+0x16c>
 80034a8:	2306      	movs	r3, #6
 80034aa:	6063      	str	r3, [r4, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80034b2:	6023      	str	r3, [r4, #0]
 80034b4:	9206      	str	r2, [sp, #24]
 80034b6:	aa0e      	add	r2, sp, #56	@ 0x38
 80034b8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80034bc:	aa0d      	add	r2, sp, #52	@ 0x34
 80034be:	9203      	str	r2, [sp, #12]
 80034c0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80034c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80034c8:	6863      	ldr	r3, [r4, #4]
 80034ca:	4642      	mov	r2, r8
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	4628      	mov	r0, r5
 80034d0:	464b      	mov	r3, r9
 80034d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80034d4:	f7ff fed4 	bl	8003280 <__cvt>
 80034d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80034da:	4680      	mov	r8, r0
 80034dc:	2947      	cmp	r1, #71	@ 0x47
 80034de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80034e0:	d128      	bne.n	8003534 <_printf_float+0x178>
 80034e2:	1cc8      	adds	r0, r1, #3
 80034e4:	db02      	blt.n	80034ec <_printf_float+0x130>
 80034e6:	6863      	ldr	r3, [r4, #4]
 80034e8:	4299      	cmp	r1, r3
 80034ea:	dd40      	ble.n	800356e <_printf_float+0x1b2>
 80034ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80034f0:	fa5f fa8a 	uxtb.w	sl, sl
 80034f4:	4652      	mov	r2, sl
 80034f6:	3901      	subs	r1, #1
 80034f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80034fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80034fe:	f7ff ff23 	bl	8003348 <__exponent>
 8003502:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003504:	4681      	mov	r9, r0
 8003506:	1813      	adds	r3, r2, r0
 8003508:	2a01      	cmp	r2, #1
 800350a:	6123      	str	r3, [r4, #16]
 800350c:	dc02      	bgt.n	8003514 <_printf_float+0x158>
 800350e:	6822      	ldr	r2, [r4, #0]
 8003510:	07d2      	lsls	r2, r2, #31
 8003512:	d501      	bpl.n	8003518 <_printf_float+0x15c>
 8003514:	3301      	adds	r3, #1
 8003516:	6123      	str	r3, [r4, #16]
 8003518:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800351c:	2b00      	cmp	r3, #0
 800351e:	d09e      	beq.n	800345e <_printf_float+0xa2>
 8003520:	232d      	movs	r3, #45	@ 0x2d
 8003522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003526:	e79a      	b.n	800345e <_printf_float+0xa2>
 8003528:	2947      	cmp	r1, #71	@ 0x47
 800352a:	d1bf      	bne.n	80034ac <_printf_float+0xf0>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1bd      	bne.n	80034ac <_printf_float+0xf0>
 8003530:	2301      	movs	r3, #1
 8003532:	e7ba      	b.n	80034aa <_printf_float+0xee>
 8003534:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003538:	d9dc      	bls.n	80034f4 <_printf_float+0x138>
 800353a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800353e:	d118      	bne.n	8003572 <_printf_float+0x1b6>
 8003540:	2900      	cmp	r1, #0
 8003542:	6863      	ldr	r3, [r4, #4]
 8003544:	dd0b      	ble.n	800355e <_printf_float+0x1a2>
 8003546:	6121      	str	r1, [r4, #16]
 8003548:	b913      	cbnz	r3, 8003550 <_printf_float+0x194>
 800354a:	6822      	ldr	r2, [r4, #0]
 800354c:	07d0      	lsls	r0, r2, #31
 800354e:	d502      	bpl.n	8003556 <_printf_float+0x19a>
 8003550:	3301      	adds	r3, #1
 8003552:	440b      	add	r3, r1
 8003554:	6123      	str	r3, [r4, #16]
 8003556:	f04f 0900 	mov.w	r9, #0
 800355a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800355c:	e7dc      	b.n	8003518 <_printf_float+0x15c>
 800355e:	b913      	cbnz	r3, 8003566 <_printf_float+0x1aa>
 8003560:	6822      	ldr	r2, [r4, #0]
 8003562:	07d2      	lsls	r2, r2, #31
 8003564:	d501      	bpl.n	800356a <_printf_float+0x1ae>
 8003566:	3302      	adds	r3, #2
 8003568:	e7f4      	b.n	8003554 <_printf_float+0x198>
 800356a:	2301      	movs	r3, #1
 800356c:	e7f2      	b.n	8003554 <_printf_float+0x198>
 800356e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003574:	4299      	cmp	r1, r3
 8003576:	db05      	blt.n	8003584 <_printf_float+0x1c8>
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	6121      	str	r1, [r4, #16]
 800357c:	07d8      	lsls	r0, r3, #31
 800357e:	d5ea      	bpl.n	8003556 <_printf_float+0x19a>
 8003580:	1c4b      	adds	r3, r1, #1
 8003582:	e7e7      	b.n	8003554 <_printf_float+0x198>
 8003584:	2900      	cmp	r1, #0
 8003586:	bfcc      	ite	gt
 8003588:	2201      	movgt	r2, #1
 800358a:	f1c1 0202 	rsble	r2, r1, #2
 800358e:	4413      	add	r3, r2
 8003590:	e7e0      	b.n	8003554 <_printf_float+0x198>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	055a      	lsls	r2, r3, #21
 8003596:	d407      	bmi.n	80035a8 <_printf_float+0x1ec>
 8003598:	6923      	ldr	r3, [r4, #16]
 800359a:	4642      	mov	r2, r8
 800359c:	4631      	mov	r1, r6
 800359e:	4628      	mov	r0, r5
 80035a0:	47b8      	blx	r7
 80035a2:	3001      	adds	r0, #1
 80035a4:	d12b      	bne.n	80035fe <_printf_float+0x242>
 80035a6:	e764      	b.n	8003472 <_printf_float+0xb6>
 80035a8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80035ac:	f240 80dc 	bls.w	8003768 <_printf_float+0x3ac>
 80035b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80035b4:	2200      	movs	r2, #0
 80035b6:	2300      	movs	r3, #0
 80035b8:	f7fd f9f6 	bl	80009a8 <__aeabi_dcmpeq>
 80035bc:	2800      	cmp	r0, #0
 80035be:	d033      	beq.n	8003628 <_printf_float+0x26c>
 80035c0:	2301      	movs	r3, #1
 80035c2:	4631      	mov	r1, r6
 80035c4:	4628      	mov	r0, r5
 80035c6:	4a35      	ldr	r2, [pc, #212]	@ (800369c <_printf_float+0x2e0>)
 80035c8:	47b8      	blx	r7
 80035ca:	3001      	adds	r0, #1
 80035cc:	f43f af51 	beq.w	8003472 <_printf_float+0xb6>
 80035d0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80035d4:	4543      	cmp	r3, r8
 80035d6:	db02      	blt.n	80035de <_printf_float+0x222>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	07d8      	lsls	r0, r3, #31
 80035dc:	d50f      	bpl.n	80035fe <_printf_float+0x242>
 80035de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80035e2:	4631      	mov	r1, r6
 80035e4:	4628      	mov	r0, r5
 80035e6:	47b8      	blx	r7
 80035e8:	3001      	adds	r0, #1
 80035ea:	f43f af42 	beq.w	8003472 <_printf_float+0xb6>
 80035ee:	f04f 0900 	mov.w	r9, #0
 80035f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80035f6:	f104 0a1a 	add.w	sl, r4, #26
 80035fa:	45c8      	cmp	r8, r9
 80035fc:	dc09      	bgt.n	8003612 <_printf_float+0x256>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	079b      	lsls	r3, r3, #30
 8003602:	f100 8102 	bmi.w	800380a <_printf_float+0x44e>
 8003606:	68e0      	ldr	r0, [r4, #12]
 8003608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800360a:	4298      	cmp	r0, r3
 800360c:	bfb8      	it	lt
 800360e:	4618      	movlt	r0, r3
 8003610:	e731      	b.n	8003476 <_printf_float+0xba>
 8003612:	2301      	movs	r3, #1
 8003614:	4652      	mov	r2, sl
 8003616:	4631      	mov	r1, r6
 8003618:	4628      	mov	r0, r5
 800361a:	47b8      	blx	r7
 800361c:	3001      	adds	r0, #1
 800361e:	f43f af28 	beq.w	8003472 <_printf_float+0xb6>
 8003622:	f109 0901 	add.w	r9, r9, #1
 8003626:	e7e8      	b.n	80035fa <_printf_float+0x23e>
 8003628:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800362a:	2b00      	cmp	r3, #0
 800362c:	dc38      	bgt.n	80036a0 <_printf_float+0x2e4>
 800362e:	2301      	movs	r3, #1
 8003630:	4631      	mov	r1, r6
 8003632:	4628      	mov	r0, r5
 8003634:	4a19      	ldr	r2, [pc, #100]	@ (800369c <_printf_float+0x2e0>)
 8003636:	47b8      	blx	r7
 8003638:	3001      	adds	r0, #1
 800363a:	f43f af1a 	beq.w	8003472 <_printf_float+0xb6>
 800363e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003642:	ea59 0303 	orrs.w	r3, r9, r3
 8003646:	d102      	bne.n	800364e <_printf_float+0x292>
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	07d9      	lsls	r1, r3, #31
 800364c:	d5d7      	bpl.n	80035fe <_printf_float+0x242>
 800364e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003652:	4631      	mov	r1, r6
 8003654:	4628      	mov	r0, r5
 8003656:	47b8      	blx	r7
 8003658:	3001      	adds	r0, #1
 800365a:	f43f af0a 	beq.w	8003472 <_printf_float+0xb6>
 800365e:	f04f 0a00 	mov.w	sl, #0
 8003662:	f104 0b1a 	add.w	fp, r4, #26
 8003666:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003668:	425b      	negs	r3, r3
 800366a:	4553      	cmp	r3, sl
 800366c:	dc01      	bgt.n	8003672 <_printf_float+0x2b6>
 800366e:	464b      	mov	r3, r9
 8003670:	e793      	b.n	800359a <_printf_float+0x1de>
 8003672:	2301      	movs	r3, #1
 8003674:	465a      	mov	r2, fp
 8003676:	4631      	mov	r1, r6
 8003678:	4628      	mov	r0, r5
 800367a:	47b8      	blx	r7
 800367c:	3001      	adds	r0, #1
 800367e:	f43f aef8 	beq.w	8003472 <_printf_float+0xb6>
 8003682:	f10a 0a01 	add.w	sl, sl, #1
 8003686:	e7ee      	b.n	8003666 <_printf_float+0x2aa>
 8003688:	7fefffff 	.word	0x7fefffff
 800368c:	08008f66 	.word	0x08008f66
 8003690:	08008f6a 	.word	0x08008f6a
 8003694:	08008f6e 	.word	0x08008f6e
 8003698:	08008f72 	.word	0x08008f72
 800369c:	08008f76 	.word	0x08008f76
 80036a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036a2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80036a6:	4553      	cmp	r3, sl
 80036a8:	bfa8      	it	ge
 80036aa:	4653      	movge	r3, sl
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	4699      	mov	r9, r3
 80036b0:	dc36      	bgt.n	8003720 <_printf_float+0x364>
 80036b2:	f04f 0b00 	mov.w	fp, #0
 80036b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036ba:	f104 021a 	add.w	r2, r4, #26
 80036be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80036c2:	eba3 0309 	sub.w	r3, r3, r9
 80036c6:	455b      	cmp	r3, fp
 80036c8:	dc31      	bgt.n	800372e <_printf_float+0x372>
 80036ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80036cc:	459a      	cmp	sl, r3
 80036ce:	dc3a      	bgt.n	8003746 <_printf_float+0x38a>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	07da      	lsls	r2, r3, #31
 80036d4:	d437      	bmi.n	8003746 <_printf_float+0x38a>
 80036d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80036d8:	ebaa 0903 	sub.w	r9, sl, r3
 80036dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036de:	ebaa 0303 	sub.w	r3, sl, r3
 80036e2:	4599      	cmp	r9, r3
 80036e4:	bfa8      	it	ge
 80036e6:	4699      	movge	r9, r3
 80036e8:	f1b9 0f00 	cmp.w	r9, #0
 80036ec:	dc33      	bgt.n	8003756 <_printf_float+0x39a>
 80036ee:	f04f 0800 	mov.w	r8, #0
 80036f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036f6:	f104 0b1a 	add.w	fp, r4, #26
 80036fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80036fc:	ebaa 0303 	sub.w	r3, sl, r3
 8003700:	eba3 0309 	sub.w	r3, r3, r9
 8003704:	4543      	cmp	r3, r8
 8003706:	f77f af7a 	ble.w	80035fe <_printf_float+0x242>
 800370a:	2301      	movs	r3, #1
 800370c:	465a      	mov	r2, fp
 800370e:	4631      	mov	r1, r6
 8003710:	4628      	mov	r0, r5
 8003712:	47b8      	blx	r7
 8003714:	3001      	adds	r0, #1
 8003716:	f43f aeac 	beq.w	8003472 <_printf_float+0xb6>
 800371a:	f108 0801 	add.w	r8, r8, #1
 800371e:	e7ec      	b.n	80036fa <_printf_float+0x33e>
 8003720:	4642      	mov	r2, r8
 8003722:	4631      	mov	r1, r6
 8003724:	4628      	mov	r0, r5
 8003726:	47b8      	blx	r7
 8003728:	3001      	adds	r0, #1
 800372a:	d1c2      	bne.n	80036b2 <_printf_float+0x2f6>
 800372c:	e6a1      	b.n	8003472 <_printf_float+0xb6>
 800372e:	2301      	movs	r3, #1
 8003730:	4631      	mov	r1, r6
 8003732:	4628      	mov	r0, r5
 8003734:	920a      	str	r2, [sp, #40]	@ 0x28
 8003736:	47b8      	blx	r7
 8003738:	3001      	adds	r0, #1
 800373a:	f43f ae9a 	beq.w	8003472 <_printf_float+0xb6>
 800373e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003740:	f10b 0b01 	add.w	fp, fp, #1
 8003744:	e7bb      	b.n	80036be <_printf_float+0x302>
 8003746:	4631      	mov	r1, r6
 8003748:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800374c:	4628      	mov	r0, r5
 800374e:	47b8      	blx	r7
 8003750:	3001      	adds	r0, #1
 8003752:	d1c0      	bne.n	80036d6 <_printf_float+0x31a>
 8003754:	e68d      	b.n	8003472 <_printf_float+0xb6>
 8003756:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003758:	464b      	mov	r3, r9
 800375a:	4631      	mov	r1, r6
 800375c:	4628      	mov	r0, r5
 800375e:	4442      	add	r2, r8
 8003760:	47b8      	blx	r7
 8003762:	3001      	adds	r0, #1
 8003764:	d1c3      	bne.n	80036ee <_printf_float+0x332>
 8003766:	e684      	b.n	8003472 <_printf_float+0xb6>
 8003768:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800376c:	f1ba 0f01 	cmp.w	sl, #1
 8003770:	dc01      	bgt.n	8003776 <_printf_float+0x3ba>
 8003772:	07db      	lsls	r3, r3, #31
 8003774:	d536      	bpl.n	80037e4 <_printf_float+0x428>
 8003776:	2301      	movs	r3, #1
 8003778:	4642      	mov	r2, r8
 800377a:	4631      	mov	r1, r6
 800377c:	4628      	mov	r0, r5
 800377e:	47b8      	blx	r7
 8003780:	3001      	adds	r0, #1
 8003782:	f43f ae76 	beq.w	8003472 <_printf_float+0xb6>
 8003786:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800378a:	4631      	mov	r1, r6
 800378c:	4628      	mov	r0, r5
 800378e:	47b8      	blx	r7
 8003790:	3001      	adds	r0, #1
 8003792:	f43f ae6e 	beq.w	8003472 <_printf_float+0xb6>
 8003796:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800379a:	2200      	movs	r2, #0
 800379c:	2300      	movs	r3, #0
 800379e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037a2:	f7fd f901 	bl	80009a8 <__aeabi_dcmpeq>
 80037a6:	b9c0      	cbnz	r0, 80037da <_printf_float+0x41e>
 80037a8:	4653      	mov	r3, sl
 80037aa:	f108 0201 	add.w	r2, r8, #1
 80037ae:	4631      	mov	r1, r6
 80037b0:	4628      	mov	r0, r5
 80037b2:	47b8      	blx	r7
 80037b4:	3001      	adds	r0, #1
 80037b6:	d10c      	bne.n	80037d2 <_printf_float+0x416>
 80037b8:	e65b      	b.n	8003472 <_printf_float+0xb6>
 80037ba:	2301      	movs	r3, #1
 80037bc:	465a      	mov	r2, fp
 80037be:	4631      	mov	r1, r6
 80037c0:	4628      	mov	r0, r5
 80037c2:	47b8      	blx	r7
 80037c4:	3001      	adds	r0, #1
 80037c6:	f43f ae54 	beq.w	8003472 <_printf_float+0xb6>
 80037ca:	f108 0801 	add.w	r8, r8, #1
 80037ce:	45d0      	cmp	r8, sl
 80037d0:	dbf3      	blt.n	80037ba <_printf_float+0x3fe>
 80037d2:	464b      	mov	r3, r9
 80037d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80037d8:	e6e0      	b.n	800359c <_printf_float+0x1e0>
 80037da:	f04f 0800 	mov.w	r8, #0
 80037de:	f104 0b1a 	add.w	fp, r4, #26
 80037e2:	e7f4      	b.n	80037ce <_printf_float+0x412>
 80037e4:	2301      	movs	r3, #1
 80037e6:	4642      	mov	r2, r8
 80037e8:	e7e1      	b.n	80037ae <_printf_float+0x3f2>
 80037ea:	2301      	movs	r3, #1
 80037ec:	464a      	mov	r2, r9
 80037ee:	4631      	mov	r1, r6
 80037f0:	4628      	mov	r0, r5
 80037f2:	47b8      	blx	r7
 80037f4:	3001      	adds	r0, #1
 80037f6:	f43f ae3c 	beq.w	8003472 <_printf_float+0xb6>
 80037fa:	f108 0801 	add.w	r8, r8, #1
 80037fe:	68e3      	ldr	r3, [r4, #12]
 8003800:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003802:	1a5b      	subs	r3, r3, r1
 8003804:	4543      	cmp	r3, r8
 8003806:	dcf0      	bgt.n	80037ea <_printf_float+0x42e>
 8003808:	e6fd      	b.n	8003606 <_printf_float+0x24a>
 800380a:	f04f 0800 	mov.w	r8, #0
 800380e:	f104 0919 	add.w	r9, r4, #25
 8003812:	e7f4      	b.n	80037fe <_printf_float+0x442>

08003814 <_printf_common>:
 8003814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003818:	4616      	mov	r6, r2
 800381a:	4698      	mov	r8, r3
 800381c:	688a      	ldr	r2, [r1, #8]
 800381e:	690b      	ldr	r3, [r1, #16]
 8003820:	4607      	mov	r7, r0
 8003822:	4293      	cmp	r3, r2
 8003824:	bfb8      	it	lt
 8003826:	4613      	movlt	r3, r2
 8003828:	6033      	str	r3, [r6, #0]
 800382a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800382e:	460c      	mov	r4, r1
 8003830:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003834:	b10a      	cbz	r2, 800383a <_printf_common+0x26>
 8003836:	3301      	adds	r3, #1
 8003838:	6033      	str	r3, [r6, #0]
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	0699      	lsls	r1, r3, #26
 800383e:	bf42      	ittt	mi
 8003840:	6833      	ldrmi	r3, [r6, #0]
 8003842:	3302      	addmi	r3, #2
 8003844:	6033      	strmi	r3, [r6, #0]
 8003846:	6825      	ldr	r5, [r4, #0]
 8003848:	f015 0506 	ands.w	r5, r5, #6
 800384c:	d106      	bne.n	800385c <_printf_common+0x48>
 800384e:	f104 0a19 	add.w	sl, r4, #25
 8003852:	68e3      	ldr	r3, [r4, #12]
 8003854:	6832      	ldr	r2, [r6, #0]
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	42ab      	cmp	r3, r5
 800385a:	dc2b      	bgt.n	80038b4 <_printf_common+0xa0>
 800385c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003860:	6822      	ldr	r2, [r4, #0]
 8003862:	3b00      	subs	r3, #0
 8003864:	bf18      	it	ne
 8003866:	2301      	movne	r3, #1
 8003868:	0692      	lsls	r2, r2, #26
 800386a:	d430      	bmi.n	80038ce <_printf_common+0xba>
 800386c:	4641      	mov	r1, r8
 800386e:	4638      	mov	r0, r7
 8003870:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003874:	47c8      	blx	r9
 8003876:	3001      	adds	r0, #1
 8003878:	d023      	beq.n	80038c2 <_printf_common+0xae>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	6922      	ldr	r2, [r4, #16]
 800387e:	f003 0306 	and.w	r3, r3, #6
 8003882:	2b04      	cmp	r3, #4
 8003884:	bf14      	ite	ne
 8003886:	2500      	movne	r5, #0
 8003888:	6833      	ldreq	r3, [r6, #0]
 800388a:	f04f 0600 	mov.w	r6, #0
 800388e:	bf08      	it	eq
 8003890:	68e5      	ldreq	r5, [r4, #12]
 8003892:	f104 041a 	add.w	r4, r4, #26
 8003896:	bf08      	it	eq
 8003898:	1aed      	subeq	r5, r5, r3
 800389a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800389e:	bf08      	it	eq
 80038a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038a4:	4293      	cmp	r3, r2
 80038a6:	bfc4      	itt	gt
 80038a8:	1a9b      	subgt	r3, r3, r2
 80038aa:	18ed      	addgt	r5, r5, r3
 80038ac:	42b5      	cmp	r5, r6
 80038ae:	d11a      	bne.n	80038e6 <_printf_common+0xd2>
 80038b0:	2000      	movs	r0, #0
 80038b2:	e008      	b.n	80038c6 <_printf_common+0xb2>
 80038b4:	2301      	movs	r3, #1
 80038b6:	4652      	mov	r2, sl
 80038b8:	4641      	mov	r1, r8
 80038ba:	4638      	mov	r0, r7
 80038bc:	47c8      	blx	r9
 80038be:	3001      	adds	r0, #1
 80038c0:	d103      	bne.n	80038ca <_printf_common+0xb6>
 80038c2:	f04f 30ff 	mov.w	r0, #4294967295
 80038c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ca:	3501      	adds	r5, #1
 80038cc:	e7c1      	b.n	8003852 <_printf_common+0x3e>
 80038ce:	2030      	movs	r0, #48	@ 0x30
 80038d0:	18e1      	adds	r1, r4, r3
 80038d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038dc:	4422      	add	r2, r4
 80038de:	3302      	adds	r3, #2
 80038e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038e4:	e7c2      	b.n	800386c <_printf_common+0x58>
 80038e6:	2301      	movs	r3, #1
 80038e8:	4622      	mov	r2, r4
 80038ea:	4641      	mov	r1, r8
 80038ec:	4638      	mov	r0, r7
 80038ee:	47c8      	blx	r9
 80038f0:	3001      	adds	r0, #1
 80038f2:	d0e6      	beq.n	80038c2 <_printf_common+0xae>
 80038f4:	3601      	adds	r6, #1
 80038f6:	e7d9      	b.n	80038ac <_printf_common+0x98>

080038f8 <_printf_i>:
 80038f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038fc:	7e0f      	ldrb	r7, [r1, #24]
 80038fe:	4691      	mov	r9, r2
 8003900:	2f78      	cmp	r7, #120	@ 0x78
 8003902:	4680      	mov	r8, r0
 8003904:	460c      	mov	r4, r1
 8003906:	469a      	mov	sl, r3
 8003908:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800390a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800390e:	d807      	bhi.n	8003920 <_printf_i+0x28>
 8003910:	2f62      	cmp	r7, #98	@ 0x62
 8003912:	d80a      	bhi.n	800392a <_printf_i+0x32>
 8003914:	2f00      	cmp	r7, #0
 8003916:	f000 80d3 	beq.w	8003ac0 <_printf_i+0x1c8>
 800391a:	2f58      	cmp	r7, #88	@ 0x58
 800391c:	f000 80ba 	beq.w	8003a94 <_printf_i+0x19c>
 8003920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003928:	e03a      	b.n	80039a0 <_printf_i+0xa8>
 800392a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800392e:	2b15      	cmp	r3, #21
 8003930:	d8f6      	bhi.n	8003920 <_printf_i+0x28>
 8003932:	a101      	add	r1, pc, #4	@ (adr r1, 8003938 <_printf_i+0x40>)
 8003934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003938:	08003991 	.word	0x08003991
 800393c:	080039a5 	.word	0x080039a5
 8003940:	08003921 	.word	0x08003921
 8003944:	08003921 	.word	0x08003921
 8003948:	08003921 	.word	0x08003921
 800394c:	08003921 	.word	0x08003921
 8003950:	080039a5 	.word	0x080039a5
 8003954:	08003921 	.word	0x08003921
 8003958:	08003921 	.word	0x08003921
 800395c:	08003921 	.word	0x08003921
 8003960:	08003921 	.word	0x08003921
 8003964:	08003aa7 	.word	0x08003aa7
 8003968:	080039cf 	.word	0x080039cf
 800396c:	08003a61 	.word	0x08003a61
 8003970:	08003921 	.word	0x08003921
 8003974:	08003921 	.word	0x08003921
 8003978:	08003ac9 	.word	0x08003ac9
 800397c:	08003921 	.word	0x08003921
 8003980:	080039cf 	.word	0x080039cf
 8003984:	08003921 	.word	0x08003921
 8003988:	08003921 	.word	0x08003921
 800398c:	08003a69 	.word	0x08003a69
 8003990:	6833      	ldr	r3, [r6, #0]
 8003992:	1d1a      	adds	r2, r3, #4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6032      	str	r2, [r6, #0]
 8003998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800399c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039a0:	2301      	movs	r3, #1
 80039a2:	e09e      	b.n	8003ae2 <_printf_i+0x1ea>
 80039a4:	6833      	ldr	r3, [r6, #0]
 80039a6:	6820      	ldr	r0, [r4, #0]
 80039a8:	1d19      	adds	r1, r3, #4
 80039aa:	6031      	str	r1, [r6, #0]
 80039ac:	0606      	lsls	r6, r0, #24
 80039ae:	d501      	bpl.n	80039b4 <_printf_i+0xbc>
 80039b0:	681d      	ldr	r5, [r3, #0]
 80039b2:	e003      	b.n	80039bc <_printf_i+0xc4>
 80039b4:	0645      	lsls	r5, r0, #25
 80039b6:	d5fb      	bpl.n	80039b0 <_printf_i+0xb8>
 80039b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039bc:	2d00      	cmp	r5, #0
 80039be:	da03      	bge.n	80039c8 <_printf_i+0xd0>
 80039c0:	232d      	movs	r3, #45	@ 0x2d
 80039c2:	426d      	negs	r5, r5
 80039c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039c8:	230a      	movs	r3, #10
 80039ca:	4859      	ldr	r0, [pc, #356]	@ (8003b30 <_printf_i+0x238>)
 80039cc:	e011      	b.n	80039f2 <_printf_i+0xfa>
 80039ce:	6821      	ldr	r1, [r4, #0]
 80039d0:	6833      	ldr	r3, [r6, #0]
 80039d2:	0608      	lsls	r0, r1, #24
 80039d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80039d8:	d402      	bmi.n	80039e0 <_printf_i+0xe8>
 80039da:	0649      	lsls	r1, r1, #25
 80039dc:	bf48      	it	mi
 80039de:	b2ad      	uxthmi	r5, r5
 80039e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80039e2:	6033      	str	r3, [r6, #0]
 80039e4:	bf14      	ite	ne
 80039e6:	230a      	movne	r3, #10
 80039e8:	2308      	moveq	r3, #8
 80039ea:	4851      	ldr	r0, [pc, #324]	@ (8003b30 <_printf_i+0x238>)
 80039ec:	2100      	movs	r1, #0
 80039ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039f2:	6866      	ldr	r6, [r4, #4]
 80039f4:	2e00      	cmp	r6, #0
 80039f6:	bfa8      	it	ge
 80039f8:	6821      	ldrge	r1, [r4, #0]
 80039fa:	60a6      	str	r6, [r4, #8]
 80039fc:	bfa4      	itt	ge
 80039fe:	f021 0104 	bicge.w	r1, r1, #4
 8003a02:	6021      	strge	r1, [r4, #0]
 8003a04:	b90d      	cbnz	r5, 8003a0a <_printf_i+0x112>
 8003a06:	2e00      	cmp	r6, #0
 8003a08:	d04b      	beq.n	8003aa2 <_printf_i+0x1aa>
 8003a0a:	4616      	mov	r6, r2
 8003a0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a10:	fb03 5711 	mls	r7, r3, r1, r5
 8003a14:	5dc7      	ldrb	r7, [r0, r7]
 8003a16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a1a:	462f      	mov	r7, r5
 8003a1c:	42bb      	cmp	r3, r7
 8003a1e:	460d      	mov	r5, r1
 8003a20:	d9f4      	bls.n	8003a0c <_printf_i+0x114>
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d10b      	bne.n	8003a3e <_printf_i+0x146>
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	07df      	lsls	r7, r3, #31
 8003a2a:	d508      	bpl.n	8003a3e <_printf_i+0x146>
 8003a2c:	6923      	ldr	r3, [r4, #16]
 8003a2e:	6861      	ldr	r1, [r4, #4]
 8003a30:	4299      	cmp	r1, r3
 8003a32:	bfde      	ittt	le
 8003a34:	2330      	movle	r3, #48	@ 0x30
 8003a36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a3e:	1b92      	subs	r2, r2, r6
 8003a40:	6122      	str	r2, [r4, #16]
 8003a42:	464b      	mov	r3, r9
 8003a44:	4621      	mov	r1, r4
 8003a46:	4640      	mov	r0, r8
 8003a48:	f8cd a000 	str.w	sl, [sp]
 8003a4c:	aa03      	add	r2, sp, #12
 8003a4e:	f7ff fee1 	bl	8003814 <_printf_common>
 8003a52:	3001      	adds	r0, #1
 8003a54:	d14a      	bne.n	8003aec <_printf_i+0x1f4>
 8003a56:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5a:	b004      	add	sp, #16
 8003a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	f043 0320 	orr.w	r3, r3, #32
 8003a66:	6023      	str	r3, [r4, #0]
 8003a68:	2778      	movs	r7, #120	@ 0x78
 8003a6a:	4832      	ldr	r0, [pc, #200]	@ (8003b34 <_printf_i+0x23c>)
 8003a6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	6831      	ldr	r1, [r6, #0]
 8003a74:	061f      	lsls	r7, r3, #24
 8003a76:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a7a:	d402      	bmi.n	8003a82 <_printf_i+0x18a>
 8003a7c:	065f      	lsls	r7, r3, #25
 8003a7e:	bf48      	it	mi
 8003a80:	b2ad      	uxthmi	r5, r5
 8003a82:	6031      	str	r1, [r6, #0]
 8003a84:	07d9      	lsls	r1, r3, #31
 8003a86:	bf44      	itt	mi
 8003a88:	f043 0320 	orrmi.w	r3, r3, #32
 8003a8c:	6023      	strmi	r3, [r4, #0]
 8003a8e:	b11d      	cbz	r5, 8003a98 <_printf_i+0x1a0>
 8003a90:	2310      	movs	r3, #16
 8003a92:	e7ab      	b.n	80039ec <_printf_i+0xf4>
 8003a94:	4826      	ldr	r0, [pc, #152]	@ (8003b30 <_printf_i+0x238>)
 8003a96:	e7e9      	b.n	8003a6c <_printf_i+0x174>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	f023 0320 	bic.w	r3, r3, #32
 8003a9e:	6023      	str	r3, [r4, #0]
 8003aa0:	e7f6      	b.n	8003a90 <_printf_i+0x198>
 8003aa2:	4616      	mov	r6, r2
 8003aa4:	e7bd      	b.n	8003a22 <_printf_i+0x12a>
 8003aa6:	6833      	ldr	r3, [r6, #0]
 8003aa8:	6825      	ldr	r5, [r4, #0]
 8003aaa:	1d18      	adds	r0, r3, #4
 8003aac:	6961      	ldr	r1, [r4, #20]
 8003aae:	6030      	str	r0, [r6, #0]
 8003ab0:	062e      	lsls	r6, r5, #24
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	d501      	bpl.n	8003aba <_printf_i+0x1c2>
 8003ab6:	6019      	str	r1, [r3, #0]
 8003ab8:	e002      	b.n	8003ac0 <_printf_i+0x1c8>
 8003aba:	0668      	lsls	r0, r5, #25
 8003abc:	d5fb      	bpl.n	8003ab6 <_printf_i+0x1be>
 8003abe:	8019      	strh	r1, [r3, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4616      	mov	r6, r2
 8003ac4:	6123      	str	r3, [r4, #16]
 8003ac6:	e7bc      	b.n	8003a42 <_printf_i+0x14a>
 8003ac8:	6833      	ldr	r3, [r6, #0]
 8003aca:	2100      	movs	r1, #0
 8003acc:	1d1a      	adds	r2, r3, #4
 8003ace:	6032      	str	r2, [r6, #0]
 8003ad0:	681e      	ldr	r6, [r3, #0]
 8003ad2:	6862      	ldr	r2, [r4, #4]
 8003ad4:	4630      	mov	r0, r6
 8003ad6:	f000 fce8 	bl	80044aa <memchr>
 8003ada:	b108      	cbz	r0, 8003ae0 <_printf_i+0x1e8>
 8003adc:	1b80      	subs	r0, r0, r6
 8003ade:	6060      	str	r0, [r4, #4]
 8003ae0:	6863      	ldr	r3, [r4, #4]
 8003ae2:	6123      	str	r3, [r4, #16]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003aea:	e7aa      	b.n	8003a42 <_printf_i+0x14a>
 8003aec:	4632      	mov	r2, r6
 8003aee:	4649      	mov	r1, r9
 8003af0:	4640      	mov	r0, r8
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	47d0      	blx	sl
 8003af6:	3001      	adds	r0, #1
 8003af8:	d0ad      	beq.n	8003a56 <_printf_i+0x15e>
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	079b      	lsls	r3, r3, #30
 8003afe:	d413      	bmi.n	8003b28 <_printf_i+0x230>
 8003b00:	68e0      	ldr	r0, [r4, #12]
 8003b02:	9b03      	ldr	r3, [sp, #12]
 8003b04:	4298      	cmp	r0, r3
 8003b06:	bfb8      	it	lt
 8003b08:	4618      	movlt	r0, r3
 8003b0a:	e7a6      	b.n	8003a5a <_printf_i+0x162>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	4632      	mov	r2, r6
 8003b10:	4649      	mov	r1, r9
 8003b12:	4640      	mov	r0, r8
 8003b14:	47d0      	blx	sl
 8003b16:	3001      	adds	r0, #1
 8003b18:	d09d      	beq.n	8003a56 <_printf_i+0x15e>
 8003b1a:	3501      	adds	r5, #1
 8003b1c:	68e3      	ldr	r3, [r4, #12]
 8003b1e:	9903      	ldr	r1, [sp, #12]
 8003b20:	1a5b      	subs	r3, r3, r1
 8003b22:	42ab      	cmp	r3, r5
 8003b24:	dcf2      	bgt.n	8003b0c <_printf_i+0x214>
 8003b26:	e7eb      	b.n	8003b00 <_printf_i+0x208>
 8003b28:	2500      	movs	r5, #0
 8003b2a:	f104 0619 	add.w	r6, r4, #25
 8003b2e:	e7f5      	b.n	8003b1c <_printf_i+0x224>
 8003b30:	08008f78 	.word	0x08008f78
 8003b34:	08008f89 	.word	0x08008f89

08003b38 <_scanf_float>:
 8003b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3c:	b087      	sub	sp, #28
 8003b3e:	9303      	str	r3, [sp, #12]
 8003b40:	688b      	ldr	r3, [r1, #8]
 8003b42:	4617      	mov	r7, r2
 8003b44:	1e5a      	subs	r2, r3, #1
 8003b46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003b4a:	bf82      	ittt	hi
 8003b4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003b50:	eb03 0b05 	addhi.w	fp, r3, r5
 8003b54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003b58:	460a      	mov	r2, r1
 8003b5a:	f04f 0500 	mov.w	r5, #0
 8003b5e:	bf88      	it	hi
 8003b60:	608b      	strhi	r3, [r1, #8]
 8003b62:	680b      	ldr	r3, [r1, #0]
 8003b64:	4680      	mov	r8, r0
 8003b66:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003b6a:	f842 3b1c 	str.w	r3, [r2], #28
 8003b6e:	460c      	mov	r4, r1
 8003b70:	bf98      	it	ls
 8003b72:	f04f 0b00 	movls.w	fp, #0
 8003b76:	4616      	mov	r6, r2
 8003b78:	46aa      	mov	sl, r5
 8003b7a:	46a9      	mov	r9, r5
 8003b7c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003b80:	9201      	str	r2, [sp, #4]
 8003b82:	9502      	str	r5, [sp, #8]
 8003b84:	68a2      	ldr	r2, [r4, #8]
 8003b86:	b152      	cbz	r2, 8003b9e <_scanf_float+0x66>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b4e      	cmp	r3, #78	@ 0x4e
 8003b8e:	d865      	bhi.n	8003c5c <_scanf_float+0x124>
 8003b90:	2b40      	cmp	r3, #64	@ 0x40
 8003b92:	d83d      	bhi.n	8003c10 <_scanf_float+0xd8>
 8003b94:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003b98:	b2c8      	uxtb	r0, r1
 8003b9a:	280e      	cmp	r0, #14
 8003b9c:	d93b      	bls.n	8003c16 <_scanf_float+0xde>
 8003b9e:	f1b9 0f00 	cmp.w	r9, #0
 8003ba2:	d003      	beq.n	8003bac <_scanf_float+0x74>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003baa:	6023      	str	r3, [r4, #0]
 8003bac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003bb0:	f1ba 0f01 	cmp.w	sl, #1
 8003bb4:	f200 8118 	bhi.w	8003de8 <_scanf_float+0x2b0>
 8003bb8:	9b01      	ldr	r3, [sp, #4]
 8003bba:	429e      	cmp	r6, r3
 8003bbc:	f200 8109 	bhi.w	8003dd2 <_scanf_float+0x29a>
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	b007      	add	sp, #28
 8003bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003bcc:	2a0d      	cmp	r2, #13
 8003bce:	d8e6      	bhi.n	8003b9e <_scanf_float+0x66>
 8003bd0:	a101      	add	r1, pc, #4	@ (adr r1, 8003bd8 <_scanf_float+0xa0>)
 8003bd2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003d1f 	.word	0x08003d1f
 8003bdc:	08003b9f 	.word	0x08003b9f
 8003be0:	08003b9f 	.word	0x08003b9f
 8003be4:	08003b9f 	.word	0x08003b9f
 8003be8:	08003d7f 	.word	0x08003d7f
 8003bec:	08003d57 	.word	0x08003d57
 8003bf0:	08003b9f 	.word	0x08003b9f
 8003bf4:	08003b9f 	.word	0x08003b9f
 8003bf8:	08003d2d 	.word	0x08003d2d
 8003bfc:	08003b9f 	.word	0x08003b9f
 8003c00:	08003b9f 	.word	0x08003b9f
 8003c04:	08003b9f 	.word	0x08003b9f
 8003c08:	08003b9f 	.word	0x08003b9f
 8003c0c:	08003ce5 	.word	0x08003ce5
 8003c10:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003c14:	e7da      	b.n	8003bcc <_scanf_float+0x94>
 8003c16:	290e      	cmp	r1, #14
 8003c18:	d8c1      	bhi.n	8003b9e <_scanf_float+0x66>
 8003c1a:	a001      	add	r0, pc, #4	@ (adr r0, 8003c20 <_scanf_float+0xe8>)
 8003c1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003c20:	08003cd5 	.word	0x08003cd5
 8003c24:	08003b9f 	.word	0x08003b9f
 8003c28:	08003cd5 	.word	0x08003cd5
 8003c2c:	08003d6b 	.word	0x08003d6b
 8003c30:	08003b9f 	.word	0x08003b9f
 8003c34:	08003c7d 	.word	0x08003c7d
 8003c38:	08003cbb 	.word	0x08003cbb
 8003c3c:	08003cbb 	.word	0x08003cbb
 8003c40:	08003cbb 	.word	0x08003cbb
 8003c44:	08003cbb 	.word	0x08003cbb
 8003c48:	08003cbb 	.word	0x08003cbb
 8003c4c:	08003cbb 	.word	0x08003cbb
 8003c50:	08003cbb 	.word	0x08003cbb
 8003c54:	08003cbb 	.word	0x08003cbb
 8003c58:	08003cbb 	.word	0x08003cbb
 8003c5c:	2b6e      	cmp	r3, #110	@ 0x6e
 8003c5e:	d809      	bhi.n	8003c74 <_scanf_float+0x13c>
 8003c60:	2b60      	cmp	r3, #96	@ 0x60
 8003c62:	d8b1      	bhi.n	8003bc8 <_scanf_float+0x90>
 8003c64:	2b54      	cmp	r3, #84	@ 0x54
 8003c66:	d07b      	beq.n	8003d60 <_scanf_float+0x228>
 8003c68:	2b59      	cmp	r3, #89	@ 0x59
 8003c6a:	d198      	bne.n	8003b9e <_scanf_float+0x66>
 8003c6c:	2d07      	cmp	r5, #7
 8003c6e:	d196      	bne.n	8003b9e <_scanf_float+0x66>
 8003c70:	2508      	movs	r5, #8
 8003c72:	e02c      	b.n	8003cce <_scanf_float+0x196>
 8003c74:	2b74      	cmp	r3, #116	@ 0x74
 8003c76:	d073      	beq.n	8003d60 <_scanf_float+0x228>
 8003c78:	2b79      	cmp	r3, #121	@ 0x79
 8003c7a:	e7f6      	b.n	8003c6a <_scanf_float+0x132>
 8003c7c:	6821      	ldr	r1, [r4, #0]
 8003c7e:	05c8      	lsls	r0, r1, #23
 8003c80:	d51b      	bpl.n	8003cba <_scanf_float+0x182>
 8003c82:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8003c86:	6021      	str	r1, [r4, #0]
 8003c88:	f109 0901 	add.w	r9, r9, #1
 8003c8c:	f1bb 0f00 	cmp.w	fp, #0
 8003c90:	d003      	beq.n	8003c9a <_scanf_float+0x162>
 8003c92:	3201      	adds	r2, #1
 8003c94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c98:	60a2      	str	r2, [r4, #8]
 8003c9a:	68a3      	ldr	r3, [r4, #8]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	60a3      	str	r3, [r4, #8]
 8003ca0:	6923      	ldr	r3, [r4, #16]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	6123      	str	r3, [r4, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	f340 8087 	ble.w	8003dc0 <_scanf_float+0x288>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	e764      	b.n	8003b84 <_scanf_float+0x4c>
 8003cba:	eb1a 0105 	adds.w	r1, sl, r5
 8003cbe:	f47f af6e 	bne.w	8003b9e <_scanf_float+0x66>
 8003cc2:	460d      	mov	r5, r1
 8003cc4:	468a      	mov	sl, r1
 8003cc6:	6822      	ldr	r2, [r4, #0]
 8003cc8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	f806 3b01 	strb.w	r3, [r6], #1
 8003cd2:	e7e2      	b.n	8003c9a <_scanf_float+0x162>
 8003cd4:	6822      	ldr	r2, [r4, #0]
 8003cd6:	0610      	lsls	r0, r2, #24
 8003cd8:	f57f af61 	bpl.w	8003b9e <_scanf_float+0x66>
 8003cdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ce0:	6022      	str	r2, [r4, #0]
 8003ce2:	e7f4      	b.n	8003cce <_scanf_float+0x196>
 8003ce4:	f1ba 0f00 	cmp.w	sl, #0
 8003ce8:	d10e      	bne.n	8003d08 <_scanf_float+0x1d0>
 8003cea:	f1b9 0f00 	cmp.w	r9, #0
 8003cee:	d10e      	bne.n	8003d0e <_scanf_float+0x1d6>
 8003cf0:	6822      	ldr	r2, [r4, #0]
 8003cf2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003cf6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003cfa:	d108      	bne.n	8003d0e <_scanf_float+0x1d6>
 8003cfc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003d00:	f04f 0a01 	mov.w	sl, #1
 8003d04:	6022      	str	r2, [r4, #0]
 8003d06:	e7e2      	b.n	8003cce <_scanf_float+0x196>
 8003d08:	f1ba 0f02 	cmp.w	sl, #2
 8003d0c:	d055      	beq.n	8003dba <_scanf_float+0x282>
 8003d0e:	2d01      	cmp	r5, #1
 8003d10:	d002      	beq.n	8003d18 <_scanf_float+0x1e0>
 8003d12:	2d04      	cmp	r5, #4
 8003d14:	f47f af43 	bne.w	8003b9e <_scanf_float+0x66>
 8003d18:	3501      	adds	r5, #1
 8003d1a:	b2ed      	uxtb	r5, r5
 8003d1c:	e7d7      	b.n	8003cce <_scanf_float+0x196>
 8003d1e:	f1ba 0f01 	cmp.w	sl, #1
 8003d22:	f47f af3c 	bne.w	8003b9e <_scanf_float+0x66>
 8003d26:	f04f 0a02 	mov.w	sl, #2
 8003d2a:	e7d0      	b.n	8003cce <_scanf_float+0x196>
 8003d2c:	b97d      	cbnz	r5, 8003d4e <_scanf_float+0x216>
 8003d2e:	f1b9 0f00 	cmp.w	r9, #0
 8003d32:	f47f af37 	bne.w	8003ba4 <_scanf_float+0x6c>
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003d3c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003d40:	f040 8103 	bne.w	8003f4a <_scanf_float+0x412>
 8003d44:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003d48:	2501      	movs	r5, #1
 8003d4a:	6022      	str	r2, [r4, #0]
 8003d4c:	e7bf      	b.n	8003cce <_scanf_float+0x196>
 8003d4e:	2d03      	cmp	r5, #3
 8003d50:	d0e2      	beq.n	8003d18 <_scanf_float+0x1e0>
 8003d52:	2d05      	cmp	r5, #5
 8003d54:	e7de      	b.n	8003d14 <_scanf_float+0x1dc>
 8003d56:	2d02      	cmp	r5, #2
 8003d58:	f47f af21 	bne.w	8003b9e <_scanf_float+0x66>
 8003d5c:	2503      	movs	r5, #3
 8003d5e:	e7b6      	b.n	8003cce <_scanf_float+0x196>
 8003d60:	2d06      	cmp	r5, #6
 8003d62:	f47f af1c 	bne.w	8003b9e <_scanf_float+0x66>
 8003d66:	2507      	movs	r5, #7
 8003d68:	e7b1      	b.n	8003cce <_scanf_float+0x196>
 8003d6a:	6822      	ldr	r2, [r4, #0]
 8003d6c:	0591      	lsls	r1, r2, #22
 8003d6e:	f57f af16 	bpl.w	8003b9e <_scanf_float+0x66>
 8003d72:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8003d76:	6022      	str	r2, [r4, #0]
 8003d78:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d7c:	e7a7      	b.n	8003cce <_scanf_float+0x196>
 8003d7e:	6822      	ldr	r2, [r4, #0]
 8003d80:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8003d84:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8003d88:	d006      	beq.n	8003d98 <_scanf_float+0x260>
 8003d8a:	0550      	lsls	r0, r2, #21
 8003d8c:	f57f af07 	bpl.w	8003b9e <_scanf_float+0x66>
 8003d90:	f1b9 0f00 	cmp.w	r9, #0
 8003d94:	f000 80d9 	beq.w	8003f4a <_scanf_float+0x412>
 8003d98:	0591      	lsls	r1, r2, #22
 8003d9a:	bf58      	it	pl
 8003d9c:	9902      	ldrpl	r1, [sp, #8]
 8003d9e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003da2:	bf58      	it	pl
 8003da4:	eba9 0101 	subpl.w	r1, r9, r1
 8003da8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003dac:	f04f 0900 	mov.w	r9, #0
 8003db0:	bf58      	it	pl
 8003db2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003db6:	6022      	str	r2, [r4, #0]
 8003db8:	e789      	b.n	8003cce <_scanf_float+0x196>
 8003dba:	f04f 0a03 	mov.w	sl, #3
 8003dbe:	e786      	b.n	8003cce <_scanf_float+0x196>
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003dc8:	4798      	blx	r3
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	f43f aeda 	beq.w	8003b84 <_scanf_float+0x4c>
 8003dd0:	e6e5      	b.n	8003b9e <_scanf_float+0x66>
 8003dd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003dd6:	463a      	mov	r2, r7
 8003dd8:	4640      	mov	r0, r8
 8003dda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003dde:	4798      	blx	r3
 8003de0:	6923      	ldr	r3, [r4, #16]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	6123      	str	r3, [r4, #16]
 8003de6:	e6e7      	b.n	8003bb8 <_scanf_float+0x80>
 8003de8:	1e6b      	subs	r3, r5, #1
 8003dea:	2b06      	cmp	r3, #6
 8003dec:	d824      	bhi.n	8003e38 <_scanf_float+0x300>
 8003dee:	2d02      	cmp	r5, #2
 8003df0:	d836      	bhi.n	8003e60 <_scanf_float+0x328>
 8003df2:	9b01      	ldr	r3, [sp, #4]
 8003df4:	429e      	cmp	r6, r3
 8003df6:	f67f aee3 	bls.w	8003bc0 <_scanf_float+0x88>
 8003dfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003dfe:	463a      	mov	r2, r7
 8003e00:	4640      	mov	r0, r8
 8003e02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e06:	4798      	blx	r3
 8003e08:	6923      	ldr	r3, [r4, #16]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	6123      	str	r3, [r4, #16]
 8003e0e:	e7f0      	b.n	8003df2 <_scanf_float+0x2ba>
 8003e10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e14:	463a      	mov	r2, r7
 8003e16:	4640      	mov	r0, r8
 8003e18:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003e1c:	4798      	blx	r3
 8003e1e:	6923      	ldr	r3, [r4, #16]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	6123      	str	r3, [r4, #16]
 8003e24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e28:	fa5f fa8a 	uxtb.w	sl, sl
 8003e2c:	f1ba 0f02 	cmp.w	sl, #2
 8003e30:	d1ee      	bne.n	8003e10 <_scanf_float+0x2d8>
 8003e32:	3d03      	subs	r5, #3
 8003e34:	b2ed      	uxtb	r5, r5
 8003e36:	1b76      	subs	r6, r6, r5
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	05da      	lsls	r2, r3, #23
 8003e3c:	d530      	bpl.n	8003ea0 <_scanf_float+0x368>
 8003e3e:	055b      	lsls	r3, r3, #21
 8003e40:	d511      	bpl.n	8003e66 <_scanf_float+0x32e>
 8003e42:	9b01      	ldr	r3, [sp, #4]
 8003e44:	429e      	cmp	r6, r3
 8003e46:	f67f aebb 	bls.w	8003bc0 <_scanf_float+0x88>
 8003e4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e4e:	463a      	mov	r2, r7
 8003e50:	4640      	mov	r0, r8
 8003e52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e56:	4798      	blx	r3
 8003e58:	6923      	ldr	r3, [r4, #16]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	6123      	str	r3, [r4, #16]
 8003e5e:	e7f0      	b.n	8003e42 <_scanf_float+0x30a>
 8003e60:	46aa      	mov	sl, r5
 8003e62:	46b3      	mov	fp, r6
 8003e64:	e7de      	b.n	8003e24 <_scanf_float+0x2ec>
 8003e66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003e6a:	6923      	ldr	r3, [r4, #16]
 8003e6c:	2965      	cmp	r1, #101	@ 0x65
 8003e6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e72:	f106 35ff 	add.w	r5, r6, #4294967295
 8003e76:	6123      	str	r3, [r4, #16]
 8003e78:	d00c      	beq.n	8003e94 <_scanf_float+0x35c>
 8003e7a:	2945      	cmp	r1, #69	@ 0x45
 8003e7c:	d00a      	beq.n	8003e94 <_scanf_float+0x35c>
 8003e7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e82:	463a      	mov	r2, r7
 8003e84:	4640      	mov	r0, r8
 8003e86:	4798      	blx	r3
 8003e88:	6923      	ldr	r3, [r4, #16]
 8003e8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	1eb5      	subs	r5, r6, #2
 8003e92:	6123      	str	r3, [r4, #16]
 8003e94:	463a      	mov	r2, r7
 8003e96:	4640      	mov	r0, r8
 8003e98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e9c:	4798      	blx	r3
 8003e9e:	462e      	mov	r6, r5
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	f012 0210 	ands.w	r2, r2, #16
 8003ea6:	d001      	beq.n	8003eac <_scanf_float+0x374>
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	e68a      	b.n	8003bc2 <_scanf_float+0x8a>
 8003eac:	7032      	strb	r2, [r6, #0]
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb8:	d11c      	bne.n	8003ef4 <_scanf_float+0x3bc>
 8003eba:	9b02      	ldr	r3, [sp, #8]
 8003ebc:	454b      	cmp	r3, r9
 8003ebe:	eba3 0209 	sub.w	r2, r3, r9
 8003ec2:	d123      	bne.n	8003f0c <_scanf_float+0x3d4>
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	4640      	mov	r0, r8
 8003ec8:	9901      	ldr	r1, [sp, #4]
 8003eca:	f002 fd01 	bl	80068d0 <_strtod_r>
 8003ece:	9b03      	ldr	r3, [sp, #12]
 8003ed0:	6825      	ldr	r5, [r4, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f015 0f02 	tst.w	r5, #2
 8003ed8:	4606      	mov	r6, r0
 8003eda:	460f      	mov	r7, r1
 8003edc:	f103 0204 	add.w	r2, r3, #4
 8003ee0:	d01f      	beq.n	8003f22 <_scanf_float+0x3ea>
 8003ee2:	9903      	ldr	r1, [sp, #12]
 8003ee4:	600a      	str	r2, [r1, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	e9c3 6700 	strd	r6, r7, [r3]
 8003eec:	68e3      	ldr	r3, [r4, #12]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	60e3      	str	r3, [r4, #12]
 8003ef2:	e7d9      	b.n	8003ea8 <_scanf_float+0x370>
 8003ef4:	9b04      	ldr	r3, [sp, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0e4      	beq.n	8003ec4 <_scanf_float+0x38c>
 8003efa:	9905      	ldr	r1, [sp, #20]
 8003efc:	230a      	movs	r3, #10
 8003efe:	4640      	mov	r0, r8
 8003f00:	3101      	adds	r1, #1
 8003f02:	f002 fd65 	bl	80069d0 <_strtol_r>
 8003f06:	9b04      	ldr	r3, [sp, #16]
 8003f08:	9e05      	ldr	r6, [sp, #20]
 8003f0a:	1ac2      	subs	r2, r0, r3
 8003f0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003f10:	429e      	cmp	r6, r3
 8003f12:	bf28      	it	cs
 8003f14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003f18:	4630      	mov	r0, r6
 8003f1a:	490d      	ldr	r1, [pc, #52]	@ (8003f50 <_scanf_float+0x418>)
 8003f1c:	f000 f94e 	bl	80041bc <siprintf>
 8003f20:	e7d0      	b.n	8003ec4 <_scanf_float+0x38c>
 8003f22:	076d      	lsls	r5, r5, #29
 8003f24:	d4dd      	bmi.n	8003ee2 <_scanf_float+0x3aa>
 8003f26:	9d03      	ldr	r5, [sp, #12]
 8003f28:	602a      	str	r2, [r5, #0]
 8003f2a:	681d      	ldr	r5, [r3, #0]
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	f7fc fd6c 	bl	8000a0c <__aeabi_dcmpun>
 8003f34:	b120      	cbz	r0, 8003f40 <_scanf_float+0x408>
 8003f36:	4807      	ldr	r0, [pc, #28]	@ (8003f54 <_scanf_float+0x41c>)
 8003f38:	f000 fad4 	bl	80044e4 <nanf>
 8003f3c:	6028      	str	r0, [r5, #0]
 8003f3e:	e7d5      	b.n	8003eec <_scanf_float+0x3b4>
 8003f40:	4630      	mov	r0, r6
 8003f42:	4639      	mov	r1, r7
 8003f44:	f7fc fdc0 	bl	8000ac8 <__aeabi_d2f>
 8003f48:	e7f8      	b.n	8003f3c <_scanf_float+0x404>
 8003f4a:	f04f 0900 	mov.w	r9, #0
 8003f4e:	e62d      	b.n	8003bac <_scanf_float+0x74>
 8003f50:	08008f9a 	.word	0x08008f9a
 8003f54:	08009335 	.word	0x08009335

08003f58 <std>:
 8003f58:	2300      	movs	r3, #0
 8003f5a:	b510      	push	{r4, lr}
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f66:	6083      	str	r3, [r0, #8]
 8003f68:	8181      	strh	r1, [r0, #12]
 8003f6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f6c:	81c2      	strh	r2, [r0, #14]
 8003f6e:	6183      	str	r3, [r0, #24]
 8003f70:	4619      	mov	r1, r3
 8003f72:	2208      	movs	r2, #8
 8003f74:	305c      	adds	r0, #92	@ 0x5c
 8003f76:	f000 fa19 	bl	80043ac <memset>
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb0 <std+0x58>)
 8003f7c:	6224      	str	r4, [r4, #32]
 8003f7e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f80:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb4 <std+0x5c>)
 8003f82:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f84:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb8 <std+0x60>)
 8003f86:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f88:	4b0c      	ldr	r3, [pc, #48]	@ (8003fbc <std+0x64>)
 8003f8a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc0 <std+0x68>)
 8003f8e:	429c      	cmp	r4, r3
 8003f90:	d006      	beq.n	8003fa0 <std+0x48>
 8003f92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f96:	4294      	cmp	r4, r2
 8003f98:	d002      	beq.n	8003fa0 <std+0x48>
 8003f9a:	33d0      	adds	r3, #208	@ 0xd0
 8003f9c:	429c      	cmp	r4, r3
 8003f9e:	d105      	bne.n	8003fac <std+0x54>
 8003fa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa8:	f000 ba7c 	b.w	80044a4 <__retarget_lock_init_recursive>
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	bf00      	nop
 8003fb0:	080041fd 	.word	0x080041fd
 8003fb4:	0800421f 	.word	0x0800421f
 8003fb8:	08004257 	.word	0x08004257
 8003fbc:	0800427b 	.word	0x0800427b
 8003fc0:	20004148 	.word	0x20004148

08003fc4 <stdio_exit_handler>:
 8003fc4:	4a02      	ldr	r2, [pc, #8]	@ (8003fd0 <stdio_exit_handler+0xc>)
 8003fc6:	4903      	ldr	r1, [pc, #12]	@ (8003fd4 <stdio_exit_handler+0x10>)
 8003fc8:	4803      	ldr	r0, [pc, #12]	@ (8003fd8 <stdio_exit_handler+0x14>)
 8003fca:	f000 b869 	b.w	80040a0 <_fwalk_sglue>
 8003fce:	bf00      	nop
 8003fd0:	20000030 	.word	0x20000030
 8003fd4:	08007005 	.word	0x08007005
 8003fd8:	20000040 	.word	0x20000040

08003fdc <cleanup_stdio>:
 8003fdc:	6841      	ldr	r1, [r0, #4]
 8003fde:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <cleanup_stdio+0x34>)
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	4299      	cmp	r1, r3
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	d001      	beq.n	8003fec <cleanup_stdio+0x10>
 8003fe8:	f003 f80c 	bl	8007004 <_fflush_r>
 8003fec:	68a1      	ldr	r1, [r4, #8]
 8003fee:	4b09      	ldr	r3, [pc, #36]	@ (8004014 <cleanup_stdio+0x38>)
 8003ff0:	4299      	cmp	r1, r3
 8003ff2:	d002      	beq.n	8003ffa <cleanup_stdio+0x1e>
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f003 f805 	bl	8007004 <_fflush_r>
 8003ffa:	68e1      	ldr	r1, [r4, #12]
 8003ffc:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <cleanup_stdio+0x3c>)
 8003ffe:	4299      	cmp	r1, r3
 8004000:	d004      	beq.n	800400c <cleanup_stdio+0x30>
 8004002:	4620      	mov	r0, r4
 8004004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004008:	f002 bffc 	b.w	8007004 <_fflush_r>
 800400c:	bd10      	pop	{r4, pc}
 800400e:	bf00      	nop
 8004010:	20004148 	.word	0x20004148
 8004014:	200041b0 	.word	0x200041b0
 8004018:	20004218 	.word	0x20004218

0800401c <global_stdio_init.part.0>:
 800401c:	b510      	push	{r4, lr}
 800401e:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <global_stdio_init.part.0+0x30>)
 8004020:	4c0b      	ldr	r4, [pc, #44]	@ (8004050 <global_stdio_init.part.0+0x34>)
 8004022:	4a0c      	ldr	r2, [pc, #48]	@ (8004054 <global_stdio_init.part.0+0x38>)
 8004024:	4620      	mov	r0, r4
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	2104      	movs	r1, #4
 800402a:	2200      	movs	r2, #0
 800402c:	f7ff ff94 	bl	8003f58 <std>
 8004030:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004034:	2201      	movs	r2, #1
 8004036:	2109      	movs	r1, #9
 8004038:	f7ff ff8e 	bl	8003f58 <std>
 800403c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004040:	2202      	movs	r2, #2
 8004042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004046:	2112      	movs	r1, #18
 8004048:	f7ff bf86 	b.w	8003f58 <std>
 800404c:	20004280 	.word	0x20004280
 8004050:	20004148 	.word	0x20004148
 8004054:	08003fc5 	.word	0x08003fc5

08004058 <__sfp_lock_acquire>:
 8004058:	4801      	ldr	r0, [pc, #4]	@ (8004060 <__sfp_lock_acquire+0x8>)
 800405a:	f000 ba24 	b.w	80044a6 <__retarget_lock_acquire_recursive>
 800405e:	bf00      	nop
 8004060:	20004289 	.word	0x20004289

08004064 <__sfp_lock_release>:
 8004064:	4801      	ldr	r0, [pc, #4]	@ (800406c <__sfp_lock_release+0x8>)
 8004066:	f000 ba1f 	b.w	80044a8 <__retarget_lock_release_recursive>
 800406a:	bf00      	nop
 800406c:	20004289 	.word	0x20004289

08004070 <__sinit>:
 8004070:	b510      	push	{r4, lr}
 8004072:	4604      	mov	r4, r0
 8004074:	f7ff fff0 	bl	8004058 <__sfp_lock_acquire>
 8004078:	6a23      	ldr	r3, [r4, #32]
 800407a:	b11b      	cbz	r3, 8004084 <__sinit+0x14>
 800407c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004080:	f7ff bff0 	b.w	8004064 <__sfp_lock_release>
 8004084:	4b04      	ldr	r3, [pc, #16]	@ (8004098 <__sinit+0x28>)
 8004086:	6223      	str	r3, [r4, #32]
 8004088:	4b04      	ldr	r3, [pc, #16]	@ (800409c <__sinit+0x2c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f5      	bne.n	800407c <__sinit+0xc>
 8004090:	f7ff ffc4 	bl	800401c <global_stdio_init.part.0>
 8004094:	e7f2      	b.n	800407c <__sinit+0xc>
 8004096:	bf00      	nop
 8004098:	08003fdd 	.word	0x08003fdd
 800409c:	20004280 	.word	0x20004280

080040a0 <_fwalk_sglue>:
 80040a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040a4:	4607      	mov	r7, r0
 80040a6:	4688      	mov	r8, r1
 80040a8:	4614      	mov	r4, r2
 80040aa:	2600      	movs	r6, #0
 80040ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040b0:	f1b9 0901 	subs.w	r9, r9, #1
 80040b4:	d505      	bpl.n	80040c2 <_fwalk_sglue+0x22>
 80040b6:	6824      	ldr	r4, [r4, #0]
 80040b8:	2c00      	cmp	r4, #0
 80040ba:	d1f7      	bne.n	80040ac <_fwalk_sglue+0xc>
 80040bc:	4630      	mov	r0, r6
 80040be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040c2:	89ab      	ldrh	r3, [r5, #12]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d907      	bls.n	80040d8 <_fwalk_sglue+0x38>
 80040c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040cc:	3301      	adds	r3, #1
 80040ce:	d003      	beq.n	80040d8 <_fwalk_sglue+0x38>
 80040d0:	4629      	mov	r1, r5
 80040d2:	4638      	mov	r0, r7
 80040d4:	47c0      	blx	r8
 80040d6:	4306      	orrs	r6, r0
 80040d8:	3568      	adds	r5, #104	@ 0x68
 80040da:	e7e9      	b.n	80040b0 <_fwalk_sglue+0x10>

080040dc <iprintf>:
 80040dc:	b40f      	push	{r0, r1, r2, r3}
 80040de:	b507      	push	{r0, r1, r2, lr}
 80040e0:	4906      	ldr	r1, [pc, #24]	@ (80040fc <iprintf+0x20>)
 80040e2:	ab04      	add	r3, sp, #16
 80040e4:	6808      	ldr	r0, [r1, #0]
 80040e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80040ea:	6881      	ldr	r1, [r0, #8]
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	f002 fdf1 	bl	8006cd4 <_vfiprintf_r>
 80040f2:	b003      	add	sp, #12
 80040f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040f8:	b004      	add	sp, #16
 80040fa:	4770      	bx	lr
 80040fc:	2000003c 	.word	0x2000003c

08004100 <_puts_r>:
 8004100:	6a03      	ldr	r3, [r0, #32]
 8004102:	b570      	push	{r4, r5, r6, lr}
 8004104:	4605      	mov	r5, r0
 8004106:	460e      	mov	r6, r1
 8004108:	6884      	ldr	r4, [r0, #8]
 800410a:	b90b      	cbnz	r3, 8004110 <_puts_r+0x10>
 800410c:	f7ff ffb0 	bl	8004070 <__sinit>
 8004110:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004112:	07db      	lsls	r3, r3, #31
 8004114:	d405      	bmi.n	8004122 <_puts_r+0x22>
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	0598      	lsls	r0, r3, #22
 800411a:	d402      	bmi.n	8004122 <_puts_r+0x22>
 800411c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800411e:	f000 f9c2 	bl	80044a6 <__retarget_lock_acquire_recursive>
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	0719      	lsls	r1, r3, #28
 8004126:	d502      	bpl.n	800412e <_puts_r+0x2e>
 8004128:	6923      	ldr	r3, [r4, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d135      	bne.n	800419a <_puts_r+0x9a>
 800412e:	4621      	mov	r1, r4
 8004130:	4628      	mov	r0, r5
 8004132:	f000 f8e5 	bl	8004300 <__swsetup_r>
 8004136:	b380      	cbz	r0, 800419a <_puts_r+0x9a>
 8004138:	f04f 35ff 	mov.w	r5, #4294967295
 800413c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800413e:	07da      	lsls	r2, r3, #31
 8004140:	d405      	bmi.n	800414e <_puts_r+0x4e>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	059b      	lsls	r3, r3, #22
 8004146:	d402      	bmi.n	800414e <_puts_r+0x4e>
 8004148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800414a:	f000 f9ad 	bl	80044a8 <__retarget_lock_release_recursive>
 800414e:	4628      	mov	r0, r5
 8004150:	bd70      	pop	{r4, r5, r6, pc}
 8004152:	2b00      	cmp	r3, #0
 8004154:	da04      	bge.n	8004160 <_puts_r+0x60>
 8004156:	69a2      	ldr	r2, [r4, #24]
 8004158:	429a      	cmp	r2, r3
 800415a:	dc17      	bgt.n	800418c <_puts_r+0x8c>
 800415c:	290a      	cmp	r1, #10
 800415e:	d015      	beq.n	800418c <_puts_r+0x8c>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	6022      	str	r2, [r4, #0]
 8004166:	7019      	strb	r1, [r3, #0]
 8004168:	68a3      	ldr	r3, [r4, #8]
 800416a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800416e:	3b01      	subs	r3, #1
 8004170:	60a3      	str	r3, [r4, #8]
 8004172:	2900      	cmp	r1, #0
 8004174:	d1ed      	bne.n	8004152 <_puts_r+0x52>
 8004176:	2b00      	cmp	r3, #0
 8004178:	da11      	bge.n	800419e <_puts_r+0x9e>
 800417a:	4622      	mov	r2, r4
 800417c:	210a      	movs	r1, #10
 800417e:	4628      	mov	r0, r5
 8004180:	f000 f87f 	bl	8004282 <__swbuf_r>
 8004184:	3001      	adds	r0, #1
 8004186:	d0d7      	beq.n	8004138 <_puts_r+0x38>
 8004188:	250a      	movs	r5, #10
 800418a:	e7d7      	b.n	800413c <_puts_r+0x3c>
 800418c:	4622      	mov	r2, r4
 800418e:	4628      	mov	r0, r5
 8004190:	f000 f877 	bl	8004282 <__swbuf_r>
 8004194:	3001      	adds	r0, #1
 8004196:	d1e7      	bne.n	8004168 <_puts_r+0x68>
 8004198:	e7ce      	b.n	8004138 <_puts_r+0x38>
 800419a:	3e01      	subs	r6, #1
 800419c:	e7e4      	b.n	8004168 <_puts_r+0x68>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	6022      	str	r2, [r4, #0]
 80041a4:	220a      	movs	r2, #10
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e7ee      	b.n	8004188 <_puts_r+0x88>
	...

080041ac <puts>:
 80041ac:	4b02      	ldr	r3, [pc, #8]	@ (80041b8 <puts+0xc>)
 80041ae:	4601      	mov	r1, r0
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	f7ff bfa5 	b.w	8004100 <_puts_r>
 80041b6:	bf00      	nop
 80041b8:	2000003c 	.word	0x2000003c

080041bc <siprintf>:
 80041bc:	b40e      	push	{r1, r2, r3}
 80041be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041c2:	b500      	push	{lr}
 80041c4:	b09c      	sub	sp, #112	@ 0x70
 80041c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80041c8:	9002      	str	r0, [sp, #8]
 80041ca:	9006      	str	r0, [sp, #24]
 80041cc:	9107      	str	r1, [sp, #28]
 80041ce:	9104      	str	r1, [sp, #16]
 80041d0:	4808      	ldr	r0, [pc, #32]	@ (80041f4 <siprintf+0x38>)
 80041d2:	4909      	ldr	r1, [pc, #36]	@ (80041f8 <siprintf+0x3c>)
 80041d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041d8:	9105      	str	r1, [sp, #20]
 80041da:	6800      	ldr	r0, [r0, #0]
 80041dc:	a902      	add	r1, sp, #8
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	f002 fc54 	bl	8006a8c <_svfiprintf_r>
 80041e4:	2200      	movs	r2, #0
 80041e6:	9b02      	ldr	r3, [sp, #8]
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	b01c      	add	sp, #112	@ 0x70
 80041ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80041f0:	b003      	add	sp, #12
 80041f2:	4770      	bx	lr
 80041f4:	2000003c 	.word	0x2000003c
 80041f8:	ffff0208 	.word	0xffff0208

080041fc <__sread>:
 80041fc:	b510      	push	{r4, lr}
 80041fe:	460c      	mov	r4, r1
 8004200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004204:	f000 f900 	bl	8004408 <_read_r>
 8004208:	2800      	cmp	r0, #0
 800420a:	bfab      	itete	ge
 800420c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800420e:	89a3      	ldrhlt	r3, [r4, #12]
 8004210:	181b      	addge	r3, r3, r0
 8004212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004216:	bfac      	ite	ge
 8004218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800421a:	81a3      	strhlt	r3, [r4, #12]
 800421c:	bd10      	pop	{r4, pc}

0800421e <__swrite>:
 800421e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004222:	461f      	mov	r7, r3
 8004224:	898b      	ldrh	r3, [r1, #12]
 8004226:	4605      	mov	r5, r0
 8004228:	05db      	lsls	r3, r3, #23
 800422a:	460c      	mov	r4, r1
 800422c:	4616      	mov	r6, r2
 800422e:	d505      	bpl.n	800423c <__swrite+0x1e>
 8004230:	2302      	movs	r3, #2
 8004232:	2200      	movs	r2, #0
 8004234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004238:	f000 f8d4 	bl	80043e4 <_lseek_r>
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	4632      	mov	r2, r6
 8004240:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004244:	81a3      	strh	r3, [r4, #12]
 8004246:	4628      	mov	r0, r5
 8004248:	463b      	mov	r3, r7
 800424a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800424e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004252:	f000 b8eb 	b.w	800442c <_write_r>

08004256 <__sseek>:
 8004256:	b510      	push	{r4, lr}
 8004258:	460c      	mov	r4, r1
 800425a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800425e:	f000 f8c1 	bl	80043e4 <_lseek_r>
 8004262:	1c43      	adds	r3, r0, #1
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	bf15      	itete	ne
 8004268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800426a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800426e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004272:	81a3      	strheq	r3, [r4, #12]
 8004274:	bf18      	it	ne
 8004276:	81a3      	strhne	r3, [r4, #12]
 8004278:	bd10      	pop	{r4, pc}

0800427a <__sclose>:
 800427a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800427e:	f000 b8a1 	b.w	80043c4 <_close_r>

08004282 <__swbuf_r>:
 8004282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004284:	460e      	mov	r6, r1
 8004286:	4614      	mov	r4, r2
 8004288:	4605      	mov	r5, r0
 800428a:	b118      	cbz	r0, 8004294 <__swbuf_r+0x12>
 800428c:	6a03      	ldr	r3, [r0, #32]
 800428e:	b90b      	cbnz	r3, 8004294 <__swbuf_r+0x12>
 8004290:	f7ff feee 	bl	8004070 <__sinit>
 8004294:	69a3      	ldr	r3, [r4, #24]
 8004296:	60a3      	str	r3, [r4, #8]
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	071a      	lsls	r2, r3, #28
 800429c:	d501      	bpl.n	80042a2 <__swbuf_r+0x20>
 800429e:	6923      	ldr	r3, [r4, #16]
 80042a0:	b943      	cbnz	r3, 80042b4 <__swbuf_r+0x32>
 80042a2:	4621      	mov	r1, r4
 80042a4:	4628      	mov	r0, r5
 80042a6:	f000 f82b 	bl	8004300 <__swsetup_r>
 80042aa:	b118      	cbz	r0, 80042b4 <__swbuf_r+0x32>
 80042ac:	f04f 37ff 	mov.w	r7, #4294967295
 80042b0:	4638      	mov	r0, r7
 80042b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	6922      	ldr	r2, [r4, #16]
 80042b8:	b2f6      	uxtb	r6, r6
 80042ba:	1a98      	subs	r0, r3, r2
 80042bc:	6963      	ldr	r3, [r4, #20]
 80042be:	4637      	mov	r7, r6
 80042c0:	4283      	cmp	r3, r0
 80042c2:	dc05      	bgt.n	80042d0 <__swbuf_r+0x4e>
 80042c4:	4621      	mov	r1, r4
 80042c6:	4628      	mov	r0, r5
 80042c8:	f002 fe9c 	bl	8007004 <_fflush_r>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d1ed      	bne.n	80042ac <__swbuf_r+0x2a>
 80042d0:	68a3      	ldr	r3, [r4, #8]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	60a3      	str	r3, [r4, #8]
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	6022      	str	r2, [r4, #0]
 80042dc:	701e      	strb	r6, [r3, #0]
 80042de:	6962      	ldr	r2, [r4, #20]
 80042e0:	1c43      	adds	r3, r0, #1
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d004      	beq.n	80042f0 <__swbuf_r+0x6e>
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	07db      	lsls	r3, r3, #31
 80042ea:	d5e1      	bpl.n	80042b0 <__swbuf_r+0x2e>
 80042ec:	2e0a      	cmp	r6, #10
 80042ee:	d1df      	bne.n	80042b0 <__swbuf_r+0x2e>
 80042f0:	4621      	mov	r1, r4
 80042f2:	4628      	mov	r0, r5
 80042f4:	f002 fe86 	bl	8007004 <_fflush_r>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d0d9      	beq.n	80042b0 <__swbuf_r+0x2e>
 80042fc:	e7d6      	b.n	80042ac <__swbuf_r+0x2a>
	...

08004300 <__swsetup_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4b29      	ldr	r3, [pc, #164]	@ (80043a8 <__swsetup_r+0xa8>)
 8004304:	4605      	mov	r5, r0
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	460c      	mov	r4, r1
 800430a:	b118      	cbz	r0, 8004314 <__swsetup_r+0x14>
 800430c:	6a03      	ldr	r3, [r0, #32]
 800430e:	b90b      	cbnz	r3, 8004314 <__swsetup_r+0x14>
 8004310:	f7ff feae 	bl	8004070 <__sinit>
 8004314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004318:	0719      	lsls	r1, r3, #28
 800431a:	d422      	bmi.n	8004362 <__swsetup_r+0x62>
 800431c:	06da      	lsls	r2, r3, #27
 800431e:	d407      	bmi.n	8004330 <__swsetup_r+0x30>
 8004320:	2209      	movs	r2, #9
 8004322:	602a      	str	r2, [r5, #0]
 8004324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	81a3      	strh	r3, [r4, #12]
 800432e:	e033      	b.n	8004398 <__swsetup_r+0x98>
 8004330:	0758      	lsls	r0, r3, #29
 8004332:	d512      	bpl.n	800435a <__swsetup_r+0x5a>
 8004334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004336:	b141      	cbz	r1, 800434a <__swsetup_r+0x4a>
 8004338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800433c:	4299      	cmp	r1, r3
 800433e:	d002      	beq.n	8004346 <__swsetup_r+0x46>
 8004340:	4628      	mov	r0, r5
 8004342:	f000 ff25 	bl	8005190 <_free_r>
 8004346:	2300      	movs	r3, #0
 8004348:	6363      	str	r3, [r4, #52]	@ 0x34
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004350:	81a3      	strh	r3, [r4, #12]
 8004352:	2300      	movs	r3, #0
 8004354:	6063      	str	r3, [r4, #4]
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	89a3      	ldrh	r3, [r4, #12]
 800435c:	f043 0308 	orr.w	r3, r3, #8
 8004360:	81a3      	strh	r3, [r4, #12]
 8004362:	6923      	ldr	r3, [r4, #16]
 8004364:	b94b      	cbnz	r3, 800437a <__swsetup_r+0x7a>
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800436c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004370:	d003      	beq.n	800437a <__swsetup_r+0x7a>
 8004372:	4621      	mov	r1, r4
 8004374:	4628      	mov	r0, r5
 8004376:	f002 fe92 	bl	800709e <__smakebuf_r>
 800437a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800437e:	f013 0201 	ands.w	r2, r3, #1
 8004382:	d00a      	beq.n	800439a <__swsetup_r+0x9a>
 8004384:	2200      	movs	r2, #0
 8004386:	60a2      	str	r2, [r4, #8]
 8004388:	6962      	ldr	r2, [r4, #20]
 800438a:	4252      	negs	r2, r2
 800438c:	61a2      	str	r2, [r4, #24]
 800438e:	6922      	ldr	r2, [r4, #16]
 8004390:	b942      	cbnz	r2, 80043a4 <__swsetup_r+0xa4>
 8004392:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004396:	d1c5      	bne.n	8004324 <__swsetup_r+0x24>
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	0799      	lsls	r1, r3, #30
 800439c:	bf58      	it	pl
 800439e:	6962      	ldrpl	r2, [r4, #20]
 80043a0:	60a2      	str	r2, [r4, #8]
 80043a2:	e7f4      	b.n	800438e <__swsetup_r+0x8e>
 80043a4:	2000      	movs	r0, #0
 80043a6:	e7f7      	b.n	8004398 <__swsetup_r+0x98>
 80043a8:	2000003c 	.word	0x2000003c

080043ac <memset>:
 80043ac:	4603      	mov	r3, r0
 80043ae:	4402      	add	r2, r0
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d100      	bne.n	80043b6 <memset+0xa>
 80043b4:	4770      	bx	lr
 80043b6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ba:	e7f9      	b.n	80043b0 <memset+0x4>

080043bc <_localeconv_r>:
 80043bc:	4800      	ldr	r0, [pc, #0]	@ (80043c0 <_localeconv_r+0x4>)
 80043be:	4770      	bx	lr
 80043c0:	2000017c 	.word	0x2000017c

080043c4 <_close_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	2300      	movs	r3, #0
 80043c8:	4d05      	ldr	r5, [pc, #20]	@ (80043e0 <_close_r+0x1c>)
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	602b      	str	r3, [r5, #0]
 80043d0:	f7fd f8bd 	bl	800154e <_close>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_close_r+0x1a>
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	b103      	cbz	r3, 80043de <_close_r+0x1a>
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	20004284 	.word	0x20004284

080043e4 <_lseek_r>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	4611      	mov	r1, r2
 80043ec:	2200      	movs	r2, #0
 80043ee:	4d05      	ldr	r5, [pc, #20]	@ (8004404 <_lseek_r+0x20>)
 80043f0:	602a      	str	r2, [r5, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f7fd f8cf 	bl	8001596 <_lseek>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d102      	bne.n	8004402 <_lseek_r+0x1e>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b103      	cbz	r3, 8004402 <_lseek_r+0x1e>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	20004284 	.word	0x20004284

08004408 <_read_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4604      	mov	r4, r0
 800440c:	4608      	mov	r0, r1
 800440e:	4611      	mov	r1, r2
 8004410:	2200      	movs	r2, #0
 8004412:	4d05      	ldr	r5, [pc, #20]	@ (8004428 <_read_r+0x20>)
 8004414:	602a      	str	r2, [r5, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	f7fd f860 	bl	80014dc <_read>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_read_r+0x1e>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_read_r+0x1e>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	20004284 	.word	0x20004284

0800442c <_write_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4604      	mov	r4, r0
 8004430:	4608      	mov	r0, r1
 8004432:	4611      	mov	r1, r2
 8004434:	2200      	movs	r2, #0
 8004436:	4d05      	ldr	r5, [pc, #20]	@ (800444c <_write_r+0x20>)
 8004438:	602a      	str	r2, [r5, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	f7fd f86b 	bl	8001516 <_write>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d102      	bne.n	800444a <_write_r+0x1e>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	b103      	cbz	r3, 800444a <_write_r+0x1e>
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	20004284 	.word	0x20004284

08004450 <__errno>:
 8004450:	4b01      	ldr	r3, [pc, #4]	@ (8004458 <__errno+0x8>)
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	2000003c 	.word	0x2000003c

0800445c <__libc_init_array>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	2600      	movs	r6, #0
 8004460:	4d0c      	ldr	r5, [pc, #48]	@ (8004494 <__libc_init_array+0x38>)
 8004462:	4c0d      	ldr	r4, [pc, #52]	@ (8004498 <__libc_init_array+0x3c>)
 8004464:	1b64      	subs	r4, r4, r5
 8004466:	10a4      	asrs	r4, r4, #2
 8004468:	42a6      	cmp	r6, r4
 800446a:	d109      	bne.n	8004480 <__libc_init_array+0x24>
 800446c:	f003 ff68 	bl	8008340 <_init>
 8004470:	2600      	movs	r6, #0
 8004472:	4d0a      	ldr	r5, [pc, #40]	@ (800449c <__libc_init_array+0x40>)
 8004474:	4c0a      	ldr	r4, [pc, #40]	@ (80044a0 <__libc_init_array+0x44>)
 8004476:	1b64      	subs	r4, r4, r5
 8004478:	10a4      	asrs	r4, r4, #2
 800447a:	42a6      	cmp	r6, r4
 800447c:	d105      	bne.n	800448a <__libc_init_array+0x2e>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	f855 3b04 	ldr.w	r3, [r5], #4
 8004484:	4798      	blx	r3
 8004486:	3601      	adds	r6, #1
 8004488:	e7ee      	b.n	8004468 <__libc_init_array+0xc>
 800448a:	f855 3b04 	ldr.w	r3, [r5], #4
 800448e:	4798      	blx	r3
 8004490:	3601      	adds	r6, #1
 8004492:	e7f2      	b.n	800447a <__libc_init_array+0x1e>
 8004494:	080093b8 	.word	0x080093b8
 8004498:	080093b8 	.word	0x080093b8
 800449c:	080093b8 	.word	0x080093b8
 80044a0:	080093bc 	.word	0x080093bc

080044a4 <__retarget_lock_init_recursive>:
 80044a4:	4770      	bx	lr

080044a6 <__retarget_lock_acquire_recursive>:
 80044a6:	4770      	bx	lr

080044a8 <__retarget_lock_release_recursive>:
 80044a8:	4770      	bx	lr

080044aa <memchr>:
 80044aa:	4603      	mov	r3, r0
 80044ac:	b510      	push	{r4, lr}
 80044ae:	b2c9      	uxtb	r1, r1
 80044b0:	4402      	add	r2, r0
 80044b2:	4293      	cmp	r3, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	d101      	bne.n	80044bc <memchr+0x12>
 80044b8:	2000      	movs	r0, #0
 80044ba:	e003      	b.n	80044c4 <memchr+0x1a>
 80044bc:	7804      	ldrb	r4, [r0, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	428c      	cmp	r4, r1
 80044c2:	d1f6      	bne.n	80044b2 <memchr+0x8>
 80044c4:	bd10      	pop	{r4, pc}

080044c6 <memcpy>:
 80044c6:	440a      	add	r2, r1
 80044c8:	4291      	cmp	r1, r2
 80044ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80044ce:	d100      	bne.n	80044d2 <memcpy+0xc>
 80044d0:	4770      	bx	lr
 80044d2:	b510      	push	{r4, lr}
 80044d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044d8:	4291      	cmp	r1, r2
 80044da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044de:	d1f9      	bne.n	80044d4 <memcpy+0xe>
 80044e0:	bd10      	pop	{r4, pc}
	...

080044e4 <nanf>:
 80044e4:	4800      	ldr	r0, [pc, #0]	@ (80044e8 <nanf+0x4>)
 80044e6:	4770      	bx	lr
 80044e8:	7fc00000 	.word	0x7fc00000

080044ec <quorem>:
 80044ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f0:	6903      	ldr	r3, [r0, #16]
 80044f2:	690c      	ldr	r4, [r1, #16]
 80044f4:	4607      	mov	r7, r0
 80044f6:	42a3      	cmp	r3, r4
 80044f8:	db7e      	blt.n	80045f8 <quorem+0x10c>
 80044fa:	3c01      	subs	r4, #1
 80044fc:	00a3      	lsls	r3, r4, #2
 80044fe:	f100 0514 	add.w	r5, r0, #20
 8004502:	f101 0814 	add.w	r8, r1, #20
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004516:	3301      	adds	r3, #1
 8004518:	429a      	cmp	r2, r3
 800451a:	fbb2 f6f3 	udiv	r6, r2, r3
 800451e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004522:	d32e      	bcc.n	8004582 <quorem+0x96>
 8004524:	f04f 0a00 	mov.w	sl, #0
 8004528:	46c4      	mov	ip, r8
 800452a:	46ae      	mov	lr, r5
 800452c:	46d3      	mov	fp, sl
 800452e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004532:	b298      	uxth	r0, r3
 8004534:	fb06 a000 	mla	r0, r6, r0, sl
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	0c02      	lsrs	r2, r0, #16
 800453c:	fb06 2303 	mla	r3, r6, r3, r2
 8004540:	f8de 2000 	ldr.w	r2, [lr]
 8004544:	b280      	uxth	r0, r0
 8004546:	b292      	uxth	r2, r2
 8004548:	1a12      	subs	r2, r2, r0
 800454a:	445a      	add	r2, fp
 800454c:	f8de 0000 	ldr.w	r0, [lr]
 8004550:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004554:	b29b      	uxth	r3, r3
 8004556:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800455a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800455e:	b292      	uxth	r2, r2
 8004560:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004564:	45e1      	cmp	r9, ip
 8004566:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800456a:	f84e 2b04 	str.w	r2, [lr], #4
 800456e:	d2de      	bcs.n	800452e <quorem+0x42>
 8004570:	9b00      	ldr	r3, [sp, #0]
 8004572:	58eb      	ldr	r3, [r5, r3]
 8004574:	b92b      	cbnz	r3, 8004582 <quorem+0x96>
 8004576:	9b01      	ldr	r3, [sp, #4]
 8004578:	3b04      	subs	r3, #4
 800457a:	429d      	cmp	r5, r3
 800457c:	461a      	mov	r2, r3
 800457e:	d32f      	bcc.n	80045e0 <quorem+0xf4>
 8004580:	613c      	str	r4, [r7, #16]
 8004582:	4638      	mov	r0, r7
 8004584:	f001 f9c4 	bl	8005910 <__mcmp>
 8004588:	2800      	cmp	r0, #0
 800458a:	db25      	blt.n	80045d8 <quorem+0xec>
 800458c:	4629      	mov	r1, r5
 800458e:	2000      	movs	r0, #0
 8004590:	f858 2b04 	ldr.w	r2, [r8], #4
 8004594:	f8d1 c000 	ldr.w	ip, [r1]
 8004598:	fa1f fe82 	uxth.w	lr, r2
 800459c:	fa1f f38c 	uxth.w	r3, ip
 80045a0:	eba3 030e 	sub.w	r3, r3, lr
 80045a4:	4403      	add	r3, r0
 80045a6:	0c12      	lsrs	r2, r2, #16
 80045a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80045ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045b6:	45c1      	cmp	r9, r8
 80045b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80045bc:	f841 3b04 	str.w	r3, [r1], #4
 80045c0:	d2e6      	bcs.n	8004590 <quorem+0xa4>
 80045c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80045ca:	b922      	cbnz	r2, 80045d6 <quorem+0xea>
 80045cc:	3b04      	subs	r3, #4
 80045ce:	429d      	cmp	r5, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	d30b      	bcc.n	80045ec <quorem+0x100>
 80045d4:	613c      	str	r4, [r7, #16]
 80045d6:	3601      	adds	r6, #1
 80045d8:	4630      	mov	r0, r6
 80045da:	b003      	add	sp, #12
 80045dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	3b04      	subs	r3, #4
 80045e4:	2a00      	cmp	r2, #0
 80045e6:	d1cb      	bne.n	8004580 <quorem+0x94>
 80045e8:	3c01      	subs	r4, #1
 80045ea:	e7c6      	b.n	800457a <quorem+0x8e>
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	3b04      	subs	r3, #4
 80045f0:	2a00      	cmp	r2, #0
 80045f2:	d1ef      	bne.n	80045d4 <quorem+0xe8>
 80045f4:	3c01      	subs	r4, #1
 80045f6:	e7ea      	b.n	80045ce <quorem+0xe2>
 80045f8:	2000      	movs	r0, #0
 80045fa:	e7ee      	b.n	80045da <quorem+0xee>
 80045fc:	0000      	movs	r0, r0
	...

08004600 <_dtoa_r>:
 8004600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	69c7      	ldr	r7, [r0, #28]
 800460a:	b097      	sub	sp, #92	@ 0x5c
 800460c:	4683      	mov	fp, r0
 800460e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004612:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004614:	b97f      	cbnz	r7, 8004636 <_dtoa_r+0x36>
 8004616:	2010      	movs	r0, #16
 8004618:	f000 fe02 	bl	8005220 <malloc>
 800461c:	4602      	mov	r2, r0
 800461e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004622:	b920      	cbnz	r0, 800462e <_dtoa_r+0x2e>
 8004624:	21ef      	movs	r1, #239	@ 0xef
 8004626:	4ba8      	ldr	r3, [pc, #672]	@ (80048c8 <_dtoa_r+0x2c8>)
 8004628:	48a8      	ldr	r0, [pc, #672]	@ (80048cc <_dtoa_r+0x2cc>)
 800462a:	f002 fdd9 	bl	80071e0 <__assert_func>
 800462e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004632:	6007      	str	r7, [r0, #0]
 8004634:	60c7      	str	r7, [r0, #12]
 8004636:	f8db 301c 	ldr.w	r3, [fp, #28]
 800463a:	6819      	ldr	r1, [r3, #0]
 800463c:	b159      	cbz	r1, 8004656 <_dtoa_r+0x56>
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	2301      	movs	r3, #1
 8004642:	4093      	lsls	r3, r2
 8004644:	604a      	str	r2, [r1, #4]
 8004646:	608b      	str	r3, [r1, #8]
 8004648:	4658      	mov	r0, fp
 800464a:	f000 fedf 	bl	800540c <_Bfree>
 800464e:	2200      	movs	r2, #0
 8004650:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	1e2b      	subs	r3, r5, #0
 8004658:	bfaf      	iteee	ge
 800465a:	2300      	movge	r3, #0
 800465c:	2201      	movlt	r2, #1
 800465e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004662:	9303      	strlt	r3, [sp, #12]
 8004664:	bfa8      	it	ge
 8004666:	6033      	strge	r3, [r6, #0]
 8004668:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800466c:	4b98      	ldr	r3, [pc, #608]	@ (80048d0 <_dtoa_r+0x2d0>)
 800466e:	bfb8      	it	lt
 8004670:	6032      	strlt	r2, [r6, #0]
 8004672:	ea33 0308 	bics.w	r3, r3, r8
 8004676:	d112      	bne.n	800469e <_dtoa_r+0x9e>
 8004678:	f242 730f 	movw	r3, #9999	@ 0x270f
 800467c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004684:	4323      	orrs	r3, r4
 8004686:	f000 8550 	beq.w	800512a <_dtoa_r+0xb2a>
 800468a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800468c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80048d4 <_dtoa_r+0x2d4>
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8552 	beq.w	800513a <_dtoa_r+0xb3a>
 8004696:	f10a 0303 	add.w	r3, sl, #3
 800469a:	f000 bd4c 	b.w	8005136 <_dtoa_r+0xb36>
 800469e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80046a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046aa:	2200      	movs	r2, #0
 80046ac:	2300      	movs	r3, #0
 80046ae:	f7fc f97b 	bl	80009a8 <__aeabi_dcmpeq>
 80046b2:	4607      	mov	r7, r0
 80046b4:	b158      	cbz	r0, 80046ce <_dtoa_r+0xce>
 80046b6:	2301      	movs	r3, #1
 80046b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046be:	b113      	cbz	r3, 80046c6 <_dtoa_r+0xc6>
 80046c0:	4b85      	ldr	r3, [pc, #532]	@ (80048d8 <_dtoa_r+0x2d8>)
 80046c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80048dc <_dtoa_r+0x2dc>
 80046ca:	f000 bd36 	b.w	800513a <_dtoa_r+0xb3a>
 80046ce:	ab14      	add	r3, sp, #80	@ 0x50
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	ab15      	add	r3, sp, #84	@ 0x54
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	4658      	mov	r0, fp
 80046d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80046dc:	f001 fa30 	bl	8005b40 <__d2b>
 80046e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80046e4:	4681      	mov	r9, r0
 80046e6:	2e00      	cmp	r6, #0
 80046e8:	d077      	beq.n	80047da <_dtoa_r+0x1da>
 80046ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80046f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80046fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004700:	9712      	str	r7, [sp, #72]	@ 0x48
 8004702:	4619      	mov	r1, r3
 8004704:	2200      	movs	r2, #0
 8004706:	4b76      	ldr	r3, [pc, #472]	@ (80048e0 <_dtoa_r+0x2e0>)
 8004708:	f7fb fd2e 	bl	8000168 <__aeabi_dsub>
 800470c:	a368      	add	r3, pc, #416	@ (adr r3, 80048b0 <_dtoa_r+0x2b0>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	f7fb fee1 	bl	80004d8 <__aeabi_dmul>
 8004716:	a368      	add	r3, pc, #416	@ (adr r3, 80048b8 <_dtoa_r+0x2b8>)
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f7fb fd26 	bl	800016c <__adddf3>
 8004720:	4604      	mov	r4, r0
 8004722:	4630      	mov	r0, r6
 8004724:	460d      	mov	r5, r1
 8004726:	f7fb fe6d 	bl	8000404 <__aeabi_i2d>
 800472a:	a365      	add	r3, pc, #404	@ (adr r3, 80048c0 <_dtoa_r+0x2c0>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f7fb fed2 	bl	80004d8 <__aeabi_dmul>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4620      	mov	r0, r4
 800473a:	4629      	mov	r1, r5
 800473c:	f7fb fd16 	bl	800016c <__adddf3>
 8004740:	4604      	mov	r4, r0
 8004742:	460d      	mov	r5, r1
 8004744:	f7fc f978 	bl	8000a38 <__aeabi_d2iz>
 8004748:	2200      	movs	r2, #0
 800474a:	4607      	mov	r7, r0
 800474c:	2300      	movs	r3, #0
 800474e:	4620      	mov	r0, r4
 8004750:	4629      	mov	r1, r5
 8004752:	f7fc f933 	bl	80009bc <__aeabi_dcmplt>
 8004756:	b140      	cbz	r0, 800476a <_dtoa_r+0x16a>
 8004758:	4638      	mov	r0, r7
 800475a:	f7fb fe53 	bl	8000404 <__aeabi_i2d>
 800475e:	4622      	mov	r2, r4
 8004760:	462b      	mov	r3, r5
 8004762:	f7fc f921 	bl	80009a8 <__aeabi_dcmpeq>
 8004766:	b900      	cbnz	r0, 800476a <_dtoa_r+0x16a>
 8004768:	3f01      	subs	r7, #1
 800476a:	2f16      	cmp	r7, #22
 800476c:	d853      	bhi.n	8004816 <_dtoa_r+0x216>
 800476e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004772:	4b5c      	ldr	r3, [pc, #368]	@ (80048e4 <_dtoa_r+0x2e4>)
 8004774:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f7fc f91e 	bl	80009bc <__aeabi_dcmplt>
 8004780:	2800      	cmp	r0, #0
 8004782:	d04a      	beq.n	800481a <_dtoa_r+0x21a>
 8004784:	2300      	movs	r3, #0
 8004786:	3f01      	subs	r7, #1
 8004788:	930f      	str	r3, [sp, #60]	@ 0x3c
 800478a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800478c:	1b9b      	subs	r3, r3, r6
 800478e:	1e5a      	subs	r2, r3, #1
 8004790:	bf46      	itte	mi
 8004792:	f1c3 0801 	rsbmi	r8, r3, #1
 8004796:	2300      	movmi	r3, #0
 8004798:	f04f 0800 	movpl.w	r8, #0
 800479c:	9209      	str	r2, [sp, #36]	@ 0x24
 800479e:	bf48      	it	mi
 80047a0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80047a2:	2f00      	cmp	r7, #0
 80047a4:	db3b      	blt.n	800481e <_dtoa_r+0x21e>
 80047a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047a8:	970e      	str	r7, [sp, #56]	@ 0x38
 80047aa:	443b      	add	r3, r7
 80047ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80047ae:	2300      	movs	r3, #0
 80047b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80047b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047b4:	2b09      	cmp	r3, #9
 80047b6:	d866      	bhi.n	8004886 <_dtoa_r+0x286>
 80047b8:	2b05      	cmp	r3, #5
 80047ba:	bfc4      	itt	gt
 80047bc:	3b04      	subgt	r3, #4
 80047be:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80047c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80047c2:	bfc8      	it	gt
 80047c4:	2400      	movgt	r4, #0
 80047c6:	f1a3 0302 	sub.w	r3, r3, #2
 80047ca:	bfd8      	it	le
 80047cc:	2401      	movle	r4, #1
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d864      	bhi.n	800489c <_dtoa_r+0x29c>
 80047d2:	e8df f003 	tbb	[pc, r3]
 80047d6:	382b      	.short	0x382b
 80047d8:	5636      	.short	0x5636
 80047da:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80047de:	441e      	add	r6, r3
 80047e0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	bfc1      	itttt	gt
 80047e8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80047ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80047f0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80047f4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80047f8:	bfd6      	itet	le
 80047fa:	f1c3 0320 	rsble	r3, r3, #32
 80047fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8004802:	fa04 f003 	lslle.w	r0, r4, r3
 8004806:	f7fb fded 	bl	80003e4 <__aeabi_ui2d>
 800480a:	2201      	movs	r2, #1
 800480c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004810:	3e01      	subs	r6, #1
 8004812:	9212      	str	r2, [sp, #72]	@ 0x48
 8004814:	e775      	b.n	8004702 <_dtoa_r+0x102>
 8004816:	2301      	movs	r3, #1
 8004818:	e7b6      	b.n	8004788 <_dtoa_r+0x188>
 800481a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800481c:	e7b5      	b.n	800478a <_dtoa_r+0x18a>
 800481e:	427b      	negs	r3, r7
 8004820:	930a      	str	r3, [sp, #40]	@ 0x28
 8004822:	2300      	movs	r3, #0
 8004824:	eba8 0807 	sub.w	r8, r8, r7
 8004828:	930e      	str	r3, [sp, #56]	@ 0x38
 800482a:	e7c2      	b.n	80047b2 <_dtoa_r+0x1b2>
 800482c:	2300      	movs	r3, #0
 800482e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004830:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004832:	2b00      	cmp	r3, #0
 8004834:	dc35      	bgt.n	80048a2 <_dtoa_r+0x2a2>
 8004836:	2301      	movs	r3, #1
 8004838:	461a      	mov	r2, r3
 800483a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800483e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004840:	e00b      	b.n	800485a <_dtoa_r+0x25a>
 8004842:	2301      	movs	r3, #1
 8004844:	e7f3      	b.n	800482e <_dtoa_r+0x22e>
 8004846:	2300      	movs	r3, #0
 8004848:	930b      	str	r3, [sp, #44]	@ 0x2c
 800484a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	9308      	str	r3, [sp, #32]
 8004850:	3301      	adds	r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	9307      	str	r3, [sp, #28]
 8004856:	bfb8      	it	lt
 8004858:	2301      	movlt	r3, #1
 800485a:	2100      	movs	r1, #0
 800485c:	2204      	movs	r2, #4
 800485e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004862:	f102 0514 	add.w	r5, r2, #20
 8004866:	429d      	cmp	r5, r3
 8004868:	d91f      	bls.n	80048aa <_dtoa_r+0x2aa>
 800486a:	6041      	str	r1, [r0, #4]
 800486c:	4658      	mov	r0, fp
 800486e:	f000 fd8d 	bl	800538c <_Balloc>
 8004872:	4682      	mov	sl, r0
 8004874:	2800      	cmp	r0, #0
 8004876:	d139      	bne.n	80048ec <_dtoa_r+0x2ec>
 8004878:	4602      	mov	r2, r0
 800487a:	f240 11af 	movw	r1, #431	@ 0x1af
 800487e:	4b1a      	ldr	r3, [pc, #104]	@ (80048e8 <_dtoa_r+0x2e8>)
 8004880:	e6d2      	b.n	8004628 <_dtoa_r+0x28>
 8004882:	2301      	movs	r3, #1
 8004884:	e7e0      	b.n	8004848 <_dtoa_r+0x248>
 8004886:	2401      	movs	r4, #1
 8004888:	2300      	movs	r3, #0
 800488a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800488c:	9320      	str	r3, [sp, #128]	@ 0x80
 800488e:	f04f 33ff 	mov.w	r3, #4294967295
 8004892:	2200      	movs	r2, #0
 8004894:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004898:	2312      	movs	r3, #18
 800489a:	e7d0      	b.n	800483e <_dtoa_r+0x23e>
 800489c:	2301      	movs	r3, #1
 800489e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048a0:	e7f5      	b.n	800488e <_dtoa_r+0x28e>
 80048a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80048a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80048a8:	e7d7      	b.n	800485a <_dtoa_r+0x25a>
 80048aa:	3101      	adds	r1, #1
 80048ac:	0052      	lsls	r2, r2, #1
 80048ae:	e7d8      	b.n	8004862 <_dtoa_r+0x262>
 80048b0:	636f4361 	.word	0x636f4361
 80048b4:	3fd287a7 	.word	0x3fd287a7
 80048b8:	8b60c8b3 	.word	0x8b60c8b3
 80048bc:	3fc68a28 	.word	0x3fc68a28
 80048c0:	509f79fb 	.word	0x509f79fb
 80048c4:	3fd34413 	.word	0x3fd34413
 80048c8:	08008fac 	.word	0x08008fac
 80048cc:	08008fc3 	.word	0x08008fc3
 80048d0:	7ff00000 	.word	0x7ff00000
 80048d4:	08008fa8 	.word	0x08008fa8
 80048d8:	08008f77 	.word	0x08008f77
 80048dc:	08008f76 	.word	0x08008f76
 80048e0:	3ff80000 	.word	0x3ff80000
 80048e4:	080090c0 	.word	0x080090c0
 80048e8:	0800901b 	.word	0x0800901b
 80048ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80048f0:	6018      	str	r0, [r3, #0]
 80048f2:	9b07      	ldr	r3, [sp, #28]
 80048f4:	2b0e      	cmp	r3, #14
 80048f6:	f200 80a4 	bhi.w	8004a42 <_dtoa_r+0x442>
 80048fa:	2c00      	cmp	r4, #0
 80048fc:	f000 80a1 	beq.w	8004a42 <_dtoa_r+0x442>
 8004900:	2f00      	cmp	r7, #0
 8004902:	dd33      	ble.n	800496c <_dtoa_r+0x36c>
 8004904:	4b86      	ldr	r3, [pc, #536]	@ (8004b20 <_dtoa_r+0x520>)
 8004906:	f007 020f 	and.w	r2, r7, #15
 800490a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800490e:	05f8      	lsls	r0, r7, #23
 8004910:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004914:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004918:	ea4f 1427 	mov.w	r4, r7, asr #4
 800491c:	d516      	bpl.n	800494c <_dtoa_r+0x34c>
 800491e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004922:	4b80      	ldr	r3, [pc, #512]	@ (8004b24 <_dtoa_r+0x524>)
 8004924:	2603      	movs	r6, #3
 8004926:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800492a:	f7fb feff 	bl	800072c <__aeabi_ddiv>
 800492e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004932:	f004 040f 	and.w	r4, r4, #15
 8004936:	4d7b      	ldr	r5, [pc, #492]	@ (8004b24 <_dtoa_r+0x524>)
 8004938:	b954      	cbnz	r4, 8004950 <_dtoa_r+0x350>
 800493a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800493e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004942:	f7fb fef3 	bl	800072c <__aeabi_ddiv>
 8004946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800494a:	e028      	b.n	800499e <_dtoa_r+0x39e>
 800494c:	2602      	movs	r6, #2
 800494e:	e7f2      	b.n	8004936 <_dtoa_r+0x336>
 8004950:	07e1      	lsls	r1, r4, #31
 8004952:	d508      	bpl.n	8004966 <_dtoa_r+0x366>
 8004954:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004958:	e9d5 2300 	ldrd	r2, r3, [r5]
 800495c:	f7fb fdbc 	bl	80004d8 <__aeabi_dmul>
 8004960:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004964:	3601      	adds	r6, #1
 8004966:	1064      	asrs	r4, r4, #1
 8004968:	3508      	adds	r5, #8
 800496a:	e7e5      	b.n	8004938 <_dtoa_r+0x338>
 800496c:	f000 80d2 	beq.w	8004b14 <_dtoa_r+0x514>
 8004970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004974:	427c      	negs	r4, r7
 8004976:	4b6a      	ldr	r3, [pc, #424]	@ (8004b20 <_dtoa_r+0x520>)
 8004978:	f004 020f 	and.w	r2, r4, #15
 800497c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f7fb fda8 	bl	80004d8 <__aeabi_dmul>
 8004988:	2602      	movs	r6, #2
 800498a:	2300      	movs	r3, #0
 800498c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004990:	4d64      	ldr	r5, [pc, #400]	@ (8004b24 <_dtoa_r+0x524>)
 8004992:	1124      	asrs	r4, r4, #4
 8004994:	2c00      	cmp	r4, #0
 8004996:	f040 80b2 	bne.w	8004afe <_dtoa_r+0x4fe>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1d3      	bne.n	8004946 <_dtoa_r+0x346>
 800499e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80049a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80b7 	beq.w	8004b18 <_dtoa_r+0x518>
 80049aa:	2200      	movs	r2, #0
 80049ac:	4620      	mov	r0, r4
 80049ae:	4629      	mov	r1, r5
 80049b0:	4b5d      	ldr	r3, [pc, #372]	@ (8004b28 <_dtoa_r+0x528>)
 80049b2:	f7fc f803 	bl	80009bc <__aeabi_dcmplt>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	f000 80ae 	beq.w	8004b18 <_dtoa_r+0x518>
 80049bc:	9b07      	ldr	r3, [sp, #28]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80aa 	beq.w	8004b18 <_dtoa_r+0x518>
 80049c4:	9b08      	ldr	r3, [sp, #32]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	dd37      	ble.n	8004a3a <_dtoa_r+0x43a>
 80049ca:	1e7b      	subs	r3, r7, #1
 80049cc:	4620      	mov	r0, r4
 80049ce:	9304      	str	r3, [sp, #16]
 80049d0:	2200      	movs	r2, #0
 80049d2:	4629      	mov	r1, r5
 80049d4:	4b55      	ldr	r3, [pc, #340]	@ (8004b2c <_dtoa_r+0x52c>)
 80049d6:	f7fb fd7f 	bl	80004d8 <__aeabi_dmul>
 80049da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049de:	9c08      	ldr	r4, [sp, #32]
 80049e0:	3601      	adds	r6, #1
 80049e2:	4630      	mov	r0, r6
 80049e4:	f7fb fd0e 	bl	8000404 <__aeabi_i2d>
 80049e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049ec:	f7fb fd74 	bl	80004d8 <__aeabi_dmul>
 80049f0:	2200      	movs	r2, #0
 80049f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004b30 <_dtoa_r+0x530>)
 80049f4:	f7fb fbba 	bl	800016c <__adddf3>
 80049f8:	4605      	mov	r5, r0
 80049fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80049fe:	2c00      	cmp	r4, #0
 8004a00:	f040 809a 	bne.w	8004b38 <_dtoa_r+0x538>
 8004a04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b34 <_dtoa_r+0x534>)
 8004a0c:	f7fb fbac 	bl	8000168 <__aeabi_dsub>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a18:	462a      	mov	r2, r5
 8004a1a:	4633      	mov	r3, r6
 8004a1c:	f7fb ffec 	bl	80009f8 <__aeabi_dcmpgt>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	f040 828e 	bne.w	8004f42 <_dtoa_r+0x942>
 8004a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a2a:	462a      	mov	r2, r5
 8004a2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a30:	f7fb ffc4 	bl	80009bc <__aeabi_dcmplt>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	f040 8127 	bne.w	8004c88 <_dtoa_r+0x688>
 8004a3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004a3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004a42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f2c0 8163 	blt.w	8004d10 <_dtoa_r+0x710>
 8004a4a:	2f0e      	cmp	r7, #14
 8004a4c:	f300 8160 	bgt.w	8004d10 <_dtoa_r+0x710>
 8004a50:	4b33      	ldr	r3, [pc, #204]	@ (8004b20 <_dtoa_r+0x520>)
 8004a52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	da03      	bge.n	8004a6c <_dtoa_r+0x46c>
 8004a64:	9b07      	ldr	r3, [sp, #28]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f340 8100 	ble.w	8004c6c <_dtoa_r+0x66c>
 8004a6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a70:	4656      	mov	r6, sl
 8004a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a76:	4620      	mov	r0, r4
 8004a78:	4629      	mov	r1, r5
 8004a7a:	f7fb fe57 	bl	800072c <__aeabi_ddiv>
 8004a7e:	f7fb ffdb 	bl	8000a38 <__aeabi_d2iz>
 8004a82:	4680      	mov	r8, r0
 8004a84:	f7fb fcbe 	bl	8000404 <__aeabi_i2d>
 8004a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a8c:	f7fb fd24 	bl	80004d8 <__aeabi_dmul>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4620      	mov	r0, r4
 8004a96:	4629      	mov	r1, r5
 8004a98:	f7fb fb66 	bl	8000168 <__aeabi_dsub>
 8004a9c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004aa0:	9d07      	ldr	r5, [sp, #28]
 8004aa2:	f806 4b01 	strb.w	r4, [r6], #1
 8004aa6:	eba6 040a 	sub.w	r4, r6, sl
 8004aaa:	42a5      	cmp	r5, r4
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	f040 8116 	bne.w	8004ce0 <_dtoa_r+0x6e0>
 8004ab4:	f7fb fb5a 	bl	800016c <__adddf3>
 8004ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004abc:	4604      	mov	r4, r0
 8004abe:	460d      	mov	r5, r1
 8004ac0:	f7fb ff9a 	bl	80009f8 <__aeabi_dcmpgt>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	f040 80f8 	bne.w	8004cba <_dtoa_r+0x6ba>
 8004aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ace:	4620      	mov	r0, r4
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	f7fb ff69 	bl	80009a8 <__aeabi_dcmpeq>
 8004ad6:	b118      	cbz	r0, 8004ae0 <_dtoa_r+0x4e0>
 8004ad8:	f018 0f01 	tst.w	r8, #1
 8004adc:	f040 80ed 	bne.w	8004cba <_dtoa_r+0x6ba>
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	4658      	mov	r0, fp
 8004ae4:	f000 fc92 	bl	800540c <_Bfree>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	7033      	strb	r3, [r6, #0]
 8004aec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004aee:	3701      	adds	r7, #1
 8004af0:	601f      	str	r7, [r3, #0]
 8004af2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8320 	beq.w	800513a <_dtoa_r+0xb3a>
 8004afa:	601e      	str	r6, [r3, #0]
 8004afc:	e31d      	b.n	800513a <_dtoa_r+0xb3a>
 8004afe:	07e2      	lsls	r2, r4, #31
 8004b00:	d505      	bpl.n	8004b0e <_dtoa_r+0x50e>
 8004b02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b06:	f7fb fce7 	bl	80004d8 <__aeabi_dmul>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	3601      	adds	r6, #1
 8004b0e:	1064      	asrs	r4, r4, #1
 8004b10:	3508      	adds	r5, #8
 8004b12:	e73f      	b.n	8004994 <_dtoa_r+0x394>
 8004b14:	2602      	movs	r6, #2
 8004b16:	e742      	b.n	800499e <_dtoa_r+0x39e>
 8004b18:	9c07      	ldr	r4, [sp, #28]
 8004b1a:	9704      	str	r7, [sp, #16]
 8004b1c:	e761      	b.n	80049e2 <_dtoa_r+0x3e2>
 8004b1e:	bf00      	nop
 8004b20:	080090c0 	.word	0x080090c0
 8004b24:	08009098 	.word	0x08009098
 8004b28:	3ff00000 	.word	0x3ff00000
 8004b2c:	40240000 	.word	0x40240000
 8004b30:	401c0000 	.word	0x401c0000
 8004b34:	40140000 	.word	0x40140000
 8004b38:	4b70      	ldr	r3, [pc, #448]	@ (8004cfc <_dtoa_r+0x6fc>)
 8004b3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b44:	4454      	add	r4, sl
 8004b46:	2900      	cmp	r1, #0
 8004b48:	d045      	beq.n	8004bd6 <_dtoa_r+0x5d6>
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	496c      	ldr	r1, [pc, #432]	@ (8004d00 <_dtoa_r+0x700>)
 8004b4e:	f7fb fded 	bl	800072c <__aeabi_ddiv>
 8004b52:	4633      	mov	r3, r6
 8004b54:	462a      	mov	r2, r5
 8004b56:	f7fb fb07 	bl	8000168 <__aeabi_dsub>
 8004b5a:	4656      	mov	r6, sl
 8004b5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b64:	f7fb ff68 	bl	8000a38 <__aeabi_d2iz>
 8004b68:	4605      	mov	r5, r0
 8004b6a:	f7fb fc4b 	bl	8000404 <__aeabi_i2d>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b76:	f7fb faf7 	bl	8000168 <__aeabi_dsub>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	3530      	adds	r5, #48	@ 0x30
 8004b80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b88:	f806 5b01 	strb.w	r5, [r6], #1
 8004b8c:	f7fb ff16 	bl	80009bc <__aeabi_dcmplt>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d163      	bne.n	8004c5c <_dtoa_r+0x65c>
 8004b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b98:	2000      	movs	r0, #0
 8004b9a:	495a      	ldr	r1, [pc, #360]	@ (8004d04 <_dtoa_r+0x704>)
 8004b9c:	f7fb fae4 	bl	8000168 <__aeabi_dsub>
 8004ba0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ba4:	f7fb ff0a 	bl	80009bc <__aeabi_dcmplt>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	f040 8087 	bne.w	8004cbc <_dtoa_r+0x6bc>
 8004bae:	42a6      	cmp	r6, r4
 8004bb0:	f43f af43 	beq.w	8004a3a <_dtoa_r+0x43a>
 8004bb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4b53      	ldr	r3, [pc, #332]	@ (8004d08 <_dtoa_r+0x708>)
 8004bbc:	f7fb fc8c 	bl	80004d8 <__aeabi_dmul>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bca:	4b4f      	ldr	r3, [pc, #316]	@ (8004d08 <_dtoa_r+0x708>)
 8004bcc:	f7fb fc84 	bl	80004d8 <__aeabi_dmul>
 8004bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bd4:	e7c4      	b.n	8004b60 <_dtoa_r+0x560>
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f7fb fc7d 	bl	80004d8 <__aeabi_dmul>
 8004bde:	4656      	mov	r6, sl
 8004be0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004be4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bea:	f7fb ff25 	bl	8000a38 <__aeabi_d2iz>
 8004bee:	4605      	mov	r5, r0
 8004bf0:	f7fb fc08 	bl	8000404 <__aeabi_i2d>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bfc:	f7fb fab4 	bl	8000168 <__aeabi_dsub>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	3530      	adds	r5, #48	@ 0x30
 8004c06:	f806 5b01 	strb.w	r5, [r6], #1
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	d124      	bne.n	8004c60 <_dtoa_r+0x660>
 8004c16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c1a:	4b39      	ldr	r3, [pc, #228]	@ (8004d00 <_dtoa_r+0x700>)
 8004c1c:	f7fb faa6 	bl	800016c <__adddf3>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c28:	f7fb fee6 	bl	80009f8 <__aeabi_dcmpgt>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d145      	bne.n	8004cbc <_dtoa_r+0x6bc>
 8004c30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c34:	2000      	movs	r0, #0
 8004c36:	4932      	ldr	r1, [pc, #200]	@ (8004d00 <_dtoa_r+0x700>)
 8004c38:	f7fb fa96 	bl	8000168 <__aeabi_dsub>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c44:	f7fb feba 	bl	80009bc <__aeabi_dcmplt>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	f43f aef6 	beq.w	8004a3a <_dtoa_r+0x43a>
 8004c4e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004c50:	1e73      	subs	r3, r6, #1
 8004c52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c58:	2b30      	cmp	r3, #48	@ 0x30
 8004c5a:	d0f8      	beq.n	8004c4e <_dtoa_r+0x64e>
 8004c5c:	9f04      	ldr	r7, [sp, #16]
 8004c5e:	e73f      	b.n	8004ae0 <_dtoa_r+0x4e0>
 8004c60:	4b29      	ldr	r3, [pc, #164]	@ (8004d08 <_dtoa_r+0x708>)
 8004c62:	f7fb fc39 	bl	80004d8 <__aeabi_dmul>
 8004c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c6a:	e7bc      	b.n	8004be6 <_dtoa_r+0x5e6>
 8004c6c:	d10c      	bne.n	8004c88 <_dtoa_r+0x688>
 8004c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c72:	2200      	movs	r2, #0
 8004c74:	4b25      	ldr	r3, [pc, #148]	@ (8004d0c <_dtoa_r+0x70c>)
 8004c76:	f7fb fc2f 	bl	80004d8 <__aeabi_dmul>
 8004c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c7e:	f7fb feb1 	bl	80009e4 <__aeabi_dcmpge>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	f000 815b 	beq.w	8004f3e <_dtoa_r+0x93e>
 8004c88:	2400      	movs	r4, #0
 8004c8a:	4625      	mov	r5, r4
 8004c8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c8e:	4656      	mov	r6, sl
 8004c90:	43db      	mvns	r3, r3
 8004c92:	9304      	str	r3, [sp, #16]
 8004c94:	2700      	movs	r7, #0
 8004c96:	4621      	mov	r1, r4
 8004c98:	4658      	mov	r0, fp
 8004c9a:	f000 fbb7 	bl	800540c <_Bfree>
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	d0dc      	beq.n	8004c5c <_dtoa_r+0x65c>
 8004ca2:	b12f      	cbz	r7, 8004cb0 <_dtoa_r+0x6b0>
 8004ca4:	42af      	cmp	r7, r5
 8004ca6:	d003      	beq.n	8004cb0 <_dtoa_r+0x6b0>
 8004ca8:	4639      	mov	r1, r7
 8004caa:	4658      	mov	r0, fp
 8004cac:	f000 fbae 	bl	800540c <_Bfree>
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	4658      	mov	r0, fp
 8004cb4:	f000 fbaa 	bl	800540c <_Bfree>
 8004cb8:	e7d0      	b.n	8004c5c <_dtoa_r+0x65c>
 8004cba:	9704      	str	r7, [sp, #16]
 8004cbc:	4633      	mov	r3, r6
 8004cbe:	461e      	mov	r6, r3
 8004cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cc4:	2a39      	cmp	r2, #57	@ 0x39
 8004cc6:	d107      	bne.n	8004cd8 <_dtoa_r+0x6d8>
 8004cc8:	459a      	cmp	sl, r3
 8004cca:	d1f8      	bne.n	8004cbe <_dtoa_r+0x6be>
 8004ccc:	9a04      	ldr	r2, [sp, #16]
 8004cce:	3201      	adds	r2, #1
 8004cd0:	9204      	str	r2, [sp, #16]
 8004cd2:	2230      	movs	r2, #48	@ 0x30
 8004cd4:	f88a 2000 	strb.w	r2, [sl]
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	3201      	adds	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e7bd      	b.n	8004c5c <_dtoa_r+0x65c>
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	4b09      	ldr	r3, [pc, #36]	@ (8004d08 <_dtoa_r+0x708>)
 8004ce4:	f7fb fbf8 	bl	80004d8 <__aeabi_dmul>
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2300      	movs	r3, #0
 8004cec:	4604      	mov	r4, r0
 8004cee:	460d      	mov	r5, r1
 8004cf0:	f7fb fe5a 	bl	80009a8 <__aeabi_dcmpeq>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	f43f aebc 	beq.w	8004a72 <_dtoa_r+0x472>
 8004cfa:	e6f1      	b.n	8004ae0 <_dtoa_r+0x4e0>
 8004cfc:	080090c0 	.word	0x080090c0
 8004d00:	3fe00000 	.word	0x3fe00000
 8004d04:	3ff00000 	.word	0x3ff00000
 8004d08:	40240000 	.word	0x40240000
 8004d0c:	40140000 	.word	0x40140000
 8004d10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004d12:	2a00      	cmp	r2, #0
 8004d14:	f000 80db 	beq.w	8004ece <_dtoa_r+0x8ce>
 8004d18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d1a:	2a01      	cmp	r2, #1
 8004d1c:	f300 80bf 	bgt.w	8004e9e <_dtoa_r+0x89e>
 8004d20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d22:	2a00      	cmp	r2, #0
 8004d24:	f000 80b7 	beq.w	8004e96 <_dtoa_r+0x896>
 8004d28:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d2c:	4646      	mov	r6, r8
 8004d2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d32:	2101      	movs	r1, #1
 8004d34:	441a      	add	r2, r3
 8004d36:	4658      	mov	r0, fp
 8004d38:	4498      	add	r8, r3
 8004d3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d3c:	f000 fc64 	bl	8005608 <__i2b>
 8004d40:	4605      	mov	r5, r0
 8004d42:	b15e      	cbz	r6, 8004d5c <_dtoa_r+0x75c>
 8004d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	dd08      	ble.n	8004d5c <_dtoa_r+0x75c>
 8004d4a:	42b3      	cmp	r3, r6
 8004d4c:	bfa8      	it	ge
 8004d4e:	4633      	movge	r3, r6
 8004d50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d52:	eba8 0803 	sub.w	r8, r8, r3
 8004d56:	1af6      	subs	r6, r6, r3
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d5e:	b1f3      	cbz	r3, 8004d9e <_dtoa_r+0x79e>
 8004d60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80b7 	beq.w	8004ed6 <_dtoa_r+0x8d6>
 8004d68:	b18c      	cbz	r4, 8004d8e <_dtoa_r+0x78e>
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	4658      	mov	r0, fp
 8004d70:	f000 fd08 	bl	8005784 <__pow5mult>
 8004d74:	464a      	mov	r2, r9
 8004d76:	4601      	mov	r1, r0
 8004d78:	4605      	mov	r5, r0
 8004d7a:	4658      	mov	r0, fp
 8004d7c:	f000 fc5a 	bl	8005634 <__multiply>
 8004d80:	4649      	mov	r1, r9
 8004d82:	9004      	str	r0, [sp, #16]
 8004d84:	4658      	mov	r0, fp
 8004d86:	f000 fb41 	bl	800540c <_Bfree>
 8004d8a:	9b04      	ldr	r3, [sp, #16]
 8004d8c:	4699      	mov	r9, r3
 8004d8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d90:	1b1a      	subs	r2, r3, r4
 8004d92:	d004      	beq.n	8004d9e <_dtoa_r+0x79e>
 8004d94:	4649      	mov	r1, r9
 8004d96:	4658      	mov	r0, fp
 8004d98:	f000 fcf4 	bl	8005784 <__pow5mult>
 8004d9c:	4681      	mov	r9, r0
 8004d9e:	2101      	movs	r1, #1
 8004da0:	4658      	mov	r0, fp
 8004da2:	f000 fc31 	bl	8005608 <__i2b>
 8004da6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004da8:	4604      	mov	r4, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 81c9 	beq.w	8005142 <_dtoa_r+0xb42>
 8004db0:	461a      	mov	r2, r3
 8004db2:	4601      	mov	r1, r0
 8004db4:	4658      	mov	r0, fp
 8004db6:	f000 fce5 	bl	8005784 <__pow5mult>
 8004dba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	f300 808f 	bgt.w	8004ee2 <_dtoa_r+0x8e2>
 8004dc4:	9b02      	ldr	r3, [sp, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f040 8087 	bne.w	8004eda <_dtoa_r+0x8da>
 8004dcc:	9b03      	ldr	r3, [sp, #12]
 8004dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f040 8083 	bne.w	8004ede <_dtoa_r+0x8de>
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dde:	0d1b      	lsrs	r3, r3, #20
 8004de0:	051b      	lsls	r3, r3, #20
 8004de2:	b12b      	cbz	r3, 8004df0 <_dtoa_r+0x7f0>
 8004de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004de6:	f108 0801 	add.w	r8, r8, #1
 8004dea:	3301      	adds	r3, #1
 8004dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dee:	2301      	movs	r3, #1
 8004df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004df2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 81aa 	beq.w	800514e <_dtoa_r+0xb4e>
 8004dfa:	6923      	ldr	r3, [r4, #16]
 8004dfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e00:	6918      	ldr	r0, [r3, #16]
 8004e02:	f000 fbb5 	bl	8005570 <__hi0bits>
 8004e06:	f1c0 0020 	rsb	r0, r0, #32
 8004e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e0c:	4418      	add	r0, r3
 8004e0e:	f010 001f 	ands.w	r0, r0, #31
 8004e12:	d071      	beq.n	8004ef8 <_dtoa_r+0x8f8>
 8004e14:	f1c0 0320 	rsb	r3, r0, #32
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	dd65      	ble.n	8004ee8 <_dtoa_r+0x8e8>
 8004e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e1e:	f1c0 001c 	rsb	r0, r0, #28
 8004e22:	4403      	add	r3, r0
 8004e24:	4480      	add	r8, r0
 8004e26:	4406      	add	r6, r0
 8004e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e2a:	f1b8 0f00 	cmp.w	r8, #0
 8004e2e:	dd05      	ble.n	8004e3c <_dtoa_r+0x83c>
 8004e30:	4649      	mov	r1, r9
 8004e32:	4642      	mov	r2, r8
 8004e34:	4658      	mov	r0, fp
 8004e36:	f000 fcff 	bl	8005838 <__lshift>
 8004e3a:	4681      	mov	r9, r0
 8004e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	dd05      	ble.n	8004e4e <_dtoa_r+0x84e>
 8004e42:	4621      	mov	r1, r4
 8004e44:	461a      	mov	r2, r3
 8004e46:	4658      	mov	r0, fp
 8004e48:	f000 fcf6 	bl	8005838 <__lshift>
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d053      	beq.n	8004efc <_dtoa_r+0x8fc>
 8004e54:	4621      	mov	r1, r4
 8004e56:	4648      	mov	r0, r9
 8004e58:	f000 fd5a 	bl	8005910 <__mcmp>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	da4d      	bge.n	8004efc <_dtoa_r+0x8fc>
 8004e60:	1e7b      	subs	r3, r7, #1
 8004e62:	4649      	mov	r1, r9
 8004e64:	9304      	str	r3, [sp, #16]
 8004e66:	220a      	movs	r2, #10
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4658      	mov	r0, fp
 8004e6c:	f000 faf0 	bl	8005450 <__multadd>
 8004e70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e72:	4681      	mov	r9, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 816c 	beq.w	8005152 <_dtoa_r+0xb52>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	220a      	movs	r2, #10
 8004e80:	4658      	mov	r0, fp
 8004e82:	f000 fae5 	bl	8005450 <__multadd>
 8004e86:	9b08      	ldr	r3, [sp, #32]
 8004e88:	4605      	mov	r5, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	dc61      	bgt.n	8004f52 <_dtoa_r+0x952>
 8004e8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	dc3b      	bgt.n	8004f0c <_dtoa_r+0x90c>
 8004e94:	e05d      	b.n	8004f52 <_dtoa_r+0x952>
 8004e96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e98:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004e9c:	e746      	b.n	8004d2c <_dtoa_r+0x72c>
 8004e9e:	9b07      	ldr	r3, [sp, #28]
 8004ea0:	1e5c      	subs	r4, r3, #1
 8004ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	bfbf      	itttt	lt
 8004ea8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004eaa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004eac:	1ae3      	sublt	r3, r4, r3
 8004eae:	18d2      	addlt	r2, r2, r3
 8004eb0:	bfa8      	it	ge
 8004eb2:	1b1c      	subge	r4, r3, r4
 8004eb4:	9b07      	ldr	r3, [sp, #28]
 8004eb6:	bfbe      	ittt	lt
 8004eb8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004eba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004ebc:	2400      	movlt	r4, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bfb5      	itete	lt
 8004ec2:	eba8 0603 	sublt.w	r6, r8, r3
 8004ec6:	4646      	movge	r6, r8
 8004ec8:	2300      	movlt	r3, #0
 8004eca:	9b07      	ldrge	r3, [sp, #28]
 8004ecc:	e730      	b.n	8004d30 <_dtoa_r+0x730>
 8004ece:	4646      	mov	r6, r8
 8004ed0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ed2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ed4:	e735      	b.n	8004d42 <_dtoa_r+0x742>
 8004ed6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ed8:	e75c      	b.n	8004d94 <_dtoa_r+0x794>
 8004eda:	2300      	movs	r3, #0
 8004edc:	e788      	b.n	8004df0 <_dtoa_r+0x7f0>
 8004ede:	9b02      	ldr	r3, [sp, #8]
 8004ee0:	e786      	b.n	8004df0 <_dtoa_r+0x7f0>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ee6:	e788      	b.n	8004dfa <_dtoa_r+0x7fa>
 8004ee8:	d09f      	beq.n	8004e2a <_dtoa_r+0x82a>
 8004eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004eec:	331c      	adds	r3, #28
 8004eee:	441a      	add	r2, r3
 8004ef0:	4498      	add	r8, r3
 8004ef2:	441e      	add	r6, r3
 8004ef4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ef6:	e798      	b.n	8004e2a <_dtoa_r+0x82a>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	e7f6      	b.n	8004eea <_dtoa_r+0x8ea>
 8004efc:	9b07      	ldr	r3, [sp, #28]
 8004efe:	9704      	str	r7, [sp, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	dc20      	bgt.n	8004f46 <_dtoa_r+0x946>
 8004f04:	9308      	str	r3, [sp, #32]
 8004f06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	dd1e      	ble.n	8004f4a <_dtoa_r+0x94a>
 8004f0c:	9b08      	ldr	r3, [sp, #32]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f47f aebc 	bne.w	8004c8c <_dtoa_r+0x68c>
 8004f14:	4621      	mov	r1, r4
 8004f16:	2205      	movs	r2, #5
 8004f18:	4658      	mov	r0, fp
 8004f1a:	f000 fa99 	bl	8005450 <__multadd>
 8004f1e:	4601      	mov	r1, r0
 8004f20:	4604      	mov	r4, r0
 8004f22:	4648      	mov	r0, r9
 8004f24:	f000 fcf4 	bl	8005910 <__mcmp>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	f77f aeaf 	ble.w	8004c8c <_dtoa_r+0x68c>
 8004f2e:	2331      	movs	r3, #49	@ 0x31
 8004f30:	4656      	mov	r6, sl
 8004f32:	f806 3b01 	strb.w	r3, [r6], #1
 8004f36:	9b04      	ldr	r3, [sp, #16]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	9304      	str	r3, [sp, #16]
 8004f3c:	e6aa      	b.n	8004c94 <_dtoa_r+0x694>
 8004f3e:	9c07      	ldr	r4, [sp, #28]
 8004f40:	9704      	str	r7, [sp, #16]
 8004f42:	4625      	mov	r5, r4
 8004f44:	e7f3      	b.n	8004f2e <_dtoa_r+0x92e>
 8004f46:	9b07      	ldr	r3, [sp, #28]
 8004f48:	9308      	str	r3, [sp, #32]
 8004f4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8104 	beq.w	800515a <_dtoa_r+0xb5a>
 8004f52:	2e00      	cmp	r6, #0
 8004f54:	dd05      	ble.n	8004f62 <_dtoa_r+0x962>
 8004f56:	4629      	mov	r1, r5
 8004f58:	4632      	mov	r2, r6
 8004f5a:	4658      	mov	r0, fp
 8004f5c:	f000 fc6c 	bl	8005838 <__lshift>
 8004f60:	4605      	mov	r5, r0
 8004f62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d05a      	beq.n	800501e <_dtoa_r+0xa1e>
 8004f68:	4658      	mov	r0, fp
 8004f6a:	6869      	ldr	r1, [r5, #4]
 8004f6c:	f000 fa0e 	bl	800538c <_Balloc>
 8004f70:	4606      	mov	r6, r0
 8004f72:	b928      	cbnz	r0, 8004f80 <_dtoa_r+0x980>
 8004f74:	4602      	mov	r2, r0
 8004f76:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004f7a:	4b83      	ldr	r3, [pc, #524]	@ (8005188 <_dtoa_r+0xb88>)
 8004f7c:	f7ff bb54 	b.w	8004628 <_dtoa_r+0x28>
 8004f80:	692a      	ldr	r2, [r5, #16]
 8004f82:	f105 010c 	add.w	r1, r5, #12
 8004f86:	3202      	adds	r2, #2
 8004f88:	0092      	lsls	r2, r2, #2
 8004f8a:	300c      	adds	r0, #12
 8004f8c:	f7ff fa9b 	bl	80044c6 <memcpy>
 8004f90:	2201      	movs	r2, #1
 8004f92:	4631      	mov	r1, r6
 8004f94:	4658      	mov	r0, fp
 8004f96:	f000 fc4f 	bl	8005838 <__lshift>
 8004f9a:	462f      	mov	r7, r5
 8004f9c:	4605      	mov	r5, r0
 8004f9e:	f10a 0301 	add.w	r3, sl, #1
 8004fa2:	9307      	str	r3, [sp, #28]
 8004fa4:	9b08      	ldr	r3, [sp, #32]
 8004fa6:	4453      	add	r3, sl
 8004fa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004faa:	9b02      	ldr	r3, [sp, #8]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fb2:	9b07      	ldr	r3, [sp, #28]
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	4648      	mov	r0, r9
 8004fba:	9302      	str	r3, [sp, #8]
 8004fbc:	f7ff fa96 	bl	80044ec <quorem>
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	9008      	str	r0, [sp, #32]
 8004fc4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004fc8:	4648      	mov	r0, r9
 8004fca:	f000 fca1 	bl	8005910 <__mcmp>
 8004fce:	462a      	mov	r2, r5
 8004fd0:	9009      	str	r0, [sp, #36]	@ 0x24
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4658      	mov	r0, fp
 8004fd6:	f000 fcb7 	bl	8005948 <__mdiff>
 8004fda:	68c2      	ldr	r2, [r0, #12]
 8004fdc:	4606      	mov	r6, r0
 8004fde:	bb02      	cbnz	r2, 8005022 <_dtoa_r+0xa22>
 8004fe0:	4601      	mov	r1, r0
 8004fe2:	4648      	mov	r0, r9
 8004fe4:	f000 fc94 	bl	8005910 <__mcmp>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4631      	mov	r1, r6
 8004fec:	4658      	mov	r0, fp
 8004fee:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ff0:	f000 fa0c 	bl	800540c <_Bfree>
 8004ff4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ff6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004ff8:	9e07      	ldr	r6, [sp, #28]
 8004ffa:	ea43 0102 	orr.w	r1, r3, r2
 8004ffe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005000:	4319      	orrs	r1, r3
 8005002:	d110      	bne.n	8005026 <_dtoa_r+0xa26>
 8005004:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005008:	d029      	beq.n	800505e <_dtoa_r+0xa5e>
 800500a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800500c:	2b00      	cmp	r3, #0
 800500e:	dd02      	ble.n	8005016 <_dtoa_r+0xa16>
 8005010:	9b08      	ldr	r3, [sp, #32]
 8005012:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005016:	9b02      	ldr	r3, [sp, #8]
 8005018:	f883 8000 	strb.w	r8, [r3]
 800501c:	e63b      	b.n	8004c96 <_dtoa_r+0x696>
 800501e:	4628      	mov	r0, r5
 8005020:	e7bb      	b.n	8004f9a <_dtoa_r+0x99a>
 8005022:	2201      	movs	r2, #1
 8005024:	e7e1      	b.n	8004fea <_dtoa_r+0x9ea>
 8005026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	db04      	blt.n	8005036 <_dtoa_r+0xa36>
 800502c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800502e:	430b      	orrs	r3, r1
 8005030:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005032:	430b      	orrs	r3, r1
 8005034:	d120      	bne.n	8005078 <_dtoa_r+0xa78>
 8005036:	2a00      	cmp	r2, #0
 8005038:	dded      	ble.n	8005016 <_dtoa_r+0xa16>
 800503a:	4649      	mov	r1, r9
 800503c:	2201      	movs	r2, #1
 800503e:	4658      	mov	r0, fp
 8005040:	f000 fbfa 	bl	8005838 <__lshift>
 8005044:	4621      	mov	r1, r4
 8005046:	4681      	mov	r9, r0
 8005048:	f000 fc62 	bl	8005910 <__mcmp>
 800504c:	2800      	cmp	r0, #0
 800504e:	dc03      	bgt.n	8005058 <_dtoa_r+0xa58>
 8005050:	d1e1      	bne.n	8005016 <_dtoa_r+0xa16>
 8005052:	f018 0f01 	tst.w	r8, #1
 8005056:	d0de      	beq.n	8005016 <_dtoa_r+0xa16>
 8005058:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800505c:	d1d8      	bne.n	8005010 <_dtoa_r+0xa10>
 800505e:	2339      	movs	r3, #57	@ 0x39
 8005060:	9a02      	ldr	r2, [sp, #8]
 8005062:	7013      	strb	r3, [r2, #0]
 8005064:	4633      	mov	r3, r6
 8005066:	461e      	mov	r6, r3
 8005068:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800506c:	3b01      	subs	r3, #1
 800506e:	2a39      	cmp	r2, #57	@ 0x39
 8005070:	d052      	beq.n	8005118 <_dtoa_r+0xb18>
 8005072:	3201      	adds	r2, #1
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e60e      	b.n	8004c96 <_dtoa_r+0x696>
 8005078:	2a00      	cmp	r2, #0
 800507a:	dd07      	ble.n	800508c <_dtoa_r+0xa8c>
 800507c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005080:	d0ed      	beq.n	800505e <_dtoa_r+0xa5e>
 8005082:	9a02      	ldr	r2, [sp, #8]
 8005084:	f108 0301 	add.w	r3, r8, #1
 8005088:	7013      	strb	r3, [r2, #0]
 800508a:	e604      	b.n	8004c96 <_dtoa_r+0x696>
 800508c:	9b07      	ldr	r3, [sp, #28]
 800508e:	9a07      	ldr	r2, [sp, #28]
 8005090:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005094:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005096:	4293      	cmp	r3, r2
 8005098:	d028      	beq.n	80050ec <_dtoa_r+0xaec>
 800509a:	4649      	mov	r1, r9
 800509c:	2300      	movs	r3, #0
 800509e:	220a      	movs	r2, #10
 80050a0:	4658      	mov	r0, fp
 80050a2:	f000 f9d5 	bl	8005450 <__multadd>
 80050a6:	42af      	cmp	r7, r5
 80050a8:	4681      	mov	r9, r0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	f04f 020a 	mov.w	r2, #10
 80050b2:	4639      	mov	r1, r7
 80050b4:	4658      	mov	r0, fp
 80050b6:	d107      	bne.n	80050c8 <_dtoa_r+0xac8>
 80050b8:	f000 f9ca 	bl	8005450 <__multadd>
 80050bc:	4607      	mov	r7, r0
 80050be:	4605      	mov	r5, r0
 80050c0:	9b07      	ldr	r3, [sp, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	9307      	str	r3, [sp, #28]
 80050c6:	e774      	b.n	8004fb2 <_dtoa_r+0x9b2>
 80050c8:	f000 f9c2 	bl	8005450 <__multadd>
 80050cc:	4629      	mov	r1, r5
 80050ce:	4607      	mov	r7, r0
 80050d0:	2300      	movs	r3, #0
 80050d2:	220a      	movs	r2, #10
 80050d4:	4658      	mov	r0, fp
 80050d6:	f000 f9bb 	bl	8005450 <__multadd>
 80050da:	4605      	mov	r5, r0
 80050dc:	e7f0      	b.n	80050c0 <_dtoa_r+0xac0>
 80050de:	9b08      	ldr	r3, [sp, #32]
 80050e0:	2700      	movs	r7, #0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bfcc      	ite	gt
 80050e6:	461e      	movgt	r6, r3
 80050e8:	2601      	movle	r6, #1
 80050ea:	4456      	add	r6, sl
 80050ec:	4649      	mov	r1, r9
 80050ee:	2201      	movs	r2, #1
 80050f0:	4658      	mov	r0, fp
 80050f2:	f000 fba1 	bl	8005838 <__lshift>
 80050f6:	4621      	mov	r1, r4
 80050f8:	4681      	mov	r9, r0
 80050fa:	f000 fc09 	bl	8005910 <__mcmp>
 80050fe:	2800      	cmp	r0, #0
 8005100:	dcb0      	bgt.n	8005064 <_dtoa_r+0xa64>
 8005102:	d102      	bne.n	800510a <_dtoa_r+0xb0a>
 8005104:	f018 0f01 	tst.w	r8, #1
 8005108:	d1ac      	bne.n	8005064 <_dtoa_r+0xa64>
 800510a:	4633      	mov	r3, r6
 800510c:	461e      	mov	r6, r3
 800510e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005112:	2a30      	cmp	r2, #48	@ 0x30
 8005114:	d0fa      	beq.n	800510c <_dtoa_r+0xb0c>
 8005116:	e5be      	b.n	8004c96 <_dtoa_r+0x696>
 8005118:	459a      	cmp	sl, r3
 800511a:	d1a4      	bne.n	8005066 <_dtoa_r+0xa66>
 800511c:	9b04      	ldr	r3, [sp, #16]
 800511e:	3301      	adds	r3, #1
 8005120:	9304      	str	r3, [sp, #16]
 8005122:	2331      	movs	r3, #49	@ 0x31
 8005124:	f88a 3000 	strb.w	r3, [sl]
 8005128:	e5b5      	b.n	8004c96 <_dtoa_r+0x696>
 800512a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800512c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800518c <_dtoa_r+0xb8c>
 8005130:	b11b      	cbz	r3, 800513a <_dtoa_r+0xb3a>
 8005132:	f10a 0308 	add.w	r3, sl, #8
 8005136:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4650      	mov	r0, sl
 800513c:	b017      	add	sp, #92	@ 0x5c
 800513e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005142:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005144:	2b01      	cmp	r3, #1
 8005146:	f77f ae3d 	ble.w	8004dc4 <_dtoa_r+0x7c4>
 800514a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800514c:	930a      	str	r3, [sp, #40]	@ 0x28
 800514e:	2001      	movs	r0, #1
 8005150:	e65b      	b.n	8004e0a <_dtoa_r+0x80a>
 8005152:	9b08      	ldr	r3, [sp, #32]
 8005154:	2b00      	cmp	r3, #0
 8005156:	f77f aed6 	ble.w	8004f06 <_dtoa_r+0x906>
 800515a:	4656      	mov	r6, sl
 800515c:	4621      	mov	r1, r4
 800515e:	4648      	mov	r0, r9
 8005160:	f7ff f9c4 	bl	80044ec <quorem>
 8005164:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005168:	9b08      	ldr	r3, [sp, #32]
 800516a:	f806 8b01 	strb.w	r8, [r6], #1
 800516e:	eba6 020a 	sub.w	r2, r6, sl
 8005172:	4293      	cmp	r3, r2
 8005174:	ddb3      	ble.n	80050de <_dtoa_r+0xade>
 8005176:	4649      	mov	r1, r9
 8005178:	2300      	movs	r3, #0
 800517a:	220a      	movs	r2, #10
 800517c:	4658      	mov	r0, fp
 800517e:	f000 f967 	bl	8005450 <__multadd>
 8005182:	4681      	mov	r9, r0
 8005184:	e7ea      	b.n	800515c <_dtoa_r+0xb5c>
 8005186:	bf00      	nop
 8005188:	0800901b 	.word	0x0800901b
 800518c:	08008f9f 	.word	0x08008f9f

08005190 <_free_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4605      	mov	r5, r0
 8005194:	2900      	cmp	r1, #0
 8005196:	d040      	beq.n	800521a <_free_r+0x8a>
 8005198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800519c:	1f0c      	subs	r4, r1, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bfb8      	it	lt
 80051a2:	18e4      	addlt	r4, r4, r3
 80051a4:	f000 f8e6 	bl	8005374 <__malloc_lock>
 80051a8:	4a1c      	ldr	r2, [pc, #112]	@ (800521c <_free_r+0x8c>)
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	b933      	cbnz	r3, 80051bc <_free_r+0x2c>
 80051ae:	6063      	str	r3, [r4, #4]
 80051b0:	6014      	str	r4, [r2, #0]
 80051b2:	4628      	mov	r0, r5
 80051b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051b8:	f000 b8e2 	b.w	8005380 <__malloc_unlock>
 80051bc:	42a3      	cmp	r3, r4
 80051be:	d908      	bls.n	80051d2 <_free_r+0x42>
 80051c0:	6820      	ldr	r0, [r4, #0]
 80051c2:	1821      	adds	r1, r4, r0
 80051c4:	428b      	cmp	r3, r1
 80051c6:	bf01      	itttt	eq
 80051c8:	6819      	ldreq	r1, [r3, #0]
 80051ca:	685b      	ldreq	r3, [r3, #4]
 80051cc:	1809      	addeq	r1, r1, r0
 80051ce:	6021      	streq	r1, [r4, #0]
 80051d0:	e7ed      	b.n	80051ae <_free_r+0x1e>
 80051d2:	461a      	mov	r2, r3
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	b10b      	cbz	r3, 80051dc <_free_r+0x4c>
 80051d8:	42a3      	cmp	r3, r4
 80051da:	d9fa      	bls.n	80051d2 <_free_r+0x42>
 80051dc:	6811      	ldr	r1, [r2, #0]
 80051de:	1850      	adds	r0, r2, r1
 80051e0:	42a0      	cmp	r0, r4
 80051e2:	d10b      	bne.n	80051fc <_free_r+0x6c>
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	4401      	add	r1, r0
 80051e8:	1850      	adds	r0, r2, r1
 80051ea:	4283      	cmp	r3, r0
 80051ec:	6011      	str	r1, [r2, #0]
 80051ee:	d1e0      	bne.n	80051b2 <_free_r+0x22>
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4408      	add	r0, r1
 80051f6:	6010      	str	r0, [r2, #0]
 80051f8:	6053      	str	r3, [r2, #4]
 80051fa:	e7da      	b.n	80051b2 <_free_r+0x22>
 80051fc:	d902      	bls.n	8005204 <_free_r+0x74>
 80051fe:	230c      	movs	r3, #12
 8005200:	602b      	str	r3, [r5, #0]
 8005202:	e7d6      	b.n	80051b2 <_free_r+0x22>
 8005204:	6820      	ldr	r0, [r4, #0]
 8005206:	1821      	adds	r1, r4, r0
 8005208:	428b      	cmp	r3, r1
 800520a:	bf01      	itttt	eq
 800520c:	6819      	ldreq	r1, [r3, #0]
 800520e:	685b      	ldreq	r3, [r3, #4]
 8005210:	1809      	addeq	r1, r1, r0
 8005212:	6021      	streq	r1, [r4, #0]
 8005214:	6063      	str	r3, [r4, #4]
 8005216:	6054      	str	r4, [r2, #4]
 8005218:	e7cb      	b.n	80051b2 <_free_r+0x22>
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	20004290 	.word	0x20004290

08005220 <malloc>:
 8005220:	4b02      	ldr	r3, [pc, #8]	@ (800522c <malloc+0xc>)
 8005222:	4601      	mov	r1, r0
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	f000 b825 	b.w	8005274 <_malloc_r>
 800522a:	bf00      	nop
 800522c:	2000003c 	.word	0x2000003c

08005230 <sbrk_aligned>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	4e0f      	ldr	r6, [pc, #60]	@ (8005270 <sbrk_aligned+0x40>)
 8005234:	460c      	mov	r4, r1
 8005236:	6831      	ldr	r1, [r6, #0]
 8005238:	4605      	mov	r5, r0
 800523a:	b911      	cbnz	r1, 8005242 <sbrk_aligned+0x12>
 800523c:	f001 ffba 	bl	80071b4 <_sbrk_r>
 8005240:	6030      	str	r0, [r6, #0]
 8005242:	4621      	mov	r1, r4
 8005244:	4628      	mov	r0, r5
 8005246:	f001 ffb5 	bl	80071b4 <_sbrk_r>
 800524a:	1c43      	adds	r3, r0, #1
 800524c:	d103      	bne.n	8005256 <sbrk_aligned+0x26>
 800524e:	f04f 34ff 	mov.w	r4, #4294967295
 8005252:	4620      	mov	r0, r4
 8005254:	bd70      	pop	{r4, r5, r6, pc}
 8005256:	1cc4      	adds	r4, r0, #3
 8005258:	f024 0403 	bic.w	r4, r4, #3
 800525c:	42a0      	cmp	r0, r4
 800525e:	d0f8      	beq.n	8005252 <sbrk_aligned+0x22>
 8005260:	1a21      	subs	r1, r4, r0
 8005262:	4628      	mov	r0, r5
 8005264:	f001 ffa6 	bl	80071b4 <_sbrk_r>
 8005268:	3001      	adds	r0, #1
 800526a:	d1f2      	bne.n	8005252 <sbrk_aligned+0x22>
 800526c:	e7ef      	b.n	800524e <sbrk_aligned+0x1e>
 800526e:	bf00      	nop
 8005270:	2000428c 	.word	0x2000428c

08005274 <_malloc_r>:
 8005274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005278:	1ccd      	adds	r5, r1, #3
 800527a:	f025 0503 	bic.w	r5, r5, #3
 800527e:	3508      	adds	r5, #8
 8005280:	2d0c      	cmp	r5, #12
 8005282:	bf38      	it	cc
 8005284:	250c      	movcc	r5, #12
 8005286:	2d00      	cmp	r5, #0
 8005288:	4606      	mov	r6, r0
 800528a:	db01      	blt.n	8005290 <_malloc_r+0x1c>
 800528c:	42a9      	cmp	r1, r5
 800528e:	d904      	bls.n	800529a <_malloc_r+0x26>
 8005290:	230c      	movs	r3, #12
 8005292:	6033      	str	r3, [r6, #0]
 8005294:	2000      	movs	r0, #0
 8005296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800529a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005370 <_malloc_r+0xfc>
 800529e:	f000 f869 	bl	8005374 <__malloc_lock>
 80052a2:	f8d8 3000 	ldr.w	r3, [r8]
 80052a6:	461c      	mov	r4, r3
 80052a8:	bb44      	cbnz	r4, 80052fc <_malloc_r+0x88>
 80052aa:	4629      	mov	r1, r5
 80052ac:	4630      	mov	r0, r6
 80052ae:	f7ff ffbf 	bl	8005230 <sbrk_aligned>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	4604      	mov	r4, r0
 80052b6:	d158      	bne.n	800536a <_malloc_r+0xf6>
 80052b8:	f8d8 4000 	ldr.w	r4, [r8]
 80052bc:	4627      	mov	r7, r4
 80052be:	2f00      	cmp	r7, #0
 80052c0:	d143      	bne.n	800534a <_malloc_r+0xd6>
 80052c2:	2c00      	cmp	r4, #0
 80052c4:	d04b      	beq.n	800535e <_malloc_r+0xea>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	4639      	mov	r1, r7
 80052ca:	4630      	mov	r0, r6
 80052cc:	eb04 0903 	add.w	r9, r4, r3
 80052d0:	f001 ff70 	bl	80071b4 <_sbrk_r>
 80052d4:	4581      	cmp	r9, r0
 80052d6:	d142      	bne.n	800535e <_malloc_r+0xea>
 80052d8:	6821      	ldr	r1, [r4, #0]
 80052da:	4630      	mov	r0, r6
 80052dc:	1a6d      	subs	r5, r5, r1
 80052de:	4629      	mov	r1, r5
 80052e0:	f7ff ffa6 	bl	8005230 <sbrk_aligned>
 80052e4:	3001      	adds	r0, #1
 80052e6:	d03a      	beq.n	800535e <_malloc_r+0xea>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	442b      	add	r3, r5
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	f8d8 3000 	ldr.w	r3, [r8]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	bb62      	cbnz	r2, 8005350 <_malloc_r+0xdc>
 80052f6:	f8c8 7000 	str.w	r7, [r8]
 80052fa:	e00f      	b.n	800531c <_malloc_r+0xa8>
 80052fc:	6822      	ldr	r2, [r4, #0]
 80052fe:	1b52      	subs	r2, r2, r5
 8005300:	d420      	bmi.n	8005344 <_malloc_r+0xd0>
 8005302:	2a0b      	cmp	r2, #11
 8005304:	d917      	bls.n	8005336 <_malloc_r+0xc2>
 8005306:	1961      	adds	r1, r4, r5
 8005308:	42a3      	cmp	r3, r4
 800530a:	6025      	str	r5, [r4, #0]
 800530c:	bf18      	it	ne
 800530e:	6059      	strne	r1, [r3, #4]
 8005310:	6863      	ldr	r3, [r4, #4]
 8005312:	bf08      	it	eq
 8005314:	f8c8 1000 	streq.w	r1, [r8]
 8005318:	5162      	str	r2, [r4, r5]
 800531a:	604b      	str	r3, [r1, #4]
 800531c:	4630      	mov	r0, r6
 800531e:	f000 f82f 	bl	8005380 <__malloc_unlock>
 8005322:	f104 000b 	add.w	r0, r4, #11
 8005326:	1d23      	adds	r3, r4, #4
 8005328:	f020 0007 	bic.w	r0, r0, #7
 800532c:	1ac2      	subs	r2, r0, r3
 800532e:	bf1c      	itt	ne
 8005330:	1a1b      	subne	r3, r3, r0
 8005332:	50a3      	strne	r3, [r4, r2]
 8005334:	e7af      	b.n	8005296 <_malloc_r+0x22>
 8005336:	6862      	ldr	r2, [r4, #4]
 8005338:	42a3      	cmp	r3, r4
 800533a:	bf0c      	ite	eq
 800533c:	f8c8 2000 	streq.w	r2, [r8]
 8005340:	605a      	strne	r2, [r3, #4]
 8005342:	e7eb      	b.n	800531c <_malloc_r+0xa8>
 8005344:	4623      	mov	r3, r4
 8005346:	6864      	ldr	r4, [r4, #4]
 8005348:	e7ae      	b.n	80052a8 <_malloc_r+0x34>
 800534a:	463c      	mov	r4, r7
 800534c:	687f      	ldr	r7, [r7, #4]
 800534e:	e7b6      	b.n	80052be <_malloc_r+0x4a>
 8005350:	461a      	mov	r2, r3
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	42a3      	cmp	r3, r4
 8005356:	d1fb      	bne.n	8005350 <_malloc_r+0xdc>
 8005358:	2300      	movs	r3, #0
 800535a:	6053      	str	r3, [r2, #4]
 800535c:	e7de      	b.n	800531c <_malloc_r+0xa8>
 800535e:	230c      	movs	r3, #12
 8005360:	4630      	mov	r0, r6
 8005362:	6033      	str	r3, [r6, #0]
 8005364:	f000 f80c 	bl	8005380 <__malloc_unlock>
 8005368:	e794      	b.n	8005294 <_malloc_r+0x20>
 800536a:	6005      	str	r5, [r0, #0]
 800536c:	e7d6      	b.n	800531c <_malloc_r+0xa8>
 800536e:	bf00      	nop
 8005370:	20004290 	.word	0x20004290

08005374 <__malloc_lock>:
 8005374:	4801      	ldr	r0, [pc, #4]	@ (800537c <__malloc_lock+0x8>)
 8005376:	f7ff b896 	b.w	80044a6 <__retarget_lock_acquire_recursive>
 800537a:	bf00      	nop
 800537c:	20004288 	.word	0x20004288

08005380 <__malloc_unlock>:
 8005380:	4801      	ldr	r0, [pc, #4]	@ (8005388 <__malloc_unlock+0x8>)
 8005382:	f7ff b891 	b.w	80044a8 <__retarget_lock_release_recursive>
 8005386:	bf00      	nop
 8005388:	20004288 	.word	0x20004288

0800538c <_Balloc>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	69c6      	ldr	r6, [r0, #28]
 8005390:	4604      	mov	r4, r0
 8005392:	460d      	mov	r5, r1
 8005394:	b976      	cbnz	r6, 80053b4 <_Balloc+0x28>
 8005396:	2010      	movs	r0, #16
 8005398:	f7ff ff42 	bl	8005220 <malloc>
 800539c:	4602      	mov	r2, r0
 800539e:	61e0      	str	r0, [r4, #28]
 80053a0:	b920      	cbnz	r0, 80053ac <_Balloc+0x20>
 80053a2:	216b      	movs	r1, #107	@ 0x6b
 80053a4:	4b17      	ldr	r3, [pc, #92]	@ (8005404 <_Balloc+0x78>)
 80053a6:	4818      	ldr	r0, [pc, #96]	@ (8005408 <_Balloc+0x7c>)
 80053a8:	f001 ff1a 	bl	80071e0 <__assert_func>
 80053ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053b0:	6006      	str	r6, [r0, #0]
 80053b2:	60c6      	str	r6, [r0, #12]
 80053b4:	69e6      	ldr	r6, [r4, #28]
 80053b6:	68f3      	ldr	r3, [r6, #12]
 80053b8:	b183      	cbz	r3, 80053dc <_Balloc+0x50>
 80053ba:	69e3      	ldr	r3, [r4, #28]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053c2:	b9b8      	cbnz	r0, 80053f4 <_Balloc+0x68>
 80053c4:	2101      	movs	r1, #1
 80053c6:	fa01 f605 	lsl.w	r6, r1, r5
 80053ca:	1d72      	adds	r2, r6, #5
 80053cc:	4620      	mov	r0, r4
 80053ce:	0092      	lsls	r2, r2, #2
 80053d0:	f001 ff24 	bl	800721c <_calloc_r>
 80053d4:	b160      	cbz	r0, 80053f0 <_Balloc+0x64>
 80053d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80053da:	e00e      	b.n	80053fa <_Balloc+0x6e>
 80053dc:	2221      	movs	r2, #33	@ 0x21
 80053de:	2104      	movs	r1, #4
 80053e0:	4620      	mov	r0, r4
 80053e2:	f001 ff1b 	bl	800721c <_calloc_r>
 80053e6:	69e3      	ldr	r3, [r4, #28]
 80053e8:	60f0      	str	r0, [r6, #12]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e4      	bne.n	80053ba <_Balloc+0x2e>
 80053f0:	2000      	movs	r0, #0
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	6802      	ldr	r2, [r0, #0]
 80053f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80053fa:	2300      	movs	r3, #0
 80053fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005400:	e7f7      	b.n	80053f2 <_Balloc+0x66>
 8005402:	bf00      	nop
 8005404:	08008fac 	.word	0x08008fac
 8005408:	0800902c 	.word	0x0800902c

0800540c <_Bfree>:
 800540c:	b570      	push	{r4, r5, r6, lr}
 800540e:	69c6      	ldr	r6, [r0, #28]
 8005410:	4605      	mov	r5, r0
 8005412:	460c      	mov	r4, r1
 8005414:	b976      	cbnz	r6, 8005434 <_Bfree+0x28>
 8005416:	2010      	movs	r0, #16
 8005418:	f7ff ff02 	bl	8005220 <malloc>
 800541c:	4602      	mov	r2, r0
 800541e:	61e8      	str	r0, [r5, #28]
 8005420:	b920      	cbnz	r0, 800542c <_Bfree+0x20>
 8005422:	218f      	movs	r1, #143	@ 0x8f
 8005424:	4b08      	ldr	r3, [pc, #32]	@ (8005448 <_Bfree+0x3c>)
 8005426:	4809      	ldr	r0, [pc, #36]	@ (800544c <_Bfree+0x40>)
 8005428:	f001 feda 	bl	80071e0 <__assert_func>
 800542c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005430:	6006      	str	r6, [r0, #0]
 8005432:	60c6      	str	r6, [r0, #12]
 8005434:	b13c      	cbz	r4, 8005446 <_Bfree+0x3a>
 8005436:	69eb      	ldr	r3, [r5, #28]
 8005438:	6862      	ldr	r2, [r4, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005440:	6021      	str	r1, [r4, #0]
 8005442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	08008fac 	.word	0x08008fac
 800544c:	0800902c 	.word	0x0800902c

08005450 <__multadd>:
 8005450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005454:	4607      	mov	r7, r0
 8005456:	460c      	mov	r4, r1
 8005458:	461e      	mov	r6, r3
 800545a:	2000      	movs	r0, #0
 800545c:	690d      	ldr	r5, [r1, #16]
 800545e:	f101 0c14 	add.w	ip, r1, #20
 8005462:	f8dc 3000 	ldr.w	r3, [ip]
 8005466:	3001      	adds	r0, #1
 8005468:	b299      	uxth	r1, r3
 800546a:	fb02 6101 	mla	r1, r2, r1, r6
 800546e:	0c1e      	lsrs	r6, r3, #16
 8005470:	0c0b      	lsrs	r3, r1, #16
 8005472:	fb02 3306 	mla	r3, r2, r6, r3
 8005476:	b289      	uxth	r1, r1
 8005478:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800547c:	4285      	cmp	r5, r0
 800547e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005482:	f84c 1b04 	str.w	r1, [ip], #4
 8005486:	dcec      	bgt.n	8005462 <__multadd+0x12>
 8005488:	b30e      	cbz	r6, 80054ce <__multadd+0x7e>
 800548a:	68a3      	ldr	r3, [r4, #8]
 800548c:	42ab      	cmp	r3, r5
 800548e:	dc19      	bgt.n	80054c4 <__multadd+0x74>
 8005490:	6861      	ldr	r1, [r4, #4]
 8005492:	4638      	mov	r0, r7
 8005494:	3101      	adds	r1, #1
 8005496:	f7ff ff79 	bl	800538c <_Balloc>
 800549a:	4680      	mov	r8, r0
 800549c:	b928      	cbnz	r0, 80054aa <__multadd+0x5a>
 800549e:	4602      	mov	r2, r0
 80054a0:	21ba      	movs	r1, #186	@ 0xba
 80054a2:	4b0c      	ldr	r3, [pc, #48]	@ (80054d4 <__multadd+0x84>)
 80054a4:	480c      	ldr	r0, [pc, #48]	@ (80054d8 <__multadd+0x88>)
 80054a6:	f001 fe9b 	bl	80071e0 <__assert_func>
 80054aa:	6922      	ldr	r2, [r4, #16]
 80054ac:	f104 010c 	add.w	r1, r4, #12
 80054b0:	3202      	adds	r2, #2
 80054b2:	0092      	lsls	r2, r2, #2
 80054b4:	300c      	adds	r0, #12
 80054b6:	f7ff f806 	bl	80044c6 <memcpy>
 80054ba:	4621      	mov	r1, r4
 80054bc:	4638      	mov	r0, r7
 80054be:	f7ff ffa5 	bl	800540c <_Bfree>
 80054c2:	4644      	mov	r4, r8
 80054c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054c8:	3501      	adds	r5, #1
 80054ca:	615e      	str	r6, [r3, #20]
 80054cc:	6125      	str	r5, [r4, #16]
 80054ce:	4620      	mov	r0, r4
 80054d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054d4:	0800901b 	.word	0x0800901b
 80054d8:	0800902c 	.word	0x0800902c

080054dc <__s2b>:
 80054dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e0:	4615      	mov	r5, r2
 80054e2:	2209      	movs	r2, #9
 80054e4:	461f      	mov	r7, r3
 80054e6:	3308      	adds	r3, #8
 80054e8:	460c      	mov	r4, r1
 80054ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80054ee:	4606      	mov	r6, r0
 80054f0:	2201      	movs	r2, #1
 80054f2:	2100      	movs	r1, #0
 80054f4:	429a      	cmp	r2, r3
 80054f6:	db09      	blt.n	800550c <__s2b+0x30>
 80054f8:	4630      	mov	r0, r6
 80054fa:	f7ff ff47 	bl	800538c <_Balloc>
 80054fe:	b940      	cbnz	r0, 8005512 <__s2b+0x36>
 8005500:	4602      	mov	r2, r0
 8005502:	21d3      	movs	r1, #211	@ 0xd3
 8005504:	4b18      	ldr	r3, [pc, #96]	@ (8005568 <__s2b+0x8c>)
 8005506:	4819      	ldr	r0, [pc, #100]	@ (800556c <__s2b+0x90>)
 8005508:	f001 fe6a 	bl	80071e0 <__assert_func>
 800550c:	0052      	lsls	r2, r2, #1
 800550e:	3101      	adds	r1, #1
 8005510:	e7f0      	b.n	80054f4 <__s2b+0x18>
 8005512:	9b08      	ldr	r3, [sp, #32]
 8005514:	2d09      	cmp	r5, #9
 8005516:	6143      	str	r3, [r0, #20]
 8005518:	f04f 0301 	mov.w	r3, #1
 800551c:	6103      	str	r3, [r0, #16]
 800551e:	dd16      	ble.n	800554e <__s2b+0x72>
 8005520:	f104 0909 	add.w	r9, r4, #9
 8005524:	46c8      	mov	r8, r9
 8005526:	442c      	add	r4, r5
 8005528:	f818 3b01 	ldrb.w	r3, [r8], #1
 800552c:	4601      	mov	r1, r0
 800552e:	220a      	movs	r2, #10
 8005530:	4630      	mov	r0, r6
 8005532:	3b30      	subs	r3, #48	@ 0x30
 8005534:	f7ff ff8c 	bl	8005450 <__multadd>
 8005538:	45a0      	cmp	r8, r4
 800553a:	d1f5      	bne.n	8005528 <__s2b+0x4c>
 800553c:	f1a5 0408 	sub.w	r4, r5, #8
 8005540:	444c      	add	r4, r9
 8005542:	1b2d      	subs	r5, r5, r4
 8005544:	1963      	adds	r3, r4, r5
 8005546:	42bb      	cmp	r3, r7
 8005548:	db04      	blt.n	8005554 <__s2b+0x78>
 800554a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800554e:	2509      	movs	r5, #9
 8005550:	340a      	adds	r4, #10
 8005552:	e7f6      	b.n	8005542 <__s2b+0x66>
 8005554:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005558:	4601      	mov	r1, r0
 800555a:	220a      	movs	r2, #10
 800555c:	4630      	mov	r0, r6
 800555e:	3b30      	subs	r3, #48	@ 0x30
 8005560:	f7ff ff76 	bl	8005450 <__multadd>
 8005564:	e7ee      	b.n	8005544 <__s2b+0x68>
 8005566:	bf00      	nop
 8005568:	0800901b 	.word	0x0800901b
 800556c:	0800902c 	.word	0x0800902c

08005570 <__hi0bits>:
 8005570:	4603      	mov	r3, r0
 8005572:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005576:	bf3a      	itte	cc
 8005578:	0403      	lslcc	r3, r0, #16
 800557a:	2010      	movcc	r0, #16
 800557c:	2000      	movcs	r0, #0
 800557e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005582:	bf3c      	itt	cc
 8005584:	021b      	lslcc	r3, r3, #8
 8005586:	3008      	addcc	r0, #8
 8005588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800558c:	bf3c      	itt	cc
 800558e:	011b      	lslcc	r3, r3, #4
 8005590:	3004      	addcc	r0, #4
 8005592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005596:	bf3c      	itt	cc
 8005598:	009b      	lslcc	r3, r3, #2
 800559a:	3002      	addcc	r0, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	db05      	blt.n	80055ac <__hi0bits+0x3c>
 80055a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80055a4:	f100 0001 	add.w	r0, r0, #1
 80055a8:	bf08      	it	eq
 80055aa:	2020      	moveq	r0, #32
 80055ac:	4770      	bx	lr

080055ae <__lo0bits>:
 80055ae:	6803      	ldr	r3, [r0, #0]
 80055b0:	4602      	mov	r2, r0
 80055b2:	f013 0007 	ands.w	r0, r3, #7
 80055b6:	d00b      	beq.n	80055d0 <__lo0bits+0x22>
 80055b8:	07d9      	lsls	r1, r3, #31
 80055ba:	d421      	bmi.n	8005600 <__lo0bits+0x52>
 80055bc:	0798      	lsls	r0, r3, #30
 80055be:	bf49      	itett	mi
 80055c0:	085b      	lsrmi	r3, r3, #1
 80055c2:	089b      	lsrpl	r3, r3, #2
 80055c4:	2001      	movmi	r0, #1
 80055c6:	6013      	strmi	r3, [r2, #0]
 80055c8:	bf5c      	itt	pl
 80055ca:	2002      	movpl	r0, #2
 80055cc:	6013      	strpl	r3, [r2, #0]
 80055ce:	4770      	bx	lr
 80055d0:	b299      	uxth	r1, r3
 80055d2:	b909      	cbnz	r1, 80055d8 <__lo0bits+0x2a>
 80055d4:	2010      	movs	r0, #16
 80055d6:	0c1b      	lsrs	r3, r3, #16
 80055d8:	b2d9      	uxtb	r1, r3
 80055da:	b909      	cbnz	r1, 80055e0 <__lo0bits+0x32>
 80055dc:	3008      	adds	r0, #8
 80055de:	0a1b      	lsrs	r3, r3, #8
 80055e0:	0719      	lsls	r1, r3, #28
 80055e2:	bf04      	itt	eq
 80055e4:	091b      	lsreq	r3, r3, #4
 80055e6:	3004      	addeq	r0, #4
 80055e8:	0799      	lsls	r1, r3, #30
 80055ea:	bf04      	itt	eq
 80055ec:	089b      	lsreq	r3, r3, #2
 80055ee:	3002      	addeq	r0, #2
 80055f0:	07d9      	lsls	r1, r3, #31
 80055f2:	d403      	bmi.n	80055fc <__lo0bits+0x4e>
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	f100 0001 	add.w	r0, r0, #1
 80055fa:	d003      	beq.n	8005604 <__lo0bits+0x56>
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	4770      	bx	lr
 8005600:	2000      	movs	r0, #0
 8005602:	4770      	bx	lr
 8005604:	2020      	movs	r0, #32
 8005606:	4770      	bx	lr

08005608 <__i2b>:
 8005608:	b510      	push	{r4, lr}
 800560a:	460c      	mov	r4, r1
 800560c:	2101      	movs	r1, #1
 800560e:	f7ff febd 	bl	800538c <_Balloc>
 8005612:	4602      	mov	r2, r0
 8005614:	b928      	cbnz	r0, 8005622 <__i2b+0x1a>
 8005616:	f240 1145 	movw	r1, #325	@ 0x145
 800561a:	4b04      	ldr	r3, [pc, #16]	@ (800562c <__i2b+0x24>)
 800561c:	4804      	ldr	r0, [pc, #16]	@ (8005630 <__i2b+0x28>)
 800561e:	f001 fddf 	bl	80071e0 <__assert_func>
 8005622:	2301      	movs	r3, #1
 8005624:	6144      	str	r4, [r0, #20]
 8005626:	6103      	str	r3, [r0, #16]
 8005628:	bd10      	pop	{r4, pc}
 800562a:	bf00      	nop
 800562c:	0800901b 	.word	0x0800901b
 8005630:	0800902c 	.word	0x0800902c

08005634 <__multiply>:
 8005634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	4614      	mov	r4, r2
 800563a:	690a      	ldr	r2, [r1, #16]
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	460f      	mov	r7, r1
 8005640:	429a      	cmp	r2, r3
 8005642:	bfa2      	ittt	ge
 8005644:	4623      	movge	r3, r4
 8005646:	460c      	movge	r4, r1
 8005648:	461f      	movge	r7, r3
 800564a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800564e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005652:	68a3      	ldr	r3, [r4, #8]
 8005654:	6861      	ldr	r1, [r4, #4]
 8005656:	eb0a 0609 	add.w	r6, sl, r9
 800565a:	42b3      	cmp	r3, r6
 800565c:	b085      	sub	sp, #20
 800565e:	bfb8      	it	lt
 8005660:	3101      	addlt	r1, #1
 8005662:	f7ff fe93 	bl	800538c <_Balloc>
 8005666:	b930      	cbnz	r0, 8005676 <__multiply+0x42>
 8005668:	4602      	mov	r2, r0
 800566a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800566e:	4b43      	ldr	r3, [pc, #268]	@ (800577c <__multiply+0x148>)
 8005670:	4843      	ldr	r0, [pc, #268]	@ (8005780 <__multiply+0x14c>)
 8005672:	f001 fdb5 	bl	80071e0 <__assert_func>
 8005676:	f100 0514 	add.w	r5, r0, #20
 800567a:	462b      	mov	r3, r5
 800567c:	2200      	movs	r2, #0
 800567e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005682:	4543      	cmp	r3, r8
 8005684:	d321      	bcc.n	80056ca <__multiply+0x96>
 8005686:	f107 0114 	add.w	r1, r7, #20
 800568a:	f104 0214 	add.w	r2, r4, #20
 800568e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005692:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005696:	9302      	str	r3, [sp, #8]
 8005698:	1b13      	subs	r3, r2, r4
 800569a:	3b15      	subs	r3, #21
 800569c:	f023 0303 	bic.w	r3, r3, #3
 80056a0:	3304      	adds	r3, #4
 80056a2:	f104 0715 	add.w	r7, r4, #21
 80056a6:	42ba      	cmp	r2, r7
 80056a8:	bf38      	it	cc
 80056aa:	2304      	movcc	r3, #4
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	9b02      	ldr	r3, [sp, #8]
 80056b0:	9103      	str	r1, [sp, #12]
 80056b2:	428b      	cmp	r3, r1
 80056b4:	d80c      	bhi.n	80056d0 <__multiply+0x9c>
 80056b6:	2e00      	cmp	r6, #0
 80056b8:	dd03      	ble.n	80056c2 <__multiply+0x8e>
 80056ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d05a      	beq.n	8005778 <__multiply+0x144>
 80056c2:	6106      	str	r6, [r0, #16]
 80056c4:	b005      	add	sp, #20
 80056c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ca:	f843 2b04 	str.w	r2, [r3], #4
 80056ce:	e7d8      	b.n	8005682 <__multiply+0x4e>
 80056d0:	f8b1 a000 	ldrh.w	sl, [r1]
 80056d4:	f1ba 0f00 	cmp.w	sl, #0
 80056d8:	d023      	beq.n	8005722 <__multiply+0xee>
 80056da:	46a9      	mov	r9, r5
 80056dc:	f04f 0c00 	mov.w	ip, #0
 80056e0:	f104 0e14 	add.w	lr, r4, #20
 80056e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80056e8:	f8d9 3000 	ldr.w	r3, [r9]
 80056ec:	fa1f fb87 	uxth.w	fp, r7
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	fb0a 330b 	mla	r3, sl, fp, r3
 80056f6:	4463      	add	r3, ip
 80056f8:	f8d9 c000 	ldr.w	ip, [r9]
 80056fc:	0c3f      	lsrs	r7, r7, #16
 80056fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005702:	fb0a c707 	mla	r7, sl, r7, ip
 8005706:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800570a:	b29b      	uxth	r3, r3
 800570c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005710:	4572      	cmp	r2, lr
 8005712:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005716:	f849 3b04 	str.w	r3, [r9], #4
 800571a:	d8e3      	bhi.n	80056e4 <__multiply+0xb0>
 800571c:	9b01      	ldr	r3, [sp, #4]
 800571e:	f845 c003 	str.w	ip, [r5, r3]
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	3104      	adds	r1, #4
 8005726:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800572a:	f1b9 0f00 	cmp.w	r9, #0
 800572e:	d021      	beq.n	8005774 <__multiply+0x140>
 8005730:	46ae      	mov	lr, r5
 8005732:	f04f 0a00 	mov.w	sl, #0
 8005736:	682b      	ldr	r3, [r5, #0]
 8005738:	f104 0c14 	add.w	ip, r4, #20
 800573c:	f8bc b000 	ldrh.w	fp, [ip]
 8005740:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005744:	b29b      	uxth	r3, r3
 8005746:	fb09 770b 	mla	r7, r9, fp, r7
 800574a:	4457      	add	r7, sl
 800574c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005750:	f84e 3b04 	str.w	r3, [lr], #4
 8005754:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005758:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800575c:	f8be 3000 	ldrh.w	r3, [lr]
 8005760:	4562      	cmp	r2, ip
 8005762:	fb09 330a 	mla	r3, r9, sl, r3
 8005766:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800576a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800576e:	d8e5      	bhi.n	800573c <__multiply+0x108>
 8005770:	9f01      	ldr	r7, [sp, #4]
 8005772:	51eb      	str	r3, [r5, r7]
 8005774:	3504      	adds	r5, #4
 8005776:	e79a      	b.n	80056ae <__multiply+0x7a>
 8005778:	3e01      	subs	r6, #1
 800577a:	e79c      	b.n	80056b6 <__multiply+0x82>
 800577c:	0800901b 	.word	0x0800901b
 8005780:	0800902c 	.word	0x0800902c

08005784 <__pow5mult>:
 8005784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005788:	4615      	mov	r5, r2
 800578a:	f012 0203 	ands.w	r2, r2, #3
 800578e:	4607      	mov	r7, r0
 8005790:	460e      	mov	r6, r1
 8005792:	d007      	beq.n	80057a4 <__pow5mult+0x20>
 8005794:	4c25      	ldr	r4, [pc, #148]	@ (800582c <__pow5mult+0xa8>)
 8005796:	3a01      	subs	r2, #1
 8005798:	2300      	movs	r3, #0
 800579a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800579e:	f7ff fe57 	bl	8005450 <__multadd>
 80057a2:	4606      	mov	r6, r0
 80057a4:	10ad      	asrs	r5, r5, #2
 80057a6:	d03d      	beq.n	8005824 <__pow5mult+0xa0>
 80057a8:	69fc      	ldr	r4, [r7, #28]
 80057aa:	b97c      	cbnz	r4, 80057cc <__pow5mult+0x48>
 80057ac:	2010      	movs	r0, #16
 80057ae:	f7ff fd37 	bl	8005220 <malloc>
 80057b2:	4602      	mov	r2, r0
 80057b4:	61f8      	str	r0, [r7, #28]
 80057b6:	b928      	cbnz	r0, 80057c4 <__pow5mult+0x40>
 80057b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80057bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005830 <__pow5mult+0xac>)
 80057be:	481d      	ldr	r0, [pc, #116]	@ (8005834 <__pow5mult+0xb0>)
 80057c0:	f001 fd0e 	bl	80071e0 <__assert_func>
 80057c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057c8:	6004      	str	r4, [r0, #0]
 80057ca:	60c4      	str	r4, [r0, #12]
 80057cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80057d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057d4:	b94c      	cbnz	r4, 80057ea <__pow5mult+0x66>
 80057d6:	f240 2171 	movw	r1, #625	@ 0x271
 80057da:	4638      	mov	r0, r7
 80057dc:	f7ff ff14 	bl	8005608 <__i2b>
 80057e0:	2300      	movs	r3, #0
 80057e2:	4604      	mov	r4, r0
 80057e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80057e8:	6003      	str	r3, [r0, #0]
 80057ea:	f04f 0900 	mov.w	r9, #0
 80057ee:	07eb      	lsls	r3, r5, #31
 80057f0:	d50a      	bpl.n	8005808 <__pow5mult+0x84>
 80057f2:	4631      	mov	r1, r6
 80057f4:	4622      	mov	r2, r4
 80057f6:	4638      	mov	r0, r7
 80057f8:	f7ff ff1c 	bl	8005634 <__multiply>
 80057fc:	4680      	mov	r8, r0
 80057fe:	4631      	mov	r1, r6
 8005800:	4638      	mov	r0, r7
 8005802:	f7ff fe03 	bl	800540c <_Bfree>
 8005806:	4646      	mov	r6, r8
 8005808:	106d      	asrs	r5, r5, #1
 800580a:	d00b      	beq.n	8005824 <__pow5mult+0xa0>
 800580c:	6820      	ldr	r0, [r4, #0]
 800580e:	b938      	cbnz	r0, 8005820 <__pow5mult+0x9c>
 8005810:	4622      	mov	r2, r4
 8005812:	4621      	mov	r1, r4
 8005814:	4638      	mov	r0, r7
 8005816:	f7ff ff0d 	bl	8005634 <__multiply>
 800581a:	6020      	str	r0, [r4, #0]
 800581c:	f8c0 9000 	str.w	r9, [r0]
 8005820:	4604      	mov	r4, r0
 8005822:	e7e4      	b.n	80057ee <__pow5mult+0x6a>
 8005824:	4630      	mov	r0, r6
 8005826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800582a:	bf00      	nop
 800582c:	08009088 	.word	0x08009088
 8005830:	08008fac 	.word	0x08008fac
 8005834:	0800902c 	.word	0x0800902c

08005838 <__lshift>:
 8005838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	460c      	mov	r4, r1
 800583e:	4607      	mov	r7, r0
 8005840:	4691      	mov	r9, r2
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	6849      	ldr	r1, [r1, #4]
 8005846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800584a:	68a3      	ldr	r3, [r4, #8]
 800584c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005850:	f108 0601 	add.w	r6, r8, #1
 8005854:	42b3      	cmp	r3, r6
 8005856:	db0b      	blt.n	8005870 <__lshift+0x38>
 8005858:	4638      	mov	r0, r7
 800585a:	f7ff fd97 	bl	800538c <_Balloc>
 800585e:	4605      	mov	r5, r0
 8005860:	b948      	cbnz	r0, 8005876 <__lshift+0x3e>
 8005862:	4602      	mov	r2, r0
 8005864:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005868:	4b27      	ldr	r3, [pc, #156]	@ (8005908 <__lshift+0xd0>)
 800586a:	4828      	ldr	r0, [pc, #160]	@ (800590c <__lshift+0xd4>)
 800586c:	f001 fcb8 	bl	80071e0 <__assert_func>
 8005870:	3101      	adds	r1, #1
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	e7ee      	b.n	8005854 <__lshift+0x1c>
 8005876:	2300      	movs	r3, #0
 8005878:	f100 0114 	add.w	r1, r0, #20
 800587c:	f100 0210 	add.w	r2, r0, #16
 8005880:	4618      	mov	r0, r3
 8005882:	4553      	cmp	r3, sl
 8005884:	db33      	blt.n	80058ee <__lshift+0xb6>
 8005886:	6920      	ldr	r0, [r4, #16]
 8005888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800588c:	f104 0314 	add.w	r3, r4, #20
 8005890:	f019 091f 	ands.w	r9, r9, #31
 8005894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005898:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800589c:	d02b      	beq.n	80058f6 <__lshift+0xbe>
 800589e:	468a      	mov	sl, r1
 80058a0:	2200      	movs	r2, #0
 80058a2:	f1c9 0e20 	rsb	lr, r9, #32
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	fa00 f009 	lsl.w	r0, r0, r9
 80058ac:	4310      	orrs	r0, r2
 80058ae:	f84a 0b04 	str.w	r0, [sl], #4
 80058b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058b6:	459c      	cmp	ip, r3
 80058b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80058bc:	d8f3      	bhi.n	80058a6 <__lshift+0x6e>
 80058be:	ebac 0304 	sub.w	r3, ip, r4
 80058c2:	3b15      	subs	r3, #21
 80058c4:	f023 0303 	bic.w	r3, r3, #3
 80058c8:	3304      	adds	r3, #4
 80058ca:	f104 0015 	add.w	r0, r4, #21
 80058ce:	4584      	cmp	ip, r0
 80058d0:	bf38      	it	cc
 80058d2:	2304      	movcc	r3, #4
 80058d4:	50ca      	str	r2, [r1, r3]
 80058d6:	b10a      	cbz	r2, 80058dc <__lshift+0xa4>
 80058d8:	f108 0602 	add.w	r6, r8, #2
 80058dc:	3e01      	subs	r6, #1
 80058de:	4638      	mov	r0, r7
 80058e0:	4621      	mov	r1, r4
 80058e2:	612e      	str	r6, [r5, #16]
 80058e4:	f7ff fd92 	bl	800540c <_Bfree>
 80058e8:	4628      	mov	r0, r5
 80058ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80058f2:	3301      	adds	r3, #1
 80058f4:	e7c5      	b.n	8005882 <__lshift+0x4a>
 80058f6:	3904      	subs	r1, #4
 80058f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058fc:	459c      	cmp	ip, r3
 80058fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8005902:	d8f9      	bhi.n	80058f8 <__lshift+0xc0>
 8005904:	e7ea      	b.n	80058dc <__lshift+0xa4>
 8005906:	bf00      	nop
 8005908:	0800901b 	.word	0x0800901b
 800590c:	0800902c 	.word	0x0800902c

08005910 <__mcmp>:
 8005910:	4603      	mov	r3, r0
 8005912:	690a      	ldr	r2, [r1, #16]
 8005914:	6900      	ldr	r0, [r0, #16]
 8005916:	b530      	push	{r4, r5, lr}
 8005918:	1a80      	subs	r0, r0, r2
 800591a:	d10e      	bne.n	800593a <__mcmp+0x2a>
 800591c:	3314      	adds	r3, #20
 800591e:	3114      	adds	r1, #20
 8005920:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005924:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005928:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800592c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005930:	4295      	cmp	r5, r2
 8005932:	d003      	beq.n	800593c <__mcmp+0x2c>
 8005934:	d205      	bcs.n	8005942 <__mcmp+0x32>
 8005936:	f04f 30ff 	mov.w	r0, #4294967295
 800593a:	bd30      	pop	{r4, r5, pc}
 800593c:	42a3      	cmp	r3, r4
 800593e:	d3f3      	bcc.n	8005928 <__mcmp+0x18>
 8005940:	e7fb      	b.n	800593a <__mcmp+0x2a>
 8005942:	2001      	movs	r0, #1
 8005944:	e7f9      	b.n	800593a <__mcmp+0x2a>
	...

08005948 <__mdiff>:
 8005948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594c:	4689      	mov	r9, r1
 800594e:	4606      	mov	r6, r0
 8005950:	4611      	mov	r1, r2
 8005952:	4648      	mov	r0, r9
 8005954:	4614      	mov	r4, r2
 8005956:	f7ff ffdb 	bl	8005910 <__mcmp>
 800595a:	1e05      	subs	r5, r0, #0
 800595c:	d112      	bne.n	8005984 <__mdiff+0x3c>
 800595e:	4629      	mov	r1, r5
 8005960:	4630      	mov	r0, r6
 8005962:	f7ff fd13 	bl	800538c <_Balloc>
 8005966:	4602      	mov	r2, r0
 8005968:	b928      	cbnz	r0, 8005976 <__mdiff+0x2e>
 800596a:	f240 2137 	movw	r1, #567	@ 0x237
 800596e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a68 <__mdiff+0x120>)
 8005970:	483e      	ldr	r0, [pc, #248]	@ (8005a6c <__mdiff+0x124>)
 8005972:	f001 fc35 	bl	80071e0 <__assert_func>
 8005976:	2301      	movs	r3, #1
 8005978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800597c:	4610      	mov	r0, r2
 800597e:	b003      	add	sp, #12
 8005980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005984:	bfbc      	itt	lt
 8005986:	464b      	movlt	r3, r9
 8005988:	46a1      	movlt	r9, r4
 800598a:	4630      	mov	r0, r6
 800598c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005990:	bfba      	itte	lt
 8005992:	461c      	movlt	r4, r3
 8005994:	2501      	movlt	r5, #1
 8005996:	2500      	movge	r5, #0
 8005998:	f7ff fcf8 	bl	800538c <_Balloc>
 800599c:	4602      	mov	r2, r0
 800599e:	b918      	cbnz	r0, 80059a8 <__mdiff+0x60>
 80059a0:	f240 2145 	movw	r1, #581	@ 0x245
 80059a4:	4b30      	ldr	r3, [pc, #192]	@ (8005a68 <__mdiff+0x120>)
 80059a6:	e7e3      	b.n	8005970 <__mdiff+0x28>
 80059a8:	f100 0b14 	add.w	fp, r0, #20
 80059ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80059b0:	f109 0310 	add.w	r3, r9, #16
 80059b4:	60c5      	str	r5, [r0, #12]
 80059b6:	f04f 0c00 	mov.w	ip, #0
 80059ba:	f109 0514 	add.w	r5, r9, #20
 80059be:	46d9      	mov	r9, fp
 80059c0:	6926      	ldr	r6, [r4, #16]
 80059c2:	f104 0e14 	add.w	lr, r4, #20
 80059c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80059ca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	9b01      	ldr	r3, [sp, #4]
 80059d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80059d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80059da:	b281      	uxth	r1, r0
 80059dc:	9301      	str	r3, [sp, #4]
 80059de:	fa1f f38a 	uxth.w	r3, sl
 80059e2:	1a5b      	subs	r3, r3, r1
 80059e4:	0c00      	lsrs	r0, r0, #16
 80059e6:	4463      	add	r3, ip
 80059e8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80059ec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80059f6:	4576      	cmp	r6, lr
 80059f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059fc:	f849 3b04 	str.w	r3, [r9], #4
 8005a00:	d8e6      	bhi.n	80059d0 <__mdiff+0x88>
 8005a02:	1b33      	subs	r3, r6, r4
 8005a04:	3b15      	subs	r3, #21
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	3415      	adds	r4, #21
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	42a6      	cmp	r6, r4
 8005a10:	bf38      	it	cc
 8005a12:	2304      	movcc	r3, #4
 8005a14:	441d      	add	r5, r3
 8005a16:	445b      	add	r3, fp
 8005a18:	461e      	mov	r6, r3
 8005a1a:	462c      	mov	r4, r5
 8005a1c:	4544      	cmp	r4, r8
 8005a1e:	d30e      	bcc.n	8005a3e <__mdiff+0xf6>
 8005a20:	f108 0103 	add.w	r1, r8, #3
 8005a24:	1b49      	subs	r1, r1, r5
 8005a26:	f021 0103 	bic.w	r1, r1, #3
 8005a2a:	3d03      	subs	r5, #3
 8005a2c:	45a8      	cmp	r8, r5
 8005a2e:	bf38      	it	cc
 8005a30:	2100      	movcc	r1, #0
 8005a32:	440b      	add	r3, r1
 8005a34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a38:	b199      	cbz	r1, 8005a62 <__mdiff+0x11a>
 8005a3a:	6117      	str	r7, [r2, #16]
 8005a3c:	e79e      	b.n	800597c <__mdiff+0x34>
 8005a3e:	46e6      	mov	lr, ip
 8005a40:	f854 1b04 	ldr.w	r1, [r4], #4
 8005a44:	fa1f fc81 	uxth.w	ip, r1
 8005a48:	44f4      	add	ip, lr
 8005a4a:	0c08      	lsrs	r0, r1, #16
 8005a4c:	4471      	add	r1, lr
 8005a4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005a52:	b289      	uxth	r1, r1
 8005a54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005a58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a5c:	f846 1b04 	str.w	r1, [r6], #4
 8005a60:	e7dc      	b.n	8005a1c <__mdiff+0xd4>
 8005a62:	3f01      	subs	r7, #1
 8005a64:	e7e6      	b.n	8005a34 <__mdiff+0xec>
 8005a66:	bf00      	nop
 8005a68:	0800901b 	.word	0x0800901b
 8005a6c:	0800902c 	.word	0x0800902c

08005a70 <__ulp>:
 8005a70:	4b0e      	ldr	r3, [pc, #56]	@ (8005aac <__ulp+0x3c>)
 8005a72:	400b      	ands	r3, r1
 8005a74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dc08      	bgt.n	8005a8e <__ulp+0x1e>
 8005a7c:	425b      	negs	r3, r3
 8005a7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005a82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005a86:	da04      	bge.n	8005a92 <__ulp+0x22>
 8005a88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005a8c:	4113      	asrs	r3, r2
 8005a8e:	2200      	movs	r2, #0
 8005a90:	e008      	b.n	8005aa4 <__ulp+0x34>
 8005a92:	f1a2 0314 	sub.w	r3, r2, #20
 8005a96:	2b1e      	cmp	r3, #30
 8005a98:	bfd6      	itet	le
 8005a9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005a9e:	2201      	movgt	r2, #1
 8005aa0:	40da      	lsrle	r2, r3
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	7ff00000 	.word	0x7ff00000

08005ab0 <__b2d>:
 8005ab0:	6902      	ldr	r2, [r0, #16]
 8005ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab4:	f100 0614 	add.w	r6, r0, #20
 8005ab8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005abc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005ac0:	4f1e      	ldr	r7, [pc, #120]	@ (8005b3c <__b2d+0x8c>)
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f7ff fd54 	bl	8005570 <__hi0bits>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f1c0 0020 	rsb	r0, r0, #32
 8005ace:	2b0a      	cmp	r3, #10
 8005ad0:	f1a2 0504 	sub.w	r5, r2, #4
 8005ad4:	6008      	str	r0, [r1, #0]
 8005ad6:	dc12      	bgt.n	8005afe <__b2d+0x4e>
 8005ad8:	42ae      	cmp	r6, r5
 8005ada:	bf2c      	ite	cs
 8005adc:	2200      	movcs	r2, #0
 8005ade:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005ae2:	f1c3 0c0b 	rsb	ip, r3, #11
 8005ae6:	3315      	adds	r3, #21
 8005ae8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005aec:	fa04 f303 	lsl.w	r3, r4, r3
 8005af0:	fa22 f20c 	lsr.w	r2, r2, ip
 8005af4:	ea4e 0107 	orr.w	r1, lr, r7
 8005af8:	431a      	orrs	r2, r3
 8005afa:	4610      	mov	r0, r2
 8005afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005afe:	42ae      	cmp	r6, r5
 8005b00:	bf36      	itet	cc
 8005b02:	f1a2 0508 	subcc.w	r5, r2, #8
 8005b06:	2200      	movcs	r2, #0
 8005b08:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005b0c:	3b0b      	subs	r3, #11
 8005b0e:	d012      	beq.n	8005b36 <__b2d+0x86>
 8005b10:	f1c3 0720 	rsb	r7, r3, #32
 8005b14:	fa22 f107 	lsr.w	r1, r2, r7
 8005b18:	409c      	lsls	r4, r3
 8005b1a:	430c      	orrs	r4, r1
 8005b1c:	42b5      	cmp	r5, r6
 8005b1e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005b22:	bf94      	ite	ls
 8005b24:	2400      	movls	r4, #0
 8005b26:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	40fc      	lsrs	r4, r7
 8005b2e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005b32:	4322      	orrs	r2, r4
 8005b34:	e7e1      	b.n	8005afa <__b2d+0x4a>
 8005b36:	ea44 0107 	orr.w	r1, r4, r7
 8005b3a:	e7de      	b.n	8005afa <__b2d+0x4a>
 8005b3c:	3ff00000 	.word	0x3ff00000

08005b40 <__d2b>:
 8005b40:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005b44:	2101      	movs	r1, #1
 8005b46:	4690      	mov	r8, r2
 8005b48:	4699      	mov	r9, r3
 8005b4a:	9e08      	ldr	r6, [sp, #32]
 8005b4c:	f7ff fc1e 	bl	800538c <_Balloc>
 8005b50:	4604      	mov	r4, r0
 8005b52:	b930      	cbnz	r0, 8005b62 <__d2b+0x22>
 8005b54:	4602      	mov	r2, r0
 8005b56:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b5a:	4b23      	ldr	r3, [pc, #140]	@ (8005be8 <__d2b+0xa8>)
 8005b5c:	4823      	ldr	r0, [pc, #140]	@ (8005bec <__d2b+0xac>)
 8005b5e:	f001 fb3f 	bl	80071e0 <__assert_func>
 8005b62:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b6a:	b10d      	cbz	r5, 8005b70 <__d2b+0x30>
 8005b6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	f1b8 0300 	subs.w	r3, r8, #0
 8005b76:	d024      	beq.n	8005bc2 <__d2b+0x82>
 8005b78:	4668      	mov	r0, sp
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	f7ff fd17 	bl	80055ae <__lo0bits>
 8005b80:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005b84:	b1d8      	cbz	r0, 8005bbe <__d2b+0x7e>
 8005b86:	f1c0 0320 	rsb	r3, r0, #32
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	40c2      	lsrs	r2, r0
 8005b92:	6163      	str	r3, [r4, #20]
 8005b94:	9201      	str	r2, [sp, #4]
 8005b96:	9b01      	ldr	r3, [sp, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	bf0c      	ite	eq
 8005b9c:	2201      	moveq	r2, #1
 8005b9e:	2202      	movne	r2, #2
 8005ba0:	61a3      	str	r3, [r4, #24]
 8005ba2:	6122      	str	r2, [r4, #16]
 8005ba4:	b1ad      	cbz	r5, 8005bd2 <__d2b+0x92>
 8005ba6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005baa:	4405      	add	r5, r0
 8005bac:	6035      	str	r5, [r6, #0]
 8005bae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bb4:	6018      	str	r0, [r3, #0]
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	b002      	add	sp, #8
 8005bba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005bbe:	6161      	str	r1, [r4, #20]
 8005bc0:	e7e9      	b.n	8005b96 <__d2b+0x56>
 8005bc2:	a801      	add	r0, sp, #4
 8005bc4:	f7ff fcf3 	bl	80055ae <__lo0bits>
 8005bc8:	9b01      	ldr	r3, [sp, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	6163      	str	r3, [r4, #20]
 8005bce:	3020      	adds	r0, #32
 8005bd0:	e7e7      	b.n	8005ba2 <__d2b+0x62>
 8005bd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005bd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005bda:	6030      	str	r0, [r6, #0]
 8005bdc:	6918      	ldr	r0, [r3, #16]
 8005bde:	f7ff fcc7 	bl	8005570 <__hi0bits>
 8005be2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005be6:	e7e4      	b.n	8005bb2 <__d2b+0x72>
 8005be8:	0800901b 	.word	0x0800901b
 8005bec:	0800902c 	.word	0x0800902c

08005bf0 <__ratio>:
 8005bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	b085      	sub	sp, #20
 8005bf6:	e9cd 1000 	strd	r1, r0, [sp]
 8005bfa:	a902      	add	r1, sp, #8
 8005bfc:	f7ff ff58 	bl	8005ab0 <__b2d>
 8005c00:	468b      	mov	fp, r1
 8005c02:	4606      	mov	r6, r0
 8005c04:	460f      	mov	r7, r1
 8005c06:	9800      	ldr	r0, [sp, #0]
 8005c08:	a903      	add	r1, sp, #12
 8005c0a:	f7ff ff51 	bl	8005ab0 <__b2d>
 8005c0e:	460d      	mov	r5, r1
 8005c10:	9b01      	ldr	r3, [sp, #4]
 8005c12:	4689      	mov	r9, r1
 8005c14:	6919      	ldr	r1, [r3, #16]
 8005c16:	9b00      	ldr	r3, [sp, #0]
 8005c18:	4604      	mov	r4, r0
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	1ac9      	subs	r1, r1, r3
 8005c20:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bfcd      	iteet	gt
 8005c2e:	463a      	movgt	r2, r7
 8005c30:	462a      	movle	r2, r5
 8005c32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005c36:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005c3a:	bfd8      	it	le
 8005c3c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005c40:	464b      	mov	r3, r9
 8005c42:	4622      	mov	r2, r4
 8005c44:	4659      	mov	r1, fp
 8005c46:	f7fa fd71 	bl	800072c <__aeabi_ddiv>
 8005c4a:	b005      	add	sp, #20
 8005c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c50 <__copybits>:
 8005c50:	3901      	subs	r1, #1
 8005c52:	b570      	push	{r4, r5, r6, lr}
 8005c54:	1149      	asrs	r1, r1, #5
 8005c56:	6914      	ldr	r4, [r2, #16]
 8005c58:	3101      	adds	r1, #1
 8005c5a:	f102 0314 	add.w	r3, r2, #20
 8005c5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005c62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005c66:	1f05      	subs	r5, r0, #4
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	d30c      	bcc.n	8005c86 <__copybits+0x36>
 8005c6c:	1aa3      	subs	r3, r4, r2
 8005c6e:	3b11      	subs	r3, #17
 8005c70:	f023 0303 	bic.w	r3, r3, #3
 8005c74:	3211      	adds	r2, #17
 8005c76:	42a2      	cmp	r2, r4
 8005c78:	bf88      	it	hi
 8005c7a:	2300      	movhi	r3, #0
 8005c7c:	4418      	add	r0, r3
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4288      	cmp	r0, r1
 8005c82:	d305      	bcc.n	8005c90 <__copybits+0x40>
 8005c84:	bd70      	pop	{r4, r5, r6, pc}
 8005c86:	f853 6b04 	ldr.w	r6, [r3], #4
 8005c8a:	f845 6f04 	str.w	r6, [r5, #4]!
 8005c8e:	e7eb      	b.n	8005c68 <__copybits+0x18>
 8005c90:	f840 3b04 	str.w	r3, [r0], #4
 8005c94:	e7f4      	b.n	8005c80 <__copybits+0x30>

08005c96 <__any_on>:
 8005c96:	f100 0214 	add.w	r2, r0, #20
 8005c9a:	6900      	ldr	r0, [r0, #16]
 8005c9c:	114b      	asrs	r3, r1, #5
 8005c9e:	4298      	cmp	r0, r3
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	db11      	blt.n	8005cc8 <__any_on+0x32>
 8005ca4:	dd0a      	ble.n	8005cbc <__any_on+0x26>
 8005ca6:	f011 011f 	ands.w	r1, r1, #31
 8005caa:	d007      	beq.n	8005cbc <__any_on+0x26>
 8005cac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005cb0:	fa24 f001 	lsr.w	r0, r4, r1
 8005cb4:	fa00 f101 	lsl.w	r1, r0, r1
 8005cb8:	428c      	cmp	r4, r1
 8005cba:	d10b      	bne.n	8005cd4 <__any_on+0x3e>
 8005cbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d803      	bhi.n	8005ccc <__any_on+0x36>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	bd10      	pop	{r4, pc}
 8005cc8:	4603      	mov	r3, r0
 8005cca:	e7f7      	b.n	8005cbc <__any_on+0x26>
 8005ccc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	d0f5      	beq.n	8005cc0 <__any_on+0x2a>
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	e7f6      	b.n	8005cc6 <__any_on+0x30>

08005cd8 <sulp>:
 8005cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cdc:	460f      	mov	r7, r1
 8005cde:	4690      	mov	r8, r2
 8005ce0:	f7ff fec6 	bl	8005a70 <__ulp>
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	460d      	mov	r5, r1
 8005ce8:	f1b8 0f00 	cmp.w	r8, #0
 8005cec:	d011      	beq.n	8005d12 <sulp+0x3a>
 8005cee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005cf2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dd0b      	ble.n	8005d12 <sulp+0x3a>
 8005cfa:	2400      	movs	r4, #0
 8005cfc:	051b      	lsls	r3, r3, #20
 8005cfe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005d02:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005d06:	4622      	mov	r2, r4
 8005d08:	462b      	mov	r3, r5
 8005d0a:	f7fa fbe5 	bl	80004d8 <__aeabi_dmul>
 8005d0e:	4604      	mov	r4, r0
 8005d10:	460d      	mov	r5, r1
 8005d12:	4620      	mov	r0, r4
 8005d14:	4629      	mov	r1, r5
 8005d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d1a:	0000      	movs	r0, r0
 8005d1c:	0000      	movs	r0, r0
	...

08005d20 <_strtod_l>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	b09f      	sub	sp, #124	@ 0x7c
 8005d26:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005d28:	2200      	movs	r2, #0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005d2e:	f04f 0a00 	mov.w	sl, #0
 8005d32:	f04f 0b00 	mov.w	fp, #0
 8005d36:	460a      	mov	r2, r1
 8005d38:	9005      	str	r0, [sp, #20]
 8005d3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d3c:	7811      	ldrb	r1, [r2, #0]
 8005d3e:	292b      	cmp	r1, #43	@ 0x2b
 8005d40:	d048      	beq.n	8005dd4 <_strtod_l+0xb4>
 8005d42:	d836      	bhi.n	8005db2 <_strtod_l+0x92>
 8005d44:	290d      	cmp	r1, #13
 8005d46:	d830      	bhi.n	8005daa <_strtod_l+0x8a>
 8005d48:	2908      	cmp	r1, #8
 8005d4a:	d830      	bhi.n	8005dae <_strtod_l+0x8e>
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	d039      	beq.n	8005dc4 <_strtod_l+0xa4>
 8005d50:	2200      	movs	r2, #0
 8005d52:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005d54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005d56:	782a      	ldrb	r2, [r5, #0]
 8005d58:	2a30      	cmp	r2, #48	@ 0x30
 8005d5a:	f040 80b1 	bne.w	8005ec0 <_strtod_l+0x1a0>
 8005d5e:	786a      	ldrb	r2, [r5, #1]
 8005d60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005d64:	2a58      	cmp	r2, #88	@ 0x58
 8005d66:	d16c      	bne.n	8005e42 <_strtod_l+0x122>
 8005d68:	9302      	str	r3, [sp, #8]
 8005d6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d6c:	4a8e      	ldr	r2, [pc, #568]	@ (8005fa8 <_strtod_l+0x288>)
 8005d6e:	9301      	str	r3, [sp, #4]
 8005d70:	ab1a      	add	r3, sp, #104	@ 0x68
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	9805      	ldr	r0, [sp, #20]
 8005d76:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005d78:	a919      	add	r1, sp, #100	@ 0x64
 8005d7a:	f001 facb 	bl	8007314 <__gethex>
 8005d7e:	f010 060f 	ands.w	r6, r0, #15
 8005d82:	4604      	mov	r4, r0
 8005d84:	d005      	beq.n	8005d92 <_strtod_l+0x72>
 8005d86:	2e06      	cmp	r6, #6
 8005d88:	d126      	bne.n	8005dd8 <_strtod_l+0xb8>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005d90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f040 8584 	bne.w	80068a2 <_strtod_l+0xb82>
 8005d9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d9c:	b1bb      	cbz	r3, 8005dce <_strtod_l+0xae>
 8005d9e:	4650      	mov	r0, sl
 8005da0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005da4:	b01f      	add	sp, #124	@ 0x7c
 8005da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005daa:	2920      	cmp	r1, #32
 8005dac:	d1d0      	bne.n	8005d50 <_strtod_l+0x30>
 8005dae:	3201      	adds	r2, #1
 8005db0:	e7c3      	b.n	8005d3a <_strtod_l+0x1a>
 8005db2:	292d      	cmp	r1, #45	@ 0x2d
 8005db4:	d1cc      	bne.n	8005d50 <_strtod_l+0x30>
 8005db6:	2101      	movs	r1, #1
 8005db8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005dba:	1c51      	adds	r1, r2, #1
 8005dbc:	9119      	str	r1, [sp, #100]	@ 0x64
 8005dbe:	7852      	ldrb	r2, [r2, #1]
 8005dc0:	2a00      	cmp	r2, #0
 8005dc2:	d1c7      	bne.n	8005d54 <_strtod_l+0x34>
 8005dc4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005dc6:	9419      	str	r4, [sp, #100]	@ 0x64
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f040 8568 	bne.w	800689e <_strtod_l+0xb7e>
 8005dce:	4650      	mov	r0, sl
 8005dd0:	4659      	mov	r1, fp
 8005dd2:	e7e7      	b.n	8005da4 <_strtod_l+0x84>
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	e7ef      	b.n	8005db8 <_strtod_l+0x98>
 8005dd8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005dda:	b13a      	cbz	r2, 8005dec <_strtod_l+0xcc>
 8005ddc:	2135      	movs	r1, #53	@ 0x35
 8005dde:	a81c      	add	r0, sp, #112	@ 0x70
 8005de0:	f7ff ff36 	bl	8005c50 <__copybits>
 8005de4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005de6:	9805      	ldr	r0, [sp, #20]
 8005de8:	f7ff fb10 	bl	800540c <_Bfree>
 8005dec:	3e01      	subs	r6, #1
 8005dee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005df0:	2e04      	cmp	r6, #4
 8005df2:	d806      	bhi.n	8005e02 <_strtod_l+0xe2>
 8005df4:	e8df f006 	tbb	[pc, r6]
 8005df8:	201d0314 	.word	0x201d0314
 8005dfc:	14          	.byte	0x14
 8005dfd:	00          	.byte	0x00
 8005dfe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005e02:	05e1      	lsls	r1, r4, #23
 8005e04:	bf48      	it	mi
 8005e06:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005e0a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005e0e:	0d1b      	lsrs	r3, r3, #20
 8005e10:	051b      	lsls	r3, r3, #20
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1bd      	bne.n	8005d92 <_strtod_l+0x72>
 8005e16:	f7fe fb1b 	bl	8004450 <__errno>
 8005e1a:	2322      	movs	r3, #34	@ 0x22
 8005e1c:	6003      	str	r3, [r0, #0]
 8005e1e:	e7b8      	b.n	8005d92 <_strtod_l+0x72>
 8005e20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005e24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005e28:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005e2c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005e30:	e7e7      	b.n	8005e02 <_strtod_l+0xe2>
 8005e32:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005fac <_strtod_l+0x28c>
 8005e36:	e7e4      	b.n	8005e02 <_strtod_l+0xe2>
 8005e38:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8005e40:	e7df      	b.n	8005e02 <_strtod_l+0xe2>
 8005e42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	2b30      	cmp	r3, #48	@ 0x30
 8005e4c:	d0f9      	beq.n	8005e42 <_strtod_l+0x122>
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d09f      	beq.n	8005d92 <_strtod_l+0x72>
 8005e52:	2301      	movs	r3, #1
 8005e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e58:	220a      	movs	r2, #10
 8005e5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	461f      	mov	r7, r3
 8005e60:	9308      	str	r3, [sp, #32]
 8005e62:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e64:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005e66:	7805      	ldrb	r5, [r0, #0]
 8005e68:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005e6c:	b2d9      	uxtb	r1, r3
 8005e6e:	2909      	cmp	r1, #9
 8005e70:	d928      	bls.n	8005ec4 <_strtod_l+0x1a4>
 8005e72:	2201      	movs	r2, #1
 8005e74:	494e      	ldr	r1, [pc, #312]	@ (8005fb0 <_strtod_l+0x290>)
 8005e76:	f001 f968 	bl	800714a <strncmp>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d032      	beq.n	8005ee4 <_strtod_l+0x1c4>
 8005e7e:	2000      	movs	r0, #0
 8005e80:	462a      	mov	r2, r5
 8005e82:	4681      	mov	r9, r0
 8005e84:	463d      	mov	r5, r7
 8005e86:	4603      	mov	r3, r0
 8005e88:	2a65      	cmp	r2, #101	@ 0x65
 8005e8a:	d001      	beq.n	8005e90 <_strtod_l+0x170>
 8005e8c:	2a45      	cmp	r2, #69	@ 0x45
 8005e8e:	d114      	bne.n	8005eba <_strtod_l+0x19a>
 8005e90:	b91d      	cbnz	r5, 8005e9a <_strtod_l+0x17a>
 8005e92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e94:	4302      	orrs	r2, r0
 8005e96:	d095      	beq.n	8005dc4 <_strtod_l+0xa4>
 8005e98:	2500      	movs	r5, #0
 8005e9a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005e9c:	1c62      	adds	r2, r4, #1
 8005e9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ea0:	7862      	ldrb	r2, [r4, #1]
 8005ea2:	2a2b      	cmp	r2, #43	@ 0x2b
 8005ea4:	d077      	beq.n	8005f96 <_strtod_l+0x276>
 8005ea6:	2a2d      	cmp	r2, #45	@ 0x2d
 8005ea8:	d07b      	beq.n	8005fa2 <_strtod_l+0x282>
 8005eaa:	f04f 0c00 	mov.w	ip, #0
 8005eae:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005eb2:	2909      	cmp	r1, #9
 8005eb4:	f240 8082 	bls.w	8005fbc <_strtod_l+0x29c>
 8005eb8:	9419      	str	r4, [sp, #100]	@ 0x64
 8005eba:	f04f 0800 	mov.w	r8, #0
 8005ebe:	e0a2      	b.n	8006006 <_strtod_l+0x2e6>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e7c7      	b.n	8005e54 <_strtod_l+0x134>
 8005ec4:	2f08      	cmp	r7, #8
 8005ec6:	bfd5      	itete	le
 8005ec8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005eca:	9908      	ldrgt	r1, [sp, #32]
 8005ecc:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ed0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005ed4:	f100 0001 	add.w	r0, r0, #1
 8005ed8:	bfd4      	ite	le
 8005eda:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005edc:	9308      	strgt	r3, [sp, #32]
 8005ede:	3701      	adds	r7, #1
 8005ee0:	9019      	str	r0, [sp, #100]	@ 0x64
 8005ee2:	e7bf      	b.n	8005e64 <_strtod_l+0x144>
 8005ee4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	9219      	str	r2, [sp, #100]	@ 0x64
 8005eea:	785a      	ldrb	r2, [r3, #1]
 8005eec:	b37f      	cbz	r7, 8005f4e <_strtod_l+0x22e>
 8005eee:	4681      	mov	r9, r0
 8005ef0:	463d      	mov	r5, r7
 8005ef2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005ef6:	2b09      	cmp	r3, #9
 8005ef8:	d912      	bls.n	8005f20 <_strtod_l+0x200>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e7c4      	b.n	8005e88 <_strtod_l+0x168>
 8005efe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f00:	3001      	adds	r0, #1
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f06:	785a      	ldrb	r2, [r3, #1]
 8005f08:	2a30      	cmp	r2, #48	@ 0x30
 8005f0a:	d0f8      	beq.n	8005efe <_strtod_l+0x1de>
 8005f0c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	f200 84cb 	bhi.w	80068ac <_strtod_l+0xb8c>
 8005f16:	4681      	mov	r9, r0
 8005f18:	2000      	movs	r0, #0
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f20:	3a30      	subs	r2, #48	@ 0x30
 8005f22:	f100 0301 	add.w	r3, r0, #1
 8005f26:	d02a      	beq.n	8005f7e <_strtod_l+0x25e>
 8005f28:	4499      	add	r9, r3
 8005f2a:	210a      	movs	r1, #10
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	eb00 0c05 	add.w	ip, r0, r5
 8005f32:	4563      	cmp	r3, ip
 8005f34:	d10d      	bne.n	8005f52 <_strtod_l+0x232>
 8005f36:	1c69      	adds	r1, r5, #1
 8005f38:	4401      	add	r1, r0
 8005f3a:	4428      	add	r0, r5
 8005f3c:	2808      	cmp	r0, #8
 8005f3e:	dc16      	bgt.n	8005f6e <_strtod_l+0x24e>
 8005f40:	230a      	movs	r3, #10
 8005f42:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005f44:	fb03 2300 	mla	r3, r3, r0, r2
 8005f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e018      	b.n	8005f80 <_strtod_l+0x260>
 8005f4e:	4638      	mov	r0, r7
 8005f50:	e7da      	b.n	8005f08 <_strtod_l+0x1e8>
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	f103 0301 	add.w	r3, r3, #1
 8005f58:	dc03      	bgt.n	8005f62 <_strtod_l+0x242>
 8005f5a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005f5c:	434e      	muls	r6, r1
 8005f5e:	960a      	str	r6, [sp, #40]	@ 0x28
 8005f60:	e7e7      	b.n	8005f32 <_strtod_l+0x212>
 8005f62:	2b10      	cmp	r3, #16
 8005f64:	bfde      	ittt	le
 8005f66:	9e08      	ldrle	r6, [sp, #32]
 8005f68:	434e      	mulle	r6, r1
 8005f6a:	9608      	strle	r6, [sp, #32]
 8005f6c:	e7e1      	b.n	8005f32 <_strtod_l+0x212>
 8005f6e:	280f      	cmp	r0, #15
 8005f70:	dceb      	bgt.n	8005f4a <_strtod_l+0x22a>
 8005f72:	230a      	movs	r3, #10
 8005f74:	9808      	ldr	r0, [sp, #32]
 8005f76:	fb03 2300 	mla	r3, r3, r0, r2
 8005f7a:	9308      	str	r3, [sp, #32]
 8005f7c:	e7e5      	b.n	8005f4a <_strtod_l+0x22a>
 8005f7e:	4629      	mov	r1, r5
 8005f80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005f82:	460d      	mov	r5, r1
 8005f84:	1c50      	adds	r0, r2, #1
 8005f86:	9019      	str	r0, [sp, #100]	@ 0x64
 8005f88:	7852      	ldrb	r2, [r2, #1]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	e7b1      	b.n	8005ef2 <_strtod_l+0x1d2>
 8005f8e:	f04f 0900 	mov.w	r9, #0
 8005f92:	2301      	movs	r3, #1
 8005f94:	e77d      	b.n	8005e92 <_strtod_l+0x172>
 8005f96:	f04f 0c00 	mov.w	ip, #0
 8005f9a:	1ca2      	adds	r2, r4, #2
 8005f9c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f9e:	78a2      	ldrb	r2, [r4, #2]
 8005fa0:	e785      	b.n	8005eae <_strtod_l+0x18e>
 8005fa2:	f04f 0c01 	mov.w	ip, #1
 8005fa6:	e7f8      	b.n	8005f9a <_strtod_l+0x27a>
 8005fa8:	080091a0 	.word	0x080091a0
 8005fac:	7ff00000 	.word	0x7ff00000
 8005fb0:	08009188 	.word	0x08009188
 8005fb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005fb6:	1c51      	adds	r1, r2, #1
 8005fb8:	9119      	str	r1, [sp, #100]	@ 0x64
 8005fba:	7852      	ldrb	r2, [r2, #1]
 8005fbc:	2a30      	cmp	r2, #48	@ 0x30
 8005fbe:	d0f9      	beq.n	8005fb4 <_strtod_l+0x294>
 8005fc0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005fc4:	2908      	cmp	r1, #8
 8005fc6:	f63f af78 	bhi.w	8005eba <_strtod_l+0x19a>
 8005fca:	f04f 080a 	mov.w	r8, #10
 8005fce:	3a30      	subs	r2, #48	@ 0x30
 8005fd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005fd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005fd4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005fd6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005fd8:	1c56      	adds	r6, r2, #1
 8005fda:	9619      	str	r6, [sp, #100]	@ 0x64
 8005fdc:	7852      	ldrb	r2, [r2, #1]
 8005fde:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005fe2:	f1be 0f09 	cmp.w	lr, #9
 8005fe6:	d939      	bls.n	800605c <_strtod_l+0x33c>
 8005fe8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005fea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005fee:	1a76      	subs	r6, r6, r1
 8005ff0:	2e08      	cmp	r6, #8
 8005ff2:	dc03      	bgt.n	8005ffc <_strtod_l+0x2dc>
 8005ff4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005ff6:	4588      	cmp	r8, r1
 8005ff8:	bfa8      	it	ge
 8005ffa:	4688      	movge	r8, r1
 8005ffc:	f1bc 0f00 	cmp.w	ip, #0
 8006000:	d001      	beq.n	8006006 <_strtod_l+0x2e6>
 8006002:	f1c8 0800 	rsb	r8, r8, #0
 8006006:	2d00      	cmp	r5, #0
 8006008:	d14e      	bne.n	80060a8 <_strtod_l+0x388>
 800600a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800600c:	4308      	orrs	r0, r1
 800600e:	f47f aec0 	bne.w	8005d92 <_strtod_l+0x72>
 8006012:	2b00      	cmp	r3, #0
 8006014:	f47f aed6 	bne.w	8005dc4 <_strtod_l+0xa4>
 8006018:	2a69      	cmp	r2, #105	@ 0x69
 800601a:	d028      	beq.n	800606e <_strtod_l+0x34e>
 800601c:	dc25      	bgt.n	800606a <_strtod_l+0x34a>
 800601e:	2a49      	cmp	r2, #73	@ 0x49
 8006020:	d025      	beq.n	800606e <_strtod_l+0x34e>
 8006022:	2a4e      	cmp	r2, #78	@ 0x4e
 8006024:	f47f aece 	bne.w	8005dc4 <_strtod_l+0xa4>
 8006028:	499a      	ldr	r1, [pc, #616]	@ (8006294 <_strtod_l+0x574>)
 800602a:	a819      	add	r0, sp, #100	@ 0x64
 800602c:	f001 fb94 	bl	8007758 <__match>
 8006030:	2800      	cmp	r0, #0
 8006032:	f43f aec7 	beq.w	8005dc4 <_strtod_l+0xa4>
 8006036:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b28      	cmp	r3, #40	@ 0x28
 800603c:	d12e      	bne.n	800609c <_strtod_l+0x37c>
 800603e:	4996      	ldr	r1, [pc, #600]	@ (8006298 <_strtod_l+0x578>)
 8006040:	aa1c      	add	r2, sp, #112	@ 0x70
 8006042:	a819      	add	r0, sp, #100	@ 0x64
 8006044:	f001 fb9c 	bl	8007780 <__hexnan>
 8006048:	2805      	cmp	r0, #5
 800604a:	d127      	bne.n	800609c <_strtod_l+0x37c>
 800604c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800604e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006052:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006056:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800605a:	e69a      	b.n	8005d92 <_strtod_l+0x72>
 800605c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800605e:	fb08 2101 	mla	r1, r8, r1, r2
 8006062:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006066:	920e      	str	r2, [sp, #56]	@ 0x38
 8006068:	e7b5      	b.n	8005fd6 <_strtod_l+0x2b6>
 800606a:	2a6e      	cmp	r2, #110	@ 0x6e
 800606c:	e7da      	b.n	8006024 <_strtod_l+0x304>
 800606e:	498b      	ldr	r1, [pc, #556]	@ (800629c <_strtod_l+0x57c>)
 8006070:	a819      	add	r0, sp, #100	@ 0x64
 8006072:	f001 fb71 	bl	8007758 <__match>
 8006076:	2800      	cmp	r0, #0
 8006078:	f43f aea4 	beq.w	8005dc4 <_strtod_l+0xa4>
 800607c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800607e:	4988      	ldr	r1, [pc, #544]	@ (80062a0 <_strtod_l+0x580>)
 8006080:	3b01      	subs	r3, #1
 8006082:	a819      	add	r0, sp, #100	@ 0x64
 8006084:	9319      	str	r3, [sp, #100]	@ 0x64
 8006086:	f001 fb67 	bl	8007758 <__match>
 800608a:	b910      	cbnz	r0, 8006092 <_strtod_l+0x372>
 800608c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800608e:	3301      	adds	r3, #1
 8006090:	9319      	str	r3, [sp, #100]	@ 0x64
 8006092:	f04f 0a00 	mov.w	sl, #0
 8006096:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80062a4 <_strtod_l+0x584>
 800609a:	e67a      	b.n	8005d92 <_strtod_l+0x72>
 800609c:	4882      	ldr	r0, [pc, #520]	@ (80062a8 <_strtod_l+0x588>)
 800609e:	f001 f899 	bl	80071d4 <nan>
 80060a2:	4682      	mov	sl, r0
 80060a4:	468b      	mov	fp, r1
 80060a6:	e674      	b.n	8005d92 <_strtod_l+0x72>
 80060a8:	eba8 0309 	sub.w	r3, r8, r9
 80060ac:	2f00      	cmp	r7, #0
 80060ae:	bf08      	it	eq
 80060b0:	462f      	moveq	r7, r5
 80060b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80060b4:	2d10      	cmp	r5, #16
 80060b6:	462c      	mov	r4, r5
 80060b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ba:	bfa8      	it	ge
 80060bc:	2410      	movge	r4, #16
 80060be:	f7fa f991 	bl	80003e4 <__aeabi_ui2d>
 80060c2:	2d09      	cmp	r5, #9
 80060c4:	4682      	mov	sl, r0
 80060c6:	468b      	mov	fp, r1
 80060c8:	dc11      	bgt.n	80060ee <_strtod_l+0x3ce>
 80060ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f43f ae60 	beq.w	8005d92 <_strtod_l+0x72>
 80060d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d4:	dd76      	ble.n	80061c4 <_strtod_l+0x4a4>
 80060d6:	2b16      	cmp	r3, #22
 80060d8:	dc5d      	bgt.n	8006196 <_strtod_l+0x476>
 80060da:	4974      	ldr	r1, [pc, #464]	@ (80062ac <_strtod_l+0x58c>)
 80060dc:	4652      	mov	r2, sl
 80060de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060e2:	465b      	mov	r3, fp
 80060e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060e8:	f7fa f9f6 	bl	80004d8 <__aeabi_dmul>
 80060ec:	e7d9      	b.n	80060a2 <_strtod_l+0x382>
 80060ee:	4b6f      	ldr	r3, [pc, #444]	@ (80062ac <_strtod_l+0x58c>)
 80060f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80060f8:	f7fa f9ee 	bl	80004d8 <__aeabi_dmul>
 80060fc:	4682      	mov	sl, r0
 80060fe:	9808      	ldr	r0, [sp, #32]
 8006100:	468b      	mov	fp, r1
 8006102:	f7fa f96f 	bl	80003e4 <__aeabi_ui2d>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4650      	mov	r0, sl
 800610c:	4659      	mov	r1, fp
 800610e:	f7fa f82d 	bl	800016c <__adddf3>
 8006112:	2d0f      	cmp	r5, #15
 8006114:	4682      	mov	sl, r0
 8006116:	468b      	mov	fp, r1
 8006118:	ddd7      	ble.n	80060ca <_strtod_l+0x3aa>
 800611a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611c:	1b2c      	subs	r4, r5, r4
 800611e:	441c      	add	r4, r3
 8006120:	2c00      	cmp	r4, #0
 8006122:	f340 8096 	ble.w	8006252 <_strtod_l+0x532>
 8006126:	f014 030f 	ands.w	r3, r4, #15
 800612a:	d00a      	beq.n	8006142 <_strtod_l+0x422>
 800612c:	495f      	ldr	r1, [pc, #380]	@ (80062ac <_strtod_l+0x58c>)
 800612e:	4652      	mov	r2, sl
 8006130:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006138:	465b      	mov	r3, fp
 800613a:	f7fa f9cd 	bl	80004d8 <__aeabi_dmul>
 800613e:	4682      	mov	sl, r0
 8006140:	468b      	mov	fp, r1
 8006142:	f034 040f 	bics.w	r4, r4, #15
 8006146:	d073      	beq.n	8006230 <_strtod_l+0x510>
 8006148:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800614c:	dd48      	ble.n	80061e0 <_strtod_l+0x4c0>
 800614e:	2400      	movs	r4, #0
 8006150:	46a0      	mov	r8, r4
 8006152:	46a1      	mov	r9, r4
 8006154:	940a      	str	r4, [sp, #40]	@ 0x28
 8006156:	2322      	movs	r3, #34	@ 0x22
 8006158:	f04f 0a00 	mov.w	sl, #0
 800615c:	9a05      	ldr	r2, [sp, #20]
 800615e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80062a4 <_strtod_l+0x584>
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006166:	2b00      	cmp	r3, #0
 8006168:	f43f ae13 	beq.w	8005d92 <_strtod_l+0x72>
 800616c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800616e:	9805      	ldr	r0, [sp, #20]
 8006170:	f7ff f94c 	bl	800540c <_Bfree>
 8006174:	4649      	mov	r1, r9
 8006176:	9805      	ldr	r0, [sp, #20]
 8006178:	f7ff f948 	bl	800540c <_Bfree>
 800617c:	4641      	mov	r1, r8
 800617e:	9805      	ldr	r0, [sp, #20]
 8006180:	f7ff f944 	bl	800540c <_Bfree>
 8006184:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006186:	9805      	ldr	r0, [sp, #20]
 8006188:	f7ff f940 	bl	800540c <_Bfree>
 800618c:	4621      	mov	r1, r4
 800618e:	9805      	ldr	r0, [sp, #20]
 8006190:	f7ff f93c 	bl	800540c <_Bfree>
 8006194:	e5fd      	b.n	8005d92 <_strtod_l+0x72>
 8006196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006198:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800619c:	4293      	cmp	r3, r2
 800619e:	dbbc      	blt.n	800611a <_strtod_l+0x3fa>
 80061a0:	4c42      	ldr	r4, [pc, #264]	@ (80062ac <_strtod_l+0x58c>)
 80061a2:	f1c5 050f 	rsb	r5, r5, #15
 80061a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80061aa:	4652      	mov	r2, sl
 80061ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061b0:	465b      	mov	r3, fp
 80061b2:	f7fa f991 	bl	80004d8 <__aeabi_dmul>
 80061b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b8:	1b5d      	subs	r5, r3, r5
 80061ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80061be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80061c2:	e791      	b.n	80060e8 <_strtod_l+0x3c8>
 80061c4:	3316      	adds	r3, #22
 80061c6:	dba8      	blt.n	800611a <_strtod_l+0x3fa>
 80061c8:	4b38      	ldr	r3, [pc, #224]	@ (80062ac <_strtod_l+0x58c>)
 80061ca:	eba9 0808 	sub.w	r8, r9, r8
 80061ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80061d2:	4650      	mov	r0, sl
 80061d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80061d8:	4659      	mov	r1, fp
 80061da:	f7fa faa7 	bl	800072c <__aeabi_ddiv>
 80061de:	e760      	b.n	80060a2 <_strtod_l+0x382>
 80061e0:	4b33      	ldr	r3, [pc, #204]	@ (80062b0 <_strtod_l+0x590>)
 80061e2:	4650      	mov	r0, sl
 80061e4:	9308      	str	r3, [sp, #32]
 80061e6:	2300      	movs	r3, #0
 80061e8:	4659      	mov	r1, fp
 80061ea:	461e      	mov	r6, r3
 80061ec:	1124      	asrs	r4, r4, #4
 80061ee:	2c01      	cmp	r4, #1
 80061f0:	dc21      	bgt.n	8006236 <_strtod_l+0x516>
 80061f2:	b10b      	cbz	r3, 80061f8 <_strtod_l+0x4d8>
 80061f4:	4682      	mov	sl, r0
 80061f6:	468b      	mov	fp, r1
 80061f8:	492d      	ldr	r1, [pc, #180]	@ (80062b0 <_strtod_l+0x590>)
 80061fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80061fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006202:	4652      	mov	r2, sl
 8006204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006208:	465b      	mov	r3, fp
 800620a:	f7fa f965 	bl	80004d8 <__aeabi_dmul>
 800620e:	4b25      	ldr	r3, [pc, #148]	@ (80062a4 <_strtod_l+0x584>)
 8006210:	460a      	mov	r2, r1
 8006212:	400b      	ands	r3, r1
 8006214:	4927      	ldr	r1, [pc, #156]	@ (80062b4 <_strtod_l+0x594>)
 8006216:	4682      	mov	sl, r0
 8006218:	428b      	cmp	r3, r1
 800621a:	d898      	bhi.n	800614e <_strtod_l+0x42e>
 800621c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006220:	428b      	cmp	r3, r1
 8006222:	bf86      	itte	hi
 8006224:	f04f 3aff 	movhi.w	sl, #4294967295
 8006228:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80062b8 <_strtod_l+0x598>
 800622c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006230:	2300      	movs	r3, #0
 8006232:	9308      	str	r3, [sp, #32]
 8006234:	e07a      	b.n	800632c <_strtod_l+0x60c>
 8006236:	07e2      	lsls	r2, r4, #31
 8006238:	d505      	bpl.n	8006246 <_strtod_l+0x526>
 800623a:	9b08      	ldr	r3, [sp, #32]
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7fa f94a 	bl	80004d8 <__aeabi_dmul>
 8006244:	2301      	movs	r3, #1
 8006246:	9a08      	ldr	r2, [sp, #32]
 8006248:	3601      	adds	r6, #1
 800624a:	3208      	adds	r2, #8
 800624c:	1064      	asrs	r4, r4, #1
 800624e:	9208      	str	r2, [sp, #32]
 8006250:	e7cd      	b.n	80061ee <_strtod_l+0x4ce>
 8006252:	d0ed      	beq.n	8006230 <_strtod_l+0x510>
 8006254:	4264      	negs	r4, r4
 8006256:	f014 020f 	ands.w	r2, r4, #15
 800625a:	d00a      	beq.n	8006272 <_strtod_l+0x552>
 800625c:	4b13      	ldr	r3, [pc, #76]	@ (80062ac <_strtod_l+0x58c>)
 800625e:	4650      	mov	r0, sl
 8006260:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006264:	4659      	mov	r1, fp
 8006266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626a:	f7fa fa5f 	bl	800072c <__aeabi_ddiv>
 800626e:	4682      	mov	sl, r0
 8006270:	468b      	mov	fp, r1
 8006272:	1124      	asrs	r4, r4, #4
 8006274:	d0dc      	beq.n	8006230 <_strtod_l+0x510>
 8006276:	2c1f      	cmp	r4, #31
 8006278:	dd20      	ble.n	80062bc <_strtod_l+0x59c>
 800627a:	2400      	movs	r4, #0
 800627c:	46a0      	mov	r8, r4
 800627e:	46a1      	mov	r9, r4
 8006280:	940a      	str	r4, [sp, #40]	@ 0x28
 8006282:	2322      	movs	r3, #34	@ 0x22
 8006284:	9a05      	ldr	r2, [sp, #20]
 8006286:	f04f 0a00 	mov.w	sl, #0
 800628a:	f04f 0b00 	mov.w	fp, #0
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	e768      	b.n	8006164 <_strtod_l+0x444>
 8006292:	bf00      	nop
 8006294:	08008f73 	.word	0x08008f73
 8006298:	0800918c 	.word	0x0800918c
 800629c:	08008f6b 	.word	0x08008f6b
 80062a0:	08008fa2 	.word	0x08008fa2
 80062a4:	7ff00000 	.word	0x7ff00000
 80062a8:	08009335 	.word	0x08009335
 80062ac:	080090c0 	.word	0x080090c0
 80062b0:	08009098 	.word	0x08009098
 80062b4:	7ca00000 	.word	0x7ca00000
 80062b8:	7fefffff 	.word	0x7fefffff
 80062bc:	f014 0310 	ands.w	r3, r4, #16
 80062c0:	bf18      	it	ne
 80062c2:	236a      	movne	r3, #106	@ 0x6a
 80062c4:	4650      	mov	r0, sl
 80062c6:	9308      	str	r3, [sp, #32]
 80062c8:	4659      	mov	r1, fp
 80062ca:	2300      	movs	r3, #0
 80062cc:	4ea9      	ldr	r6, [pc, #676]	@ (8006574 <_strtod_l+0x854>)
 80062ce:	07e2      	lsls	r2, r4, #31
 80062d0:	d504      	bpl.n	80062dc <_strtod_l+0x5bc>
 80062d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062d6:	f7fa f8ff 	bl	80004d8 <__aeabi_dmul>
 80062da:	2301      	movs	r3, #1
 80062dc:	1064      	asrs	r4, r4, #1
 80062de:	f106 0608 	add.w	r6, r6, #8
 80062e2:	d1f4      	bne.n	80062ce <_strtod_l+0x5ae>
 80062e4:	b10b      	cbz	r3, 80062ea <_strtod_l+0x5ca>
 80062e6:	4682      	mov	sl, r0
 80062e8:	468b      	mov	fp, r1
 80062ea:	9b08      	ldr	r3, [sp, #32]
 80062ec:	b1b3      	cbz	r3, 800631c <_strtod_l+0x5fc>
 80062ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80062f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	4659      	mov	r1, fp
 80062fa:	dd0f      	ble.n	800631c <_strtod_l+0x5fc>
 80062fc:	2b1f      	cmp	r3, #31
 80062fe:	dd57      	ble.n	80063b0 <_strtod_l+0x690>
 8006300:	2b34      	cmp	r3, #52	@ 0x34
 8006302:	bfd8      	it	le
 8006304:	f04f 33ff 	movle.w	r3, #4294967295
 8006308:	f04f 0a00 	mov.w	sl, #0
 800630c:	bfcf      	iteee	gt
 800630e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006312:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006316:	4093      	lslle	r3, r2
 8006318:	ea03 0b01 	andle.w	fp, r3, r1
 800631c:	2200      	movs	r2, #0
 800631e:	2300      	movs	r3, #0
 8006320:	4650      	mov	r0, sl
 8006322:	4659      	mov	r1, fp
 8006324:	f7fa fb40 	bl	80009a8 <__aeabi_dcmpeq>
 8006328:	2800      	cmp	r0, #0
 800632a:	d1a6      	bne.n	800627a <_strtod_l+0x55a>
 800632c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800632e:	463a      	mov	r2, r7
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006334:	462b      	mov	r3, r5
 8006336:	9805      	ldr	r0, [sp, #20]
 8006338:	f7ff f8d0 	bl	80054dc <__s2b>
 800633c:	900a      	str	r0, [sp, #40]	@ 0x28
 800633e:	2800      	cmp	r0, #0
 8006340:	f43f af05 	beq.w	800614e <_strtod_l+0x42e>
 8006344:	2400      	movs	r4, #0
 8006346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006348:	eba9 0308 	sub.w	r3, r9, r8
 800634c:	2a00      	cmp	r2, #0
 800634e:	bfa8      	it	ge
 8006350:	2300      	movge	r3, #0
 8006352:	46a0      	mov	r8, r4
 8006354:	9312      	str	r3, [sp, #72]	@ 0x48
 8006356:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800635a:	9316      	str	r3, [sp, #88]	@ 0x58
 800635c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800635e:	9805      	ldr	r0, [sp, #20]
 8006360:	6859      	ldr	r1, [r3, #4]
 8006362:	f7ff f813 	bl	800538c <_Balloc>
 8006366:	4681      	mov	r9, r0
 8006368:	2800      	cmp	r0, #0
 800636a:	f43f aef4 	beq.w	8006156 <_strtod_l+0x436>
 800636e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006370:	300c      	adds	r0, #12
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	f103 010c 	add.w	r1, r3, #12
 8006378:	3202      	adds	r2, #2
 800637a:	0092      	lsls	r2, r2, #2
 800637c:	f7fe f8a3 	bl	80044c6 <memcpy>
 8006380:	ab1c      	add	r3, sp, #112	@ 0x70
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	4652      	mov	r2, sl
 800638a:	465b      	mov	r3, fp
 800638c:	9805      	ldr	r0, [sp, #20]
 800638e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006392:	f7ff fbd5 	bl	8005b40 <__d2b>
 8006396:	901a      	str	r0, [sp, #104]	@ 0x68
 8006398:	2800      	cmp	r0, #0
 800639a:	f43f aedc 	beq.w	8006156 <_strtod_l+0x436>
 800639e:	2101      	movs	r1, #1
 80063a0:	9805      	ldr	r0, [sp, #20]
 80063a2:	f7ff f931 	bl	8005608 <__i2b>
 80063a6:	4680      	mov	r8, r0
 80063a8:	b948      	cbnz	r0, 80063be <_strtod_l+0x69e>
 80063aa:	f04f 0800 	mov.w	r8, #0
 80063ae:	e6d2      	b.n	8006156 <_strtod_l+0x436>
 80063b0:	f04f 32ff 	mov.w	r2, #4294967295
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	ea03 0a0a 	and.w	sl, r3, sl
 80063bc:	e7ae      	b.n	800631c <_strtod_l+0x5fc>
 80063be:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80063c0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80063c2:	2d00      	cmp	r5, #0
 80063c4:	bfab      	itete	ge
 80063c6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80063c8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80063ca:	18ef      	addge	r7, r5, r3
 80063cc:	1b5e      	sublt	r6, r3, r5
 80063ce:	9b08      	ldr	r3, [sp, #32]
 80063d0:	bfa8      	it	ge
 80063d2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80063d4:	eba5 0503 	sub.w	r5, r5, r3
 80063d8:	4415      	add	r5, r2
 80063da:	4b67      	ldr	r3, [pc, #412]	@ (8006578 <_strtod_l+0x858>)
 80063dc:	f105 35ff 	add.w	r5, r5, #4294967295
 80063e0:	bfb8      	it	lt
 80063e2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80063e4:	429d      	cmp	r5, r3
 80063e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80063ea:	da50      	bge.n	800648e <_strtod_l+0x76e>
 80063ec:	1b5b      	subs	r3, r3, r5
 80063ee:	2b1f      	cmp	r3, #31
 80063f0:	f04f 0101 	mov.w	r1, #1
 80063f4:	eba2 0203 	sub.w	r2, r2, r3
 80063f8:	dc3d      	bgt.n	8006476 <_strtod_l+0x756>
 80063fa:	fa01 f303 	lsl.w	r3, r1, r3
 80063fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006400:	2300      	movs	r3, #0
 8006402:	9310      	str	r3, [sp, #64]	@ 0x40
 8006404:	18bd      	adds	r5, r7, r2
 8006406:	9b08      	ldr	r3, [sp, #32]
 8006408:	42af      	cmp	r7, r5
 800640a:	4416      	add	r6, r2
 800640c:	441e      	add	r6, r3
 800640e:	463b      	mov	r3, r7
 8006410:	bfa8      	it	ge
 8006412:	462b      	movge	r3, r5
 8006414:	42b3      	cmp	r3, r6
 8006416:	bfa8      	it	ge
 8006418:	4633      	movge	r3, r6
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfc2      	ittt	gt
 800641e:	1aed      	subgt	r5, r5, r3
 8006420:	1af6      	subgt	r6, r6, r3
 8006422:	1aff      	subgt	r7, r7, r3
 8006424:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006426:	2b00      	cmp	r3, #0
 8006428:	dd16      	ble.n	8006458 <_strtod_l+0x738>
 800642a:	4641      	mov	r1, r8
 800642c:	461a      	mov	r2, r3
 800642e:	9805      	ldr	r0, [sp, #20]
 8006430:	f7ff f9a8 	bl	8005784 <__pow5mult>
 8006434:	4680      	mov	r8, r0
 8006436:	2800      	cmp	r0, #0
 8006438:	d0b7      	beq.n	80063aa <_strtod_l+0x68a>
 800643a:	4601      	mov	r1, r0
 800643c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800643e:	9805      	ldr	r0, [sp, #20]
 8006440:	f7ff f8f8 	bl	8005634 <__multiply>
 8006444:	900e      	str	r0, [sp, #56]	@ 0x38
 8006446:	2800      	cmp	r0, #0
 8006448:	f43f ae85 	beq.w	8006156 <_strtod_l+0x436>
 800644c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800644e:	9805      	ldr	r0, [sp, #20]
 8006450:	f7fe ffdc 	bl	800540c <_Bfree>
 8006454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006456:	931a      	str	r3, [sp, #104]	@ 0x68
 8006458:	2d00      	cmp	r5, #0
 800645a:	dc1d      	bgt.n	8006498 <_strtod_l+0x778>
 800645c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800645e:	2b00      	cmp	r3, #0
 8006460:	dd23      	ble.n	80064aa <_strtod_l+0x78a>
 8006462:	4649      	mov	r1, r9
 8006464:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006466:	9805      	ldr	r0, [sp, #20]
 8006468:	f7ff f98c 	bl	8005784 <__pow5mult>
 800646c:	4681      	mov	r9, r0
 800646e:	b9e0      	cbnz	r0, 80064aa <_strtod_l+0x78a>
 8006470:	f04f 0900 	mov.w	r9, #0
 8006474:	e66f      	b.n	8006156 <_strtod_l+0x436>
 8006476:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800647a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800647e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006482:	35e2      	adds	r5, #226	@ 0xe2
 8006484:	fa01 f305 	lsl.w	r3, r1, r5
 8006488:	9310      	str	r3, [sp, #64]	@ 0x40
 800648a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800648c:	e7ba      	b.n	8006404 <_strtod_l+0x6e4>
 800648e:	2300      	movs	r3, #0
 8006490:	9310      	str	r3, [sp, #64]	@ 0x40
 8006492:	2301      	movs	r3, #1
 8006494:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006496:	e7b5      	b.n	8006404 <_strtod_l+0x6e4>
 8006498:	462a      	mov	r2, r5
 800649a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800649c:	9805      	ldr	r0, [sp, #20]
 800649e:	f7ff f9cb 	bl	8005838 <__lshift>
 80064a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80064a4:	2800      	cmp	r0, #0
 80064a6:	d1d9      	bne.n	800645c <_strtod_l+0x73c>
 80064a8:	e655      	b.n	8006156 <_strtod_l+0x436>
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	dd07      	ble.n	80064be <_strtod_l+0x79e>
 80064ae:	4649      	mov	r1, r9
 80064b0:	4632      	mov	r2, r6
 80064b2:	9805      	ldr	r0, [sp, #20]
 80064b4:	f7ff f9c0 	bl	8005838 <__lshift>
 80064b8:	4681      	mov	r9, r0
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d0d8      	beq.n	8006470 <_strtod_l+0x750>
 80064be:	2f00      	cmp	r7, #0
 80064c0:	dd08      	ble.n	80064d4 <_strtod_l+0x7b4>
 80064c2:	4641      	mov	r1, r8
 80064c4:	463a      	mov	r2, r7
 80064c6:	9805      	ldr	r0, [sp, #20]
 80064c8:	f7ff f9b6 	bl	8005838 <__lshift>
 80064cc:	4680      	mov	r8, r0
 80064ce:	2800      	cmp	r0, #0
 80064d0:	f43f ae41 	beq.w	8006156 <_strtod_l+0x436>
 80064d4:	464a      	mov	r2, r9
 80064d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064d8:	9805      	ldr	r0, [sp, #20]
 80064da:	f7ff fa35 	bl	8005948 <__mdiff>
 80064de:	4604      	mov	r4, r0
 80064e0:	2800      	cmp	r0, #0
 80064e2:	f43f ae38 	beq.w	8006156 <_strtod_l+0x436>
 80064e6:	68c3      	ldr	r3, [r0, #12]
 80064e8:	4641      	mov	r1, r8
 80064ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80064ec:	2300      	movs	r3, #0
 80064ee:	60c3      	str	r3, [r0, #12]
 80064f0:	f7ff fa0e 	bl	8005910 <__mcmp>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	da45      	bge.n	8006584 <_strtod_l+0x864>
 80064f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064fa:	ea53 030a 	orrs.w	r3, r3, sl
 80064fe:	d16b      	bne.n	80065d8 <_strtod_l+0x8b8>
 8006500:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006504:	2b00      	cmp	r3, #0
 8006506:	d167      	bne.n	80065d8 <_strtod_l+0x8b8>
 8006508:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800650c:	0d1b      	lsrs	r3, r3, #20
 800650e:	051b      	lsls	r3, r3, #20
 8006510:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006514:	d960      	bls.n	80065d8 <_strtod_l+0x8b8>
 8006516:	6963      	ldr	r3, [r4, #20]
 8006518:	b913      	cbnz	r3, 8006520 <_strtod_l+0x800>
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	2b01      	cmp	r3, #1
 800651e:	dd5b      	ble.n	80065d8 <_strtod_l+0x8b8>
 8006520:	4621      	mov	r1, r4
 8006522:	2201      	movs	r2, #1
 8006524:	9805      	ldr	r0, [sp, #20]
 8006526:	f7ff f987 	bl	8005838 <__lshift>
 800652a:	4641      	mov	r1, r8
 800652c:	4604      	mov	r4, r0
 800652e:	f7ff f9ef 	bl	8005910 <__mcmp>
 8006532:	2800      	cmp	r0, #0
 8006534:	dd50      	ble.n	80065d8 <_strtod_l+0x8b8>
 8006536:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800653a:	9a08      	ldr	r2, [sp, #32]
 800653c:	0d1b      	lsrs	r3, r3, #20
 800653e:	051b      	lsls	r3, r3, #20
 8006540:	2a00      	cmp	r2, #0
 8006542:	d06a      	beq.n	800661a <_strtod_l+0x8fa>
 8006544:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006548:	d867      	bhi.n	800661a <_strtod_l+0x8fa>
 800654a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800654e:	f67f ae98 	bls.w	8006282 <_strtod_l+0x562>
 8006552:	4650      	mov	r0, sl
 8006554:	4659      	mov	r1, fp
 8006556:	4b09      	ldr	r3, [pc, #36]	@ (800657c <_strtod_l+0x85c>)
 8006558:	2200      	movs	r2, #0
 800655a:	f7f9 ffbd 	bl	80004d8 <__aeabi_dmul>
 800655e:	4b08      	ldr	r3, [pc, #32]	@ (8006580 <_strtod_l+0x860>)
 8006560:	4682      	mov	sl, r0
 8006562:	400b      	ands	r3, r1
 8006564:	468b      	mov	fp, r1
 8006566:	2b00      	cmp	r3, #0
 8006568:	f47f ae00 	bne.w	800616c <_strtod_l+0x44c>
 800656c:	2322      	movs	r3, #34	@ 0x22
 800656e:	9a05      	ldr	r2, [sp, #20]
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	e5fb      	b.n	800616c <_strtod_l+0x44c>
 8006574:	080091b8 	.word	0x080091b8
 8006578:	fffffc02 	.word	0xfffffc02
 800657c:	39500000 	.word	0x39500000
 8006580:	7ff00000 	.word	0x7ff00000
 8006584:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006588:	d165      	bne.n	8006656 <_strtod_l+0x936>
 800658a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800658c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006590:	b35a      	cbz	r2, 80065ea <_strtod_l+0x8ca>
 8006592:	4a99      	ldr	r2, [pc, #612]	@ (80067f8 <_strtod_l+0xad8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d12b      	bne.n	80065f0 <_strtod_l+0x8d0>
 8006598:	9b08      	ldr	r3, [sp, #32]
 800659a:	4651      	mov	r1, sl
 800659c:	b303      	cbz	r3, 80065e0 <_strtod_l+0x8c0>
 800659e:	465a      	mov	r2, fp
 80065a0:	4b96      	ldr	r3, [pc, #600]	@ (80067fc <_strtod_l+0xadc>)
 80065a2:	4013      	ands	r3, r2
 80065a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80065a8:	f04f 32ff 	mov.w	r2, #4294967295
 80065ac:	d81b      	bhi.n	80065e6 <_strtod_l+0x8c6>
 80065ae:	0d1b      	lsrs	r3, r3, #20
 80065b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	4299      	cmp	r1, r3
 80065ba:	d119      	bne.n	80065f0 <_strtod_l+0x8d0>
 80065bc:	4b90      	ldr	r3, [pc, #576]	@ (8006800 <_strtod_l+0xae0>)
 80065be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d102      	bne.n	80065ca <_strtod_l+0x8aa>
 80065c4:	3101      	adds	r1, #1
 80065c6:	f43f adc6 	beq.w	8006156 <_strtod_l+0x436>
 80065ca:	f04f 0a00 	mov.w	sl, #0
 80065ce:	4b8b      	ldr	r3, [pc, #556]	@ (80067fc <_strtod_l+0xadc>)
 80065d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065d2:	401a      	ands	r2, r3
 80065d4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80065d8:	9b08      	ldr	r3, [sp, #32]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1b9      	bne.n	8006552 <_strtod_l+0x832>
 80065de:	e5c5      	b.n	800616c <_strtod_l+0x44c>
 80065e0:	f04f 33ff 	mov.w	r3, #4294967295
 80065e4:	e7e8      	b.n	80065b8 <_strtod_l+0x898>
 80065e6:	4613      	mov	r3, r2
 80065e8:	e7e6      	b.n	80065b8 <_strtod_l+0x898>
 80065ea:	ea53 030a 	orrs.w	r3, r3, sl
 80065ee:	d0a2      	beq.n	8006536 <_strtod_l+0x816>
 80065f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80065f2:	b1db      	cbz	r3, 800662c <_strtod_l+0x90c>
 80065f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065f6:	4213      	tst	r3, r2
 80065f8:	d0ee      	beq.n	80065d8 <_strtod_l+0x8b8>
 80065fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065fc:	4650      	mov	r0, sl
 80065fe:	4659      	mov	r1, fp
 8006600:	9a08      	ldr	r2, [sp, #32]
 8006602:	b1bb      	cbz	r3, 8006634 <_strtod_l+0x914>
 8006604:	f7ff fb68 	bl	8005cd8 <sulp>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006610:	f7f9 fdac 	bl	800016c <__adddf3>
 8006614:	4682      	mov	sl, r0
 8006616:	468b      	mov	fp, r1
 8006618:	e7de      	b.n	80065d8 <_strtod_l+0x8b8>
 800661a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800661e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006622:	f04f 3aff 	mov.w	sl, #4294967295
 8006626:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800662a:	e7d5      	b.n	80065d8 <_strtod_l+0x8b8>
 800662c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800662e:	ea13 0f0a 	tst.w	r3, sl
 8006632:	e7e1      	b.n	80065f8 <_strtod_l+0x8d8>
 8006634:	f7ff fb50 	bl	8005cd8 <sulp>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006640:	f7f9 fd92 	bl	8000168 <__aeabi_dsub>
 8006644:	2200      	movs	r2, #0
 8006646:	2300      	movs	r3, #0
 8006648:	4682      	mov	sl, r0
 800664a:	468b      	mov	fp, r1
 800664c:	f7fa f9ac 	bl	80009a8 <__aeabi_dcmpeq>
 8006650:	2800      	cmp	r0, #0
 8006652:	d0c1      	beq.n	80065d8 <_strtod_l+0x8b8>
 8006654:	e615      	b.n	8006282 <_strtod_l+0x562>
 8006656:	4641      	mov	r1, r8
 8006658:	4620      	mov	r0, r4
 800665a:	f7ff fac9 	bl	8005bf0 <__ratio>
 800665e:	2200      	movs	r2, #0
 8006660:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006664:	4606      	mov	r6, r0
 8006666:	460f      	mov	r7, r1
 8006668:	f7fa f9b2 	bl	80009d0 <__aeabi_dcmple>
 800666c:	2800      	cmp	r0, #0
 800666e:	d06d      	beq.n	800674c <_strtod_l+0xa2c>
 8006670:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d178      	bne.n	8006768 <_strtod_l+0xa48>
 8006676:	f1ba 0f00 	cmp.w	sl, #0
 800667a:	d156      	bne.n	800672a <_strtod_l+0xa0a>
 800667c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800667e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006682:	2b00      	cmp	r3, #0
 8006684:	d158      	bne.n	8006738 <_strtod_l+0xa18>
 8006686:	2200      	movs	r2, #0
 8006688:	4630      	mov	r0, r6
 800668a:	4639      	mov	r1, r7
 800668c:	4b5d      	ldr	r3, [pc, #372]	@ (8006804 <_strtod_l+0xae4>)
 800668e:	f7fa f995 	bl	80009bc <__aeabi_dcmplt>
 8006692:	2800      	cmp	r0, #0
 8006694:	d157      	bne.n	8006746 <_strtod_l+0xa26>
 8006696:	4630      	mov	r0, r6
 8006698:	4639      	mov	r1, r7
 800669a:	2200      	movs	r2, #0
 800669c:	4b5a      	ldr	r3, [pc, #360]	@ (8006808 <_strtod_l+0xae8>)
 800669e:	f7f9 ff1b 	bl	80004d8 <__aeabi_dmul>
 80066a2:	4606      	mov	r6, r0
 80066a4:	460f      	mov	r7, r1
 80066a6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80066aa:	9606      	str	r6, [sp, #24]
 80066ac:	9307      	str	r3, [sp, #28]
 80066ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066b2:	4d52      	ldr	r5, [pc, #328]	@ (80067fc <_strtod_l+0xadc>)
 80066b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80066b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066ba:	401d      	ands	r5, r3
 80066bc:	4b53      	ldr	r3, [pc, #332]	@ (800680c <_strtod_l+0xaec>)
 80066be:	429d      	cmp	r5, r3
 80066c0:	f040 80aa 	bne.w	8006818 <_strtod_l+0xaf8>
 80066c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066c6:	4650      	mov	r0, sl
 80066c8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80066cc:	4659      	mov	r1, fp
 80066ce:	f7ff f9cf 	bl	8005a70 <__ulp>
 80066d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066d6:	f7f9 feff 	bl	80004d8 <__aeabi_dmul>
 80066da:	4652      	mov	r2, sl
 80066dc:	465b      	mov	r3, fp
 80066de:	f7f9 fd45 	bl	800016c <__adddf3>
 80066e2:	460b      	mov	r3, r1
 80066e4:	4945      	ldr	r1, [pc, #276]	@ (80067fc <_strtod_l+0xadc>)
 80066e6:	4a4a      	ldr	r2, [pc, #296]	@ (8006810 <_strtod_l+0xaf0>)
 80066e8:	4019      	ands	r1, r3
 80066ea:	4291      	cmp	r1, r2
 80066ec:	4682      	mov	sl, r0
 80066ee:	d942      	bls.n	8006776 <_strtod_l+0xa56>
 80066f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80066f2:	4b43      	ldr	r3, [pc, #268]	@ (8006800 <_strtod_l+0xae0>)
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d103      	bne.n	8006700 <_strtod_l+0x9e0>
 80066f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066fa:	3301      	adds	r3, #1
 80066fc:	f43f ad2b 	beq.w	8006156 <_strtod_l+0x436>
 8006700:	f04f 3aff 	mov.w	sl, #4294967295
 8006704:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006800 <_strtod_l+0xae0>
 8006708:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800670a:	9805      	ldr	r0, [sp, #20]
 800670c:	f7fe fe7e 	bl	800540c <_Bfree>
 8006710:	4649      	mov	r1, r9
 8006712:	9805      	ldr	r0, [sp, #20]
 8006714:	f7fe fe7a 	bl	800540c <_Bfree>
 8006718:	4641      	mov	r1, r8
 800671a:	9805      	ldr	r0, [sp, #20]
 800671c:	f7fe fe76 	bl	800540c <_Bfree>
 8006720:	4621      	mov	r1, r4
 8006722:	9805      	ldr	r0, [sp, #20]
 8006724:	f7fe fe72 	bl	800540c <_Bfree>
 8006728:	e618      	b.n	800635c <_strtod_l+0x63c>
 800672a:	f1ba 0f01 	cmp.w	sl, #1
 800672e:	d103      	bne.n	8006738 <_strtod_l+0xa18>
 8006730:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006732:	2b00      	cmp	r3, #0
 8006734:	f43f ada5 	beq.w	8006282 <_strtod_l+0x562>
 8006738:	2200      	movs	r2, #0
 800673a:	4b36      	ldr	r3, [pc, #216]	@ (8006814 <_strtod_l+0xaf4>)
 800673c:	2600      	movs	r6, #0
 800673e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006742:	4f30      	ldr	r7, [pc, #192]	@ (8006804 <_strtod_l+0xae4>)
 8006744:	e7b3      	b.n	80066ae <_strtod_l+0x98e>
 8006746:	2600      	movs	r6, #0
 8006748:	4f2f      	ldr	r7, [pc, #188]	@ (8006808 <_strtod_l+0xae8>)
 800674a:	e7ac      	b.n	80066a6 <_strtod_l+0x986>
 800674c:	4630      	mov	r0, r6
 800674e:	4639      	mov	r1, r7
 8006750:	4b2d      	ldr	r3, [pc, #180]	@ (8006808 <_strtod_l+0xae8>)
 8006752:	2200      	movs	r2, #0
 8006754:	f7f9 fec0 	bl	80004d8 <__aeabi_dmul>
 8006758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800675a:	4606      	mov	r6, r0
 800675c:	460f      	mov	r7, r1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0a1      	beq.n	80066a6 <_strtod_l+0x986>
 8006762:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006766:	e7a2      	b.n	80066ae <_strtod_l+0x98e>
 8006768:	2200      	movs	r2, #0
 800676a:	4b26      	ldr	r3, [pc, #152]	@ (8006804 <_strtod_l+0xae4>)
 800676c:	4616      	mov	r6, r2
 800676e:	461f      	mov	r7, r3
 8006770:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006774:	e79b      	b.n	80066ae <_strtod_l+0x98e>
 8006776:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800677a:	9b08      	ldr	r3, [sp, #32]
 800677c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1c1      	bne.n	8006708 <_strtod_l+0x9e8>
 8006784:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006788:	0d1b      	lsrs	r3, r3, #20
 800678a:	051b      	lsls	r3, r3, #20
 800678c:	429d      	cmp	r5, r3
 800678e:	d1bb      	bne.n	8006708 <_strtod_l+0x9e8>
 8006790:	4630      	mov	r0, r6
 8006792:	4639      	mov	r1, r7
 8006794:	f7fa fcd2 	bl	800113c <__aeabi_d2lz>
 8006798:	f7f9 fe70 	bl	800047c <__aeabi_l2d>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4630      	mov	r0, r6
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7f9 fce0 	bl	8000168 <__aeabi_dsub>
 80067a8:	460b      	mov	r3, r1
 80067aa:	4602      	mov	r2, r0
 80067ac:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80067b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80067b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067b6:	ea46 060a 	orr.w	r6, r6, sl
 80067ba:	431e      	orrs	r6, r3
 80067bc:	d069      	beq.n	8006892 <_strtod_l+0xb72>
 80067be:	a30a      	add	r3, pc, #40	@ (adr r3, 80067e8 <_strtod_l+0xac8>)
 80067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c4:	f7fa f8fa 	bl	80009bc <__aeabi_dcmplt>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f47f accf 	bne.w	800616c <_strtod_l+0x44c>
 80067ce:	a308      	add	r3, pc, #32	@ (adr r3, 80067f0 <_strtod_l+0xad0>)
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067d8:	f7fa f90e 	bl	80009f8 <__aeabi_dcmpgt>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d093      	beq.n	8006708 <_strtod_l+0x9e8>
 80067e0:	e4c4      	b.n	800616c <_strtod_l+0x44c>
 80067e2:	bf00      	nop
 80067e4:	f3af 8000 	nop.w
 80067e8:	94a03595 	.word	0x94a03595
 80067ec:	3fdfffff 	.word	0x3fdfffff
 80067f0:	35afe535 	.word	0x35afe535
 80067f4:	3fe00000 	.word	0x3fe00000
 80067f8:	000fffff 	.word	0x000fffff
 80067fc:	7ff00000 	.word	0x7ff00000
 8006800:	7fefffff 	.word	0x7fefffff
 8006804:	3ff00000 	.word	0x3ff00000
 8006808:	3fe00000 	.word	0x3fe00000
 800680c:	7fe00000 	.word	0x7fe00000
 8006810:	7c9fffff 	.word	0x7c9fffff
 8006814:	bff00000 	.word	0xbff00000
 8006818:	9b08      	ldr	r3, [sp, #32]
 800681a:	b323      	cbz	r3, 8006866 <_strtod_l+0xb46>
 800681c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006820:	d821      	bhi.n	8006866 <_strtod_l+0xb46>
 8006822:	a327      	add	r3, pc, #156	@ (adr r3, 80068c0 <_strtod_l+0xba0>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	4630      	mov	r0, r6
 800682a:	4639      	mov	r1, r7
 800682c:	f7fa f8d0 	bl	80009d0 <__aeabi_dcmple>
 8006830:	b1a0      	cbz	r0, 800685c <_strtod_l+0xb3c>
 8006832:	4639      	mov	r1, r7
 8006834:	4630      	mov	r0, r6
 8006836:	f7fa f927 	bl	8000a88 <__aeabi_d2uiz>
 800683a:	2801      	cmp	r0, #1
 800683c:	bf38      	it	cc
 800683e:	2001      	movcc	r0, #1
 8006840:	f7f9 fdd0 	bl	80003e4 <__aeabi_ui2d>
 8006844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006846:	4606      	mov	r6, r0
 8006848:	460f      	mov	r7, r1
 800684a:	b9fb      	cbnz	r3, 800688c <_strtod_l+0xb6c>
 800684c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006850:	9014      	str	r0, [sp, #80]	@ 0x50
 8006852:	9315      	str	r3, [sp, #84]	@ 0x54
 8006854:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006858:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800685c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800685e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006862:	1b5b      	subs	r3, r3, r5
 8006864:	9311      	str	r3, [sp, #68]	@ 0x44
 8006866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800686a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800686e:	f7ff f8ff 	bl	8005a70 <__ulp>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	4650      	mov	r0, sl
 8006878:	4659      	mov	r1, fp
 800687a:	f7f9 fe2d 	bl	80004d8 <__aeabi_dmul>
 800687e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006882:	f7f9 fc73 	bl	800016c <__adddf3>
 8006886:	4682      	mov	sl, r0
 8006888:	468b      	mov	fp, r1
 800688a:	e776      	b.n	800677a <_strtod_l+0xa5a>
 800688c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006890:	e7e0      	b.n	8006854 <_strtod_l+0xb34>
 8006892:	a30d      	add	r3, pc, #52	@ (adr r3, 80068c8 <_strtod_l+0xba8>)
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f7fa f890 	bl	80009bc <__aeabi_dcmplt>
 800689c:	e79e      	b.n	80067dc <_strtod_l+0xabc>
 800689e:	2300      	movs	r3, #0
 80068a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068a4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	f7ff ba77 	b.w	8005d9a <_strtod_l+0x7a>
 80068ac:	2a65      	cmp	r2, #101	@ 0x65
 80068ae:	f43f ab6e 	beq.w	8005f8e <_strtod_l+0x26e>
 80068b2:	2a45      	cmp	r2, #69	@ 0x45
 80068b4:	f43f ab6b 	beq.w	8005f8e <_strtod_l+0x26e>
 80068b8:	2301      	movs	r3, #1
 80068ba:	f7ff bba6 	b.w	800600a <_strtod_l+0x2ea>
 80068be:	bf00      	nop
 80068c0:	ffc00000 	.word	0xffc00000
 80068c4:	41dfffff 	.word	0x41dfffff
 80068c8:	94a03595 	.word	0x94a03595
 80068cc:	3fcfffff 	.word	0x3fcfffff

080068d0 <_strtod_r>:
 80068d0:	4b01      	ldr	r3, [pc, #4]	@ (80068d8 <_strtod_r+0x8>)
 80068d2:	f7ff ba25 	b.w	8005d20 <_strtod_l>
 80068d6:	bf00      	nop
 80068d8:	2000008c 	.word	0x2000008c

080068dc <_strtol_l.constprop.0>:
 80068dc:	2b24      	cmp	r3, #36	@ 0x24
 80068de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e2:	4686      	mov	lr, r0
 80068e4:	4690      	mov	r8, r2
 80068e6:	d801      	bhi.n	80068ec <_strtol_l.constprop.0+0x10>
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d106      	bne.n	80068fa <_strtol_l.constprop.0+0x1e>
 80068ec:	f7fd fdb0 	bl	8004450 <__errno>
 80068f0:	2316      	movs	r3, #22
 80068f2:	6003      	str	r3, [r0, #0]
 80068f4:	2000      	movs	r0, #0
 80068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fa:	460d      	mov	r5, r1
 80068fc:	4833      	ldr	r0, [pc, #204]	@ (80069cc <_strtol_l.constprop.0+0xf0>)
 80068fe:	462a      	mov	r2, r5
 8006900:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006904:	5d06      	ldrb	r6, [r0, r4]
 8006906:	f016 0608 	ands.w	r6, r6, #8
 800690a:	d1f8      	bne.n	80068fe <_strtol_l.constprop.0+0x22>
 800690c:	2c2d      	cmp	r4, #45	@ 0x2d
 800690e:	d12d      	bne.n	800696c <_strtol_l.constprop.0+0x90>
 8006910:	2601      	movs	r6, #1
 8006912:	782c      	ldrb	r4, [r5, #0]
 8006914:	1c95      	adds	r5, r2, #2
 8006916:	f033 0210 	bics.w	r2, r3, #16
 800691a:	d109      	bne.n	8006930 <_strtol_l.constprop.0+0x54>
 800691c:	2c30      	cmp	r4, #48	@ 0x30
 800691e:	d12a      	bne.n	8006976 <_strtol_l.constprop.0+0x9a>
 8006920:	782a      	ldrb	r2, [r5, #0]
 8006922:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006926:	2a58      	cmp	r2, #88	@ 0x58
 8006928:	d125      	bne.n	8006976 <_strtol_l.constprop.0+0x9a>
 800692a:	2310      	movs	r3, #16
 800692c:	786c      	ldrb	r4, [r5, #1]
 800692e:	3502      	adds	r5, #2
 8006930:	2200      	movs	r2, #0
 8006932:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006936:	f10c 3cff 	add.w	ip, ip, #4294967295
 800693a:	fbbc f9f3 	udiv	r9, ip, r3
 800693e:	4610      	mov	r0, r2
 8006940:	fb03 ca19 	mls	sl, r3, r9, ip
 8006944:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006948:	2f09      	cmp	r7, #9
 800694a:	d81b      	bhi.n	8006984 <_strtol_l.constprop.0+0xa8>
 800694c:	463c      	mov	r4, r7
 800694e:	42a3      	cmp	r3, r4
 8006950:	dd27      	ble.n	80069a2 <_strtol_l.constprop.0+0xc6>
 8006952:	1c57      	adds	r7, r2, #1
 8006954:	d007      	beq.n	8006966 <_strtol_l.constprop.0+0x8a>
 8006956:	4581      	cmp	r9, r0
 8006958:	d320      	bcc.n	800699c <_strtol_l.constprop.0+0xc0>
 800695a:	d101      	bne.n	8006960 <_strtol_l.constprop.0+0x84>
 800695c:	45a2      	cmp	sl, r4
 800695e:	db1d      	blt.n	800699c <_strtol_l.constprop.0+0xc0>
 8006960:	2201      	movs	r2, #1
 8006962:	fb00 4003 	mla	r0, r0, r3, r4
 8006966:	f815 4b01 	ldrb.w	r4, [r5], #1
 800696a:	e7eb      	b.n	8006944 <_strtol_l.constprop.0+0x68>
 800696c:	2c2b      	cmp	r4, #43	@ 0x2b
 800696e:	bf04      	itt	eq
 8006970:	782c      	ldrbeq	r4, [r5, #0]
 8006972:	1c95      	addeq	r5, r2, #2
 8006974:	e7cf      	b.n	8006916 <_strtol_l.constprop.0+0x3a>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1da      	bne.n	8006930 <_strtol_l.constprop.0+0x54>
 800697a:	2c30      	cmp	r4, #48	@ 0x30
 800697c:	bf0c      	ite	eq
 800697e:	2308      	moveq	r3, #8
 8006980:	230a      	movne	r3, #10
 8006982:	e7d5      	b.n	8006930 <_strtol_l.constprop.0+0x54>
 8006984:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006988:	2f19      	cmp	r7, #25
 800698a:	d801      	bhi.n	8006990 <_strtol_l.constprop.0+0xb4>
 800698c:	3c37      	subs	r4, #55	@ 0x37
 800698e:	e7de      	b.n	800694e <_strtol_l.constprop.0+0x72>
 8006990:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006994:	2f19      	cmp	r7, #25
 8006996:	d804      	bhi.n	80069a2 <_strtol_l.constprop.0+0xc6>
 8006998:	3c57      	subs	r4, #87	@ 0x57
 800699a:	e7d8      	b.n	800694e <_strtol_l.constprop.0+0x72>
 800699c:	f04f 32ff 	mov.w	r2, #4294967295
 80069a0:	e7e1      	b.n	8006966 <_strtol_l.constprop.0+0x8a>
 80069a2:	1c53      	adds	r3, r2, #1
 80069a4:	d108      	bne.n	80069b8 <_strtol_l.constprop.0+0xdc>
 80069a6:	2322      	movs	r3, #34	@ 0x22
 80069a8:	4660      	mov	r0, ip
 80069aa:	f8ce 3000 	str.w	r3, [lr]
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	d0a0      	beq.n	80068f6 <_strtol_l.constprop.0+0x1a>
 80069b4:	1e69      	subs	r1, r5, #1
 80069b6:	e006      	b.n	80069c6 <_strtol_l.constprop.0+0xea>
 80069b8:	b106      	cbz	r6, 80069bc <_strtol_l.constprop.0+0xe0>
 80069ba:	4240      	negs	r0, r0
 80069bc:	f1b8 0f00 	cmp.w	r8, #0
 80069c0:	d099      	beq.n	80068f6 <_strtol_l.constprop.0+0x1a>
 80069c2:	2a00      	cmp	r2, #0
 80069c4:	d1f6      	bne.n	80069b4 <_strtol_l.constprop.0+0xd8>
 80069c6:	f8c8 1000 	str.w	r1, [r8]
 80069ca:	e794      	b.n	80068f6 <_strtol_l.constprop.0+0x1a>
 80069cc:	080091e1 	.word	0x080091e1

080069d0 <_strtol_r>:
 80069d0:	f7ff bf84 	b.w	80068dc <_strtol_l.constprop.0>

080069d4 <__ssputs_r>:
 80069d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d8:	461f      	mov	r7, r3
 80069da:	688e      	ldr	r6, [r1, #8]
 80069dc:	4682      	mov	sl, r0
 80069de:	42be      	cmp	r6, r7
 80069e0:	460c      	mov	r4, r1
 80069e2:	4690      	mov	r8, r2
 80069e4:	680b      	ldr	r3, [r1, #0]
 80069e6:	d82d      	bhi.n	8006a44 <__ssputs_r+0x70>
 80069e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80069f0:	d026      	beq.n	8006a40 <__ssputs_r+0x6c>
 80069f2:	6965      	ldr	r5, [r4, #20]
 80069f4:	6909      	ldr	r1, [r1, #16]
 80069f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069fa:	eba3 0901 	sub.w	r9, r3, r1
 80069fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a02:	1c7b      	adds	r3, r7, #1
 8006a04:	444b      	add	r3, r9
 8006a06:	106d      	asrs	r5, r5, #1
 8006a08:	429d      	cmp	r5, r3
 8006a0a:	bf38      	it	cc
 8006a0c:	461d      	movcc	r5, r3
 8006a0e:	0553      	lsls	r3, r2, #21
 8006a10:	d527      	bpl.n	8006a62 <__ssputs_r+0x8e>
 8006a12:	4629      	mov	r1, r5
 8006a14:	f7fe fc2e 	bl	8005274 <_malloc_r>
 8006a18:	4606      	mov	r6, r0
 8006a1a:	b360      	cbz	r0, 8006a76 <__ssputs_r+0xa2>
 8006a1c:	464a      	mov	r2, r9
 8006a1e:	6921      	ldr	r1, [r4, #16]
 8006a20:	f7fd fd51 	bl	80044c6 <memcpy>
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	6126      	str	r6, [r4, #16]
 8006a32:	444e      	add	r6, r9
 8006a34:	6026      	str	r6, [r4, #0]
 8006a36:	463e      	mov	r6, r7
 8006a38:	6165      	str	r5, [r4, #20]
 8006a3a:	eba5 0509 	sub.w	r5, r5, r9
 8006a3e:	60a5      	str	r5, [r4, #8]
 8006a40:	42be      	cmp	r6, r7
 8006a42:	d900      	bls.n	8006a46 <__ssputs_r+0x72>
 8006a44:	463e      	mov	r6, r7
 8006a46:	4632      	mov	r2, r6
 8006a48:	4641      	mov	r1, r8
 8006a4a:	6820      	ldr	r0, [r4, #0]
 8006a4c:	f000 fb63 	bl	8007116 <memmove>
 8006a50:	2000      	movs	r0, #0
 8006a52:	68a3      	ldr	r3, [r4, #8]
 8006a54:	1b9b      	subs	r3, r3, r6
 8006a56:	60a3      	str	r3, [r4, #8]
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	4433      	add	r3, r6
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a62:	462a      	mov	r2, r5
 8006a64:	f000 ff39 	bl	80078da <_realloc_r>
 8006a68:	4606      	mov	r6, r0
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d1e0      	bne.n	8006a30 <__ssputs_r+0x5c>
 8006a6e:	4650      	mov	r0, sl
 8006a70:	6921      	ldr	r1, [r4, #16]
 8006a72:	f7fe fb8d 	bl	8005190 <_free_r>
 8006a76:	230c      	movs	r3, #12
 8006a78:	f8ca 3000 	str.w	r3, [sl]
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a86:	81a3      	strh	r3, [r4, #12]
 8006a88:	e7e9      	b.n	8006a5e <__ssputs_r+0x8a>
	...

08006a8c <_svfiprintf_r>:
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	4698      	mov	r8, r3
 8006a92:	898b      	ldrh	r3, [r1, #12]
 8006a94:	4607      	mov	r7, r0
 8006a96:	061b      	lsls	r3, r3, #24
 8006a98:	460d      	mov	r5, r1
 8006a9a:	4614      	mov	r4, r2
 8006a9c:	b09d      	sub	sp, #116	@ 0x74
 8006a9e:	d510      	bpl.n	8006ac2 <_svfiprintf_r+0x36>
 8006aa0:	690b      	ldr	r3, [r1, #16]
 8006aa2:	b973      	cbnz	r3, 8006ac2 <_svfiprintf_r+0x36>
 8006aa4:	2140      	movs	r1, #64	@ 0x40
 8006aa6:	f7fe fbe5 	bl	8005274 <_malloc_r>
 8006aaa:	6028      	str	r0, [r5, #0]
 8006aac:	6128      	str	r0, [r5, #16]
 8006aae:	b930      	cbnz	r0, 8006abe <_svfiprintf_r+0x32>
 8006ab0:	230c      	movs	r3, #12
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	b01d      	add	sp, #116	@ 0x74
 8006aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abe:	2340      	movs	r3, #64	@ 0x40
 8006ac0:	616b      	str	r3, [r5, #20]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ac6:	2320      	movs	r3, #32
 8006ac8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006acc:	2330      	movs	r3, #48	@ 0x30
 8006ace:	f04f 0901 	mov.w	r9, #1
 8006ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ad6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006c70 <_svfiprintf_r+0x1e4>
 8006ada:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ade:	4623      	mov	r3, r4
 8006ae0:	469a      	mov	sl, r3
 8006ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ae6:	b10a      	cbz	r2, 8006aec <_svfiprintf_r+0x60>
 8006ae8:	2a25      	cmp	r2, #37	@ 0x25
 8006aea:	d1f9      	bne.n	8006ae0 <_svfiprintf_r+0x54>
 8006aec:	ebba 0b04 	subs.w	fp, sl, r4
 8006af0:	d00b      	beq.n	8006b0a <_svfiprintf_r+0x7e>
 8006af2:	465b      	mov	r3, fp
 8006af4:	4622      	mov	r2, r4
 8006af6:	4629      	mov	r1, r5
 8006af8:	4638      	mov	r0, r7
 8006afa:	f7ff ff6b 	bl	80069d4 <__ssputs_r>
 8006afe:	3001      	adds	r0, #1
 8006b00:	f000 80a7 	beq.w	8006c52 <_svfiprintf_r+0x1c6>
 8006b04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b06:	445a      	add	r2, fp
 8006b08:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 809f 	beq.w	8006c52 <_svfiprintf_r+0x1c6>
 8006b14:	2300      	movs	r3, #0
 8006b16:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b1e:	f10a 0a01 	add.w	sl, sl, #1
 8006b22:	9304      	str	r3, [sp, #16]
 8006b24:	9307      	str	r3, [sp, #28]
 8006b26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b2c:	4654      	mov	r4, sl
 8006b2e:	2205      	movs	r2, #5
 8006b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b34:	484e      	ldr	r0, [pc, #312]	@ (8006c70 <_svfiprintf_r+0x1e4>)
 8006b36:	f7fd fcb8 	bl	80044aa <memchr>
 8006b3a:	9a04      	ldr	r2, [sp, #16]
 8006b3c:	b9d8      	cbnz	r0, 8006b76 <_svfiprintf_r+0xea>
 8006b3e:	06d0      	lsls	r0, r2, #27
 8006b40:	bf44      	itt	mi
 8006b42:	2320      	movmi	r3, #32
 8006b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b48:	0711      	lsls	r1, r2, #28
 8006b4a:	bf44      	itt	mi
 8006b4c:	232b      	movmi	r3, #43	@ 0x2b
 8006b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b52:	f89a 3000 	ldrb.w	r3, [sl]
 8006b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b58:	d015      	beq.n	8006b86 <_svfiprintf_r+0xfa>
 8006b5a:	4654      	mov	r4, sl
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	f04f 0c0a 	mov.w	ip, #10
 8006b62:	9a07      	ldr	r2, [sp, #28]
 8006b64:	4621      	mov	r1, r4
 8006b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b6a:	3b30      	subs	r3, #48	@ 0x30
 8006b6c:	2b09      	cmp	r3, #9
 8006b6e:	d94b      	bls.n	8006c08 <_svfiprintf_r+0x17c>
 8006b70:	b1b0      	cbz	r0, 8006ba0 <_svfiprintf_r+0x114>
 8006b72:	9207      	str	r2, [sp, #28]
 8006b74:	e014      	b.n	8006ba0 <_svfiprintf_r+0x114>
 8006b76:	eba0 0308 	sub.w	r3, r0, r8
 8006b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	46a2      	mov	sl, r4
 8006b82:	9304      	str	r3, [sp, #16]
 8006b84:	e7d2      	b.n	8006b2c <_svfiprintf_r+0xa0>
 8006b86:	9b03      	ldr	r3, [sp, #12]
 8006b88:	1d19      	adds	r1, r3, #4
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	9103      	str	r1, [sp, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bfbb      	ittet	lt
 8006b92:	425b      	neglt	r3, r3
 8006b94:	f042 0202 	orrlt.w	r2, r2, #2
 8006b98:	9307      	strge	r3, [sp, #28]
 8006b9a:	9307      	strlt	r3, [sp, #28]
 8006b9c:	bfb8      	it	lt
 8006b9e:	9204      	strlt	r2, [sp, #16]
 8006ba0:	7823      	ldrb	r3, [r4, #0]
 8006ba2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ba4:	d10a      	bne.n	8006bbc <_svfiprintf_r+0x130>
 8006ba6:	7863      	ldrb	r3, [r4, #1]
 8006ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006baa:	d132      	bne.n	8006c12 <_svfiprintf_r+0x186>
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	3402      	adds	r4, #2
 8006bb0:	1d1a      	adds	r2, r3, #4
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	9203      	str	r2, [sp, #12]
 8006bb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bba:	9305      	str	r3, [sp, #20]
 8006bbc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006c74 <_svfiprintf_r+0x1e8>
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	4650      	mov	r0, sl
 8006bc4:	7821      	ldrb	r1, [r4, #0]
 8006bc6:	f7fd fc70 	bl	80044aa <memchr>
 8006bca:	b138      	cbz	r0, 8006bdc <_svfiprintf_r+0x150>
 8006bcc:	2240      	movs	r2, #64	@ 0x40
 8006bce:	9b04      	ldr	r3, [sp, #16]
 8006bd0:	eba0 000a 	sub.w	r0, r0, sl
 8006bd4:	4082      	lsls	r2, r0
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	3401      	adds	r4, #1
 8006bda:	9304      	str	r3, [sp, #16]
 8006bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be0:	2206      	movs	r2, #6
 8006be2:	4825      	ldr	r0, [pc, #148]	@ (8006c78 <_svfiprintf_r+0x1ec>)
 8006be4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006be8:	f7fd fc5f 	bl	80044aa <memchr>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d036      	beq.n	8006c5e <_svfiprintf_r+0x1d2>
 8006bf0:	4b22      	ldr	r3, [pc, #136]	@ (8006c7c <_svfiprintf_r+0x1f0>)
 8006bf2:	bb1b      	cbnz	r3, 8006c3c <_svfiprintf_r+0x1b0>
 8006bf4:	9b03      	ldr	r3, [sp, #12]
 8006bf6:	3307      	adds	r3, #7
 8006bf8:	f023 0307 	bic.w	r3, r3, #7
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	9303      	str	r3, [sp, #12]
 8006c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c02:	4433      	add	r3, r6
 8006c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c06:	e76a      	b.n	8006ade <_svfiprintf_r+0x52>
 8006c08:	460c      	mov	r4, r1
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c10:	e7a8      	b.n	8006b64 <_svfiprintf_r+0xd8>
 8006c12:	2300      	movs	r3, #0
 8006c14:	f04f 0c0a 	mov.w	ip, #10
 8006c18:	4619      	mov	r1, r3
 8006c1a:	3401      	adds	r4, #1
 8006c1c:	9305      	str	r3, [sp, #20]
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c24:	3a30      	subs	r2, #48	@ 0x30
 8006c26:	2a09      	cmp	r2, #9
 8006c28:	d903      	bls.n	8006c32 <_svfiprintf_r+0x1a6>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0c6      	beq.n	8006bbc <_svfiprintf_r+0x130>
 8006c2e:	9105      	str	r1, [sp, #20]
 8006c30:	e7c4      	b.n	8006bbc <_svfiprintf_r+0x130>
 8006c32:	4604      	mov	r4, r0
 8006c34:	2301      	movs	r3, #1
 8006c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c3a:	e7f0      	b.n	8006c1e <_svfiprintf_r+0x192>
 8006c3c:	ab03      	add	r3, sp, #12
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	462a      	mov	r2, r5
 8006c42:	4638      	mov	r0, r7
 8006c44:	4b0e      	ldr	r3, [pc, #56]	@ (8006c80 <_svfiprintf_r+0x1f4>)
 8006c46:	a904      	add	r1, sp, #16
 8006c48:	f7fc fbb8 	bl	80033bc <_printf_float>
 8006c4c:	1c42      	adds	r2, r0, #1
 8006c4e:	4606      	mov	r6, r0
 8006c50:	d1d6      	bne.n	8006c00 <_svfiprintf_r+0x174>
 8006c52:	89ab      	ldrh	r3, [r5, #12]
 8006c54:	065b      	lsls	r3, r3, #25
 8006c56:	f53f af2d 	bmi.w	8006ab4 <_svfiprintf_r+0x28>
 8006c5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c5c:	e72c      	b.n	8006ab8 <_svfiprintf_r+0x2c>
 8006c5e:	ab03      	add	r3, sp, #12
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	462a      	mov	r2, r5
 8006c64:	4638      	mov	r0, r7
 8006c66:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <_svfiprintf_r+0x1f4>)
 8006c68:	a904      	add	r1, sp, #16
 8006c6a:	f7fc fe45 	bl	80038f8 <_printf_i>
 8006c6e:	e7ed      	b.n	8006c4c <_svfiprintf_r+0x1c0>
 8006c70:	080092e1 	.word	0x080092e1
 8006c74:	080092e7 	.word	0x080092e7
 8006c78:	080092eb 	.word	0x080092eb
 8006c7c:	080033bd 	.word	0x080033bd
 8006c80:	080069d5 	.word	0x080069d5

08006c84 <__sfputc_r>:
 8006c84:	6893      	ldr	r3, [r2, #8]
 8006c86:	b410      	push	{r4}
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	6093      	str	r3, [r2, #8]
 8006c8e:	da07      	bge.n	8006ca0 <__sfputc_r+0x1c>
 8006c90:	6994      	ldr	r4, [r2, #24]
 8006c92:	42a3      	cmp	r3, r4
 8006c94:	db01      	blt.n	8006c9a <__sfputc_r+0x16>
 8006c96:	290a      	cmp	r1, #10
 8006c98:	d102      	bne.n	8006ca0 <__sfputc_r+0x1c>
 8006c9a:	bc10      	pop	{r4}
 8006c9c:	f7fd baf1 	b.w	8004282 <__swbuf_r>
 8006ca0:	6813      	ldr	r3, [r2, #0]
 8006ca2:	1c58      	adds	r0, r3, #1
 8006ca4:	6010      	str	r0, [r2, #0]
 8006ca6:	7019      	strb	r1, [r3, #0]
 8006ca8:	4608      	mov	r0, r1
 8006caa:	bc10      	pop	{r4}
 8006cac:	4770      	bx	lr

08006cae <__sfputs_r>:
 8006cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	460f      	mov	r7, r1
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	18d5      	adds	r5, r2, r3
 8006cb8:	42ac      	cmp	r4, r5
 8006cba:	d101      	bne.n	8006cc0 <__sfputs_r+0x12>
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	e007      	b.n	8006cd0 <__sfputs_r+0x22>
 8006cc0:	463a      	mov	r2, r7
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc8:	f7ff ffdc 	bl	8006c84 <__sfputc_r>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d1f3      	bne.n	8006cb8 <__sfputs_r+0xa>
 8006cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cd4 <_vfiprintf_r>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	460d      	mov	r5, r1
 8006cda:	4614      	mov	r4, r2
 8006cdc:	4698      	mov	r8, r3
 8006cde:	4606      	mov	r6, r0
 8006ce0:	b09d      	sub	sp, #116	@ 0x74
 8006ce2:	b118      	cbz	r0, 8006cec <_vfiprintf_r+0x18>
 8006ce4:	6a03      	ldr	r3, [r0, #32]
 8006ce6:	b90b      	cbnz	r3, 8006cec <_vfiprintf_r+0x18>
 8006ce8:	f7fd f9c2 	bl	8004070 <__sinit>
 8006cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cee:	07d9      	lsls	r1, r3, #31
 8006cf0:	d405      	bmi.n	8006cfe <_vfiprintf_r+0x2a>
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	059a      	lsls	r2, r3, #22
 8006cf6:	d402      	bmi.n	8006cfe <_vfiprintf_r+0x2a>
 8006cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cfa:	f7fd fbd4 	bl	80044a6 <__retarget_lock_acquire_recursive>
 8006cfe:	89ab      	ldrh	r3, [r5, #12]
 8006d00:	071b      	lsls	r3, r3, #28
 8006d02:	d501      	bpl.n	8006d08 <_vfiprintf_r+0x34>
 8006d04:	692b      	ldr	r3, [r5, #16]
 8006d06:	b99b      	cbnz	r3, 8006d30 <_vfiprintf_r+0x5c>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7fd faf8 	bl	8004300 <__swsetup_r>
 8006d10:	b170      	cbz	r0, 8006d30 <_vfiprintf_r+0x5c>
 8006d12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d14:	07dc      	lsls	r4, r3, #31
 8006d16:	d504      	bpl.n	8006d22 <_vfiprintf_r+0x4e>
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1c:	b01d      	add	sp, #116	@ 0x74
 8006d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	0598      	lsls	r0, r3, #22
 8006d26:	d4f7      	bmi.n	8006d18 <_vfiprintf_r+0x44>
 8006d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d2a:	f7fd fbbd 	bl	80044a8 <__retarget_lock_release_recursive>
 8006d2e:	e7f3      	b.n	8006d18 <_vfiprintf_r+0x44>
 8006d30:	2300      	movs	r3, #0
 8006d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d34:	2320      	movs	r3, #32
 8006d36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d3a:	2330      	movs	r3, #48	@ 0x30
 8006d3c:	f04f 0901 	mov.w	r9, #1
 8006d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d44:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006ef0 <_vfiprintf_r+0x21c>
 8006d48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	469a      	mov	sl, r3
 8006d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d54:	b10a      	cbz	r2, 8006d5a <_vfiprintf_r+0x86>
 8006d56:	2a25      	cmp	r2, #37	@ 0x25
 8006d58:	d1f9      	bne.n	8006d4e <_vfiprintf_r+0x7a>
 8006d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d5e:	d00b      	beq.n	8006d78 <_vfiprintf_r+0xa4>
 8006d60:	465b      	mov	r3, fp
 8006d62:	4622      	mov	r2, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	4630      	mov	r0, r6
 8006d68:	f7ff ffa1 	bl	8006cae <__sfputs_r>
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	f000 80a7 	beq.w	8006ec0 <_vfiprintf_r+0x1ec>
 8006d72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d74:	445a      	add	r2, fp
 8006d76:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d78:	f89a 3000 	ldrb.w	r3, [sl]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 809f 	beq.w	8006ec0 <_vfiprintf_r+0x1ec>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f04f 32ff 	mov.w	r2, #4294967295
 8006d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d8c:	f10a 0a01 	add.w	sl, sl, #1
 8006d90:	9304      	str	r3, [sp, #16]
 8006d92:	9307      	str	r3, [sp, #28]
 8006d94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d98:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d9a:	4654      	mov	r4, sl
 8006d9c:	2205      	movs	r2, #5
 8006d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da2:	4853      	ldr	r0, [pc, #332]	@ (8006ef0 <_vfiprintf_r+0x21c>)
 8006da4:	f7fd fb81 	bl	80044aa <memchr>
 8006da8:	9a04      	ldr	r2, [sp, #16]
 8006daa:	b9d8      	cbnz	r0, 8006de4 <_vfiprintf_r+0x110>
 8006dac:	06d1      	lsls	r1, r2, #27
 8006dae:	bf44      	itt	mi
 8006db0:	2320      	movmi	r3, #32
 8006db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006db6:	0713      	lsls	r3, r2, #28
 8006db8:	bf44      	itt	mi
 8006dba:	232b      	movmi	r3, #43	@ 0x2b
 8006dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dc6:	d015      	beq.n	8006df4 <_vfiprintf_r+0x120>
 8006dc8:	4654      	mov	r4, sl
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f04f 0c0a 	mov.w	ip, #10
 8006dd0:	9a07      	ldr	r2, [sp, #28]
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dd8:	3b30      	subs	r3, #48	@ 0x30
 8006dda:	2b09      	cmp	r3, #9
 8006ddc:	d94b      	bls.n	8006e76 <_vfiprintf_r+0x1a2>
 8006dde:	b1b0      	cbz	r0, 8006e0e <_vfiprintf_r+0x13a>
 8006de0:	9207      	str	r2, [sp, #28]
 8006de2:	e014      	b.n	8006e0e <_vfiprintf_r+0x13a>
 8006de4:	eba0 0308 	sub.w	r3, r0, r8
 8006de8:	fa09 f303 	lsl.w	r3, r9, r3
 8006dec:	4313      	orrs	r3, r2
 8006dee:	46a2      	mov	sl, r4
 8006df0:	9304      	str	r3, [sp, #16]
 8006df2:	e7d2      	b.n	8006d9a <_vfiprintf_r+0xc6>
 8006df4:	9b03      	ldr	r3, [sp, #12]
 8006df6:	1d19      	adds	r1, r3, #4
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	9103      	str	r1, [sp, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bfbb      	ittet	lt
 8006e00:	425b      	neglt	r3, r3
 8006e02:	f042 0202 	orrlt.w	r2, r2, #2
 8006e06:	9307      	strge	r3, [sp, #28]
 8006e08:	9307      	strlt	r3, [sp, #28]
 8006e0a:	bfb8      	it	lt
 8006e0c:	9204      	strlt	r2, [sp, #16]
 8006e0e:	7823      	ldrb	r3, [r4, #0]
 8006e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e12:	d10a      	bne.n	8006e2a <_vfiprintf_r+0x156>
 8006e14:	7863      	ldrb	r3, [r4, #1]
 8006e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e18:	d132      	bne.n	8006e80 <_vfiprintf_r+0x1ac>
 8006e1a:	9b03      	ldr	r3, [sp, #12]
 8006e1c:	3402      	adds	r4, #2
 8006e1e:	1d1a      	adds	r2, r3, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	9203      	str	r2, [sp, #12]
 8006e24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e28:	9305      	str	r3, [sp, #20]
 8006e2a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006ef4 <_vfiprintf_r+0x220>
 8006e2e:	2203      	movs	r2, #3
 8006e30:	4650      	mov	r0, sl
 8006e32:	7821      	ldrb	r1, [r4, #0]
 8006e34:	f7fd fb39 	bl	80044aa <memchr>
 8006e38:	b138      	cbz	r0, 8006e4a <_vfiprintf_r+0x176>
 8006e3a:	2240      	movs	r2, #64	@ 0x40
 8006e3c:	9b04      	ldr	r3, [sp, #16]
 8006e3e:	eba0 000a 	sub.w	r0, r0, sl
 8006e42:	4082      	lsls	r2, r0
 8006e44:	4313      	orrs	r3, r2
 8006e46:	3401      	adds	r4, #1
 8006e48:	9304      	str	r3, [sp, #16]
 8006e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4e:	2206      	movs	r2, #6
 8006e50:	4829      	ldr	r0, [pc, #164]	@ (8006ef8 <_vfiprintf_r+0x224>)
 8006e52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e56:	f7fd fb28 	bl	80044aa <memchr>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d03f      	beq.n	8006ede <_vfiprintf_r+0x20a>
 8006e5e:	4b27      	ldr	r3, [pc, #156]	@ (8006efc <_vfiprintf_r+0x228>)
 8006e60:	bb1b      	cbnz	r3, 8006eaa <_vfiprintf_r+0x1d6>
 8006e62:	9b03      	ldr	r3, [sp, #12]
 8006e64:	3307      	adds	r3, #7
 8006e66:	f023 0307 	bic.w	r3, r3, #7
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	9303      	str	r3, [sp, #12]
 8006e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e70:	443b      	add	r3, r7
 8006e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e74:	e76a      	b.n	8006d4c <_vfiprintf_r+0x78>
 8006e76:	460c      	mov	r4, r1
 8006e78:	2001      	movs	r0, #1
 8006e7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e7e:	e7a8      	b.n	8006dd2 <_vfiprintf_r+0xfe>
 8006e80:	2300      	movs	r3, #0
 8006e82:	f04f 0c0a 	mov.w	ip, #10
 8006e86:	4619      	mov	r1, r3
 8006e88:	3401      	adds	r4, #1
 8006e8a:	9305      	str	r3, [sp, #20]
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e92:	3a30      	subs	r2, #48	@ 0x30
 8006e94:	2a09      	cmp	r2, #9
 8006e96:	d903      	bls.n	8006ea0 <_vfiprintf_r+0x1cc>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0c6      	beq.n	8006e2a <_vfiprintf_r+0x156>
 8006e9c:	9105      	str	r1, [sp, #20]
 8006e9e:	e7c4      	b.n	8006e2a <_vfiprintf_r+0x156>
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ea8:	e7f0      	b.n	8006e8c <_vfiprintf_r+0x1b8>
 8006eaa:	ab03      	add	r3, sp, #12
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	462a      	mov	r2, r5
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	4b13      	ldr	r3, [pc, #76]	@ (8006f00 <_vfiprintf_r+0x22c>)
 8006eb4:	a904      	add	r1, sp, #16
 8006eb6:	f7fc fa81 	bl	80033bc <_printf_float>
 8006eba:	4607      	mov	r7, r0
 8006ebc:	1c78      	adds	r0, r7, #1
 8006ebe:	d1d6      	bne.n	8006e6e <_vfiprintf_r+0x19a>
 8006ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ec2:	07d9      	lsls	r1, r3, #31
 8006ec4:	d405      	bmi.n	8006ed2 <_vfiprintf_r+0x1fe>
 8006ec6:	89ab      	ldrh	r3, [r5, #12]
 8006ec8:	059a      	lsls	r2, r3, #22
 8006eca:	d402      	bmi.n	8006ed2 <_vfiprintf_r+0x1fe>
 8006ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ece:	f7fd faeb 	bl	80044a8 <__retarget_lock_release_recursive>
 8006ed2:	89ab      	ldrh	r3, [r5, #12]
 8006ed4:	065b      	lsls	r3, r3, #25
 8006ed6:	f53f af1f 	bmi.w	8006d18 <_vfiprintf_r+0x44>
 8006eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006edc:	e71e      	b.n	8006d1c <_vfiprintf_r+0x48>
 8006ede:	ab03      	add	r3, sp, #12
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	462a      	mov	r2, r5
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <_vfiprintf_r+0x22c>)
 8006ee8:	a904      	add	r1, sp, #16
 8006eea:	f7fc fd05 	bl	80038f8 <_printf_i>
 8006eee:	e7e4      	b.n	8006eba <_vfiprintf_r+0x1e6>
 8006ef0:	080092e1 	.word	0x080092e1
 8006ef4:	080092e7 	.word	0x080092e7
 8006ef8:	080092eb 	.word	0x080092eb
 8006efc:	080033bd 	.word	0x080033bd
 8006f00:	08006caf 	.word	0x08006caf

08006f04 <__sflush_r>:
 8006f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	0716      	lsls	r6, r2, #28
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	d454      	bmi.n	8006fbc <__sflush_r+0xb8>
 8006f12:	684b      	ldr	r3, [r1, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	dc02      	bgt.n	8006f1e <__sflush_r+0x1a>
 8006f18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dd48      	ble.n	8006fb0 <__sflush_r+0xac>
 8006f1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f20:	2e00      	cmp	r6, #0
 8006f22:	d045      	beq.n	8006fb0 <__sflush_r+0xac>
 8006f24:	2300      	movs	r3, #0
 8006f26:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f2a:	682f      	ldr	r7, [r5, #0]
 8006f2c:	6a21      	ldr	r1, [r4, #32]
 8006f2e:	602b      	str	r3, [r5, #0]
 8006f30:	d030      	beq.n	8006f94 <__sflush_r+0x90>
 8006f32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f34:	89a3      	ldrh	r3, [r4, #12]
 8006f36:	0759      	lsls	r1, r3, #29
 8006f38:	d505      	bpl.n	8006f46 <__sflush_r+0x42>
 8006f3a:	6863      	ldr	r3, [r4, #4]
 8006f3c:	1ad2      	subs	r2, r2, r3
 8006f3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f40:	b10b      	cbz	r3, 8006f46 <__sflush_r+0x42>
 8006f42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f44:	1ad2      	subs	r2, r2, r3
 8006f46:	2300      	movs	r3, #0
 8006f48:	4628      	mov	r0, r5
 8006f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f4c:	6a21      	ldr	r1, [r4, #32]
 8006f4e:	47b0      	blx	r6
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	d106      	bne.n	8006f64 <__sflush_r+0x60>
 8006f56:	6829      	ldr	r1, [r5, #0]
 8006f58:	291d      	cmp	r1, #29
 8006f5a:	d82b      	bhi.n	8006fb4 <__sflush_r+0xb0>
 8006f5c:	4a28      	ldr	r2, [pc, #160]	@ (8007000 <__sflush_r+0xfc>)
 8006f5e:	410a      	asrs	r2, r1
 8006f60:	07d6      	lsls	r6, r2, #31
 8006f62:	d427      	bmi.n	8006fb4 <__sflush_r+0xb0>
 8006f64:	2200      	movs	r2, #0
 8006f66:	6062      	str	r2, [r4, #4]
 8006f68:	6922      	ldr	r2, [r4, #16]
 8006f6a:	04d9      	lsls	r1, r3, #19
 8006f6c:	6022      	str	r2, [r4, #0]
 8006f6e:	d504      	bpl.n	8006f7a <__sflush_r+0x76>
 8006f70:	1c42      	adds	r2, r0, #1
 8006f72:	d101      	bne.n	8006f78 <__sflush_r+0x74>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b903      	cbnz	r3, 8006f7a <__sflush_r+0x76>
 8006f78:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f7c:	602f      	str	r7, [r5, #0]
 8006f7e:	b1b9      	cbz	r1, 8006fb0 <__sflush_r+0xac>
 8006f80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f84:	4299      	cmp	r1, r3
 8006f86:	d002      	beq.n	8006f8e <__sflush_r+0x8a>
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f7fe f901 	bl	8005190 <_free_r>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f92:	e00d      	b.n	8006fb0 <__sflush_r+0xac>
 8006f94:	2301      	movs	r3, #1
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b0      	blx	r6
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	1c50      	adds	r0, r2, #1
 8006f9e:	d1c9      	bne.n	8006f34 <__sflush_r+0x30>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0c6      	beq.n	8006f34 <__sflush_r+0x30>
 8006fa6:	2b1d      	cmp	r3, #29
 8006fa8:	d001      	beq.n	8006fae <__sflush_r+0xaa>
 8006faa:	2b16      	cmp	r3, #22
 8006fac:	d11d      	bne.n	8006fea <__sflush_r+0xe6>
 8006fae:	602f      	str	r7, [r5, #0]
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	e021      	b.n	8006ff8 <__sflush_r+0xf4>
 8006fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fb8:	b21b      	sxth	r3, r3
 8006fba:	e01a      	b.n	8006ff2 <__sflush_r+0xee>
 8006fbc:	690f      	ldr	r7, [r1, #16]
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	d0f6      	beq.n	8006fb0 <__sflush_r+0xac>
 8006fc2:	0793      	lsls	r3, r2, #30
 8006fc4:	bf18      	it	ne
 8006fc6:	2300      	movne	r3, #0
 8006fc8:	680e      	ldr	r6, [r1, #0]
 8006fca:	bf08      	it	eq
 8006fcc:	694b      	ldreq	r3, [r1, #20]
 8006fce:	1bf6      	subs	r6, r6, r7
 8006fd0:	600f      	str	r7, [r1, #0]
 8006fd2:	608b      	str	r3, [r1, #8]
 8006fd4:	2e00      	cmp	r6, #0
 8006fd6:	ddeb      	ble.n	8006fb0 <__sflush_r+0xac>
 8006fd8:	4633      	mov	r3, r6
 8006fda:	463a      	mov	r2, r7
 8006fdc:	4628      	mov	r0, r5
 8006fde:	6a21      	ldr	r1, [r4, #32]
 8006fe0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006fe4:	47e0      	blx	ip
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	dc07      	bgt.n	8006ffa <__sflush_r+0xf6>
 8006fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff6:	81a3      	strh	r3, [r4, #12]
 8006ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffa:	4407      	add	r7, r0
 8006ffc:	1a36      	subs	r6, r6, r0
 8006ffe:	e7e9      	b.n	8006fd4 <__sflush_r+0xd0>
 8007000:	dfbffffe 	.word	0xdfbffffe

08007004 <_fflush_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	690b      	ldr	r3, [r1, #16]
 8007008:	4605      	mov	r5, r0
 800700a:	460c      	mov	r4, r1
 800700c:	b913      	cbnz	r3, 8007014 <_fflush_r+0x10>
 800700e:	2500      	movs	r5, #0
 8007010:	4628      	mov	r0, r5
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	b118      	cbz	r0, 800701e <_fflush_r+0x1a>
 8007016:	6a03      	ldr	r3, [r0, #32]
 8007018:	b90b      	cbnz	r3, 800701e <_fflush_r+0x1a>
 800701a:	f7fd f829 	bl	8004070 <__sinit>
 800701e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0f3      	beq.n	800700e <_fflush_r+0xa>
 8007026:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007028:	07d0      	lsls	r0, r2, #31
 800702a:	d404      	bmi.n	8007036 <_fflush_r+0x32>
 800702c:	0599      	lsls	r1, r3, #22
 800702e:	d402      	bmi.n	8007036 <_fflush_r+0x32>
 8007030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007032:	f7fd fa38 	bl	80044a6 <__retarget_lock_acquire_recursive>
 8007036:	4628      	mov	r0, r5
 8007038:	4621      	mov	r1, r4
 800703a:	f7ff ff63 	bl	8006f04 <__sflush_r>
 800703e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007040:	4605      	mov	r5, r0
 8007042:	07da      	lsls	r2, r3, #31
 8007044:	d4e4      	bmi.n	8007010 <_fflush_r+0xc>
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	059b      	lsls	r3, r3, #22
 800704a:	d4e1      	bmi.n	8007010 <_fflush_r+0xc>
 800704c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800704e:	f7fd fa2b 	bl	80044a8 <__retarget_lock_release_recursive>
 8007052:	e7dd      	b.n	8007010 <_fflush_r+0xc>

08007054 <__swhatbuf_r>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	460c      	mov	r4, r1
 8007058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705c:	4615      	mov	r5, r2
 800705e:	2900      	cmp	r1, #0
 8007060:	461e      	mov	r6, r3
 8007062:	b096      	sub	sp, #88	@ 0x58
 8007064:	da0c      	bge.n	8007080 <__swhatbuf_r+0x2c>
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	2100      	movs	r1, #0
 800706a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800706e:	bf14      	ite	ne
 8007070:	2340      	movne	r3, #64	@ 0x40
 8007072:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007076:	2000      	movs	r0, #0
 8007078:	6031      	str	r1, [r6, #0]
 800707a:	602b      	str	r3, [r5, #0]
 800707c:	b016      	add	sp, #88	@ 0x58
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	466a      	mov	r2, sp
 8007082:	f000 f875 	bl	8007170 <_fstat_r>
 8007086:	2800      	cmp	r0, #0
 8007088:	dbed      	blt.n	8007066 <__swhatbuf_r+0x12>
 800708a:	9901      	ldr	r1, [sp, #4]
 800708c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007090:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007094:	4259      	negs	r1, r3
 8007096:	4159      	adcs	r1, r3
 8007098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800709c:	e7eb      	b.n	8007076 <__swhatbuf_r+0x22>

0800709e <__smakebuf_r>:
 800709e:	898b      	ldrh	r3, [r1, #12]
 80070a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070a2:	079d      	lsls	r5, r3, #30
 80070a4:	4606      	mov	r6, r0
 80070a6:	460c      	mov	r4, r1
 80070a8:	d507      	bpl.n	80070ba <__smakebuf_r+0x1c>
 80070aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070ae:	6023      	str	r3, [r4, #0]
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	2301      	movs	r3, #1
 80070b4:	6163      	str	r3, [r4, #20]
 80070b6:	b003      	add	sp, #12
 80070b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ba:	466a      	mov	r2, sp
 80070bc:	ab01      	add	r3, sp, #4
 80070be:	f7ff ffc9 	bl	8007054 <__swhatbuf_r>
 80070c2:	9f00      	ldr	r7, [sp, #0]
 80070c4:	4605      	mov	r5, r0
 80070c6:	4639      	mov	r1, r7
 80070c8:	4630      	mov	r0, r6
 80070ca:	f7fe f8d3 	bl	8005274 <_malloc_r>
 80070ce:	b948      	cbnz	r0, 80070e4 <__smakebuf_r+0x46>
 80070d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d4:	059a      	lsls	r2, r3, #22
 80070d6:	d4ee      	bmi.n	80070b6 <__smakebuf_r+0x18>
 80070d8:	f023 0303 	bic.w	r3, r3, #3
 80070dc:	f043 0302 	orr.w	r3, r3, #2
 80070e0:	81a3      	strh	r3, [r4, #12]
 80070e2:	e7e2      	b.n	80070aa <__smakebuf_r+0xc>
 80070e4:	89a3      	ldrh	r3, [r4, #12]
 80070e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ee:	81a3      	strh	r3, [r4, #12]
 80070f0:	9b01      	ldr	r3, [sp, #4]
 80070f2:	6020      	str	r0, [r4, #0]
 80070f4:	b15b      	cbz	r3, 800710e <__smakebuf_r+0x70>
 80070f6:	4630      	mov	r0, r6
 80070f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070fc:	f000 f84a 	bl	8007194 <_isatty_r>
 8007100:	b128      	cbz	r0, 800710e <__smakebuf_r+0x70>
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	f023 0303 	bic.w	r3, r3, #3
 8007108:	f043 0301 	orr.w	r3, r3, #1
 800710c:	81a3      	strh	r3, [r4, #12]
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	431d      	orrs	r5, r3
 8007112:	81a5      	strh	r5, [r4, #12]
 8007114:	e7cf      	b.n	80070b6 <__smakebuf_r+0x18>

08007116 <memmove>:
 8007116:	4288      	cmp	r0, r1
 8007118:	b510      	push	{r4, lr}
 800711a:	eb01 0402 	add.w	r4, r1, r2
 800711e:	d902      	bls.n	8007126 <memmove+0x10>
 8007120:	4284      	cmp	r4, r0
 8007122:	4623      	mov	r3, r4
 8007124:	d807      	bhi.n	8007136 <memmove+0x20>
 8007126:	1e43      	subs	r3, r0, #1
 8007128:	42a1      	cmp	r1, r4
 800712a:	d008      	beq.n	800713e <memmove+0x28>
 800712c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007130:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007134:	e7f8      	b.n	8007128 <memmove+0x12>
 8007136:	4601      	mov	r1, r0
 8007138:	4402      	add	r2, r0
 800713a:	428a      	cmp	r2, r1
 800713c:	d100      	bne.n	8007140 <memmove+0x2a>
 800713e:	bd10      	pop	{r4, pc}
 8007140:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007144:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007148:	e7f7      	b.n	800713a <memmove+0x24>

0800714a <strncmp>:
 800714a:	b510      	push	{r4, lr}
 800714c:	b16a      	cbz	r2, 800716a <strncmp+0x20>
 800714e:	3901      	subs	r1, #1
 8007150:	1884      	adds	r4, r0, r2
 8007152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007156:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800715a:	429a      	cmp	r2, r3
 800715c:	d103      	bne.n	8007166 <strncmp+0x1c>
 800715e:	42a0      	cmp	r0, r4
 8007160:	d001      	beq.n	8007166 <strncmp+0x1c>
 8007162:	2a00      	cmp	r2, #0
 8007164:	d1f5      	bne.n	8007152 <strncmp+0x8>
 8007166:	1ad0      	subs	r0, r2, r3
 8007168:	bd10      	pop	{r4, pc}
 800716a:	4610      	mov	r0, r2
 800716c:	e7fc      	b.n	8007168 <strncmp+0x1e>
	...

08007170 <_fstat_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	2300      	movs	r3, #0
 8007174:	4d06      	ldr	r5, [pc, #24]	@ (8007190 <_fstat_r+0x20>)
 8007176:	4604      	mov	r4, r0
 8007178:	4608      	mov	r0, r1
 800717a:	4611      	mov	r1, r2
 800717c:	602b      	str	r3, [r5, #0]
 800717e:	f7fa f9f1 	bl	8001564 <_fstat>
 8007182:	1c43      	adds	r3, r0, #1
 8007184:	d102      	bne.n	800718c <_fstat_r+0x1c>
 8007186:	682b      	ldr	r3, [r5, #0]
 8007188:	b103      	cbz	r3, 800718c <_fstat_r+0x1c>
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	bd38      	pop	{r3, r4, r5, pc}
 800718e:	bf00      	nop
 8007190:	20004284 	.word	0x20004284

08007194 <_isatty_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	2300      	movs	r3, #0
 8007198:	4d05      	ldr	r5, [pc, #20]	@ (80071b0 <_isatty_r+0x1c>)
 800719a:	4604      	mov	r4, r0
 800719c:	4608      	mov	r0, r1
 800719e:	602b      	str	r3, [r5, #0]
 80071a0:	f7fa f9ef 	bl	8001582 <_isatty>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <_isatty_r+0x1a>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	b103      	cbz	r3, 80071ae <_isatty_r+0x1a>
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	20004284 	.word	0x20004284

080071b4 <_sbrk_r>:
 80071b4:	b538      	push	{r3, r4, r5, lr}
 80071b6:	2300      	movs	r3, #0
 80071b8:	4d05      	ldr	r5, [pc, #20]	@ (80071d0 <_sbrk_r+0x1c>)
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	f7fa f9f6 	bl	80015b0 <_sbrk>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d102      	bne.n	80071ce <_sbrk_r+0x1a>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	b103      	cbz	r3, 80071ce <_sbrk_r+0x1a>
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
 80071d0:	20004284 	.word	0x20004284

080071d4 <nan>:
 80071d4:	2000      	movs	r0, #0
 80071d6:	4901      	ldr	r1, [pc, #4]	@ (80071dc <nan+0x8>)
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	7ff80000 	.word	0x7ff80000

080071e0 <__assert_func>:
 80071e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071e2:	4614      	mov	r4, r2
 80071e4:	461a      	mov	r2, r3
 80071e6:	4b09      	ldr	r3, [pc, #36]	@ (800720c <__assert_func+0x2c>)
 80071e8:	4605      	mov	r5, r0
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68d8      	ldr	r0, [r3, #12]
 80071ee:	b954      	cbnz	r4, 8007206 <__assert_func+0x26>
 80071f0:	4b07      	ldr	r3, [pc, #28]	@ (8007210 <__assert_func+0x30>)
 80071f2:	461c      	mov	r4, r3
 80071f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071f8:	9100      	str	r1, [sp, #0]
 80071fa:	462b      	mov	r3, r5
 80071fc:	4905      	ldr	r1, [pc, #20]	@ (8007214 <__assert_func+0x34>)
 80071fe:	f000 fba7 	bl	8007950 <fiprintf>
 8007202:	f000 fbb7 	bl	8007974 <abort>
 8007206:	4b04      	ldr	r3, [pc, #16]	@ (8007218 <__assert_func+0x38>)
 8007208:	e7f4      	b.n	80071f4 <__assert_func+0x14>
 800720a:	bf00      	nop
 800720c:	2000003c 	.word	0x2000003c
 8007210:	08009335 	.word	0x08009335
 8007214:	08009307 	.word	0x08009307
 8007218:	080092fa 	.word	0x080092fa

0800721c <_calloc_r>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	fba1 5402 	umull	r5, r4, r1, r2
 8007222:	b93c      	cbnz	r4, 8007234 <_calloc_r+0x18>
 8007224:	4629      	mov	r1, r5
 8007226:	f7fe f825 	bl	8005274 <_malloc_r>
 800722a:	4606      	mov	r6, r0
 800722c:	b928      	cbnz	r0, 800723a <_calloc_r+0x1e>
 800722e:	2600      	movs	r6, #0
 8007230:	4630      	mov	r0, r6
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	220c      	movs	r2, #12
 8007236:	6002      	str	r2, [r0, #0]
 8007238:	e7f9      	b.n	800722e <_calloc_r+0x12>
 800723a:	462a      	mov	r2, r5
 800723c:	4621      	mov	r1, r4
 800723e:	f7fd f8b5 	bl	80043ac <memset>
 8007242:	e7f5      	b.n	8007230 <_calloc_r+0x14>

08007244 <rshift>:
 8007244:	6903      	ldr	r3, [r0, #16]
 8007246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800724a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800724e:	f100 0414 	add.w	r4, r0, #20
 8007252:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007256:	dd46      	ble.n	80072e6 <rshift+0xa2>
 8007258:	f011 011f 	ands.w	r1, r1, #31
 800725c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007260:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007264:	d10c      	bne.n	8007280 <rshift+0x3c>
 8007266:	4629      	mov	r1, r5
 8007268:	f100 0710 	add.w	r7, r0, #16
 800726c:	42b1      	cmp	r1, r6
 800726e:	d335      	bcc.n	80072dc <rshift+0x98>
 8007270:	1a9b      	subs	r3, r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	1eea      	subs	r2, r5, #3
 8007276:	4296      	cmp	r6, r2
 8007278:	bf38      	it	cc
 800727a:	2300      	movcc	r3, #0
 800727c:	4423      	add	r3, r4
 800727e:	e015      	b.n	80072ac <rshift+0x68>
 8007280:	46a1      	mov	r9, r4
 8007282:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007286:	f1c1 0820 	rsb	r8, r1, #32
 800728a:	40cf      	lsrs	r7, r1
 800728c:	f105 0e04 	add.w	lr, r5, #4
 8007290:	4576      	cmp	r6, lr
 8007292:	46f4      	mov	ip, lr
 8007294:	d816      	bhi.n	80072c4 <rshift+0x80>
 8007296:	1a9a      	subs	r2, r3, r2
 8007298:	0092      	lsls	r2, r2, #2
 800729a:	3a04      	subs	r2, #4
 800729c:	3501      	adds	r5, #1
 800729e:	42ae      	cmp	r6, r5
 80072a0:	bf38      	it	cc
 80072a2:	2200      	movcc	r2, #0
 80072a4:	18a3      	adds	r3, r4, r2
 80072a6:	50a7      	str	r7, [r4, r2]
 80072a8:	b107      	cbz	r7, 80072ac <rshift+0x68>
 80072aa:	3304      	adds	r3, #4
 80072ac:	42a3      	cmp	r3, r4
 80072ae:	eba3 0204 	sub.w	r2, r3, r4
 80072b2:	bf08      	it	eq
 80072b4:	2300      	moveq	r3, #0
 80072b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80072ba:	6102      	str	r2, [r0, #16]
 80072bc:	bf08      	it	eq
 80072be:	6143      	streq	r3, [r0, #20]
 80072c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072c4:	f8dc c000 	ldr.w	ip, [ip]
 80072c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80072cc:	ea4c 0707 	orr.w	r7, ip, r7
 80072d0:	f849 7b04 	str.w	r7, [r9], #4
 80072d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80072d8:	40cf      	lsrs	r7, r1
 80072da:	e7d9      	b.n	8007290 <rshift+0x4c>
 80072dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80072e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80072e4:	e7c2      	b.n	800726c <rshift+0x28>
 80072e6:	4623      	mov	r3, r4
 80072e8:	e7e0      	b.n	80072ac <rshift+0x68>

080072ea <__hexdig_fun>:
 80072ea:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80072ee:	2b09      	cmp	r3, #9
 80072f0:	d802      	bhi.n	80072f8 <__hexdig_fun+0xe>
 80072f2:	3820      	subs	r0, #32
 80072f4:	b2c0      	uxtb	r0, r0
 80072f6:	4770      	bx	lr
 80072f8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80072fc:	2b05      	cmp	r3, #5
 80072fe:	d801      	bhi.n	8007304 <__hexdig_fun+0x1a>
 8007300:	3847      	subs	r0, #71	@ 0x47
 8007302:	e7f7      	b.n	80072f4 <__hexdig_fun+0xa>
 8007304:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007308:	2b05      	cmp	r3, #5
 800730a:	d801      	bhi.n	8007310 <__hexdig_fun+0x26>
 800730c:	3827      	subs	r0, #39	@ 0x27
 800730e:	e7f1      	b.n	80072f4 <__hexdig_fun+0xa>
 8007310:	2000      	movs	r0, #0
 8007312:	4770      	bx	lr

08007314 <__gethex>:
 8007314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	468a      	mov	sl, r1
 800731a:	4690      	mov	r8, r2
 800731c:	b085      	sub	sp, #20
 800731e:	9302      	str	r3, [sp, #8]
 8007320:	680b      	ldr	r3, [r1, #0]
 8007322:	9001      	str	r0, [sp, #4]
 8007324:	1c9c      	adds	r4, r3, #2
 8007326:	46a1      	mov	r9, r4
 8007328:	f814 0b01 	ldrb.w	r0, [r4], #1
 800732c:	2830      	cmp	r0, #48	@ 0x30
 800732e:	d0fa      	beq.n	8007326 <__gethex+0x12>
 8007330:	eba9 0303 	sub.w	r3, r9, r3
 8007334:	f1a3 0b02 	sub.w	fp, r3, #2
 8007338:	f7ff ffd7 	bl	80072ea <__hexdig_fun>
 800733c:	4605      	mov	r5, r0
 800733e:	2800      	cmp	r0, #0
 8007340:	d168      	bne.n	8007414 <__gethex+0x100>
 8007342:	2201      	movs	r2, #1
 8007344:	4648      	mov	r0, r9
 8007346:	499f      	ldr	r1, [pc, #636]	@ (80075c4 <__gethex+0x2b0>)
 8007348:	f7ff feff 	bl	800714a <strncmp>
 800734c:	4607      	mov	r7, r0
 800734e:	2800      	cmp	r0, #0
 8007350:	d167      	bne.n	8007422 <__gethex+0x10e>
 8007352:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007356:	4626      	mov	r6, r4
 8007358:	f7ff ffc7 	bl	80072ea <__hexdig_fun>
 800735c:	2800      	cmp	r0, #0
 800735e:	d062      	beq.n	8007426 <__gethex+0x112>
 8007360:	4623      	mov	r3, r4
 8007362:	7818      	ldrb	r0, [r3, #0]
 8007364:	4699      	mov	r9, r3
 8007366:	2830      	cmp	r0, #48	@ 0x30
 8007368:	f103 0301 	add.w	r3, r3, #1
 800736c:	d0f9      	beq.n	8007362 <__gethex+0x4e>
 800736e:	f7ff ffbc 	bl	80072ea <__hexdig_fun>
 8007372:	fab0 f580 	clz	r5, r0
 8007376:	f04f 0b01 	mov.w	fp, #1
 800737a:	096d      	lsrs	r5, r5, #5
 800737c:	464a      	mov	r2, r9
 800737e:	4616      	mov	r6, r2
 8007380:	7830      	ldrb	r0, [r6, #0]
 8007382:	3201      	adds	r2, #1
 8007384:	f7ff ffb1 	bl	80072ea <__hexdig_fun>
 8007388:	2800      	cmp	r0, #0
 800738a:	d1f8      	bne.n	800737e <__gethex+0x6a>
 800738c:	2201      	movs	r2, #1
 800738e:	4630      	mov	r0, r6
 8007390:	498c      	ldr	r1, [pc, #560]	@ (80075c4 <__gethex+0x2b0>)
 8007392:	f7ff feda 	bl	800714a <strncmp>
 8007396:	2800      	cmp	r0, #0
 8007398:	d13f      	bne.n	800741a <__gethex+0x106>
 800739a:	b944      	cbnz	r4, 80073ae <__gethex+0x9a>
 800739c:	1c74      	adds	r4, r6, #1
 800739e:	4622      	mov	r2, r4
 80073a0:	4616      	mov	r6, r2
 80073a2:	7830      	ldrb	r0, [r6, #0]
 80073a4:	3201      	adds	r2, #1
 80073a6:	f7ff ffa0 	bl	80072ea <__hexdig_fun>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d1f8      	bne.n	80073a0 <__gethex+0x8c>
 80073ae:	1ba4      	subs	r4, r4, r6
 80073b0:	00a7      	lsls	r7, r4, #2
 80073b2:	7833      	ldrb	r3, [r6, #0]
 80073b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80073b8:	2b50      	cmp	r3, #80	@ 0x50
 80073ba:	d13e      	bne.n	800743a <__gethex+0x126>
 80073bc:	7873      	ldrb	r3, [r6, #1]
 80073be:	2b2b      	cmp	r3, #43	@ 0x2b
 80073c0:	d033      	beq.n	800742a <__gethex+0x116>
 80073c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80073c4:	d034      	beq.n	8007430 <__gethex+0x11c>
 80073c6:	2400      	movs	r4, #0
 80073c8:	1c71      	adds	r1, r6, #1
 80073ca:	7808      	ldrb	r0, [r1, #0]
 80073cc:	f7ff ff8d 	bl	80072ea <__hexdig_fun>
 80073d0:	1e43      	subs	r3, r0, #1
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b18      	cmp	r3, #24
 80073d6:	d830      	bhi.n	800743a <__gethex+0x126>
 80073d8:	f1a0 0210 	sub.w	r2, r0, #16
 80073dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80073e0:	f7ff ff83 	bl	80072ea <__hexdig_fun>
 80073e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80073e8:	fa5f fc8c 	uxtb.w	ip, ip
 80073ec:	f1bc 0f18 	cmp.w	ip, #24
 80073f0:	f04f 030a 	mov.w	r3, #10
 80073f4:	d91e      	bls.n	8007434 <__gethex+0x120>
 80073f6:	b104      	cbz	r4, 80073fa <__gethex+0xe6>
 80073f8:	4252      	negs	r2, r2
 80073fa:	4417      	add	r7, r2
 80073fc:	f8ca 1000 	str.w	r1, [sl]
 8007400:	b1ed      	cbz	r5, 800743e <__gethex+0x12a>
 8007402:	f1bb 0f00 	cmp.w	fp, #0
 8007406:	bf0c      	ite	eq
 8007408:	2506      	moveq	r5, #6
 800740a:	2500      	movne	r5, #0
 800740c:	4628      	mov	r0, r5
 800740e:	b005      	add	sp, #20
 8007410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	2500      	movs	r5, #0
 8007416:	462c      	mov	r4, r5
 8007418:	e7b0      	b.n	800737c <__gethex+0x68>
 800741a:	2c00      	cmp	r4, #0
 800741c:	d1c7      	bne.n	80073ae <__gethex+0x9a>
 800741e:	4627      	mov	r7, r4
 8007420:	e7c7      	b.n	80073b2 <__gethex+0x9e>
 8007422:	464e      	mov	r6, r9
 8007424:	462f      	mov	r7, r5
 8007426:	2501      	movs	r5, #1
 8007428:	e7c3      	b.n	80073b2 <__gethex+0x9e>
 800742a:	2400      	movs	r4, #0
 800742c:	1cb1      	adds	r1, r6, #2
 800742e:	e7cc      	b.n	80073ca <__gethex+0xb6>
 8007430:	2401      	movs	r4, #1
 8007432:	e7fb      	b.n	800742c <__gethex+0x118>
 8007434:	fb03 0002 	mla	r0, r3, r2, r0
 8007438:	e7ce      	b.n	80073d8 <__gethex+0xc4>
 800743a:	4631      	mov	r1, r6
 800743c:	e7de      	b.n	80073fc <__gethex+0xe8>
 800743e:	4629      	mov	r1, r5
 8007440:	eba6 0309 	sub.w	r3, r6, r9
 8007444:	3b01      	subs	r3, #1
 8007446:	2b07      	cmp	r3, #7
 8007448:	dc0a      	bgt.n	8007460 <__gethex+0x14c>
 800744a:	9801      	ldr	r0, [sp, #4]
 800744c:	f7fd ff9e 	bl	800538c <_Balloc>
 8007450:	4604      	mov	r4, r0
 8007452:	b940      	cbnz	r0, 8007466 <__gethex+0x152>
 8007454:	4602      	mov	r2, r0
 8007456:	21e4      	movs	r1, #228	@ 0xe4
 8007458:	4b5b      	ldr	r3, [pc, #364]	@ (80075c8 <__gethex+0x2b4>)
 800745a:	485c      	ldr	r0, [pc, #368]	@ (80075cc <__gethex+0x2b8>)
 800745c:	f7ff fec0 	bl	80071e0 <__assert_func>
 8007460:	3101      	adds	r1, #1
 8007462:	105b      	asrs	r3, r3, #1
 8007464:	e7ef      	b.n	8007446 <__gethex+0x132>
 8007466:	2300      	movs	r3, #0
 8007468:	f100 0a14 	add.w	sl, r0, #20
 800746c:	4655      	mov	r5, sl
 800746e:	469b      	mov	fp, r3
 8007470:	45b1      	cmp	r9, r6
 8007472:	d337      	bcc.n	80074e4 <__gethex+0x1d0>
 8007474:	f845 bb04 	str.w	fp, [r5], #4
 8007478:	eba5 050a 	sub.w	r5, r5, sl
 800747c:	10ad      	asrs	r5, r5, #2
 800747e:	6125      	str	r5, [r4, #16]
 8007480:	4658      	mov	r0, fp
 8007482:	f7fe f875 	bl	8005570 <__hi0bits>
 8007486:	016d      	lsls	r5, r5, #5
 8007488:	f8d8 6000 	ldr.w	r6, [r8]
 800748c:	1a2d      	subs	r5, r5, r0
 800748e:	42b5      	cmp	r5, r6
 8007490:	dd54      	ble.n	800753c <__gethex+0x228>
 8007492:	1bad      	subs	r5, r5, r6
 8007494:	4629      	mov	r1, r5
 8007496:	4620      	mov	r0, r4
 8007498:	f7fe fbfd 	bl	8005c96 <__any_on>
 800749c:	4681      	mov	r9, r0
 800749e:	b178      	cbz	r0, 80074c0 <__gethex+0x1ac>
 80074a0:	f04f 0901 	mov.w	r9, #1
 80074a4:	1e6b      	subs	r3, r5, #1
 80074a6:	1159      	asrs	r1, r3, #5
 80074a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80074ac:	f003 021f 	and.w	r2, r3, #31
 80074b0:	fa09 f202 	lsl.w	r2, r9, r2
 80074b4:	420a      	tst	r2, r1
 80074b6:	d003      	beq.n	80074c0 <__gethex+0x1ac>
 80074b8:	454b      	cmp	r3, r9
 80074ba:	dc36      	bgt.n	800752a <__gethex+0x216>
 80074bc:	f04f 0902 	mov.w	r9, #2
 80074c0:	4629      	mov	r1, r5
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7ff febe 	bl	8007244 <rshift>
 80074c8:	442f      	add	r7, r5
 80074ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074ce:	42bb      	cmp	r3, r7
 80074d0:	da42      	bge.n	8007558 <__gethex+0x244>
 80074d2:	4621      	mov	r1, r4
 80074d4:	9801      	ldr	r0, [sp, #4]
 80074d6:	f7fd ff99 	bl	800540c <_Bfree>
 80074da:	2300      	movs	r3, #0
 80074dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074de:	25a3      	movs	r5, #163	@ 0xa3
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	e793      	b.n	800740c <__gethex+0xf8>
 80074e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80074e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80074ea:	d012      	beq.n	8007512 <__gethex+0x1fe>
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d104      	bne.n	80074fa <__gethex+0x1e6>
 80074f0:	f845 bb04 	str.w	fp, [r5], #4
 80074f4:	f04f 0b00 	mov.w	fp, #0
 80074f8:	465b      	mov	r3, fp
 80074fa:	7830      	ldrb	r0, [r6, #0]
 80074fc:	9303      	str	r3, [sp, #12]
 80074fe:	f7ff fef4 	bl	80072ea <__hexdig_fun>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	f000 000f 	and.w	r0, r0, #15
 8007508:	4098      	lsls	r0, r3
 800750a:	ea4b 0b00 	orr.w	fp, fp, r0
 800750e:	3304      	adds	r3, #4
 8007510:	e7ae      	b.n	8007470 <__gethex+0x15c>
 8007512:	45b1      	cmp	r9, r6
 8007514:	d8ea      	bhi.n	80074ec <__gethex+0x1d8>
 8007516:	2201      	movs	r2, #1
 8007518:	4630      	mov	r0, r6
 800751a:	492a      	ldr	r1, [pc, #168]	@ (80075c4 <__gethex+0x2b0>)
 800751c:	9303      	str	r3, [sp, #12]
 800751e:	f7ff fe14 	bl	800714a <strncmp>
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	2800      	cmp	r0, #0
 8007526:	d1e1      	bne.n	80074ec <__gethex+0x1d8>
 8007528:	e7a2      	b.n	8007470 <__gethex+0x15c>
 800752a:	4620      	mov	r0, r4
 800752c:	1ea9      	subs	r1, r5, #2
 800752e:	f7fe fbb2 	bl	8005c96 <__any_on>
 8007532:	2800      	cmp	r0, #0
 8007534:	d0c2      	beq.n	80074bc <__gethex+0x1a8>
 8007536:	f04f 0903 	mov.w	r9, #3
 800753a:	e7c1      	b.n	80074c0 <__gethex+0x1ac>
 800753c:	da09      	bge.n	8007552 <__gethex+0x23e>
 800753e:	1b75      	subs	r5, r6, r5
 8007540:	4621      	mov	r1, r4
 8007542:	462a      	mov	r2, r5
 8007544:	9801      	ldr	r0, [sp, #4]
 8007546:	f7fe f977 	bl	8005838 <__lshift>
 800754a:	4604      	mov	r4, r0
 800754c:	1b7f      	subs	r7, r7, r5
 800754e:	f100 0a14 	add.w	sl, r0, #20
 8007552:	f04f 0900 	mov.w	r9, #0
 8007556:	e7b8      	b.n	80074ca <__gethex+0x1b6>
 8007558:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800755c:	42bd      	cmp	r5, r7
 800755e:	dd6f      	ble.n	8007640 <__gethex+0x32c>
 8007560:	1bed      	subs	r5, r5, r7
 8007562:	42ae      	cmp	r6, r5
 8007564:	dc34      	bgt.n	80075d0 <__gethex+0x2bc>
 8007566:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d022      	beq.n	80075b4 <__gethex+0x2a0>
 800756e:	2b03      	cmp	r3, #3
 8007570:	d024      	beq.n	80075bc <__gethex+0x2a8>
 8007572:	2b01      	cmp	r3, #1
 8007574:	d115      	bne.n	80075a2 <__gethex+0x28e>
 8007576:	42ae      	cmp	r6, r5
 8007578:	d113      	bne.n	80075a2 <__gethex+0x28e>
 800757a:	2e01      	cmp	r6, #1
 800757c:	d10b      	bne.n	8007596 <__gethex+0x282>
 800757e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007582:	9a02      	ldr	r2, [sp, #8]
 8007584:	2562      	movs	r5, #98	@ 0x62
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	2301      	movs	r3, #1
 800758a:	6123      	str	r3, [r4, #16]
 800758c:	f8ca 3000 	str.w	r3, [sl]
 8007590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007592:	601c      	str	r4, [r3, #0]
 8007594:	e73a      	b.n	800740c <__gethex+0xf8>
 8007596:	4620      	mov	r0, r4
 8007598:	1e71      	subs	r1, r6, #1
 800759a:	f7fe fb7c 	bl	8005c96 <__any_on>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d1ed      	bne.n	800757e <__gethex+0x26a>
 80075a2:	4621      	mov	r1, r4
 80075a4:	9801      	ldr	r0, [sp, #4]
 80075a6:	f7fd ff31 	bl	800540c <_Bfree>
 80075aa:	2300      	movs	r3, #0
 80075ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075ae:	2550      	movs	r5, #80	@ 0x50
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	e72b      	b.n	800740c <__gethex+0xf8>
 80075b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1f3      	bne.n	80075a2 <__gethex+0x28e>
 80075ba:	e7e0      	b.n	800757e <__gethex+0x26a>
 80075bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1dd      	bne.n	800757e <__gethex+0x26a>
 80075c2:	e7ee      	b.n	80075a2 <__gethex+0x28e>
 80075c4:	08009188 	.word	0x08009188
 80075c8:	0800901b 	.word	0x0800901b
 80075cc:	08009336 	.word	0x08009336
 80075d0:	1e6f      	subs	r7, r5, #1
 80075d2:	f1b9 0f00 	cmp.w	r9, #0
 80075d6:	d130      	bne.n	800763a <__gethex+0x326>
 80075d8:	b127      	cbz	r7, 80075e4 <__gethex+0x2d0>
 80075da:	4639      	mov	r1, r7
 80075dc:	4620      	mov	r0, r4
 80075de:	f7fe fb5a 	bl	8005c96 <__any_on>
 80075e2:	4681      	mov	r9, r0
 80075e4:	2301      	movs	r3, #1
 80075e6:	4629      	mov	r1, r5
 80075e8:	1b76      	subs	r6, r6, r5
 80075ea:	2502      	movs	r5, #2
 80075ec:	117a      	asrs	r2, r7, #5
 80075ee:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80075f2:	f007 071f 	and.w	r7, r7, #31
 80075f6:	40bb      	lsls	r3, r7
 80075f8:	4213      	tst	r3, r2
 80075fa:	4620      	mov	r0, r4
 80075fc:	bf18      	it	ne
 80075fe:	f049 0902 	orrne.w	r9, r9, #2
 8007602:	f7ff fe1f 	bl	8007244 <rshift>
 8007606:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800760a:	f1b9 0f00 	cmp.w	r9, #0
 800760e:	d047      	beq.n	80076a0 <__gethex+0x38c>
 8007610:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007614:	2b02      	cmp	r3, #2
 8007616:	d015      	beq.n	8007644 <__gethex+0x330>
 8007618:	2b03      	cmp	r3, #3
 800761a:	d017      	beq.n	800764c <__gethex+0x338>
 800761c:	2b01      	cmp	r3, #1
 800761e:	d109      	bne.n	8007634 <__gethex+0x320>
 8007620:	f019 0f02 	tst.w	r9, #2
 8007624:	d006      	beq.n	8007634 <__gethex+0x320>
 8007626:	f8da 3000 	ldr.w	r3, [sl]
 800762a:	ea49 0903 	orr.w	r9, r9, r3
 800762e:	f019 0f01 	tst.w	r9, #1
 8007632:	d10e      	bne.n	8007652 <__gethex+0x33e>
 8007634:	f045 0510 	orr.w	r5, r5, #16
 8007638:	e032      	b.n	80076a0 <__gethex+0x38c>
 800763a:	f04f 0901 	mov.w	r9, #1
 800763e:	e7d1      	b.n	80075e4 <__gethex+0x2d0>
 8007640:	2501      	movs	r5, #1
 8007642:	e7e2      	b.n	800760a <__gethex+0x2f6>
 8007644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007646:	f1c3 0301 	rsb	r3, r3, #1
 800764a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800764c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0f0      	beq.n	8007634 <__gethex+0x320>
 8007652:	f04f 0c00 	mov.w	ip, #0
 8007656:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800765a:	f104 0314 	add.w	r3, r4, #20
 800765e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007662:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007666:	4618      	mov	r0, r3
 8007668:	f853 2b04 	ldr.w	r2, [r3], #4
 800766c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007670:	d01b      	beq.n	80076aa <__gethex+0x396>
 8007672:	3201      	adds	r2, #1
 8007674:	6002      	str	r2, [r0, #0]
 8007676:	2d02      	cmp	r5, #2
 8007678:	f104 0314 	add.w	r3, r4, #20
 800767c:	d13c      	bne.n	80076f8 <__gethex+0x3e4>
 800767e:	f8d8 2000 	ldr.w	r2, [r8]
 8007682:	3a01      	subs	r2, #1
 8007684:	42b2      	cmp	r2, r6
 8007686:	d109      	bne.n	800769c <__gethex+0x388>
 8007688:	2201      	movs	r2, #1
 800768a:	1171      	asrs	r1, r6, #5
 800768c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007690:	f006 061f 	and.w	r6, r6, #31
 8007694:	fa02 f606 	lsl.w	r6, r2, r6
 8007698:	421e      	tst	r6, r3
 800769a:	d13a      	bne.n	8007712 <__gethex+0x3fe>
 800769c:	f045 0520 	orr.w	r5, r5, #32
 80076a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076a2:	601c      	str	r4, [r3, #0]
 80076a4:	9b02      	ldr	r3, [sp, #8]
 80076a6:	601f      	str	r7, [r3, #0]
 80076a8:	e6b0      	b.n	800740c <__gethex+0xf8>
 80076aa:	4299      	cmp	r1, r3
 80076ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80076b0:	d8d9      	bhi.n	8007666 <__gethex+0x352>
 80076b2:	68a3      	ldr	r3, [r4, #8]
 80076b4:	459b      	cmp	fp, r3
 80076b6:	db17      	blt.n	80076e8 <__gethex+0x3d4>
 80076b8:	6861      	ldr	r1, [r4, #4]
 80076ba:	9801      	ldr	r0, [sp, #4]
 80076bc:	3101      	adds	r1, #1
 80076be:	f7fd fe65 	bl	800538c <_Balloc>
 80076c2:	4681      	mov	r9, r0
 80076c4:	b918      	cbnz	r0, 80076ce <__gethex+0x3ba>
 80076c6:	4602      	mov	r2, r0
 80076c8:	2184      	movs	r1, #132	@ 0x84
 80076ca:	4b19      	ldr	r3, [pc, #100]	@ (8007730 <__gethex+0x41c>)
 80076cc:	e6c5      	b.n	800745a <__gethex+0x146>
 80076ce:	6922      	ldr	r2, [r4, #16]
 80076d0:	f104 010c 	add.w	r1, r4, #12
 80076d4:	3202      	adds	r2, #2
 80076d6:	0092      	lsls	r2, r2, #2
 80076d8:	300c      	adds	r0, #12
 80076da:	f7fc fef4 	bl	80044c6 <memcpy>
 80076de:	4621      	mov	r1, r4
 80076e0:	9801      	ldr	r0, [sp, #4]
 80076e2:	f7fd fe93 	bl	800540c <_Bfree>
 80076e6:	464c      	mov	r4, r9
 80076e8:	6923      	ldr	r3, [r4, #16]
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	6122      	str	r2, [r4, #16]
 80076ee:	2201      	movs	r2, #1
 80076f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076f4:	615a      	str	r2, [r3, #20]
 80076f6:	e7be      	b.n	8007676 <__gethex+0x362>
 80076f8:	6922      	ldr	r2, [r4, #16]
 80076fa:	455a      	cmp	r2, fp
 80076fc:	dd0b      	ble.n	8007716 <__gethex+0x402>
 80076fe:	2101      	movs	r1, #1
 8007700:	4620      	mov	r0, r4
 8007702:	f7ff fd9f 	bl	8007244 <rshift>
 8007706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800770a:	3701      	adds	r7, #1
 800770c:	42bb      	cmp	r3, r7
 800770e:	f6ff aee0 	blt.w	80074d2 <__gethex+0x1be>
 8007712:	2501      	movs	r5, #1
 8007714:	e7c2      	b.n	800769c <__gethex+0x388>
 8007716:	f016 061f 	ands.w	r6, r6, #31
 800771a:	d0fa      	beq.n	8007712 <__gethex+0x3fe>
 800771c:	4453      	add	r3, sl
 800771e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007722:	f7fd ff25 	bl	8005570 <__hi0bits>
 8007726:	f1c6 0620 	rsb	r6, r6, #32
 800772a:	42b0      	cmp	r0, r6
 800772c:	dbe7      	blt.n	80076fe <__gethex+0x3ea>
 800772e:	e7f0      	b.n	8007712 <__gethex+0x3fe>
 8007730:	0800901b 	.word	0x0800901b

08007734 <L_shift>:
 8007734:	f1c2 0208 	rsb	r2, r2, #8
 8007738:	0092      	lsls	r2, r2, #2
 800773a:	b570      	push	{r4, r5, r6, lr}
 800773c:	f1c2 0620 	rsb	r6, r2, #32
 8007740:	6843      	ldr	r3, [r0, #4]
 8007742:	6804      	ldr	r4, [r0, #0]
 8007744:	fa03 f506 	lsl.w	r5, r3, r6
 8007748:	432c      	orrs	r4, r5
 800774a:	40d3      	lsrs	r3, r2
 800774c:	6004      	str	r4, [r0, #0]
 800774e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007752:	4288      	cmp	r0, r1
 8007754:	d3f4      	bcc.n	8007740 <L_shift+0xc>
 8007756:	bd70      	pop	{r4, r5, r6, pc}

08007758 <__match>:
 8007758:	b530      	push	{r4, r5, lr}
 800775a:	6803      	ldr	r3, [r0, #0]
 800775c:	3301      	adds	r3, #1
 800775e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007762:	b914      	cbnz	r4, 800776a <__match+0x12>
 8007764:	6003      	str	r3, [r0, #0]
 8007766:	2001      	movs	r0, #1
 8007768:	bd30      	pop	{r4, r5, pc}
 800776a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800776e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007772:	2d19      	cmp	r5, #25
 8007774:	bf98      	it	ls
 8007776:	3220      	addls	r2, #32
 8007778:	42a2      	cmp	r2, r4
 800777a:	d0f0      	beq.n	800775e <__match+0x6>
 800777c:	2000      	movs	r0, #0
 800777e:	e7f3      	b.n	8007768 <__match+0x10>

08007780 <__hexnan>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	2500      	movs	r5, #0
 8007786:	680b      	ldr	r3, [r1, #0]
 8007788:	4682      	mov	sl, r0
 800778a:	115e      	asrs	r6, r3, #5
 800778c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007790:	f013 031f 	ands.w	r3, r3, #31
 8007794:	bf18      	it	ne
 8007796:	3604      	addne	r6, #4
 8007798:	1f37      	subs	r7, r6, #4
 800779a:	4690      	mov	r8, r2
 800779c:	46b9      	mov	r9, r7
 800779e:	463c      	mov	r4, r7
 80077a0:	46ab      	mov	fp, r5
 80077a2:	b087      	sub	sp, #28
 80077a4:	6801      	ldr	r1, [r0, #0]
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	f846 5c04 	str.w	r5, [r6, #-4]
 80077ac:	9502      	str	r5, [sp, #8]
 80077ae:	784a      	ldrb	r2, [r1, #1]
 80077b0:	1c4b      	adds	r3, r1, #1
 80077b2:	9303      	str	r3, [sp, #12]
 80077b4:	b342      	cbz	r2, 8007808 <__hexnan+0x88>
 80077b6:	4610      	mov	r0, r2
 80077b8:	9105      	str	r1, [sp, #20]
 80077ba:	9204      	str	r2, [sp, #16]
 80077bc:	f7ff fd95 	bl	80072ea <__hexdig_fun>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d151      	bne.n	8007868 <__hexnan+0xe8>
 80077c4:	9a04      	ldr	r2, [sp, #16]
 80077c6:	9905      	ldr	r1, [sp, #20]
 80077c8:	2a20      	cmp	r2, #32
 80077ca:	d818      	bhi.n	80077fe <__hexnan+0x7e>
 80077cc:	9b02      	ldr	r3, [sp, #8]
 80077ce:	459b      	cmp	fp, r3
 80077d0:	dd13      	ble.n	80077fa <__hexnan+0x7a>
 80077d2:	454c      	cmp	r4, r9
 80077d4:	d206      	bcs.n	80077e4 <__hexnan+0x64>
 80077d6:	2d07      	cmp	r5, #7
 80077d8:	dc04      	bgt.n	80077e4 <__hexnan+0x64>
 80077da:	462a      	mov	r2, r5
 80077dc:	4649      	mov	r1, r9
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff ffa8 	bl	8007734 <L_shift>
 80077e4:	4544      	cmp	r4, r8
 80077e6:	d952      	bls.n	800788e <__hexnan+0x10e>
 80077e8:	2300      	movs	r3, #0
 80077ea:	f1a4 0904 	sub.w	r9, r4, #4
 80077ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80077f2:	461d      	mov	r5, r3
 80077f4:	464c      	mov	r4, r9
 80077f6:	f8cd b008 	str.w	fp, [sp, #8]
 80077fa:	9903      	ldr	r1, [sp, #12]
 80077fc:	e7d7      	b.n	80077ae <__hexnan+0x2e>
 80077fe:	2a29      	cmp	r2, #41	@ 0x29
 8007800:	d157      	bne.n	80078b2 <__hexnan+0x132>
 8007802:	3102      	adds	r1, #2
 8007804:	f8ca 1000 	str.w	r1, [sl]
 8007808:	f1bb 0f00 	cmp.w	fp, #0
 800780c:	d051      	beq.n	80078b2 <__hexnan+0x132>
 800780e:	454c      	cmp	r4, r9
 8007810:	d206      	bcs.n	8007820 <__hexnan+0xa0>
 8007812:	2d07      	cmp	r5, #7
 8007814:	dc04      	bgt.n	8007820 <__hexnan+0xa0>
 8007816:	462a      	mov	r2, r5
 8007818:	4649      	mov	r1, r9
 800781a:	4620      	mov	r0, r4
 800781c:	f7ff ff8a 	bl	8007734 <L_shift>
 8007820:	4544      	cmp	r4, r8
 8007822:	d936      	bls.n	8007892 <__hexnan+0x112>
 8007824:	4623      	mov	r3, r4
 8007826:	f1a8 0204 	sub.w	r2, r8, #4
 800782a:	f853 1b04 	ldr.w	r1, [r3], #4
 800782e:	429f      	cmp	r7, r3
 8007830:	f842 1f04 	str.w	r1, [r2, #4]!
 8007834:	d2f9      	bcs.n	800782a <__hexnan+0xaa>
 8007836:	1b3b      	subs	r3, r7, r4
 8007838:	f023 0303 	bic.w	r3, r3, #3
 800783c:	3304      	adds	r3, #4
 800783e:	3401      	adds	r4, #1
 8007840:	3e03      	subs	r6, #3
 8007842:	42b4      	cmp	r4, r6
 8007844:	bf88      	it	hi
 8007846:	2304      	movhi	r3, #4
 8007848:	2200      	movs	r2, #0
 800784a:	4443      	add	r3, r8
 800784c:	f843 2b04 	str.w	r2, [r3], #4
 8007850:	429f      	cmp	r7, r3
 8007852:	d2fb      	bcs.n	800784c <__hexnan+0xcc>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	b91b      	cbnz	r3, 8007860 <__hexnan+0xe0>
 8007858:	4547      	cmp	r7, r8
 800785a:	d128      	bne.n	80078ae <__hexnan+0x12e>
 800785c:	2301      	movs	r3, #1
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	2005      	movs	r0, #5
 8007862:	b007      	add	sp, #28
 8007864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007868:	3501      	adds	r5, #1
 800786a:	2d08      	cmp	r5, #8
 800786c:	f10b 0b01 	add.w	fp, fp, #1
 8007870:	dd06      	ble.n	8007880 <__hexnan+0x100>
 8007872:	4544      	cmp	r4, r8
 8007874:	d9c1      	bls.n	80077fa <__hexnan+0x7a>
 8007876:	2300      	movs	r3, #0
 8007878:	2501      	movs	r5, #1
 800787a:	f844 3c04 	str.w	r3, [r4, #-4]
 800787e:	3c04      	subs	r4, #4
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	f000 000f 	and.w	r0, r0, #15
 8007886:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800788a:	6020      	str	r0, [r4, #0]
 800788c:	e7b5      	b.n	80077fa <__hexnan+0x7a>
 800788e:	2508      	movs	r5, #8
 8007890:	e7b3      	b.n	80077fa <__hexnan+0x7a>
 8007892:	9b01      	ldr	r3, [sp, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0dd      	beq.n	8007854 <__hexnan+0xd4>
 8007898:	f04f 32ff 	mov.w	r2, #4294967295
 800789c:	f1c3 0320 	rsb	r3, r3, #32
 80078a0:	40da      	lsrs	r2, r3
 80078a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80078a6:	4013      	ands	r3, r2
 80078a8:	f846 3c04 	str.w	r3, [r6, #-4]
 80078ac:	e7d2      	b.n	8007854 <__hexnan+0xd4>
 80078ae:	3f04      	subs	r7, #4
 80078b0:	e7d0      	b.n	8007854 <__hexnan+0xd4>
 80078b2:	2004      	movs	r0, #4
 80078b4:	e7d5      	b.n	8007862 <__hexnan+0xe2>

080078b6 <__ascii_mbtowc>:
 80078b6:	b082      	sub	sp, #8
 80078b8:	b901      	cbnz	r1, 80078bc <__ascii_mbtowc+0x6>
 80078ba:	a901      	add	r1, sp, #4
 80078bc:	b142      	cbz	r2, 80078d0 <__ascii_mbtowc+0x1a>
 80078be:	b14b      	cbz	r3, 80078d4 <__ascii_mbtowc+0x1e>
 80078c0:	7813      	ldrb	r3, [r2, #0]
 80078c2:	600b      	str	r3, [r1, #0]
 80078c4:	7812      	ldrb	r2, [r2, #0]
 80078c6:	1e10      	subs	r0, r2, #0
 80078c8:	bf18      	it	ne
 80078ca:	2001      	movne	r0, #1
 80078cc:	b002      	add	sp, #8
 80078ce:	4770      	bx	lr
 80078d0:	4610      	mov	r0, r2
 80078d2:	e7fb      	b.n	80078cc <__ascii_mbtowc+0x16>
 80078d4:	f06f 0001 	mvn.w	r0, #1
 80078d8:	e7f8      	b.n	80078cc <__ascii_mbtowc+0x16>

080078da <_realloc_r>:
 80078da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078de:	4680      	mov	r8, r0
 80078e0:	4615      	mov	r5, r2
 80078e2:	460c      	mov	r4, r1
 80078e4:	b921      	cbnz	r1, 80078f0 <_realloc_r+0x16>
 80078e6:	4611      	mov	r1, r2
 80078e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078ec:	f7fd bcc2 	b.w	8005274 <_malloc_r>
 80078f0:	b92a      	cbnz	r2, 80078fe <_realloc_r+0x24>
 80078f2:	f7fd fc4d 	bl	8005190 <_free_r>
 80078f6:	2400      	movs	r4, #0
 80078f8:	4620      	mov	r0, r4
 80078fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078fe:	f000 f840 	bl	8007982 <_malloc_usable_size_r>
 8007902:	4285      	cmp	r5, r0
 8007904:	4606      	mov	r6, r0
 8007906:	d802      	bhi.n	800790e <_realloc_r+0x34>
 8007908:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800790c:	d8f4      	bhi.n	80078f8 <_realloc_r+0x1e>
 800790e:	4629      	mov	r1, r5
 8007910:	4640      	mov	r0, r8
 8007912:	f7fd fcaf 	bl	8005274 <_malloc_r>
 8007916:	4607      	mov	r7, r0
 8007918:	2800      	cmp	r0, #0
 800791a:	d0ec      	beq.n	80078f6 <_realloc_r+0x1c>
 800791c:	42b5      	cmp	r5, r6
 800791e:	462a      	mov	r2, r5
 8007920:	4621      	mov	r1, r4
 8007922:	bf28      	it	cs
 8007924:	4632      	movcs	r2, r6
 8007926:	f7fc fdce 	bl	80044c6 <memcpy>
 800792a:	4621      	mov	r1, r4
 800792c:	4640      	mov	r0, r8
 800792e:	f7fd fc2f 	bl	8005190 <_free_r>
 8007932:	463c      	mov	r4, r7
 8007934:	e7e0      	b.n	80078f8 <_realloc_r+0x1e>

08007936 <__ascii_wctomb>:
 8007936:	4603      	mov	r3, r0
 8007938:	4608      	mov	r0, r1
 800793a:	b141      	cbz	r1, 800794e <__ascii_wctomb+0x18>
 800793c:	2aff      	cmp	r2, #255	@ 0xff
 800793e:	d904      	bls.n	800794a <__ascii_wctomb+0x14>
 8007940:	228a      	movs	r2, #138	@ 0x8a
 8007942:	f04f 30ff 	mov.w	r0, #4294967295
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	4770      	bx	lr
 800794a:	2001      	movs	r0, #1
 800794c:	700a      	strb	r2, [r1, #0]
 800794e:	4770      	bx	lr

08007950 <fiprintf>:
 8007950:	b40e      	push	{r1, r2, r3}
 8007952:	b503      	push	{r0, r1, lr}
 8007954:	4601      	mov	r1, r0
 8007956:	ab03      	add	r3, sp, #12
 8007958:	4805      	ldr	r0, [pc, #20]	@ (8007970 <fiprintf+0x20>)
 800795a:	f853 2b04 	ldr.w	r2, [r3], #4
 800795e:	6800      	ldr	r0, [r0, #0]
 8007960:	9301      	str	r3, [sp, #4]
 8007962:	f7ff f9b7 	bl	8006cd4 <_vfiprintf_r>
 8007966:	b002      	add	sp, #8
 8007968:	f85d eb04 	ldr.w	lr, [sp], #4
 800796c:	b003      	add	sp, #12
 800796e:	4770      	bx	lr
 8007970:	2000003c 	.word	0x2000003c

08007974 <abort>:
 8007974:	2006      	movs	r0, #6
 8007976:	b508      	push	{r3, lr}
 8007978:	f000 f834 	bl	80079e4 <raise>
 800797c:	2001      	movs	r0, #1
 800797e:	f7f9 fda2 	bl	80014c6 <_exit>

08007982 <_malloc_usable_size_r>:
 8007982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007986:	1f18      	subs	r0, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	bfbc      	itt	lt
 800798c:	580b      	ldrlt	r3, [r1, r0]
 800798e:	18c0      	addlt	r0, r0, r3
 8007990:	4770      	bx	lr

08007992 <_raise_r>:
 8007992:	291f      	cmp	r1, #31
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4605      	mov	r5, r0
 8007998:	460c      	mov	r4, r1
 800799a:	d904      	bls.n	80079a6 <_raise_r+0x14>
 800799c:	2316      	movs	r3, #22
 800799e:	6003      	str	r3, [r0, #0]
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
 80079a4:	bd38      	pop	{r3, r4, r5, pc}
 80079a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80079a8:	b112      	cbz	r2, 80079b0 <_raise_r+0x1e>
 80079aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079ae:	b94b      	cbnz	r3, 80079c4 <_raise_r+0x32>
 80079b0:	4628      	mov	r0, r5
 80079b2:	f000 f831 	bl	8007a18 <_getpid_r>
 80079b6:	4622      	mov	r2, r4
 80079b8:	4601      	mov	r1, r0
 80079ba:	4628      	mov	r0, r5
 80079bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079c0:	f000 b818 	b.w	80079f4 <_kill_r>
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d00a      	beq.n	80079de <_raise_r+0x4c>
 80079c8:	1c59      	adds	r1, r3, #1
 80079ca:	d103      	bne.n	80079d4 <_raise_r+0x42>
 80079cc:	2316      	movs	r3, #22
 80079ce:	6003      	str	r3, [r0, #0]
 80079d0:	2001      	movs	r0, #1
 80079d2:	e7e7      	b.n	80079a4 <_raise_r+0x12>
 80079d4:	2100      	movs	r1, #0
 80079d6:	4620      	mov	r0, r4
 80079d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80079dc:	4798      	blx	r3
 80079de:	2000      	movs	r0, #0
 80079e0:	e7e0      	b.n	80079a4 <_raise_r+0x12>
	...

080079e4 <raise>:
 80079e4:	4b02      	ldr	r3, [pc, #8]	@ (80079f0 <raise+0xc>)
 80079e6:	4601      	mov	r1, r0
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	f7ff bfd2 	b.w	8007992 <_raise_r>
 80079ee:	bf00      	nop
 80079f0:	2000003c 	.word	0x2000003c

080079f4 <_kill_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	2300      	movs	r3, #0
 80079f8:	4d06      	ldr	r5, [pc, #24]	@ (8007a14 <_kill_r+0x20>)
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	4611      	mov	r1, r2
 8007a00:	602b      	str	r3, [r5, #0]
 8007a02:	f7f9 fd50 	bl	80014a6 <_kill>
 8007a06:	1c43      	adds	r3, r0, #1
 8007a08:	d102      	bne.n	8007a10 <_kill_r+0x1c>
 8007a0a:	682b      	ldr	r3, [r5, #0]
 8007a0c:	b103      	cbz	r3, 8007a10 <_kill_r+0x1c>
 8007a0e:	6023      	str	r3, [r4, #0]
 8007a10:	bd38      	pop	{r3, r4, r5, pc}
 8007a12:	bf00      	nop
 8007a14:	20004284 	.word	0x20004284

08007a18 <_getpid_r>:
 8007a18:	f7f9 bd3e 	b.w	8001498 <_getpid>

08007a1c <powf>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	460c      	mov	r4, r1
 8007a20:	4606      	mov	r6, r0
 8007a22:	f000 f851 	bl	8007ac8 <__ieee754_powf>
 8007a26:	4621      	mov	r1, r4
 8007a28:	4605      	mov	r5, r0
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f7f9 fb70 	bl	8001110 <__aeabi_fcmpun>
 8007a30:	bb68      	cbnz	r0, 8007a8e <powf+0x72>
 8007a32:	2100      	movs	r1, #0
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7f9 fb39 	bl	80010ac <__aeabi_fcmpeq>
 8007a3a:	b190      	cbz	r0, 8007a62 <powf+0x46>
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7f9 fb34 	bl	80010ac <__aeabi_fcmpeq>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d133      	bne.n	8007ab0 <powf+0x94>
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 f834 	bl	8007ab6 <finitef>
 8007a4e:	b1f0      	cbz	r0, 8007a8e <powf+0x72>
 8007a50:	2100      	movs	r1, #0
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7f9 fb34 	bl	80010c0 <__aeabi_fcmplt>
 8007a58:	b1c8      	cbz	r0, 8007a8e <powf+0x72>
 8007a5a:	f7fc fcf9 	bl	8004450 <__errno>
 8007a5e:	2322      	movs	r3, #34	@ 0x22
 8007a60:	e014      	b.n	8007a8c <powf+0x70>
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f827 	bl	8007ab6 <finitef>
 8007a68:	b998      	cbnz	r0, 8007a92 <powf+0x76>
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f000 f823 	bl	8007ab6 <finitef>
 8007a70:	b178      	cbz	r0, 8007a92 <powf+0x76>
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 f81f 	bl	8007ab6 <finitef>
 8007a78:	b158      	cbz	r0, 8007a92 <powf+0x76>
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f7f9 fb47 	bl	8001110 <__aeabi_fcmpun>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d0e9      	beq.n	8007a5a <powf+0x3e>
 8007a86:	f7fc fce3 	bl	8004450 <__errno>
 8007a8a:	2321      	movs	r3, #33	@ 0x21
 8007a8c:	6003      	str	r3, [r0, #0]
 8007a8e:	4628      	mov	r0, r5
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	2100      	movs	r1, #0
 8007a94:	4628      	mov	r0, r5
 8007a96:	f7f9 fb09 	bl	80010ac <__aeabi_fcmpeq>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d0f7      	beq.n	8007a8e <powf+0x72>
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f000 f809 	bl	8007ab6 <finitef>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d0f2      	beq.n	8007a8e <powf+0x72>
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f000 f804 	bl	8007ab6 <finitef>
 8007aae:	e7d3      	b.n	8007a58 <powf+0x3c>
 8007ab0:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8007ab4:	e7eb      	b.n	8007a8e <powf+0x72>

08007ab6 <finitef>:
 8007ab6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007aba:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8007abe:	bfac      	ite	ge
 8007ac0:	2000      	movge	r0, #0
 8007ac2:	2001      	movlt	r0, #1
 8007ac4:	4770      	bx	lr
	...

08007ac8 <__ieee754_powf>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8007ad0:	4680      	mov	r8, r0
 8007ad2:	460f      	mov	r7, r1
 8007ad4:	4606      	mov	r6, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	b087      	sub	sp, #28
 8007ada:	d10c      	bne.n	8007af6 <__ieee754_powf+0x2e>
 8007adc:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8007ae0:	0076      	lsls	r6, r6, #1
 8007ae2:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8007ae6:	f240 8336 	bls.w	8008156 <__ieee754_powf+0x68e>
 8007aea:	4639      	mov	r1, r7
 8007aec:	4640      	mov	r0, r8
 8007aee:	f7f9 f841 	bl	8000b74 <__addsf3>
 8007af2:	4601      	mov	r1, r0
 8007af4:	e03e      	b.n	8007b74 <__ieee754_powf+0xac>
 8007af6:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 8007afa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007afe:	d802      	bhi.n	8007b06 <__ieee754_powf+0x3e>
 8007b00:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8007b04:	d908      	bls.n	8007b18 <__ieee754_powf+0x50>
 8007b06:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8007b0a:	d1ee      	bne.n	8007aea <__ieee754_powf+0x22>
 8007b0c:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8007b10:	0064      	lsls	r4, r4, #1
 8007b12:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8007b16:	e7e6      	b.n	8007ae6 <__ieee754_powf+0x1e>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	da1e      	bge.n	8007b5a <__ieee754_powf+0x92>
 8007b1c:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8007b20:	d22c      	bcs.n	8007b7c <__ieee754_powf+0xb4>
 8007b22:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8007b26:	d333      	bcc.n	8007b90 <__ieee754_powf+0xc8>
 8007b28:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8007b2c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8007b30:	fa4b f503 	asr.w	r5, fp, r3
 8007b34:	fa05 f303 	lsl.w	r3, r5, r3
 8007b38:	455b      	cmp	r3, fp
 8007b3a:	d127      	bne.n	8007b8c <__ieee754_powf+0xc4>
 8007b3c:	f005 0501 	and.w	r5, r5, #1
 8007b40:	f1c5 0502 	rsb	r5, r5, #2
 8007b44:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8007b48:	d123      	bne.n	8007b92 <__ieee754_powf+0xca>
 8007b4a:	2c00      	cmp	r4, #0
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	da11      	bge.n	8007b74 <__ieee754_powf+0xac>
 8007b50:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007b54:	f7f9 f9ca 	bl	8000eec <__aeabi_fdiv>
 8007b58:	e7cb      	b.n	8007af2 <__ieee754_powf+0x2a>
 8007b5a:	2500      	movs	r5, #0
 8007b5c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8007b60:	d1f0      	bne.n	8007b44 <__ieee754_powf+0x7c>
 8007b62:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8007b66:	f000 82f6 	beq.w	8008156 <__ieee754_powf+0x68e>
 8007b6a:	d909      	bls.n	8007b80 <__ieee754_powf+0xb8>
 8007b6c:	2c00      	cmp	r4, #0
 8007b6e:	f2c0 82f5 	blt.w	800815c <__ieee754_powf+0x694>
 8007b72:	4639      	mov	r1, r7
 8007b74:	4608      	mov	r0, r1
 8007b76:	b007      	add	sp, #28
 8007b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7c:	2502      	movs	r5, #2
 8007b7e:	e7ed      	b.n	8007b5c <__ieee754_powf+0x94>
 8007b80:	2c00      	cmp	r4, #0
 8007b82:	f280 82eb 	bge.w	800815c <__ieee754_powf+0x694>
 8007b86:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8007b8a:	e7f3      	b.n	8007b74 <__ieee754_powf+0xac>
 8007b8c:	2500      	movs	r5, #0
 8007b8e:	e7d9      	b.n	8007b44 <__ieee754_powf+0x7c>
 8007b90:	2500      	movs	r5, #0
 8007b92:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8007b96:	d104      	bne.n	8007ba2 <__ieee754_powf+0xda>
 8007b98:	4641      	mov	r1, r8
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	f7f9 f8f2 	bl	8000d84 <__aeabi_fmul>
 8007ba0:	e7a7      	b.n	8007af2 <__ieee754_powf+0x2a>
 8007ba2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8007ba6:	d107      	bne.n	8007bb8 <__ieee754_powf+0xf0>
 8007ba8:	2e00      	cmp	r6, #0
 8007baa:	db05      	blt.n	8007bb8 <__ieee754_powf+0xf0>
 8007bac:	4640      	mov	r0, r8
 8007bae:	b007      	add	sp, #28
 8007bb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	f000 bb54 	b.w	8008260 <__ieee754_sqrtf>
 8007bb8:	4640      	mov	r0, r8
 8007bba:	f000 fae3 	bl	8008184 <fabsf>
 8007bbe:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8007bc2:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8007bc6:	46ca      	mov	sl, r9
 8007bc8:	4601      	mov	r1, r0
 8007bca:	d002      	beq.n	8007bd2 <__ieee754_powf+0x10a>
 8007bcc:	f1b9 0f00 	cmp.w	r9, #0
 8007bd0:	d117      	bne.n	8007c02 <__ieee754_powf+0x13a>
 8007bd2:	2c00      	cmp	r4, #0
 8007bd4:	da04      	bge.n	8007be0 <__ieee754_powf+0x118>
 8007bd6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007bda:	f7f9 f987 	bl	8000eec <__aeabi_fdiv>
 8007bde:	4601      	mov	r1, r0
 8007be0:	2e00      	cmp	r6, #0
 8007be2:	dac7      	bge.n	8007b74 <__ieee754_powf+0xac>
 8007be4:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 8007be8:	ea59 0905 	orrs.w	r9, r9, r5
 8007bec:	d104      	bne.n	8007bf8 <__ieee754_powf+0x130>
 8007bee:	4608      	mov	r0, r1
 8007bf0:	f7f8 ffbe 	bl	8000b70 <__aeabi_fsub>
 8007bf4:	4601      	mov	r1, r0
 8007bf6:	e7ad      	b.n	8007b54 <__ieee754_powf+0x8c>
 8007bf8:	2d01      	cmp	r5, #1
 8007bfa:	d1bb      	bne.n	8007b74 <__ieee754_powf+0xac>
 8007bfc:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8007c00:	e777      	b.n	8007af2 <__ieee754_powf+0x2a>
 8007c02:	0ff3      	lsrs	r3, r6, #31
 8007c04:	3b01      	subs	r3, #1
 8007c06:	9303      	str	r3, [sp, #12]
 8007c08:	432b      	orrs	r3, r5
 8007c0a:	d101      	bne.n	8007c10 <__ieee754_powf+0x148>
 8007c0c:	4641      	mov	r1, r8
 8007c0e:	e7ee      	b.n	8007bee <__ieee754_powf+0x126>
 8007c10:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8007c14:	f240 809e 	bls.w	8007d54 <__ieee754_powf+0x28c>
 8007c18:	4b47      	ldr	r3, [pc, #284]	@ (8007d38 <__ieee754_powf+0x270>)
 8007c1a:	4599      	cmp	r9, r3
 8007c1c:	d807      	bhi.n	8007c2e <__ieee754_powf+0x166>
 8007c1e:	2c00      	cmp	r4, #0
 8007c20:	da0a      	bge.n	8007c38 <__ieee754_powf+0x170>
 8007c22:	2000      	movs	r0, #0
 8007c24:	b007      	add	sp, #28
 8007c26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2a:	f000 bb14 	b.w	8008256 <__math_oflowf>
 8007c2e:	4b43      	ldr	r3, [pc, #268]	@ (8007d3c <__ieee754_powf+0x274>)
 8007c30:	4599      	cmp	r9, r3
 8007c32:	d907      	bls.n	8007c44 <__ieee754_powf+0x17c>
 8007c34:	2c00      	cmp	r4, #0
 8007c36:	dcf4      	bgt.n	8007c22 <__ieee754_powf+0x15a>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	b007      	add	sp, #28
 8007c3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c40:	f000 bb05 	b.w	800824e <__math_uflowf>
 8007c44:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007c48:	f7f8 ff92 	bl	8000b70 <__aeabi_fsub>
 8007c4c:	493c      	ldr	r1, [pc, #240]	@ (8007d40 <__ieee754_powf+0x278>)
 8007c4e:	4606      	mov	r6, r0
 8007c50:	f7f9 f898 	bl	8000d84 <__aeabi_fmul>
 8007c54:	493b      	ldr	r1, [pc, #236]	@ (8007d44 <__ieee754_powf+0x27c>)
 8007c56:	4680      	mov	r8, r0
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f7f9 f893 	bl	8000d84 <__aeabi_fmul>
 8007c5e:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8007c62:	4681      	mov	r9, r0
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7f9 f88d 	bl	8000d84 <__aeabi_fmul>
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	4836      	ldr	r0, [pc, #216]	@ (8007d48 <__ieee754_powf+0x280>)
 8007c6e:	f7f8 ff7f 	bl	8000b70 <__aeabi_fsub>
 8007c72:	4631      	mov	r1, r6
 8007c74:	f7f9 f886 	bl	8000d84 <__aeabi_fmul>
 8007c78:	4601      	mov	r1, r0
 8007c7a:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8007c7e:	f7f8 ff77 	bl	8000b70 <__aeabi_fsub>
 8007c82:	4631      	mov	r1, r6
 8007c84:	4682      	mov	sl, r0
 8007c86:	4630      	mov	r0, r6
 8007c88:	f7f9 f87c 	bl	8000d84 <__aeabi_fmul>
 8007c8c:	4601      	mov	r1, r0
 8007c8e:	4650      	mov	r0, sl
 8007c90:	f7f9 f878 	bl	8000d84 <__aeabi_fmul>
 8007c94:	492d      	ldr	r1, [pc, #180]	@ (8007d4c <__ieee754_powf+0x284>)
 8007c96:	f7f9 f875 	bl	8000d84 <__aeabi_fmul>
 8007c9a:	4601      	mov	r1, r0
 8007c9c:	4648      	mov	r0, r9
 8007c9e:	f7f8 ff67 	bl	8000b70 <__aeabi_fsub>
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	4640      	mov	r0, r8
 8007ca8:	f7f8 ff64 	bl	8000b74 <__addsf3>
 8007cac:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8007cb0:	f02b 0b0f 	bic.w	fp, fp, #15
 8007cb4:	4641      	mov	r1, r8
 8007cb6:	4658      	mov	r0, fp
 8007cb8:	f7f8 ff5a 	bl	8000b70 <__aeabi_fsub>
 8007cbc:	4601      	mov	r1, r0
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7f8 ff56 	bl	8000b70 <__aeabi_fsub>
 8007cc4:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	3d01      	subs	r5, #1
 8007ccc:	f024 040f 	bic.w	r4, r4, #15
 8007cd0:	431d      	orrs	r5, r3
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	bf14      	ite	ne
 8007cda:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8007cde:	4d1c      	ldreq	r5, [pc, #112]	@ (8007d50 <__ieee754_powf+0x288>)
 8007ce0:	f7f8 ff46 	bl	8000b70 <__aeabi_fsub>
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	f7f9 f84d 	bl	8000d84 <__aeabi_fmul>
 8007cea:	4639      	mov	r1, r7
 8007cec:	4680      	mov	r8, r0
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f7f9 f848 	bl	8000d84 <__aeabi_fmul>
 8007cf4:	4601      	mov	r1, r0
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	f7f8 ff3c 	bl	8000b74 <__addsf3>
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4606      	mov	r6, r0
 8007d00:	4658      	mov	r0, fp
 8007d02:	f7f9 f83f 	bl	8000d84 <__aeabi_fmul>
 8007d06:	4601      	mov	r1, r0
 8007d08:	4607      	mov	r7, r0
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7f8 ff32 	bl	8000b74 <__addsf3>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	4680      	mov	r8, r0
 8007d16:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8007d1a:	f340 8141 	ble.w	8007fa0 <__ieee754_powf+0x4d8>
 8007d1e:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8007d22:	f240 812a 	bls.w	8007f7a <__ieee754_powf+0x4b2>
 8007d26:	2100      	movs	r1, #0
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f7f9 f9c9 	bl	80010c0 <__aeabi_fcmplt>
 8007d2e:	3800      	subs	r0, #0
 8007d30:	bf18      	it	ne
 8007d32:	2001      	movne	r0, #1
 8007d34:	e776      	b.n	8007c24 <__ieee754_powf+0x15c>
 8007d36:	bf00      	nop
 8007d38:	3f7ffff3 	.word	0x3f7ffff3
 8007d3c:	3f800007 	.word	0x3f800007
 8007d40:	3fb8aa00 	.word	0x3fb8aa00
 8007d44:	36eca570 	.word	0x36eca570
 8007d48:	3eaaaaab 	.word	0x3eaaaaab
 8007d4c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007d50:	bf800000 	.word	0xbf800000
 8007d54:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8007d58:	f040 810b 	bne.w	8007f72 <__ieee754_powf+0x4aa>
 8007d5c:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8007d60:	f7f9 f810 	bl	8000d84 <__aeabi_fmul>
 8007d64:	f06f 0217 	mvn.w	r2, #23
 8007d68:	4682      	mov	sl, r0
 8007d6a:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8007d6e:	3b7f      	subs	r3, #127	@ 0x7f
 8007d70:	441a      	add	r2, r3
 8007d72:	4b96      	ldr	r3, [pc, #600]	@ (8007fcc <__ieee754_powf+0x504>)
 8007d74:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8007d78:	459a      	cmp	sl, r3
 8007d7a:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8007d7e:	dd06      	ble.n	8007d8e <__ieee754_powf+0x2c6>
 8007d80:	4b93      	ldr	r3, [pc, #588]	@ (8007fd0 <__ieee754_powf+0x508>)
 8007d82:	459a      	cmp	sl, r3
 8007d84:	f340 80f7 	ble.w	8007f76 <__ieee754_powf+0x4ae>
 8007d88:	3201      	adds	r2, #1
 8007d8a:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8007d8e:	2300      	movs	r3, #0
 8007d90:	9301      	str	r3, [sp, #4]
 8007d92:	9205      	str	r2, [sp, #20]
 8007d94:	4b8f      	ldr	r3, [pc, #572]	@ (8007fd4 <__ieee754_powf+0x50c>)
 8007d96:	9a01      	ldr	r2, [sp, #4]
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8007d9e:	46b2      	mov	sl, r6
 8007da0:	4659      	mov	r1, fp
 8007da2:	f7f8 fee5 	bl	8000b70 <__aeabi_fsub>
 8007da6:	4631      	mov	r1, r6
 8007da8:	4681      	mov	r9, r0
 8007daa:	4658      	mov	r0, fp
 8007dac:	f7f8 fee2 	bl	8000b74 <__addsf3>
 8007db0:	4601      	mov	r1, r0
 8007db2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007db6:	f7f9 f899 	bl	8000eec <__aeabi_fdiv>
 8007dba:	4601      	mov	r1, r0
 8007dbc:	9004      	str	r0, [sp, #16]
 8007dbe:	4648      	mov	r0, r9
 8007dc0:	f7f8 ffe0 	bl	8000d84 <__aeabi_fmul>
 8007dc4:	9002      	str	r0, [sp, #8]
 8007dc6:	9b02      	ldr	r3, [sp, #8]
 8007dc8:	1076      	asrs	r6, r6, #1
 8007dca:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 8007dce:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8007dd2:	9b01      	ldr	r3, [sp, #4]
 8007dd4:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8007dd8:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8007ddc:	f028 080f 	bic.w	r8, r8, #15
 8007de0:	4631      	mov	r1, r6
 8007de2:	4640      	mov	r0, r8
 8007de4:	f7f8 ffce 	bl	8000d84 <__aeabi_fmul>
 8007de8:	4601      	mov	r1, r0
 8007dea:	4648      	mov	r0, r9
 8007dec:	f7f8 fec0 	bl	8000b70 <__aeabi_fsub>
 8007df0:	4659      	mov	r1, fp
 8007df2:	4681      	mov	r9, r0
 8007df4:	4630      	mov	r0, r6
 8007df6:	f7f8 febb 	bl	8000b70 <__aeabi_fsub>
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	4650      	mov	r0, sl
 8007dfe:	f7f8 feb7 	bl	8000b70 <__aeabi_fsub>
 8007e02:	4641      	mov	r1, r8
 8007e04:	f7f8 ffbe 	bl	8000d84 <__aeabi_fmul>
 8007e08:	4601      	mov	r1, r0
 8007e0a:	4648      	mov	r0, r9
 8007e0c:	f7f8 feb0 	bl	8000b70 <__aeabi_fsub>
 8007e10:	9b04      	ldr	r3, [sp, #16]
 8007e12:	4619      	mov	r1, r3
 8007e14:	f7f8 ffb6 	bl	8000d84 <__aeabi_fmul>
 8007e18:	9902      	ldr	r1, [sp, #8]
 8007e1a:	4683      	mov	fp, r0
 8007e1c:	4608      	mov	r0, r1
 8007e1e:	f7f8 ffb1 	bl	8000d84 <__aeabi_fmul>
 8007e22:	4606      	mov	r6, r0
 8007e24:	496c      	ldr	r1, [pc, #432]	@ (8007fd8 <__ieee754_powf+0x510>)
 8007e26:	f7f8 ffad 	bl	8000d84 <__aeabi_fmul>
 8007e2a:	496c      	ldr	r1, [pc, #432]	@ (8007fdc <__ieee754_powf+0x514>)
 8007e2c:	f7f8 fea2 	bl	8000b74 <__addsf3>
 8007e30:	4631      	mov	r1, r6
 8007e32:	f7f8 ffa7 	bl	8000d84 <__aeabi_fmul>
 8007e36:	496a      	ldr	r1, [pc, #424]	@ (8007fe0 <__ieee754_powf+0x518>)
 8007e38:	f7f8 fe9c 	bl	8000b74 <__addsf3>
 8007e3c:	4631      	mov	r1, r6
 8007e3e:	f7f8 ffa1 	bl	8000d84 <__aeabi_fmul>
 8007e42:	4968      	ldr	r1, [pc, #416]	@ (8007fe4 <__ieee754_powf+0x51c>)
 8007e44:	f7f8 fe96 	bl	8000b74 <__addsf3>
 8007e48:	4631      	mov	r1, r6
 8007e4a:	f7f8 ff9b 	bl	8000d84 <__aeabi_fmul>
 8007e4e:	4966      	ldr	r1, [pc, #408]	@ (8007fe8 <__ieee754_powf+0x520>)
 8007e50:	f7f8 fe90 	bl	8000b74 <__addsf3>
 8007e54:	4631      	mov	r1, r6
 8007e56:	f7f8 ff95 	bl	8000d84 <__aeabi_fmul>
 8007e5a:	4964      	ldr	r1, [pc, #400]	@ (8007fec <__ieee754_powf+0x524>)
 8007e5c:	f7f8 fe8a 	bl	8000b74 <__addsf3>
 8007e60:	4631      	mov	r1, r6
 8007e62:	4681      	mov	r9, r0
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7f8 ff8d 	bl	8000d84 <__aeabi_fmul>
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	4648      	mov	r0, r9
 8007e6e:	f7f8 ff89 	bl	8000d84 <__aeabi_fmul>
 8007e72:	4606      	mov	r6, r0
 8007e74:	4641      	mov	r1, r8
 8007e76:	9802      	ldr	r0, [sp, #8]
 8007e78:	f7f8 fe7c 	bl	8000b74 <__addsf3>
 8007e7c:	4659      	mov	r1, fp
 8007e7e:	f7f8 ff81 	bl	8000d84 <__aeabi_fmul>
 8007e82:	4631      	mov	r1, r6
 8007e84:	f7f8 fe76 	bl	8000b74 <__addsf3>
 8007e88:	4641      	mov	r1, r8
 8007e8a:	4681      	mov	r9, r0
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	f7f8 ff79 	bl	8000d84 <__aeabi_fmul>
 8007e92:	4957      	ldr	r1, [pc, #348]	@ (8007ff0 <__ieee754_powf+0x528>)
 8007e94:	4682      	mov	sl, r0
 8007e96:	f7f8 fe6d 	bl	8000b74 <__addsf3>
 8007e9a:	4649      	mov	r1, r9
 8007e9c:	f7f8 fe6a 	bl	8000b74 <__addsf3>
 8007ea0:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8007ea4:	f026 060f 	bic.w	r6, r6, #15
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4640      	mov	r0, r8
 8007eac:	f7f8 ff6a 	bl	8000d84 <__aeabi_fmul>
 8007eb0:	494f      	ldr	r1, [pc, #316]	@ (8007ff0 <__ieee754_powf+0x528>)
 8007eb2:	4680      	mov	r8, r0
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f7f8 fe5b 	bl	8000b70 <__aeabi_fsub>
 8007eba:	4651      	mov	r1, sl
 8007ebc:	f7f8 fe58 	bl	8000b70 <__aeabi_fsub>
 8007ec0:	4601      	mov	r1, r0
 8007ec2:	4648      	mov	r0, r9
 8007ec4:	f7f8 fe54 	bl	8000b70 <__aeabi_fsub>
 8007ec8:	9902      	ldr	r1, [sp, #8]
 8007eca:	f7f8 ff5b 	bl	8000d84 <__aeabi_fmul>
 8007ece:	4631      	mov	r1, r6
 8007ed0:	4681      	mov	r9, r0
 8007ed2:	4658      	mov	r0, fp
 8007ed4:	f7f8 ff56 	bl	8000d84 <__aeabi_fmul>
 8007ed8:	4601      	mov	r1, r0
 8007eda:	4648      	mov	r0, r9
 8007edc:	f7f8 fe4a 	bl	8000b74 <__addsf3>
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	4601      	mov	r1, r0
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	f7f8 fe45 	bl	8000b74 <__addsf3>
 8007eea:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8007eee:	f026 060f 	bic.w	r6, r6, #15
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	493f      	ldr	r1, [pc, #252]	@ (8007ff4 <__ieee754_powf+0x52c>)
 8007ef6:	f7f8 ff45 	bl	8000d84 <__aeabi_fmul>
 8007efa:	4641      	mov	r1, r8
 8007efc:	4681      	mov	r9, r0
 8007efe:	4630      	mov	r0, r6
 8007f00:	f7f8 fe36 	bl	8000b70 <__aeabi_fsub>
 8007f04:	4601      	mov	r1, r0
 8007f06:	4650      	mov	r0, sl
 8007f08:	f7f8 fe32 	bl	8000b70 <__aeabi_fsub>
 8007f0c:	493a      	ldr	r1, [pc, #232]	@ (8007ff8 <__ieee754_powf+0x530>)
 8007f0e:	f7f8 ff39 	bl	8000d84 <__aeabi_fmul>
 8007f12:	493a      	ldr	r1, [pc, #232]	@ (8007ffc <__ieee754_powf+0x534>)
 8007f14:	4680      	mov	r8, r0
 8007f16:	4630      	mov	r0, r6
 8007f18:	f7f8 ff34 	bl	8000d84 <__aeabi_fmul>
 8007f1c:	4601      	mov	r1, r0
 8007f1e:	4640      	mov	r0, r8
 8007f20:	f7f8 fe28 	bl	8000b74 <__addsf3>
 8007f24:	4b36      	ldr	r3, [pc, #216]	@ (8008000 <__ieee754_powf+0x538>)
 8007f26:	9a01      	ldr	r2, [sp, #4]
 8007f28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f2c:	f7f8 fe22 	bl	8000b74 <__addsf3>
 8007f30:	9a05      	ldr	r2, [sp, #20]
 8007f32:	4606      	mov	r6, r0
 8007f34:	4610      	mov	r0, r2
 8007f36:	f7f8 fed1 	bl	8000cdc <__aeabi_i2f>
 8007f3a:	4680      	mov	r8, r0
 8007f3c:	4b31      	ldr	r3, [pc, #196]	@ (8008004 <__ieee754_powf+0x53c>)
 8007f3e:	9a01      	ldr	r2, [sp, #4]
 8007f40:	4631      	mov	r1, r6
 8007f42:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8007f46:	4648      	mov	r0, r9
 8007f48:	f7f8 fe14 	bl	8000b74 <__addsf3>
 8007f4c:	4651      	mov	r1, sl
 8007f4e:	f7f8 fe11 	bl	8000b74 <__addsf3>
 8007f52:	4641      	mov	r1, r8
 8007f54:	f7f8 fe0e 	bl	8000b74 <__addsf3>
 8007f58:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8007f5c:	f02b 0b0f 	bic.w	fp, fp, #15
 8007f60:	4641      	mov	r1, r8
 8007f62:	4658      	mov	r0, fp
 8007f64:	f7f8 fe04 	bl	8000b70 <__aeabi_fsub>
 8007f68:	4651      	mov	r1, sl
 8007f6a:	f7f8 fe01 	bl	8000b70 <__aeabi_fsub>
 8007f6e:	4649      	mov	r1, r9
 8007f70:	e6a2      	b.n	8007cb8 <__ieee754_powf+0x1f0>
 8007f72:	2200      	movs	r2, #0
 8007f74:	e6f9      	b.n	8007d6a <__ieee754_powf+0x2a2>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e70a      	b.n	8007d90 <__ieee754_powf+0x2c8>
 8007f7a:	d149      	bne.n	8008010 <__ieee754_powf+0x548>
 8007f7c:	4922      	ldr	r1, [pc, #136]	@ (8008008 <__ieee754_powf+0x540>)
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f7f8 fdf8 	bl	8000b74 <__addsf3>
 8007f84:	4639      	mov	r1, r7
 8007f86:	4681      	mov	r9, r0
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f7f8 fdf1 	bl	8000b70 <__aeabi_fsub>
 8007f8e:	4601      	mov	r1, r0
 8007f90:	4648      	mov	r0, r9
 8007f92:	f7f9 f8b3 	bl	80010fc <__aeabi_fcmpgt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f47f aec5 	bne.w	8007d26 <__ieee754_powf+0x25e>
 8007f9c:	2386      	movs	r3, #134	@ 0x86
 8007f9e:	e03c      	b.n	800801a <__ieee754_powf+0x552>
 8007fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800800c <__ieee754_powf+0x544>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d907      	bls.n	8007fb6 <__ieee754_powf+0x4ee>
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	4628      	mov	r0, r5
 8007faa:	f7f9 f889 	bl	80010c0 <__aeabi_fcmplt>
 8007fae:	3800      	subs	r0, #0
 8007fb0:	bf18      	it	ne
 8007fb2:	2001      	movne	r0, #1
 8007fb4:	e641      	b.n	8007c3a <__ieee754_powf+0x172>
 8007fb6:	d12b      	bne.n	8008010 <__ieee754_powf+0x548>
 8007fb8:	4639      	mov	r1, r7
 8007fba:	f7f8 fdd9 	bl	8000b70 <__aeabi_fsub>
 8007fbe:	4631      	mov	r1, r6
 8007fc0:	f7f9 f892 	bl	80010e8 <__aeabi_fcmpge>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d0e9      	beq.n	8007f9c <__ieee754_powf+0x4d4>
 8007fc8:	e7ed      	b.n	8007fa6 <__ieee754_powf+0x4de>
 8007fca:	bf00      	nop
 8007fcc:	001cc471 	.word	0x001cc471
 8007fd0:	005db3d6 	.word	0x005db3d6
 8007fd4:	080093a8 	.word	0x080093a8
 8007fd8:	3e53f142 	.word	0x3e53f142
 8007fdc:	3e6c3255 	.word	0x3e6c3255
 8007fe0:	3e8ba305 	.word	0x3e8ba305
 8007fe4:	3eaaaaab 	.word	0x3eaaaaab
 8007fe8:	3edb6db7 	.word	0x3edb6db7
 8007fec:	3f19999a 	.word	0x3f19999a
 8007ff0:	40400000 	.word	0x40400000
 8007ff4:	3f763800 	.word	0x3f763800
 8007ff8:	3f76384f 	.word	0x3f76384f
 8007ffc:	369dc3a0 	.word	0x369dc3a0
 8008000:	08009398 	.word	0x08009398
 8008004:	080093a0 	.word	0x080093a0
 8008008:	3338aa3c 	.word	0x3338aa3c
 800800c:	43160000 	.word	0x43160000
 8008010:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8008014:	f240 809b 	bls.w	800814e <__ieee754_powf+0x686>
 8008018:	15db      	asrs	r3, r3, #23
 800801a:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800801e:	3b7e      	subs	r3, #126	@ 0x7e
 8008020:	411c      	asrs	r4, r3
 8008022:	4444      	add	r4, r8
 8008024:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8008028:	494d      	ldr	r1, [pc, #308]	@ (8008160 <__ieee754_powf+0x698>)
 800802a:	3b7f      	subs	r3, #127	@ 0x7f
 800802c:	4119      	asrs	r1, r3
 800802e:	4021      	ands	r1, r4
 8008030:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8008034:	f1c3 0317 	rsb	r3, r3, #23
 8008038:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800803c:	4638      	mov	r0, r7
 800803e:	411c      	asrs	r4, r3
 8008040:	f1b8 0f00 	cmp.w	r8, #0
 8008044:	bfb8      	it	lt
 8008046:	4264      	neglt	r4, r4
 8008048:	f7f8 fd92 	bl	8000b70 <__aeabi_fsub>
 800804c:	4607      	mov	r7, r0
 800804e:	4631      	mov	r1, r6
 8008050:	4638      	mov	r0, r7
 8008052:	f7f8 fd8f 	bl	8000b74 <__addsf3>
 8008056:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800805a:	f028 080f 	bic.w	r8, r8, #15
 800805e:	4640      	mov	r0, r8
 8008060:	4940      	ldr	r1, [pc, #256]	@ (8008164 <__ieee754_powf+0x69c>)
 8008062:	f7f8 fe8f 	bl	8000d84 <__aeabi_fmul>
 8008066:	4639      	mov	r1, r7
 8008068:	4681      	mov	r9, r0
 800806a:	4640      	mov	r0, r8
 800806c:	f7f8 fd80 	bl	8000b70 <__aeabi_fsub>
 8008070:	4601      	mov	r1, r0
 8008072:	4630      	mov	r0, r6
 8008074:	f7f8 fd7c 	bl	8000b70 <__aeabi_fsub>
 8008078:	493b      	ldr	r1, [pc, #236]	@ (8008168 <__ieee754_powf+0x6a0>)
 800807a:	f7f8 fe83 	bl	8000d84 <__aeabi_fmul>
 800807e:	493b      	ldr	r1, [pc, #236]	@ (800816c <__ieee754_powf+0x6a4>)
 8008080:	4606      	mov	r6, r0
 8008082:	4640      	mov	r0, r8
 8008084:	f7f8 fe7e 	bl	8000d84 <__aeabi_fmul>
 8008088:	4601      	mov	r1, r0
 800808a:	4630      	mov	r0, r6
 800808c:	f7f8 fd72 	bl	8000b74 <__addsf3>
 8008090:	4607      	mov	r7, r0
 8008092:	4601      	mov	r1, r0
 8008094:	4648      	mov	r0, r9
 8008096:	f7f8 fd6d 	bl	8000b74 <__addsf3>
 800809a:	4649      	mov	r1, r9
 800809c:	4606      	mov	r6, r0
 800809e:	f7f8 fd67 	bl	8000b70 <__aeabi_fsub>
 80080a2:	4601      	mov	r1, r0
 80080a4:	4638      	mov	r0, r7
 80080a6:	f7f8 fd63 	bl	8000b70 <__aeabi_fsub>
 80080aa:	4631      	mov	r1, r6
 80080ac:	4680      	mov	r8, r0
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7f8 fe68 	bl	8000d84 <__aeabi_fmul>
 80080b4:	4607      	mov	r7, r0
 80080b6:	492e      	ldr	r1, [pc, #184]	@ (8008170 <__ieee754_powf+0x6a8>)
 80080b8:	f7f8 fe64 	bl	8000d84 <__aeabi_fmul>
 80080bc:	492d      	ldr	r1, [pc, #180]	@ (8008174 <__ieee754_powf+0x6ac>)
 80080be:	f7f8 fd57 	bl	8000b70 <__aeabi_fsub>
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fe5e 	bl	8000d84 <__aeabi_fmul>
 80080c8:	492b      	ldr	r1, [pc, #172]	@ (8008178 <__ieee754_powf+0x6b0>)
 80080ca:	f7f8 fd53 	bl	8000b74 <__addsf3>
 80080ce:	4639      	mov	r1, r7
 80080d0:	f7f8 fe58 	bl	8000d84 <__aeabi_fmul>
 80080d4:	4929      	ldr	r1, [pc, #164]	@ (800817c <__ieee754_powf+0x6b4>)
 80080d6:	f7f8 fd4b 	bl	8000b70 <__aeabi_fsub>
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 fe52 	bl	8000d84 <__aeabi_fmul>
 80080e0:	4927      	ldr	r1, [pc, #156]	@ (8008180 <__ieee754_powf+0x6b8>)
 80080e2:	f7f8 fd47 	bl	8000b74 <__addsf3>
 80080e6:	4639      	mov	r1, r7
 80080e8:	f7f8 fe4c 	bl	8000d84 <__aeabi_fmul>
 80080ec:	4601      	mov	r1, r0
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7f8 fd3e 	bl	8000b70 <__aeabi_fsub>
 80080f4:	4607      	mov	r7, r0
 80080f6:	4601      	mov	r1, r0
 80080f8:	4630      	mov	r0, r6
 80080fa:	f7f8 fe43 	bl	8000d84 <__aeabi_fmul>
 80080fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008102:	4681      	mov	r9, r0
 8008104:	4638      	mov	r0, r7
 8008106:	f7f8 fd33 	bl	8000b70 <__aeabi_fsub>
 800810a:	4601      	mov	r1, r0
 800810c:	4648      	mov	r0, r9
 800810e:	f7f8 feed 	bl	8000eec <__aeabi_fdiv>
 8008112:	4641      	mov	r1, r8
 8008114:	4607      	mov	r7, r0
 8008116:	4630      	mov	r0, r6
 8008118:	f7f8 fe34 	bl	8000d84 <__aeabi_fmul>
 800811c:	4641      	mov	r1, r8
 800811e:	f7f8 fd29 	bl	8000b74 <__addsf3>
 8008122:	4601      	mov	r1, r0
 8008124:	4638      	mov	r0, r7
 8008126:	f7f8 fd23 	bl	8000b70 <__aeabi_fsub>
 800812a:	4631      	mov	r1, r6
 800812c:	f7f8 fd20 	bl	8000b70 <__aeabi_fsub>
 8008130:	4601      	mov	r1, r0
 8008132:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008136:	f7f8 fd1b 	bl	8000b70 <__aeabi_fsub>
 800813a:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800813e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008142:	da06      	bge.n	8008152 <__ieee754_powf+0x68a>
 8008144:	4621      	mov	r1, r4
 8008146:	f000 f821 	bl	800818c <scalbnf>
 800814a:	4629      	mov	r1, r5
 800814c:	e526      	b.n	8007b9c <__ieee754_powf+0xd4>
 800814e:	2400      	movs	r4, #0
 8008150:	e77d      	b.n	800804e <__ieee754_powf+0x586>
 8008152:	4618      	mov	r0, r3
 8008154:	e7f9      	b.n	800814a <__ieee754_powf+0x682>
 8008156:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800815a:	e50b      	b.n	8007b74 <__ieee754_powf+0xac>
 800815c:	2100      	movs	r1, #0
 800815e:	e509      	b.n	8007b74 <__ieee754_powf+0xac>
 8008160:	ff800000 	.word	0xff800000
 8008164:	3f317200 	.word	0x3f317200
 8008168:	3f317218 	.word	0x3f317218
 800816c:	35bfbe8c 	.word	0x35bfbe8c
 8008170:	3331bb4c 	.word	0x3331bb4c
 8008174:	35ddea0e 	.word	0x35ddea0e
 8008178:	388ab355 	.word	0x388ab355
 800817c:	3b360b61 	.word	0x3b360b61
 8008180:	3e2aaaab 	.word	0x3e2aaaab

08008184 <fabsf>:
 8008184:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008188:	4770      	bx	lr
	...

0800818c <scalbnf>:
 800818c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4603      	mov	r3, r0
 8008194:	460d      	mov	r5, r1
 8008196:	4604      	mov	r4, r0
 8008198:	d02e      	beq.n	80081f8 <scalbnf+0x6c>
 800819a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800819e:	d304      	bcc.n	80081aa <scalbnf+0x1e>
 80081a0:	4601      	mov	r1, r0
 80081a2:	f7f8 fce7 	bl	8000b74 <__addsf3>
 80081a6:	4603      	mov	r3, r0
 80081a8:	e026      	b.n	80081f8 <scalbnf+0x6c>
 80081aa:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 80081ae:	d118      	bne.n	80081e2 <scalbnf+0x56>
 80081b0:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80081b4:	f7f8 fde6 	bl	8000d84 <__aeabi_fmul>
 80081b8:	4a17      	ldr	r2, [pc, #92]	@ (8008218 <scalbnf+0x8c>)
 80081ba:	4603      	mov	r3, r0
 80081bc:	4295      	cmp	r5, r2
 80081be:	db0c      	blt.n	80081da <scalbnf+0x4e>
 80081c0:	4604      	mov	r4, r0
 80081c2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80081c6:	3a19      	subs	r2, #25
 80081c8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80081cc:	428d      	cmp	r5, r1
 80081ce:	dd0a      	ble.n	80081e6 <scalbnf+0x5a>
 80081d0:	4912      	ldr	r1, [pc, #72]	@ (800821c <scalbnf+0x90>)
 80081d2:	4618      	mov	r0, r3
 80081d4:	f361 001e 	bfi	r0, r1, #0, #31
 80081d8:	e000      	b.n	80081dc <scalbnf+0x50>
 80081da:	4911      	ldr	r1, [pc, #68]	@ (8008220 <scalbnf+0x94>)
 80081dc:	f7f8 fdd2 	bl	8000d84 <__aeabi_fmul>
 80081e0:	e7e1      	b.n	80081a6 <scalbnf+0x1a>
 80081e2:	0dd2      	lsrs	r2, r2, #23
 80081e4:	e7f0      	b.n	80081c8 <scalbnf+0x3c>
 80081e6:	1951      	adds	r1, r2, r5
 80081e8:	29fe      	cmp	r1, #254	@ 0xfe
 80081ea:	dcf1      	bgt.n	80081d0 <scalbnf+0x44>
 80081ec:	2900      	cmp	r1, #0
 80081ee:	dd05      	ble.n	80081fc <scalbnf+0x70>
 80081f0:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80081f4:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 80081f8:	4618      	mov	r0, r3
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	f111 0f16 	cmn.w	r1, #22
 8008200:	da01      	bge.n	8008206 <scalbnf+0x7a>
 8008202:	4907      	ldr	r1, [pc, #28]	@ (8008220 <scalbnf+0x94>)
 8008204:	e7e5      	b.n	80081d2 <scalbnf+0x46>
 8008206:	f101 0019 	add.w	r0, r1, #25
 800820a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800820e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8008212:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8008216:	e7e1      	b.n	80081dc <scalbnf+0x50>
 8008218:	ffff3cb0 	.word	0xffff3cb0
 800821c:	7149f2ca 	.word	0x7149f2ca
 8008220:	0da24260 	.word	0x0da24260

08008224 <with_errnof>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4604      	mov	r4, r0
 8008228:	460d      	mov	r5, r1
 800822a:	f7fc f911 	bl	8004450 <__errno>
 800822e:	6005      	str	r5, [r0, #0]
 8008230:	4620      	mov	r0, r4
 8008232:	bd38      	pop	{r3, r4, r5, pc}

08008234 <xflowf>:
 8008234:	b508      	push	{r3, lr}
 8008236:	b140      	cbz	r0, 800824a <xflowf+0x16>
 8008238:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800823c:	f7f8 fda2 	bl	8000d84 <__aeabi_fmul>
 8008240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008244:	2122      	movs	r1, #34	@ 0x22
 8008246:	f7ff bfed 	b.w	8008224 <with_errnof>
 800824a:	4608      	mov	r0, r1
 800824c:	e7f6      	b.n	800823c <xflowf+0x8>

0800824e <__math_uflowf>:
 800824e:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8008252:	f7ff bfef 	b.w	8008234 <xflowf>

08008256 <__math_oflowf>:
 8008256:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800825a:	f7ff bfeb 	b.w	8008234 <xflowf>
	...

08008260 <__ieee754_sqrtf>:
 8008260:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8008264:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800826c:	4603      	mov	r3, r0
 800826e:	4604      	mov	r4, r0
 8008270:	d30a      	bcc.n	8008288 <__ieee754_sqrtf+0x28>
 8008272:	4601      	mov	r1, r0
 8008274:	f7f8 fd86 	bl	8000d84 <__aeabi_fmul>
 8008278:	4601      	mov	r1, r0
 800827a:	4620      	mov	r0, r4
 800827c:	f7f8 fc7a 	bl	8000b74 <__addsf3>
 8008280:	4604      	mov	r4, r0
 8008282:	4620      	mov	r0, r4
 8008284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008288:	2a00      	cmp	r2, #0
 800828a:	d0fa      	beq.n	8008282 <__ieee754_sqrtf+0x22>
 800828c:	2800      	cmp	r0, #0
 800828e:	da06      	bge.n	800829e <__ieee754_sqrtf+0x3e>
 8008290:	4601      	mov	r1, r0
 8008292:	f7f8 fc6d 	bl	8000b70 <__aeabi_fsub>
 8008296:	4601      	mov	r1, r0
 8008298:	f7f8 fe28 	bl	8000eec <__aeabi_fdiv>
 800829c:	e7f0      	b.n	8008280 <__ieee754_sqrtf+0x20>
 800829e:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 80082a2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80082a6:	d03e      	beq.n	8008326 <__ieee754_sqrtf+0xc6>
 80082a8:	2400      	movs	r4, #0
 80082aa:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 80082ae:	07ca      	lsls	r2, r1, #31
 80082b0:	f04f 0019 	mov.w	r0, #25
 80082b4:	4626      	mov	r6, r4
 80082b6:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80082ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80082be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082c2:	bf58      	it	pl
 80082c4:	005b      	lslpl	r3, r3, #1
 80082c6:	106d      	asrs	r5, r5, #1
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	1872      	adds	r2, r6, r1
 80082cc:	429a      	cmp	r2, r3
 80082ce:	bfcf      	iteee	gt
 80082d0:	461a      	movgt	r2, r3
 80082d2:	1856      	addle	r6, r2, r1
 80082d4:	1864      	addle	r4, r4, r1
 80082d6:	1a9a      	suble	r2, r3, r2
 80082d8:	3801      	subs	r0, #1
 80082da:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80082de:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80082e2:	d1f2      	bne.n	80082ca <__ieee754_sqrtf+0x6a>
 80082e4:	b1ba      	cbz	r2, 8008316 <__ieee754_sqrtf+0xb6>
 80082e6:	4e14      	ldr	r6, [pc, #80]	@ (8008338 <__ieee754_sqrtf+0xd8>)
 80082e8:	4f14      	ldr	r7, [pc, #80]	@ (800833c <__ieee754_sqrtf+0xdc>)
 80082ea:	6830      	ldr	r0, [r6, #0]
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	f7f8 fc3f 	bl	8000b70 <__aeabi_fsub>
 80082f2:	f8d6 8000 	ldr.w	r8, [r6]
 80082f6:	4601      	mov	r1, r0
 80082f8:	4640      	mov	r0, r8
 80082fa:	f7f8 feeb 	bl	80010d4 <__aeabi_fcmple>
 80082fe:	b150      	cbz	r0, 8008316 <__ieee754_sqrtf+0xb6>
 8008300:	6830      	ldr	r0, [r6, #0]
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	f7f8 fc36 	bl	8000b74 <__addsf3>
 8008308:	6836      	ldr	r6, [r6, #0]
 800830a:	4601      	mov	r1, r0
 800830c:	4630      	mov	r0, r6
 800830e:	f7f8 fed7 	bl	80010c0 <__aeabi_fcmplt>
 8008312:	b168      	cbz	r0, 8008330 <__ieee754_sqrtf+0xd0>
 8008314:	3402      	adds	r4, #2
 8008316:	1064      	asrs	r4, r4, #1
 8008318:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800831c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8008320:	e7af      	b.n	8008282 <__ieee754_sqrtf+0x22>
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	3201      	adds	r2, #1
 8008326:	0218      	lsls	r0, r3, #8
 8008328:	d5fb      	bpl.n	8008322 <__ieee754_sqrtf+0xc2>
 800832a:	3a01      	subs	r2, #1
 800832c:	1a89      	subs	r1, r1, r2
 800832e:	e7bb      	b.n	80082a8 <__ieee754_sqrtf+0x48>
 8008330:	3401      	adds	r4, #1
 8008332:	f024 0401 	bic.w	r4, r4, #1
 8008336:	e7ee      	b.n	8008316 <__ieee754_sqrtf+0xb6>
 8008338:	200001fc 	.word	0x200001fc
 800833c:	200001f8 	.word	0x200001f8

08008340 <_init>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	bf00      	nop
 8008344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008346:	bc08      	pop	{r3}
 8008348:	469e      	mov	lr, r3
 800834a:	4770      	bx	lr

0800834c <_fini>:
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	bf00      	nop
 8008350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008352:	bc08      	pop	{r3}
 8008354:	469e      	mov	lr, r3
 8008356:	4770      	bx	lr
