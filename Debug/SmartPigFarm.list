
SmartPigFarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099cc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001580  08009ae0  08009ae0  0000aae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b060  0800b060  0000d200  2**0
                  CONTENTS
  4 .ARM          00000008  0800b060  0800b060  0000c060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b068  0800b068  0000d200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b068  0800b068  0000c068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b06c  0800b06c  0000c06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800b070  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004094  20000200  0800b270  0000d200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004294  0800b270  0000d294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061c4  00000000  00000000  0000d229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d17  00000000  00000000  000133ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00015108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f7  00000000  00000000  000157e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188f4  00000000  00000000  00015cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ffd  00000000  00000000  0002e5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082e59  00000000  00000000  000385d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb429  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b4  00000000  00000000  000bb46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000be720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ac4 	.word	0x08009ac4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	08009ac4 	.word	0x08009ac4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2uiz>:
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	d20e      	bcs.n	800115e <__aeabi_f2uiz+0x22>
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30b      	bcc.n	800115e <__aeabi_f2uiz+0x22>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d409      	bmi.n	8001164 <__aeabi_f2uiz+0x28>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2uiz+0x32>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d102      	bne.n	8001174 <__aeabi_f2uiz+0x38>
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	4770      	bx	lr
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <__aeabi_d2lz>:
 800117c:	b538      	push	{r3, r4, r5, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	2300      	movs	r3, #0
 8001182:	4604      	mov	r4, r0
 8001184:	460d      	mov	r5, r1
 8001186:	f7ff fc19 	bl	80009bc <__aeabi_dcmplt>
 800118a:	b928      	cbnz	r0, 8001198 <__aeabi_d2lz+0x1c>
 800118c:	4620      	mov	r0, r4
 800118e:	4629      	mov	r1, r5
 8001190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001194:	f000 b80a 	b.w	80011ac <__aeabi_d2ulz>
 8001198:	4620      	mov	r0, r4
 800119a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800119e:	f000 f805 	bl	80011ac <__aeabi_d2ulz>
 80011a2:	4240      	negs	r0, r0
 80011a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a8:	bd38      	pop	{r3, r4, r5, pc}
 80011aa:	bf00      	nop

080011ac <__aeabi_d2ulz>:
 80011ac:	b5d0      	push	{r4, r6, r7, lr}
 80011ae:	2200      	movs	r2, #0
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <__aeabi_d2ulz+0x34>)
 80011b2:	4606      	mov	r6, r0
 80011b4:	460f      	mov	r7, r1
 80011b6:	f7ff f98f 	bl	80004d8 <__aeabi_dmul>
 80011ba:	f7ff fc65 	bl	8000a88 <__aeabi_d2uiz>
 80011be:	4604      	mov	r4, r0
 80011c0:	f7ff f910 	bl	80003e4 <__aeabi_ui2d>
 80011c4:	2200      	movs	r2, #0
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <__aeabi_d2ulz+0x38>)
 80011c8:	f7ff f986 	bl	80004d8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4630      	mov	r0, r6
 80011d2:	4639      	mov	r1, r7
 80011d4:	f7fe ffc8 	bl	8000168 <__aeabi_dsub>
 80011d8:	f7ff fc56 	bl	8000a88 <__aeabi_d2uiz>
 80011dc:	4621      	mov	r1, r4
 80011de:	bdd0      	pop	{r4, r6, r7, pc}
 80011e0:	3df00000 	.word	0x3df00000
 80011e4:	41f00000 	.word	0x41f00000

080011e8 <main>:
/**
 * @brief The application entry point.
 * @retval int
 */
int main(void)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b08e      	sub	sp, #56	@ 0x38
 80011ec:	af04      	add	r7, sp, #16
  // HAL Initialization
  HAL_Init();
 80011ee:	f000 fbd5 	bl	800199c <HAL_Init>
  SystemClock_Config();
 80011f2:	f000 fa57 	bl	80016a4 <SystemClock_Config>
  USARTx_Init(USART1, PA9PA10, 115200);
 80011f6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011fa:	2100      	movs	r1, #0
 80011fc:	48b1      	ldr	r0, [pc, #708]	@ (80014c4 <main+0x2dc>)
 80011fe:	f001 fe15 	bl	8002e2c <USARTx_Init>

  // Display welcome message
  printf("HE THONG GIAM SAT KHI NH3 & H2S\n");
 8001202:	48b1      	ldr	r0, [pc, #708]	@ (80014c8 <main+0x2e0>)
 8001204:	f004 f9d8 	bl	80055b8 <puts>
  printf("CAM BIEN: MQ137 + MQ136 + RTC DS3231\r\n");
 8001208:	48b0      	ldr	r0, [pc, #704]	@ (80014cc <main+0x2e4>)
 800120a:	f004 f9d5 	bl	80055b8 <puts>
 
  // =============================================================================
  // KHỞI TẠO RTC DS3231 - ĐơN GIẢN
  // =============================================================================
  printf("\r\nKHOI TAO RTC DS3231 \r\n");
 800120e:	48b0      	ldr	r0, [pc, #704]	@ (80014d0 <main+0x2e8>)
 8001210:	f004 f9d2 	bl	80055b8 <puts>
  
  // Khởi tạo I2C cho DS3231
  I2Cx_Init(I2C1, Pin_PB6PB7, 100000);
 8001214:	4aaf      	ldr	r2, [pc, #700]	@ (80014d4 <main+0x2ec>)
 8001216:	2100      	movs	r1, #0
 8001218:	48af      	ldr	r0, [pc, #700]	@ (80014d8 <main+0x2f0>)
 800121a:	f001 fc79 	bl	8002b10 <I2Cx_Init>
  printf(" I2C1 da khoi tao cho DS3231\r\n");
 800121e:	48af      	ldr	r0, [pc, #700]	@ (80014dc <main+0x2f4>)
 8001220:	f004 f9ca 	bl	80055b8 <puts>
  // Uncomment dòng dưới để set thời gian:
  // DS3231Set(0, 18, 0, 7, 12, 7, 25);  // 17:15:00, Thứ 6, 11/07/2025
  
  // Test đọc thời gian với biến local
  uint8_t test_gio, test_phut, test_giay, test_thu, test_ngay, test_thang, test_nam;
  DS3231Read(&test_gio, &test_phut, &test_giay, &test_thu, &test_ngay, &test_thang, &test_nam);
 8001224:	f107 0411 	add.w	r4, r7, #17
 8001228:	f107 0212 	add.w	r2, r7, #18
 800122c:	f107 0113 	add.w	r1, r7, #19
 8001230:	f107 0014 	add.w	r0, r7, #20
 8001234:	f107 030e 	add.w	r3, r7, #14
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	f107 030f 	add.w	r3, r7, #15
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	4623      	mov	r3, r4
 8001248:	f001 fda2 	bl	8002d90 <DS3231Read>
  printf("Thoi gian hien tai: %02d:%02d:%02d %02d/%02d/20%02d\r\n",
 800124c:	7d3b      	ldrb	r3, [r7, #20]
 800124e:	4618      	mov	r0, r3
 8001250:	7cfb      	ldrb	r3, [r7, #19]
 8001252:	461c      	mov	r4, r3
 8001254:	7cbb      	ldrb	r3, [r7, #18]
 8001256:	461d      	mov	r5, r3
 8001258:	7c3b      	ldrb	r3, [r7, #16]
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	7bb9      	ldrb	r1, [r7, #14]
 800125e:	9102      	str	r1, [sp, #8]
 8001260:	9201      	str	r2, [sp, #4]
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	462b      	mov	r3, r5
 8001266:	4622      	mov	r2, r4
 8001268:	4601      	mov	r1, r0
 800126a:	489d      	ldr	r0, [pc, #628]	@ (80014e0 <main+0x2f8>)
 800126c:	f004 f93c 	bl	80054e8 <iprintf>
         test_gio, test_phut, test_giay, test_ngay, test_thang, test_nam);
  
  printf(" RTC da san sang\r\n");
 8001270:	489c      	ldr	r0, [pc, #624]	@ (80014e4 <main+0x2fc>)
 8001272:	f004 f9a1 	bl	80055b8 <puts>
  // =============================================================================
  // KHỞI TẠO HỆ THỐNG CẢM BIẾN (GỮ NGUYÊN)
  // =============================================================================
  
  // Khởi tạo hệ thống cảm biến
  InitSensorSystem();
 8001276:	f002 faf1 	bl	800385c <InitSensorSystem>
  // Test hệ thống
  //TestSensorSystem();

  // Hiệu chuẩn nếu cần (uncomment để chạy)
  //CalibrateSensors();
  SetManualR0(26000, 37000); // Set R0 cho MQ137 & MQ136
 800127a:	499b      	ldr	r1, [pc, #620]	@ (80014e8 <main+0x300>)
 800127c:	489b      	ldr	r0, [pc, #620]	@ (80014ec <main+0x304>)
 800127e:	f003 f8cd 	bl	800441c <SetManualR0>
  printf("\r\n BAT DAU GIAM SAT\r\n");
 8001282:	489b      	ldr	r0, [pc, #620]	@ (80014f0 <main+0x308>)
 8001284:	f004 f998 	bl	80055b8 <puts>
  printf("Press any key to stop...\r\n");
 8001288:	489a      	ldr	r0, [pc, #616]	@ (80014f4 <main+0x30c>)
 800128a:	f004 f995 	bl	80055b8 <puts>

  // =============================================================================
  // BIẾN ĐỂ QUẢN LÝ LOG THEO THỜI GIAN
  // =============================================================================
  uint32_t last_log_minute = 255; // Giá trị ban đầu không hợp lệ để force log lần đầu
 800128e:	23ff      	movs	r3, #255	@ 0xff
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t display_counter = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  GPIOx_Init(GPIOB,3 , OUTPUT_PP ,NOPULL, MODE_OUTPUT_50MHZ);
 8001298:	2303      	movs	r3, #3
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2200      	movs	r2, #0
 80012a0:	2103      	movs	r1, #3
 80012a2:	4895      	ldr	r0, [pc, #596]	@ (80014f8 <main+0x310>)
 80012a4:	f001 fb5a 	bl	800295c <GPIOx_Init>
  {
    // =============================================================================
    // ĐỌC THỜI GIAN RTC - SỬ DỤNG BIẾN LOCAL
    // =============================================================================
    uint8_t current_gio, current_phut, current_giay, current_thu, current_ngay, current_thang, current_nam;
    DS3231Read(&current_gio, &current_phut, &current_giay, &current_thu, &current_ngay, &current_thang, &current_nam);
 80012a8:	f107 040a 	add.w	r4, r7, #10
 80012ac:	f107 020b 	add.w	r2, r7, #11
 80012b0:	f107 010c 	add.w	r1, r7, #12
 80012b4:	f107 000d 	add.w	r0, r7, #13
 80012b8:	1dfb      	adds	r3, r7, #7
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	f107 0309 	add.w	r3, r7, #9
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	4623      	mov	r3, r4
 80012ca:	f001 fd61 	bl	8002d90 <DS3231Read>
    
    // =============================================================================
    // XỬ LÝ CẢM BIẾN VỚI TIMESTAMP
    // =============================================================================
    printf("\r\n[%02d:%02d:%02d] XU LY CAM BIEN \r\n", 
 80012ce:	7b7b      	ldrb	r3, [r7, #13]
 80012d0:	4619      	mov	r1, r3
 80012d2:	7b3b      	ldrb	r3, [r7, #12]
 80012d4:	461a      	mov	r2, r3
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	4888      	ldr	r0, [pc, #544]	@ (80014fc <main+0x314>)
 80012da:	f004 f905 	bl	80054e8 <iprintf>
           current_gio, current_phut, current_giay);
    
    // Xử lý tất cả cảm biến
    ProcessAllSensors();
 80012de:	f002 fb4d 	bl	800397c <ProcessAllSensors>

    // Hiển thị trạng thái chi tiết (mỗi 5 lần)
    if(++display_counter >= 5) {
 80012e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012e6:	3301      	adds	r3, #1
 80012e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d916      	bls.n	8001322 <main+0x13a>
        display_counter = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        printf("\r\n=== [%02d:%02d:%02d %02d/%02d/20%02d] TRANG THAI HE THONG ===\r\n",
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	4618      	mov	r0, r3
 80012fe:	7b3b      	ldrb	r3, [r7, #12]
 8001300:	461c      	mov	r4, r3
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	461d      	mov	r5, r3
 8001306:	7a7b      	ldrb	r3, [r7, #9]
 8001308:	7a3a      	ldrb	r2, [r7, #8]
 800130a:	79f9      	ldrb	r1, [r7, #7]
 800130c:	9102      	str	r1, [sp, #8]
 800130e:	9201      	str	r2, [sp, #4]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	462b      	mov	r3, r5
 8001314:	4622      	mov	r2, r4
 8001316:	4601      	mov	r1, r0
 8001318:	4879      	ldr	r0, [pc, #484]	@ (8001500 <main+0x318>)
 800131a:	f004 f8e5 	bl	80054e8 <iprintf>
               current_gio, current_phut, current_giay, current_ngay, current_thang, current_nam);
        DisplaySystemStatus();
 800131e:	f002 fb6f 	bl	8003a00 <DisplaySystemStatus>
    }

    // Lấy giá trị để điều khiển
    float nh3_ppm = GetNH3_PPM();
 8001322:	f003 f8d3 	bl	80044cc <GetNH3_PPM>
 8001326:	61f8      	str	r0, [r7, #28]
    float h2s_ppm = GetH2S_PPM();
 8001328:	f003 f8e2 	bl	80044f0 <GetH2S_PPM>
 800132c:	61b8      	str	r0, [r7, #24]
    AlarmLevel_t nh3_alarm = GetNH3AlarmLevel();
 800132e:	f003 f8f3 	bl	8004518 <GetNH3AlarmLevel>
 8001332:	4603      	mov	r3, r0
 8001334:	75fb      	strb	r3, [r7, #23]
    AlarmLevel_t h2s_alarm = GetH2SAlarmLevel();
 8001336:	f003 f8fb 	bl	8004530 <GetH2SAlarmLevel>
 800133a:	4603      	mov	r3, r0
 800133c:	75bb      	strb	r3, [r7, #22]
    AlarmLevel_t system_alarm = GetSystemAlarmLevel();
 800133e:	f003 f903 	bl	8004548 <GetSystemAlarmLevel>
 8001342:	4603      	mov	r3, r0
 8001344:	757b      	strb	r3, [r7, #21]

    // =============================================================================
    // LOG DỮ LIỆU THEO THỜI GIAN (MỖI 5 PHÚT)
    // =============================================================================
    // Kiểm tra nếu phút chia hết cho 5 và khác với lần log trước
    if((current_phut % 5 == 0) && (current_phut != last_log_minute)) {
 8001346:	7b3a      	ldrb	r2, [r7, #12]
 8001348:	4b6e      	ldr	r3, [pc, #440]	@ (8001504 <main+0x31c>)
 800134a:	fba3 1302 	umull	r1, r3, r3, r2
 800134e:	0899      	lsrs	r1, r3, #2
 8001350:	460b      	mov	r3, r1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d142      	bne.n	80013e4 <main+0x1fc>
 800135e:	7b3b      	ldrb	r3, [r7, #12]
 8001360:	461a      	mov	r2, r3
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	4293      	cmp	r3, r2
 8001366:	d03d      	beq.n	80013e4 <main+0x1fc>
        last_log_minute = current_phut;
 8001368:	7b3b      	ldrb	r3, [r7, #12]
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
        
        printf("\r\n=== [%02d:%02d:%02d] LOG DU LIEU CAM BIEN ===\r\n",
 800136c:	7b7b      	ldrb	r3, [r7, #13]
 800136e:	4619      	mov	r1, r3
 8001370:	7b3b      	ldrb	r3, [r7, #12]
 8001372:	461a      	mov	r2, r3
 8001374:	7afb      	ldrb	r3, [r7, #11]
 8001376:	4864      	ldr	r0, [pc, #400]	@ (8001508 <main+0x320>)
 8001378:	f004 f8b6 	bl	80054e8 <iprintf>
               current_gio, current_phut, current_giay);
        printf("NH3: %.1f ppm (Alarm: %d)\r\n", nh3_ppm, nh3_alarm);
 800137c:	69f8      	ldr	r0, [r7, #28]
 800137e:	f7ff f853 	bl	8000428 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	7df9      	ldrb	r1, [r7, #23]
 8001388:	9100      	str	r1, [sp, #0]
 800138a:	4860      	ldr	r0, [pc, #384]	@ (800150c <main+0x324>)
 800138c:	f004 f8ac 	bl	80054e8 <iprintf>
        printf("H2S: %.1f ppm (Alarm: %d)\r\n", h2s_ppm, h2s_alarm);
 8001390:	69b8      	ldr	r0, [r7, #24]
 8001392:	f7ff f849 	bl	8000428 <__aeabi_f2d>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	7db9      	ldrb	r1, [r7, #22]
 800139c:	9100      	str	r1, [sp, #0]
 800139e:	485c      	ldr	r0, [pc, #368]	@ (8001510 <main+0x328>)
 80013a0:	f004 f8a2 	bl	80054e8 <iprintf>
        printf("System Status: %d | System Alarm: %d\r\n", GetSystemStatus(), system_alarm);
 80013a4:	f003 f8dc 	bl	8004560 <GetSystemStatus>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4619      	mov	r1, r3
 80013ac:	7d7b      	ldrb	r3, [r7, #21]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4858      	ldr	r0, [pc, #352]	@ (8001514 <main+0x32c>)
 80013b2:	f004 f899 	bl	80054e8 <iprintf>
        printf("Uptime: %.1f phut\r\n", HAL_GetTick() / 60000.0f);
 80013b6:	f000 fb49 	bl	8001a4c <HAL_GetTick>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fc89 	bl	8000cd4 <__aeabi_ui2f>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4954      	ldr	r1, [pc, #336]	@ (8001518 <main+0x330>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fd90 	bl	8000eec <__aeabi_fdiv>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f82a 	bl	8000428 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4850      	ldr	r0, [pc, #320]	@ (800151c <main+0x334>)
 80013da:	f004 f885 	bl	80054e8 <iprintf>
        printf("==============================================\r\n");
 80013de:	4850      	ldr	r0, [pc, #320]	@ (8001520 <main+0x338>)
 80013e0:	f004 f8ea 	bl	80055b8 <puts>
    // =============================================================================
    // LOGIC ĐIỀU KHIỂN (GỮ NGUYÊN)
    // =============================================================================
    
    // Debug thong tin
    printf("DEBUG - NH3: %.1f ppm, Alarm Level: %d\r\n", nh3_ppm, nh3_alarm);
 80013e4:	69f8      	ldr	r0, [r7, #28]
 80013e6:	f7ff f81f 	bl	8000428 <__aeabi_f2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	7df9      	ldrb	r1, [r7, #23]
 80013f0:	9100      	str	r1, [sp, #0]
 80013f2:	484c      	ldr	r0, [pc, #304]	@ (8001524 <main+0x33c>)
 80013f4:	f004 f878 	bl	80054e8 <iprintf>
    printf("DEBUG - H2S: %.1f ppm, Alarm Level: %d\r\n", h2s_ppm, h2s_alarm);
 80013f8:	69b8      	ldr	r0, [r7, #24]
 80013fa:	f7ff f815 	bl	8000428 <__aeabi_f2d>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	7db9      	ldrb	r1, [r7, #22]
 8001404:	9100      	str	r1, [sp, #0]
 8001406:	4848      	ldr	r0, [pc, #288]	@ (8001528 <main+0x340>)
 8001408:	f004 f86e 	bl	80054e8 <iprintf>
    
    // Logic dieu khien NH3 - day du tat ca truong hop
    printf("\r\nNH3 STATUS: ");
 800140c:	4847      	ldr	r0, [pc, #284]	@ (800152c <main+0x344>)
 800140e:	f004 f86b 	bl	80054e8 <iprintf>
    if(nh3_alarm == ALARM_DANGER) {
 8001412:	7dfb      	ldrb	r3, [r7, #23]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d108      	bne.n	800142a <main+0x242>
        printf("NH3 = %.1f ppm - NGUY HIEM! BAT QUAT MAX!\r\n", nh3_ppm);
 8001418:	69f8      	ldr	r0, [r7, #28]
 800141a:	f7ff f805 	bl	8000428 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4843      	ldr	r0, [pc, #268]	@ (8001530 <main+0x348>)
 8001424:	f004 f860 	bl	80054e8 <iprintf>
 8001428:	e024      	b.n	8001474 <main+0x28c>
        // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_SET);
    }
    else if(nh3_alarm == ALARM_HIGH) {
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d10d      	bne.n	800144c <main+0x264>
        printf("NH3 = %.1f ppm - BAT QUAT THONG GIO!\r\n", nh3_ppm);
 8001430:	69f8      	ldr	r0, [r7, #28]
 8001432:	f7fe fff9 	bl	8000428 <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	483e      	ldr	r0, [pc, #248]	@ (8001534 <main+0x34c>)
 800143c:	f004 f854 	bl	80054e8 <iprintf>
        GPIOx_WritePin(GPIOB ,3 ,1); //  HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2103      	movs	r1, #3
 8001444:	482c      	ldr	r0, [pc, #176]	@ (80014f8 <main+0x310>)
 8001446:	f001 fb27 	bl	8002a98 <GPIOx_WritePin>
 800144a:	e013      	b.n	8001474 <main+0x28c>
    }
    else if(nh3_alarm == ALARM_LOW) {
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d108      	bne.n	8001464 <main+0x27c>
        printf("NH3 = %.1f ppm - Canh bao thap\r\n", nh3_ppm);
 8001452:	69f8      	ldr	r0, [r7, #28]
 8001454:	f7fe ffe8 	bl	8000428 <__aeabi_f2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4836      	ldr	r0, [pc, #216]	@ (8001538 <main+0x350>)
 800145e:	f004 f843 	bl	80054e8 <iprintf>
 8001462:	e007      	b.n	8001474 <main+0x28c>
        // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_RESET);
    }
    else { // ALARM_NORMAL
        printf("NH3 = %.1f ppm - Binh thuong\r\n", nh3_ppm);
 8001464:	69f8      	ldr	r0, [r7, #28]
 8001466:	f7fe ffdf 	bl	8000428 <__aeabi_f2d>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4833      	ldr	r0, [pc, #204]	@ (800153c <main+0x354>)
 8001470:	f004 f83a 	bl	80054e8 <iprintf>
        // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_RESET);
    }
    
    // Logic dieu khien CO2 - day du tat ca truong hop
    printf("H2S STATUS: ");
 8001474:	4832      	ldr	r0, [pc, #200]	@ (8001540 <main+0x358>)
 8001476:	f004 f837 	bl	80054e8 <iprintf>
    if(h2s_alarm == ALARM_DANGER) {
 800147a:	7dbb      	ldrb	r3, [r7, #22]
 800147c:	2b03      	cmp	r3, #3
 800147e:	d108      	bne.n	8001492 <main+0x2aa>
        printf("H2S = %.1f ppm - NGUY HIEM! CAN THONG GIO NGAY!\r\n", h2s_ppm);
 8001480:	69b8      	ldr	r0, [r7, #24]
 8001482:	f7fe ffd1 	bl	8000428 <__aeabi_f2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	482e      	ldr	r0, [pc, #184]	@ (8001544 <main+0x35c>)
 800148c:	f004 f82c 	bl	80054e8 <iprintf>
 8001490:	e066      	b.n	8001560 <main+0x378>
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_SET);
    }
    else if(h2s_alarm == ALARM_HIGH) {
 8001492:	7dbb      	ldrb	r3, [r7, #22]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d108      	bne.n	80014aa <main+0x2c2>
        printf("H2S = %.1f ppm - BAT QUAT THONG GIO!\r\n", h2s_ppm);
 8001498:	69b8      	ldr	r0, [r7, #24]
 800149a:	f7fe ffc5 	bl	8000428 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4829      	ldr	r0, [pc, #164]	@ (8001548 <main+0x360>)
 80014a4:	f004 f820 	bl	80054e8 <iprintf>
 80014a8:	e05a      	b.n	8001560 <main+0x378>
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_SET);
    }
    else if(h2s_alarm == ALARM_LOW) {
 80014aa:	7dbb      	ldrb	r3, [r7, #22]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d14f      	bne.n	8001550 <main+0x368>
        printf("H2S = %.1f ppm - Canh bao thap\r\n", h2s_ppm);
 80014b0:	69b8      	ldr	r0, [r7, #24]
 80014b2:	f7fe ffb9 	bl	8000428 <__aeabi_f2d>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4824      	ldr	r0, [pc, #144]	@ (800154c <main+0x364>)
 80014bc:	f004 f814 	bl	80054e8 <iprintf>
 80014c0:	e04e      	b.n	8001560 <main+0x378>
 80014c2:	bf00      	nop
 80014c4:	40013800 	.word	0x40013800
 80014c8:	08009ae0 	.word	0x08009ae0
 80014cc:	08009b00 	.word	0x08009b00
 80014d0:	08009b28 	.word	0x08009b28
 80014d4:	000186a0 	.word	0x000186a0
 80014d8:	40005400 	.word	0x40005400
 80014dc:	08009b40 	.word	0x08009b40
 80014e0:	08009b60 	.word	0x08009b60
 80014e4:	08009b98 	.word	0x08009b98
 80014e8:	47108800 	.word	0x47108800
 80014ec:	46cb2000 	.word	0x46cb2000
 80014f0:	08009bac 	.word	0x08009bac
 80014f4:	08009bc4 	.word	0x08009bc4
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	08009be0 	.word	0x08009be0
 8001500:	08009c08 	.word	0x08009c08
 8001504:	cccccccd 	.word	0xcccccccd
 8001508:	08009c4c 	.word	0x08009c4c
 800150c:	08009c80 	.word	0x08009c80
 8001510:	08009c9c 	.word	0x08009c9c
 8001514:	08009cb8 	.word	0x08009cb8
 8001518:	476a6000 	.word	0x476a6000
 800151c:	08009ce0 	.word	0x08009ce0
 8001520:	08009cf4 	.word	0x08009cf4
 8001524:	08009d24 	.word	0x08009d24
 8001528:	08009d50 	.word	0x08009d50
 800152c:	08009d7c 	.word	0x08009d7c
 8001530:	08009d8c 	.word	0x08009d8c
 8001534:	08009db8 	.word	0x08009db8
 8001538:	08009de0 	.word	0x08009de0
 800153c:	08009e04 	.word	0x08009e04
 8001540:	08009e24 	.word	0x08009e24
 8001544:	08009e34 	.word	0x08009e34
 8001548:	08009e68 	.word	0x08009e68
 800154c:	08009e90 	.word	0x08009e90
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_RESET);
    }
    else { // ALARM_NORMAL
        printf("H2S = %.1f ppm - Binh thuong\r\n", h2s_ppm);
 8001550:	69b8      	ldr	r0, [r7, #24]
 8001552:	f7fe ff69 	bl	8000428 <__aeabi_f2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4844      	ldr	r0, [pc, #272]	@ (800166c <main+0x484>)
 800155c:	f003 ffc4 	bl	80054e8 <iprintf>
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_RESET);
    }

    // Cảnh báo tổng thể
    switch (system_alarm)
 8001560:	7d7b      	ldrb	r3, [r7, #21]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d006      	beq.n	8001574 <main+0x38c>
 8001566:	2b03      	cmp	r3, #3
 8001568:	dc10      	bgt.n	800158c <main+0x3a4>
 800156a:	2b01      	cmp	r3, #1
 800156c:	d00a      	beq.n	8001584 <main+0x39c>
 800156e:	2b02      	cmp	r3, #2
 8001570:	d004      	beq.n	800157c <main+0x394>
 8001572:	e00b      	b.n	800158c <main+0x3a4>
    {
    case ALARM_DANGER:
      printf("NGUY HIEM - KIEM TRA NGAY LAP TUC\r\n");
 8001574:	483e      	ldr	r0, [pc, #248]	@ (8001670 <main+0x488>)
 8001576:	f004 f81f 	bl	80055b8 <puts>
      // HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
      break;
 800157a:	e00b      	b.n	8001594 <main+0x3ac>
    case ALARM_HIGH:
      printf("CANH BAO CAO - CHU Y NGAY\r\n");
 800157c:	483d      	ldr	r0, [pc, #244]	@ (8001674 <main+0x48c>)
 800157e:	f004 f81b 	bl	80055b8 <puts>
      break;
 8001582:	e007      	b.n	8001594 <main+0x3ac>
    case ALARM_LOW:
      printf("CANH BAO THAP - TIEP TUC THEO DOI\r\n");
 8001584:	483c      	ldr	r0, [pc, #240]	@ (8001678 <main+0x490>)
 8001586:	f004 f817 	bl	80055b8 <puts>
      break;
 800158a:	e003      	b.n	8001594 <main+0x3ac>
    default:
      printf("HE THONG HOAT DONG BINH THUONG\r\n");
 800158c:	483b      	ldr	r0, [pc, #236]	@ (800167c <main+0x494>)
 800158e:	f004 f813 	bl	80055b8 <puts>
      // HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
      break;
 8001592:	bf00      	nop
    // =============================================================================
    // KIỂM TRA TÁC VỤ THEO LỊCH - ĐƠN GIẢN
    // =============================================================================
    
    // Tự động hiệu chuẩn vào 3:00 AM
    if(current_gio == 3 && current_phut == 0 && current_giay < 5) {
 8001594:	7b7b      	ldrb	r3, [r7, #13]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d10f      	bne.n	80015ba <main+0x3d2>
 800159a:	7b3b      	ldrb	r3, [r7, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10c      	bne.n	80015ba <main+0x3d2>
 80015a0:	7afb      	ldrb	r3, [r7, #11]
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d809      	bhi.n	80015ba <main+0x3d2>
        printf("\r\n🕒 [%02d:%02d:%02d] THOI GIAN HIEU CHUAN TU DONG!\r\n", 
 80015a6:	7b7b      	ldrb	r3, [r7, #13]
 80015a8:	4619      	mov	r1, r3
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	461a      	mov	r2, r3
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	4833      	ldr	r0, [pc, #204]	@ (8001680 <main+0x498>)
 80015b2:	f003 ff99 	bl	80054e8 <iprintf>
               current_gio, current_phut, current_giay);
        CalibrateSensors();
 80015b6:	f002 fa8f 	bl	8003ad8 <CalibrateSensors>
    }
    
    // Báo cáo hàng ngày vào 23:59
    if(current_gio == 23 && current_phut == 59 && current_giay < 5) {
 80015ba:	7b7b      	ldrb	r3, [r7, #13]
 80015bc:	2b17      	cmp	r3, #23
 80015be:	d133      	bne.n	8001628 <main+0x440>
 80015c0:	7b3b      	ldrb	r3, [r7, #12]
 80015c2:	2b3b      	cmp	r3, #59	@ 0x3b
 80015c4:	d130      	bne.n	8001628 <main+0x440>
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d82d      	bhi.n	8001628 <main+0x440>
        printf("\r\n📊 [%02d:%02d:%02d] BAO CAO HANG NGAY\r\n", 
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
 80015ce:	4619      	mov	r1, r3
 80015d0:	7b3b      	ldrb	r3, [r7, #12]
 80015d2:	461a      	mov	r2, r3
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	482b      	ldr	r0, [pc, #172]	@ (8001684 <main+0x49c>)
 80015d8:	f003 ff86 	bl	80054e8 <iprintf>
               current_gio, current_phut, current_giay);
        printf("Ngay: %02d/%02d/20%02d\r\n", current_ngay, current_thang, current_nam);
 80015dc:	7a7b      	ldrb	r3, [r7, #9]
 80015de:	4619      	mov	r1, r3
 80015e0:	7a3b      	ldrb	r3, [r7, #8]
 80015e2:	461a      	mov	r2, r3
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4828      	ldr	r0, [pc, #160]	@ (8001688 <main+0x4a0>)
 80015e8:	f003 ff7e 	bl	80054e8 <iprintf>
        printf("Uptime: %.1f gio\r\n", HAL_GetTick() / 3600000.0f);
 80015ec:	f000 fa2e 	bl	8001a4c <HAL_GetTick>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fb6e 	bl	8000cd4 <__aeabi_ui2f>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4924      	ldr	r1, [pc, #144]	@ (800168c <main+0x4a4>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fc75 	bl	8000eec <__aeabi_fdiv>
 8001602:	4603      	mov	r3, r0
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff0f 	bl	8000428 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4820      	ldr	r0, [pc, #128]	@ (8001690 <main+0x4a8>)
 8001610:	f003 ff6a 	bl	80054e8 <iprintf>
        printf("Tong doc: %lu | Loi: %lu\r\n", g_sensor_system.total_readings, g_sensor_system.error_count);
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <main+0x4ac>)
 8001616:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800161a:	4a1e      	ldr	r2, [pc, #120]	@ (8001694 <main+0x4ac>)
 800161c:	f8d2 20fc 	ldr.w	r2, [r2, #252]	@ 0xfc
 8001620:	4619      	mov	r1, r3
 8001622:	481d      	ldr	r0, [pc, #116]	@ (8001698 <main+0x4b0>)
 8001624:	f003 ff60 	bl	80054e8 <iprintf>
    }
    
    // Chào buổi sáng
    if(current_gio == 6 && current_phut == 0 && current_giay < 5) {
 8001628:	7b7b      	ldrb	r3, [r7, #13]
 800162a:	2b06      	cmp	r3, #6
 800162c:	d10d      	bne.n	800164a <main+0x462>
 800162e:	7b3b      	ldrb	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10a      	bne.n	800164a <main+0x462>
 8001634:	7afb      	ldrb	r3, [r7, #11]
 8001636:	2b04      	cmp	r3, #4
 8001638:	d807      	bhi.n	800164a <main+0x462>
        printf("\r\n🌅 [%02d:%02d:%02d] CHAO BUOI SANG!\r\n", 
 800163a:	7b7b      	ldrb	r3, [r7, #13]
 800163c:	4619      	mov	r1, r3
 800163e:	7b3b      	ldrb	r3, [r7, #12]
 8001640:	461a      	mov	r2, r3
 8001642:	7afb      	ldrb	r3, [r7, #11]
 8001644:	4815      	ldr	r0, [pc, #84]	@ (800169c <main+0x4b4>)
 8001646:	f003 ff4f 	bl	80054e8 <iprintf>
    // SendDataToServerWithTime(nh3_ppm, co2_ppm, system_alarm, current_gio, current_phut, current_giay);

    // - Hiển thị trên LCD với thời gian
    // UpdateLCDDisplayWithTime(nh3_ppm, co2_ppm, system_alarm, current_gio, current_phut, current_giay);

    printf("\r\n[%02d:%02d:%02d] CHO %d GIAY DE DO TIEP\r\n", 
 800164a:	7b7b      	ldrb	r3, [r7, #13]
 800164c:	4619      	mov	r1, r3
 800164e:	7b3b      	ldrb	r3, [r7, #12]
 8001650:	461a      	mov	r2, r3
 8001652:	7afb      	ldrb	r3, [r7, #11]
 8001654:	4618      	mov	r0, r3
 8001656:	2314      	movs	r3, #20
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	4603      	mov	r3, r0
 800165c:	4810      	ldr	r0, [pc, #64]	@ (80016a0 <main+0x4b8>)
 800165e:	f003 ff43 	bl	80054e8 <iprintf>
           current_gio, current_phut, current_giay, MAIN_LOOP_DELAY/1000);
    
    HAL_Delay(MAIN_LOOP_DELAY); // Chờ 1 phút
 8001662:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001666:	f000 f9fb 	bl	8001a60 <HAL_Delay>
  {
 800166a:	e61d      	b.n	80012a8 <main+0xc0>
 800166c:	08009eb4 	.word	0x08009eb4
 8001670:	08009ed4 	.word	0x08009ed4
 8001674:	08009ef8 	.word	0x08009ef8
 8001678:	08009f14 	.word	0x08009f14
 800167c:	08009f38 	.word	0x08009f38
 8001680:	08009f58 	.word	0x08009f58
 8001684:	08009f90 	.word	0x08009f90
 8001688:	08009fbc 	.word	0x08009fbc
 800168c:	4a5bba00 	.word	0x4a5bba00
 8001690:	08009fd8 	.word	0x08009fd8
 8001694:	20000350 	.word	0x20000350
 8001698:	08009fec 	.word	0x08009fec
 800169c:	0800a008 	.word	0x0800a008
 80016a0:	0800a034 	.word	0x0800a034

080016a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b090      	sub	sp, #64	@ 0x40
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0318 	add.w	r3, r7, #24
 80016ae:	2228      	movs	r2, #40	@ 0x28
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f004 f880 	bl	80057b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d4:	2301      	movs	r3, #1
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d8:	2302      	movs	r3, #2
 80016da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016e2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80016e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e8:	f107 0318 	add.w	r3, r7, #24
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fabf 	bl	8001c70 <HAL_RCC_OscConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016f8:	f000 f819 	bl	800172e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016fc:	230f      	movs	r3, #15
 80016fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001700:	2302      	movs	r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001708:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800170c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2102      	movs	r1, #2
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fd2c 	bl	8002174 <HAL_RCC_ClockConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001722:	f000 f804 	bl	800172e <Error_Handler>
  }
}
 8001726:	bf00      	nop
 8001728:	3740      	adds	r7, #64	@ 0x40
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001732:	b672      	cpsid	i
}
 8001734:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001736:	bf00      	nop
 8001738:	e7fd      	b.n	8001736 <Error_Handler+0x8>
	...

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_MspInit+0x5c>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <HAL_MspInit+0x5c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6193      	str	r3, [r2, #24]
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_MspInit+0x5c>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <HAL_MspInit+0x5c>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <HAL_MspInit+0x5c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <HAL_MspInit+0x5c>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001772:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <HAL_MspInit+0x60>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4a04      	ldr	r2, [pc, #16]	@ (800179c <HAL_MspInit+0x60>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <NMI_Handler+0x4>

080017a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <MemManage_Handler+0x4>

080017b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f0:	f000 f91a 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <_kill>:

int _kill(int pid, int sig)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001810:	f004 f824 	bl	800585c <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	2216      	movs	r2, #22
 8001818:	601a      	str	r2, [r3, #0]
  return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_exit>:

void _exit (int status)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800182e:	f04f 31ff 	mov.w	r1, #4294967295
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffe7 	bl	8001806 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <_exit+0x12>

0800183c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e00a      	b.n	8001864 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184e:	f3af 8000 	nop.w
 8001852:	4601      	mov	r1, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf0      	blt.n	800184e <_read+0x12>
  }

  return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800189c:	605a      	str	r2, [r3, #4]
  return 0;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <_isatty>:

int _isatty(int file)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
	...

080018d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e0:	4a14      	ldr	r2, [pc, #80]	@ (8001934 <_sbrk+0x5c>)
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <_sbrk+0x60>)
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <_sbrk+0x64>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <_sbrk+0x68>)
 80018f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	429a      	cmp	r2, r3
 8001906:	d207      	bcs.n	8001918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001908:	f003 ffa8 	bl	800585c <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	220c      	movs	r2, #12
 8001910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	e009      	b.n	800192c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191e:	4b07      	ldr	r3, [pc, #28]	@ (800193c <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <_sbrk+0x64>)
 8001928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20005000 	.word	0x20005000
 8001938:	00000400 	.word	0x00000400
 800193c:	2000021c 	.word	0x2000021c
 8001940:	20004298 	.word	0x20004298

08001944 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001950:	f7ff fff8 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001954:	480b      	ldr	r0, [pc, #44]	@ (8001984 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001956:	490c      	ldr	r1, [pc, #48]	@ (8001988 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001958:	4a0c      	ldr	r2, [pc, #48]	@ (800198c <LoopFillZerobss+0x16>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a09      	ldr	r2, [pc, #36]	@ (8001990 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800196c:	4c09      	ldr	r4, [pc, #36]	@ (8001994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197a:	f003 ff75 	bl	8005868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800197e:	f7ff fc33 	bl	80011e8 <main>
  bx lr
 8001982:	4770      	bx	lr
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800198c:	0800b070 	.word	0x0800b070
  ldr r2, =_sbss
 8001990:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001994:	20004294 	.word	0x20004294

08001998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC1_2_IRQHandler>
	...

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <HAL_Init+0x28>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <HAL_Init+0x28>)
 80019a6:	f043 0310 	orr.w	r3, r3, #16
 80019aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f92b 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	200f      	movs	r0, #15
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fec0 	bl	800173c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f935 	bl	8001c56 <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 f90b 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	@ (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_IncTick+0x1c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <HAL_IncTick+0x20>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a03      	ldr	r2, [pc, #12]	@ (8001a48 <HAL_IncTick+0x20>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000220 	.word	0x20000220

08001a4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b02      	ldr	r3, [pc, #8]	@ (8001a5c <HAL_GetTick+0x10>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	20000220 	.word	0x20000220

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff fff0 	bl	8001a4c <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffe0 	bl	8001a4c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	@ (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	@ (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	@ 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff90 	bl	8001b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff49 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff5e 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff90 	bl	8001b60 <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5f 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffb0 	bl	8001bc4 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e272      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8087 	beq.w	8001d9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c90:	4b92      	ldr	r3, [pc, #584]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d00c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d112      	bne.n	8001cce <HAL_RCC_OscConfig+0x5e>
 8001ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb4:	d10b      	bne.n	8001cce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb6:	4b89      	ldr	r3, [pc, #548]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d06c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x12c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d168      	bne.n	8001d9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e24c      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x76>
 8001cd8:	4b80      	ldr	r3, [pc, #512]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a7f      	ldr	r2, [pc, #508]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e02e      	b.n	8001d44 <HAL_RCC_OscConfig+0xd4>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x98>
 8001cee:	4b7b      	ldr	r3, [pc, #492]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7a      	ldr	r2, [pc, #488]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b78      	ldr	r3, [pc, #480]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a77      	ldr	r2, [pc, #476]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e01d      	b.n	8001d44 <HAL_RCC_OscConfig+0xd4>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0xbc>
 8001d12:	4b72      	ldr	r3, [pc, #456]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a71      	ldr	r2, [pc, #452]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6e      	ldr	r2, [pc, #440]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0xd4>
 8001d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6a      	ldr	r2, [pc, #424]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b68      	ldr	r3, [pc, #416]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a67      	ldr	r2, [pc, #412]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d013      	beq.n	8001d74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fe7e 	bl	8001a4c <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff fe7a 	bl	8001a4c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	@ 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e200      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	4b5d      	ldr	r3, [pc, #372]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0xe4>
 8001d72:	e014      	b.n	8001d9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fe6a 	bl	8001a4c <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fe66 	bl	8001a4c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	@ 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e1ec      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x10c>
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d063      	beq.n	8001e72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001daa:	4b4c      	ldr	r3, [pc, #304]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001db6:	4b49      	ldr	r3, [pc, #292]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d11c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x18c>
 8001dc2:	4b46      	ldr	r3, [pc, #280]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d116      	bne.n	8001dfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	4b43      	ldr	r3, [pc, #268]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_RCC_OscConfig+0x176>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e1c0      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de6:	4b3d      	ldr	r3, [pc, #244]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4939      	ldr	r1, [pc, #228]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	e03a      	b.n	8001e72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e04:	4b36      	ldr	r3, [pc, #216]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fe1f 	bl	8001a4c <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	f7ff fe1b 	bl	8001a4c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e1a1      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4927      	ldr	r1, [pc, #156]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
 8001e44:	e015      	b.n	8001e72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	4b26      	ldr	r3, [pc, #152]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fdfe 	bl	8001a4c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e54:	f7ff fdfa 	bl	8001a4c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e180      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d03a      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d019      	beq.n	8001eba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <HAL_RCC_OscConfig+0x274>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fdde 	bl	8001a4c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff fdda 	bl	8001a4c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e160      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f000 faa6 	bl	8002404 <RCC_Delay>
 8001eb8:	e01c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7ff fdc4 	bl	8001a4c <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec6:	e00f      	b.n	8001ee8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fdc0 	bl	8001a4c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d908      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e146      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	42420000 	.word	0x42420000
 8001ee4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee8:	4b92      	ldr	r3, [pc, #584]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e9      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80a6 	beq.w	800204e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f06:	4b8b      	ldr	r3, [pc, #556]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10d      	bne.n	8001f2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	4b88      	ldr	r3, [pc, #544]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a87      	ldr	r2, [pc, #540]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]
 8001f1e:	4b85      	ldr	r3, [pc, #532]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2e:	4b82      	ldr	r3, [pc, #520]	@ (8002138 <HAL_RCC_OscConfig+0x4c8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d118      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002138 <HAL_RCC_OscConfig+0x4c8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002138 <HAL_RCC_OscConfig+0x4c8>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fd81 	bl	8001a4c <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4e:	f7ff fd7d 	bl	8001a4c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b64      	cmp	r3, #100	@ 0x64
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e103      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	4b75      	ldr	r3, [pc, #468]	@ (8002138 <HAL_RCC_OscConfig+0x4c8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x312>
 8001f74:	4b6f      	ldr	r3, [pc, #444]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a6e      	ldr	r2, [pc, #440]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	e02d      	b.n	8001fde <HAL_RCC_OscConfig+0x36e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x334>
 8001f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a69      	ldr	r2, [pc, #420]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	6213      	str	r3, [r2, #32]
 8001f96:	4b67      	ldr	r3, [pc, #412]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a66      	ldr	r2, [pc, #408]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	6213      	str	r3, [r2, #32]
 8001fa2:	e01c      	b.n	8001fde <HAL_RCC_OscConfig+0x36e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x356>
 8001fac:	4b61      	ldr	r3, [pc, #388]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4a60      	ldr	r2, [pc, #384]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	6213      	str	r3, [r2, #32]
 8001fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	e00b      	b.n	8001fde <HAL_RCC_OscConfig+0x36e>
 8001fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a5a      	ldr	r2, [pc, #360]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	6213      	str	r3, [r2, #32]
 8001fd2:	4b58      	ldr	r3, [pc, #352]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4a57      	ldr	r2, [pc, #348]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d015      	beq.n	8002012 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff fd31 	bl	8001a4c <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7ff fd2d 	bl	8001a4c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e0b1      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002004:	4b4b      	ldr	r3, [pc, #300]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ee      	beq.n	8001fee <HAL_RCC_OscConfig+0x37e>
 8002010:	e014      	b.n	800203c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002012:	f7ff fd1b 	bl	8001a4c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7ff fd17 	bl	8001a4c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e09b      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002030:	4b40      	ldr	r3, [pc, #256]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ee      	bne.n	800201a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800203c:	7dfb      	ldrb	r3, [r7, #23]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d105      	bne.n	800204e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002042:	4b3c      	ldr	r3, [pc, #240]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a3b      	ldr	r2, [pc, #236]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800204c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8087 	beq.w	8002166 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002058:	4b36      	ldr	r3, [pc, #216]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b08      	cmp	r3, #8
 8002062:	d061      	beq.n	8002128 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d146      	bne.n	80020fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	4b33      	ldr	r3, [pc, #204]	@ (800213c <HAL_RCC_OscConfig+0x4cc>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7ff fceb 	bl	8001a4c <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff fce7 	bl	8001a4c <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e06d      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208c:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a0:	d108      	bne.n	80020b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020a2:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	4921      	ldr	r1, [pc, #132]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a19      	ldr	r1, [r3, #32]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	430b      	orrs	r3, r1
 80020c6:	491b      	ldr	r1, [pc, #108]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff fcbb 	bl	8001a4c <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020da:	f7ff fcb7 	bl	8001a4c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e03d      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x46a>
 80020f8:	e035      	b.n	8002166 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	4b10      	ldr	r3, [pc, #64]	@ (800213c <HAL_RCC_OscConfig+0x4cc>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff fca4 	bl	8001a4c <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff fca0 	bl	8001a4c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e026      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x498>
 8002126:	e01e      	b.n	8002166 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e019      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_RCC_OscConfig+0x500>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	429a      	cmp	r2, r3
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0d0      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b6a      	ldr	r3, [pc, #424]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d910      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b67      	ldr	r3, [pc, #412]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4965      	ldr	r1, [pc, #404]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b63      	ldr	r3, [pc, #396]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0b8      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d0:	4b59      	ldr	r3, [pc, #356]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a58      	ldr	r2, [pc, #352]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e8:	4b53      	ldr	r3, [pc, #332]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a52      	ldr	r2, [pc, #328]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f4:	4b50      	ldr	r3, [pc, #320]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	494d      	ldr	r1, [pc, #308]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d040      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	4b47      	ldr	r3, [pc, #284]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d115      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e07f      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e073      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3d      	ldr	r3, [pc, #244]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e06b      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b39      	ldr	r3, [pc, #228]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4936      	ldr	r1, [pc, #216]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7ff fbf2 	bl	8001a4c <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff fbee 	bl	8001a4c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e053      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b27      	ldr	r3, [pc, #156]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d210      	bcs.n	80022c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b24      	ldr	r3, [pc, #144]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	4922      	ldr	r1, [pc, #136]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e032      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4916      	ldr	r1, [pc, #88]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ee:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	490e      	ldr	r1, [pc, #56]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002302:	f000 f821 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002306:	4602      	mov	r2, r0
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	490a      	ldr	r1, [pc, #40]	@ (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002314:	5ccb      	ldrb	r3, [r1, r3]
 8002316:	fa22 f303 	lsr.w	r3, r2, r3
 800231a:	4a09      	ldr	r2, [pc, #36]	@ (8002340 <HAL_RCC_ClockConfig+0x1cc>)
 800231c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_RCC_ClockConfig+0x1d0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fb50 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40022000 	.word	0x40022000
 8002338:	40021000 	.word	0x40021000
 800233c:	0800abec 	.word	0x0800abec
 8002340:	20000000 	.word	0x20000000
 8002344:	20000004 	.word	0x20000004

08002348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002362:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d002      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x30>
 8002372:	2b08      	cmp	r3, #8
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x36>
 8002376:	e027      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002378:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800237a:	613b      	str	r3, [r7, #16]
      break;
 800237c:	e027      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	0c9b      	lsrs	r3, r3, #18
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d010      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002396:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0c5b      	lsrs	r3, r3, #17
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	4a11      	ldr	r2, [pc, #68]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023aa:	fb03 f202 	mul.w	r2, r3, r2
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e004      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a0c      	ldr	r2, [pc, #48]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	613b      	str	r3, [r7, #16]
      break;
 80023c6:	e002      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ca:	613b      	str	r3, [r7, #16]
      break;
 80023cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ce:	693b      	ldr	r3, [r7, #16]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	007a1200 	.word	0x007a1200
 80023e4:	0800ac04 	.word	0x0800ac04
 80023e8:	0800ac14 	.word	0x0800ac14
 80023ec:	003d0900 	.word	0x003d0900

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b02      	ldr	r3, [pc, #8]	@ (8002400 <HAL_RCC_GetHCLKFreq+0x10>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	20000000 	.word	0x20000000

08002404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <RCC_Delay+0x34>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <RCC_Delay+0x38>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a5b      	lsrs	r3, r3, #9
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002420:	bf00      	nop
  }
  while (Delay --);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1e5a      	subs	r2, r3, #1
 8002426:	60fa      	str	r2, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f9      	bne.n	8002420 <RCC_Delay+0x1c>
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	20000000 	.word	0x20000000
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <ADCx_Init>:
#include "adc.h"

void ADCx_Init(ADC_TypeDef *ADCx, uint8_t Channel) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af02      	add	r7, sp, #8
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
    // Enable ADC clock
    if(ADCx == ADC1) RCC->APB2ENR |= 1<<9;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a8f      	ldr	r2, [pc, #572]	@ (800268c <ADCx_Init+0x24c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d105      	bne.n	8002460 <ADCx_Init+0x20>
 8002454:	4b8e      	ldr	r3, [pc, #568]	@ (8002690 <ADCx_Init+0x250>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4a8d      	ldr	r2, [pc, #564]	@ (8002690 <ADCx_Init+0x250>)
 800245a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800245e:	6193      	str	r3, [r2, #24]
    if(ADCx == ADC2) RCC->APB2ENR |= 1<<10;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a8c      	ldr	r2, [pc, #560]	@ (8002694 <ADCx_Init+0x254>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d105      	bne.n	8002474 <ADCx_Init+0x34>
 8002468:	4b89      	ldr	r3, [pc, #548]	@ (8002690 <ADCx_Init+0x250>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a88      	ldr	r2, [pc, #544]	@ (8002690 <ADCx_Init+0x250>)
 800246e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002472:	6193      	str	r3, [r2, #24]
    
    // Configure GPIO pins for analog input
    if(Channel == ADC_Channel_0) GPIOx_Init(GPIOA, 0, INPUT_ANALOG, NOPULL, 0);
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d107      	bne.n	800248a <ADCx_Init+0x4a>
 800247a:	2300      	movs	r3, #0
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2300      	movs	r3, #0
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	4884      	ldr	r0, [pc, #528]	@ (8002698 <ADCx_Init+0x258>)
 8002486:	f000 fa69 	bl	800295c <GPIOx_Init>
    if(Channel == ADC_Channel_1) GPIOx_Init(GPIOA, 1, INPUT_ANALOG, NOPULL, 0);
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d107      	bne.n	80024a0 <ADCx_Init+0x60>
 8002490:	2300      	movs	r3, #0
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2300      	movs	r3, #0
 8002496:	2200      	movs	r2, #0
 8002498:	2101      	movs	r1, #1
 800249a:	487f      	ldr	r0, [pc, #508]	@ (8002698 <ADCx_Init+0x258>)
 800249c:	f000 fa5e 	bl	800295c <GPIOx_Init>
    if(Channel == ADC_Channel_2) GPIOx_Init(GPIOA, 2, INPUT_ANALOG, NOPULL, 0);
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d107      	bne.n	80024b6 <ADCx_Init+0x76>
 80024a6:	2300      	movs	r3, #0
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2300      	movs	r3, #0
 80024ac:	2200      	movs	r2, #0
 80024ae:	2102      	movs	r1, #2
 80024b0:	4879      	ldr	r0, [pc, #484]	@ (8002698 <ADCx_Init+0x258>)
 80024b2:	f000 fa53 	bl	800295c <GPIOx_Init>
    if(Channel == ADC_Channel_3) GPIOx_Init(GPIOA, 3, INPUT_ANALOG, NOPULL, 0);
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d107      	bne.n	80024cc <ADCx_Init+0x8c>
 80024bc:	2300      	movs	r3, #0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	2200      	movs	r2, #0
 80024c4:	2103      	movs	r1, #3
 80024c6:	4874      	ldr	r0, [pc, #464]	@ (8002698 <ADCx_Init+0x258>)
 80024c8:	f000 fa48 	bl	800295c <GPIOx_Init>
    if(Channel == ADC_Channel_4) GPIOx_Init(GPIOA, 4, INPUT_ANALOG, NOPULL, 0);
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d107      	bne.n	80024e2 <ADCx_Init+0xa2>
 80024d2:	2300      	movs	r3, #0
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2300      	movs	r3, #0
 80024d8:	2200      	movs	r2, #0
 80024da:	2104      	movs	r1, #4
 80024dc:	486e      	ldr	r0, [pc, #440]	@ (8002698 <ADCx_Init+0x258>)
 80024de:	f000 fa3d 	bl	800295c <GPIOx_Init>
    if(Channel == ADC_Channel_5) GPIOx_Init(GPIOA, 5, INPUT_ANALOG, NOPULL, 0);
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d107      	bne.n	80024f8 <ADCx_Init+0xb8>
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	2200      	movs	r2, #0
 80024f0:	2105      	movs	r1, #5
 80024f2:	4869      	ldr	r0, [pc, #420]	@ (8002698 <ADCx_Init+0x258>)
 80024f4:	f000 fa32 	bl	800295c <GPIOx_Init>
    if(Channel == ADC_Channel_6) GPIOx_Init(GPIOA, 6, INPUT_ANALOG, NOPULL, 0);
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d107      	bne.n	800250e <ADCx_Init+0xce>
 80024fe:	2300      	movs	r3, #0
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	2200      	movs	r2, #0
 8002506:	2106      	movs	r1, #6
 8002508:	4863      	ldr	r0, [pc, #396]	@ (8002698 <ADCx_Init+0x258>)
 800250a:	f000 fa27 	bl	800295c <GPIOx_Init>
    if(Channel == ADC_Channel_7) GPIOx_Init(GPIOA, 7, INPUT_ANALOG, NOPULL, 0);
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	2b07      	cmp	r3, #7
 8002512:	d107      	bne.n	8002524 <ADCx_Init+0xe4>
 8002514:	2300      	movs	r3, #0
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2300      	movs	r3, #0
 800251a:	2200      	movs	r2, #0
 800251c:	2107      	movs	r1, #7
 800251e:	485e      	ldr	r0, [pc, #376]	@ (8002698 <ADCx_Init+0x258>)
 8002520:	f000 fa1c 	bl	800295c <GPIOx_Init>
    if(Channel == ADC_Channel_8) GPIOx_Init(GPIOB ,0 ,INPUT_ANALOG,NOPULL,0);
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	2b08      	cmp	r3, #8
 8002528:	d107      	bne.n	800253a <ADCx_Init+0xfa>
 800252a:	2300      	movs	r3, #0
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2300      	movs	r3, #0
 8002530:	2200      	movs	r2, #0
 8002532:	2100      	movs	r1, #0
 8002534:	4859      	ldr	r0, [pc, #356]	@ (800269c <ADCx_Init+0x25c>)
 8002536:	f000 fa11 	bl	800295c <GPIOx_Init>
	if(Channel == ADC_Channel_9) GPIOx_Init(GPIOB ,1 ,INPUT_ANALOG,NOPULL,0);
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	2b09      	cmp	r3, #9
 800253e:	d107      	bne.n	8002550 <ADCx_Init+0x110>
 8002540:	2300      	movs	r3, #0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2300      	movs	r3, #0
 8002546:	2200      	movs	r2, #0
 8002548:	2101      	movs	r1, #1
 800254a:	4854      	ldr	r0, [pc, #336]	@ (800269c <ADCx_Init+0x25c>)
 800254c:	f000 fa06 	bl	800295c <GPIOx_Init>
    
    // ADC Configuration
    ADCx->CR1 |= 1<<8;              // SCAN MODE enable
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	605a      	str	r2, [r3, #4]
    ADCx->CR2 |= (1<<1) | (1<<0);   // CONT=1, ADON=1 (Continuous mode)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f043 0203 	orr.w	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= 1<<20;             // EXTEN[1:0] = 00 (External trigger disabled)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	609a      	str	r2, [r3, #8]
    ADCx->CR2 &= ~(1<<11);          // ALIGN=0 (Right alignment)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	609a      	str	r2, [r3, #8]
    ADCx->CR2 &= ~(0x7<<17);        // Clear EXTSEL bits
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 2260 	bic.w	r2, r3, #917504	@ 0xe0000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= (0x7<<17);         // EXTSEL = 111 (SWSTART)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f443 2260 	orr.w	r2, r3, #917504	@ 0xe0000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	609a      	str	r2, [r3, #8]
    
    // Set sequence length to 1 conversion
    ADCx->SQR1 &= ~(0xF<<20);       // Clear L[3:0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADCx->SQR1 |= (0x0<<20);        // L=0 (1 conversion)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    // Set sampling time (longest for better accuracy)
    if(Channel > 9) {
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d91f      	bls.n	80025f2 <ADCx_Init+0x1b2>
        ADCx->SMPR1 &= ~(7<<((Channel-10)*3)); 
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68d9      	ldr	r1, [r3, #12]
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f1a3 020a 	sub.w	r2, r3, #10
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	2207      	movs	r2, #7
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	ea01 0203 	and.w	r2, r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60da      	str	r2, [r3, #12]
        ADCx->SMPR1 |= (7<<((Channel-10)*3));   // 480 cycles
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68d9      	ldr	r1, [r3, #12]
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	f1a3 020a 	sub.w	r2, r3, #10
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	2207      	movs	r2, #7
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	ea41 0203 	orr.w	r2, r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	e01a      	b.n	8002628 <ADCx_Init+0x1e8>
    } else {
        ADCx->SMPR2 &= ~(7<<(Channel*3));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6919      	ldr	r1, [r3, #16]
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	2207      	movs	r2, #7
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	ea01 0203 	and.w	r2, r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]
        ADCx->SMPR2 |= (7<<(Channel*3));        // 480 cycles
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6919      	ldr	r1, [r3, #16]
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	2207      	movs	r2, #7
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	ea41 0203 	orr.w	r2, r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	611a      	str	r2, [r3, #16]
    }
    
    // Set first conversion in regular sequence
    ADCx->SQR3 &= 0xFFFFFFE0;       // Clear SQ1[4:0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262c:	f023 021f 	bic.w	r2, r3, #31
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	635a      	str	r2, [r3, #52]	@ 0x34
    ADCx->SQR3 |= Channel;          // Set channel for SQ1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // ADC Calibration
    ADCx->CR2 |= 1<<3;              // RSTCAL=1 (Reset calibration)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f043 0208 	orr.w	r2, r3, #8
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	609a      	str	r2, [r3, #8]
    while(ADCx->CR2 & (1<<3));      // Wait for reset calibration to complete
 800264c:	bf00      	nop
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <ADCx_Init+0x20e>
    
    ADCx->CR2 |= 1<<2;              // CAL=1 (Start calibration)  
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f043 0204 	orr.w	r2, r3, #4
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	609a      	str	r2, [r3, #8]
    while(ADCx->CR2 & (1<<2));      // Wait for calibration to complete
 8002666:	bf00      	nop
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f9      	bne.n	8002668 <ADCx_Init+0x228>
        
    // Enable ADC
    ADCx->CR2 |= (1<<22) | (1<<0);  // SWSTART=1, ADON=1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6093      	str	r3, [r2, #8]
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40012400 	.word	0x40012400
 8002690:	40021000 	.word	0x40021000
 8002694:	40012800 	.word	0x40012800
 8002698:	40010800 	.word	0x40010800
 800269c:	40010c00 	.word	0x40010c00

080026a0 <ADCx_Read>:

uint16_t ADCx_Read(ADC_TypeDef *ADCx, uint8_t Channel) {
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
    // Set sampling time for the channel
    if(Channel > 9) {
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	2b09      	cmp	r3, #9
 80026b0:	d91f      	bls.n	80026f2 <ADCx_Read+0x52>
        ADCx->SMPR1 &= ~(7<<((Channel-10)*3)); 
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68d9      	ldr	r1, [r3, #12]
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	f1a3 020a 	sub.w	r2, r3, #10
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	2207      	movs	r2, #7
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	ea01 0203 	and.w	r2, r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60da      	str	r2, [r3, #12]
        ADCx->SMPR1 |= (7<<((Channel-10)*3));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68d9      	ldr	r1, [r3, #12]
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	f1a3 020a 	sub.w	r2, r3, #10
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	2207      	movs	r2, #7
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	ea41 0203 	orr.w	r2, r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	e01a      	b.n	8002728 <ADCx_Read+0x88>
    } else {
        ADCx->SMPR2 &= ~(7<<(Channel*3));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6919      	ldr	r1, [r3, #16]
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	2207      	movs	r2, #7
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	ea01 0203 	and.w	r2, r1, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	611a      	str	r2, [r3, #16]
        ADCx->SMPR2 |= (7<<(Channel*3));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6919      	ldr	r1, [r3, #16]
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	2207      	movs	r2, #7
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	ea41 0203 	orr.w	r2, r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	611a      	str	r2, [r3, #16]
    }
    
    // Set channel in regular sequence
    ADCx->SQR3 &= 0xFFFFFFE0;       
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272c:	f023 021f 	bic.w	r2, r3, #31
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	635a      	str	r2, [r3, #52]	@ 0x34
    ADCx->SQR3 |= Channel;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Start conversion
    ADCx->CR2 |= (1<<22) | (1<<0);  // SWSTART=1, ADON=1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6093      	str	r3, [r2, #8]
    
    // Wait for conversion to complete
    while((ADCx->SR & (1<<1)) == 0);
 8002750:	bf00      	nop
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f9      	beq.n	8002752 <ADCx_Read+0xb2>
    
    // Clear EOC flag by reading DR
    return ADCx->DR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002762:	b29b      	uxth	r3, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <ADCx_Read_TB>:

uint16_t ADCx_Read_TB(ADC_TypeDef *ADCx, uint8_t Channel, uint8_t n) {
 800276e:	b580      	push	{r7, lr}
 8002770:	b088      	sub	sp, #32
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	460b      	mov	r3, r1
 8002778:	70fb      	strb	r3, [r7, #3]
 800277a:	4613      	mov	r3, r2
 800277c:	70bb      	strb	r3, [r7, #2]
    if(n == 0) return 0;            // Validation
 800277e:	78bb      	ldrb	r3, [r7, #2]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <ADCx_Read_TB+0x1a>
 8002784:	2300      	movs	r3, #0
 8002786:	e03c      	b.n	8002802 <ADCx_Read_TB+0x94>
    
    uint32_t sum = 0;               // Dùng uint32_t d? tránh overflow
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
    
    // ? Lo?i b? m?t s? m?u d?u d? ADC ?n d?nh
    for(int i = 0; i < 3; i++) {
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	e011      	b.n	80027b6 <ADCx_Read_TB+0x48>
        ADCx_Read(ADCx, Channel);
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	4619      	mov	r1, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff82 	bl	80026a0 <ADCx_Read>
        for(volatile int d = 0; d < 500; d++); // Delay
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	e002      	b.n	80027a8 <ADCx_Read_TB+0x3a>
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	3301      	adds	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80027ae:	dbf8      	blt.n	80027a2 <ADCx_Read_TB+0x34>
    for(int i = 0; i < 3; i++) {
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	3301      	adds	r3, #1
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	ddea      	ble.n	8002792 <ADCx_Read_TB+0x24>
    }
    
    // Ð?c n m?u
    for (int i = 0; i < n; i++) {
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	e016      	b.n	80027f0 <ADCx_Read_TB+0x82>
        sum += ADCx_Read(ADCx, Channel);
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	4619      	mov	r1, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ff6a 	bl	80026a0 <ADCx_Read>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	61fb      	str	r3, [r7, #28]
        for (volatile int d = 0; d < 1000; d++); // Delay gi?a các l?n d?c
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e002      	b.n	80027e2 <ADCx_Read_TB+0x74>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3301      	adds	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027e8:	dbf8      	blt.n	80027dc <ADCx_Read_TB+0x6e>
    for (int i = 0; i < n; i++) {
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3301      	adds	r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	78bb      	ldrb	r3, [r7, #2]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	dbe4      	blt.n	80027c2 <ADCx_Read_TB+0x54>
    }
    
    return (uint16_t)(sum / n);     // Tr? v? trung bình
 80027f8:	78bb      	ldrb	r3, [r7, #2]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	b29b      	uxth	r3, r3
}
 8002802:	4618      	mov	r0, r3
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <__NVIC_GetPriorityGrouping>:
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002810:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <__NVIC_GetPriorityGrouping+0x18>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0307 	and.w	r3, r3, #7
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_EnableIRQ>:
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db0b      	blt.n	8002852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4906      	ldr	r1, [pc, #24]	@ (800285c <__NVIC_EnableIRQ+0x34>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	e000e100 	.word	0xe000e100

08002860 <__NVIC_SetPriority>:
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002870:	2b00      	cmp	r3, #0
 8002872:	db0a      	blt.n	800288a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	490c      	ldr	r1, [pc, #48]	@ (80028ac <__NVIC_SetPriority+0x4c>)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	0112      	lsls	r2, r2, #4
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	440b      	add	r3, r1
 8002884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002888:	e00a      	b.n	80028a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4908      	ldr	r1, [pc, #32]	@ (80028b0 <__NVIC_SetPriority+0x50>)
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	3b04      	subs	r3, #4
 8002898:	0112      	lsls	r2, r2, #4
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	440b      	add	r3, r1
 800289e:	761a      	strb	r2, [r3, #24]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e100 	.word	0xe000e100
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <NVIC_EncodePriority>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b089      	sub	sp, #36	@ 0x24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f1c3 0307 	rsb	r3, r3, #7
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	bf28      	it	cs
 80028d2:	2304      	movcs	r3, #4
 80028d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3304      	adds	r3, #4
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d902      	bls.n	80028e4 <NVIC_EncodePriority+0x30>
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3b03      	subs	r3, #3
 80028e2:	e000      	b.n	80028e6 <NVIC_EncodePriority+0x32>
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43da      	mvns	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	401a      	ands	r2, r3
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	43d9      	mvns	r1, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	4313      	orrs	r3, r2
}
 800290e:	4618      	mov	r0, r3
 8002910:	3724      	adds	r7, #36	@ 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <NVICx_Init>:
#include "gpio.h"


void NVICx_Init(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800292a:	f7ff ff6f 	bl	800280c <__NVIC_GetPriorityGrouping>
 800292e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	68b9      	ldr	r1, [r7, #8]
 8002934:	6978      	ldr	r0, [r7, #20]
 8002936:	f7ff ffbd 	bl	80028b4 <NVIC_EncodePriority>
 800293a:	4602      	mov	r2, r0
 800293c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ff8c 	bl	8002860 <__NVIC_SetPriority>
	
	 /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff6b 	bl	8002828 <__NVIC_EnableIRQ>
}
 8002952:	bf00      	nop
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <GPIOx_Init>:
void GPIOx_Init(GPIO_TypeDef *GPIOx ,uint8_t Pin ,uint8_t Mode ,uint8_t Pull,uint8_t Speed)
{ 
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	70fb      	strb	r3, [r7, #3]
 800296e:	460b      	mov	r3, r1
 8002970:	70bb      	strb	r3, [r7, #2]
 8002972:	4613      	mov	r3, r2
 8002974:	707b      	strb	r3, [r7, #1]
if(GPIOx == GPIOA ) RCC ->APB2ENR |= 1<<2 ;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a41      	ldr	r2, [pc, #260]	@ (8002a80 <GPIOx_Init+0x124>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d105      	bne.n	800298a <GPIOx_Init+0x2e>
 800297e:	4b41      	ldr	r3, [pc, #260]	@ (8002a84 <GPIOx_Init+0x128>)
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	4a40      	ldr	r2, [pc, #256]	@ (8002a84 <GPIOx_Init+0x128>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOB ) RCC ->APB2ENR |= 1<<3 ;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a3e      	ldr	r2, [pc, #248]	@ (8002a88 <GPIOx_Init+0x12c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d105      	bne.n	800299e <GPIOx_Init+0x42>
 8002992:	4b3c      	ldr	r3, [pc, #240]	@ (8002a84 <GPIOx_Init+0x128>)
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	4a3b      	ldr	r2, [pc, #236]	@ (8002a84 <GPIOx_Init+0x128>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOC ) RCC ->APB2ENR |= 1<<4 ;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a3a      	ldr	r2, [pc, #232]	@ (8002a8c <GPIOx_Init+0x130>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d105      	bne.n	80029b2 <GPIOx_Init+0x56>
 80029a6:	4b37      	ldr	r3, [pc, #220]	@ (8002a84 <GPIOx_Init+0x128>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	4a36      	ldr	r2, [pc, #216]	@ (8002a84 <GPIOx_Init+0x128>)
 80029ac:	f043 0310 	orr.w	r3, r3, #16
 80029b0:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOD ) RCC ->APB2ENR |= 1<<5 ;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a36      	ldr	r2, [pc, #216]	@ (8002a90 <GPIOx_Init+0x134>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d105      	bne.n	80029c6 <GPIOx_Init+0x6a>
 80029ba:	4b32      	ldr	r3, [pc, #200]	@ (8002a84 <GPIOx_Init+0x128>)
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	4a31      	ldr	r2, [pc, #196]	@ (8002a84 <GPIOx_Init+0x128>)
 80029c0:	f043 0320 	orr.w	r3, r3, #32
 80029c4:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOE ) RCC ->APB2ENR |= 1<<6 ;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a32      	ldr	r2, [pc, #200]	@ (8002a94 <GPIOx_Init+0x138>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d105      	bne.n	80029da <GPIOx_Init+0x7e>
 80029ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002a84 <GPIOx_Init+0x128>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a84 <GPIOx_Init+0x128>)
 80029d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029d8:	6193      	str	r3, [r2, #24]
	if(Pin<8){
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	2b07      	cmp	r3, #7
 80029de:	d818      	bhi.n	8002a12 <GPIOx_Init+0xb6>
	GPIOx->CRL &=~(0xF<<(Pin*4)) ;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	0092      	lsls	r2, r2, #2
 80029e8:	210f      	movs	r1, #15
 80029ea:	fa01 f202 	lsl.w	r2, r1, r2
 80029ee:	43d2      	mvns	r2, r2
 80029f0:	401a      	ands	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	601a      	str	r2, [r3, #0]
	GPIOx->CRL |=(((Mode<<2)+ Speed) <<(Pin*4)) ; 
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	78ba      	ldrb	r2, [r7, #2]
 80029fc:	0091      	lsls	r1, r2, #2
 80029fe:	7c3a      	ldrb	r2, [r7, #16]
 8002a00:	4411      	add	r1, r2
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e019      	b.n	8002a46 <GPIOx_Init+0xea>
	}
	else{
	GPIOx->CRH &=~(0xF<<((Pin-8)*4)) ;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	3a08      	subs	r2, #8
 8002a1a:	0092      	lsls	r2, r2, #2
 8002a1c:	210f      	movs	r1, #15
 8002a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a22:	43d2      	mvns	r2, r2
 8002a24:	401a      	ands	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	605a      	str	r2, [r3, #4]
	GPIOx->CRH |=(((Mode<<2)+ Speed) <<((Pin-8)*4)) ;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	78ba      	ldrb	r2, [r7, #2]
 8002a30:	0091      	lsls	r1, r2, #2
 8002a32:	7c3a      	ldrb	r2, [r7, #16]
 8002a34:	4411      	add	r1, r2
 8002a36:	78fa      	ldrb	r2, [r7, #3]
 8002a38:	3a08      	subs	r2, #8
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	605a      	str	r2, [r3, #4]
	}
	if(Pull ==PU)
 8002a46:	787b      	ldrb	r3, [r7, #1]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d109      	bne.n	8002a60 <GPIOx_Init+0x104>
  GPIOx->ODR |= 1<<Pin ;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60da      	str	r2, [r3, #12]
  else GPIOx->ODR &= ~(1<<Pin); 	
}
 8002a5e:	e009      	b.n	8002a74 <GPIOx_Init+0x118>
  else GPIOx->ODR &= ~(1<<Pin); 	
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	2101      	movs	r1, #1
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	43d2      	mvns	r2, r2
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	60da      	str	r2, [r3, #12]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40010800 	.word	0x40010800
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40010c00 	.word	0x40010c00
 8002a8c:	40011000 	.word	0x40011000
 8002a90:	40011400 	.word	0x40011400
 8002a94:	40011800 	.word	0x40011800

08002a98 <GPIOx_WritePin>:
void GPIOx_WritePin(GPIO_TypeDef *GPIOx ,uint8_t Pin ,uint8_t bit)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	70fb      	strb	r3, [r7, #3]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	70bb      	strb	r3, [r7, #2]
	if (bit==1) GPIOx->BSRR |= 1 << Pin ;
 8002aa8:	78bb      	ldrb	r3, [r7, #2]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d109      	bne.n	8002ac2 <GPIOx_WritePin+0x2a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	611a      	str	r2, [r3, #16]
	else GPIOx->BSRR |= 1 << (Pin + 16);
}
 8002ac0:	e009      	b.n	8002ad6 <GPIOx_WritePin+0x3e>
	else GPIOx->BSRR |= 1 << (Pin + 16);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	3210      	adds	r2, #16
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	611a      	str	r2, [r3, #16]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <GPIOx_ReadPin>:
uint8_t GPIOx_ReadPin(GPIO_TypeDef *GPIOx ,uint8_t Pin )
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	70fb      	strb	r3, [r7, #3]
	return ((GPIOx->IDR)&(1<<Pin))==0 ? 0:1 ; 
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf14      	ite	ne
 8002afe:	2301      	movne	r3, #1
 8002b00:	2300      	moveq	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
	...

08002b10 <I2Cx_Init>:
#include "i2c.h"
/* I2C1 init function */
void I2Cx_Init(I2C_TypeDef * I2Cx, I2C_Pin Pins, uint32_t Speed)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	72fb      	strb	r3, [r7, #11]
	uint32_t PCLKx=(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b1e:	4b40      	ldr	r3, [pc, #256]	@ (8002c20 <I2Cx_Init+0x110>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a40      	ldr	r2, [pc, #256]	@ (8002c24 <I2Cx_Init+0x114>)
 8002b24:	6852      	ldr	r2, [r2, #4]
 8002b26:	0a12      	lsrs	r2, r2, #8
 8002b28:	f002 0207 	and.w	r2, r2, #7
 8002b2c:	493e      	ldr	r1, [pc, #248]	@ (8002c28 <I2Cx_Init+0x118>)
 8002b2e:	5c8a      	ldrb	r2, [r1, r2]
 8002b30:	40d3      	lsrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
	
  /* I2C clock enable */
		if (I2Cx == I2C1) {
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a3d      	ldr	r2, [pc, #244]	@ (8002c2c <I2Cx_Init+0x11c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d106      	bne.n	8002b4a <I2Cx_Init+0x3a>
				RCC->APB1ENR |= (1 << 21); // B?t clock cho I2C1
 8002b3c:	4b39      	ldr	r3, [pc, #228]	@ (8002c24 <I2Cx_Init+0x114>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	4a38      	ldr	r2, [pc, #224]	@ (8002c24 <I2Cx_Init+0x114>)
 8002b42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b46:	61d3      	str	r3, [r2, #28]
 8002b48:	e009      	b.n	8002b5e <I2Cx_Init+0x4e>
		} else if (I2Cx == I2C2) {
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4a38      	ldr	r2, [pc, #224]	@ (8002c30 <I2Cx_Init+0x120>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d105      	bne.n	8002b5e <I2Cx_Init+0x4e>
				RCC->APB1ENR |= (1 << 22); // B?t clock cho I2C2
 8002b52:	4b34      	ldr	r3, [pc, #208]	@ (8002c24 <I2Cx_Init+0x114>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a33      	ldr	r2, [pc, #204]	@ (8002c24 <I2Cx_Init+0x114>)
 8002b58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b5c:	61d3      	str	r3, [r2, #28]
		}
	

		if(Pins==Pin_PB6PB7){		////I2C1
 8002b5e:	7afb      	ldrb	r3, [r7, #11]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d110      	bne.n	8002b86 <I2Cx_Init+0x76>
			GPIOx_Init(GPIOB, 6,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002b64:	2303      	movs	r3, #3
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	2106      	movs	r1, #6
 8002b6e:	4831      	ldr	r0, [pc, #196]	@ (8002c34 <I2Cx_Init+0x124>)
 8002b70:	f7ff fef4 	bl	800295c <GPIOx_Init>
			GPIOx_Init(GPIOB, 7,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002b74:	2303      	movs	r3, #3
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	2107      	movs	r1, #7
 8002b7e:	482d      	ldr	r0, [pc, #180]	@ (8002c34 <I2Cx_Init+0x124>)
 8002b80:	f7ff feec 	bl	800295c <GPIOx_Init>
 8002b84:	e02c      	b.n	8002be0 <I2Cx_Init+0xd0>
		}
		else if(Pins==Pin_PB8PB9){//I2C1
 8002b86:	7afb      	ldrb	r3, [r7, #11]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d116      	bne.n	8002bba <I2Cx_Init+0xaa>
			AFIO->MAPR |= 1<<1;// REMAP
 8002b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c38 <I2Cx_Init+0x128>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a29      	ldr	r2, [pc, #164]	@ (8002c38 <I2Cx_Init+0x128>)
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	6053      	str	r3, [r2, #4]
			GPIOx_Init(GPIOB, 8,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002b98:	2303      	movs	r3, #3
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	2108      	movs	r1, #8
 8002ba2:	4824      	ldr	r0, [pc, #144]	@ (8002c34 <I2Cx_Init+0x124>)
 8002ba4:	f7ff feda 	bl	800295c <GPIOx_Init>
			GPIOx_Init(GPIOB, 9,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002ba8:	2303      	movs	r3, #3
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	2300      	movs	r3, #0
 8002bae:	2203      	movs	r2, #3
 8002bb0:	2109      	movs	r1, #9
 8002bb2:	4820      	ldr	r0, [pc, #128]	@ (8002c34 <I2Cx_Init+0x124>)
 8002bb4:	f7ff fed2 	bl	800295c <GPIOx_Init>
 8002bb8:	e012      	b.n	8002be0 <I2Cx_Init+0xd0>
		}
		
		
		else if(Pins==Pin_PB10PB11){//I2C2
 8002bba:	7afb      	ldrb	r3, [r7, #11]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d10f      	bne.n	8002be0 <I2Cx_Init+0xd0>
			GPIOx_Init(GPIOB, 10,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	210a      	movs	r1, #10
 8002bca:	481a      	ldr	r0, [pc, #104]	@ (8002c34 <I2Cx_Init+0x124>)
 8002bcc:	f7ff fec6 	bl	800295c <GPIOx_Init>
			GPIOx_Init(GPIOB, 11,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	210b      	movs	r1, #11
 8002bda:	4816      	ldr	r0, [pc, #88]	@ (8002c34 <I2Cx_Init+0x124>)
 8002bdc:	f7ff febe 	bl	800295c <GPIOx_Init>
		}
		
		I2Cx->CR2 =  PCLKx/1000000;// Peripheral clock frequency = 36M
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <I2Cx_Init+0x12c>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	0c9a      	lsrs	r2, r3, #18
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	605a      	str	r2, [r3, #4]
		I2Cx->CCR =  PCLKx/(Speed*2); 
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	61da      	str	r2, [r3, #28]
		I2Cx->TRISE = (PCLKx/1000000)+1;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8002c3c <I2Cx_Init+0x12c>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	0c9b      	lsrs	r3, r3, #18
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	621a      	str	r2, [r3, #32]
		I2Cx->CR1 |=(0<<1)|(1<<0) ; //en 
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	601a      	str	r2, [r3, #0]
	}
 8002c18:	bf00      	nop
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000000 	.word	0x20000000
 8002c24:	40021000 	.word	0x40021000
 8002c28:	0800abfc 	.word	0x0800abfc
 8002c2c:	40005400 	.word	0x40005400
 8002c30:	40005800 	.word	0x40005800
 8002c34:	40010c00 	.word	0x40010c00
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	431bde83 	.word	0x431bde83

08002c40 <I2Cx_ReadMulti>:

	void I2Cx_ReadMulti(I2C_TypeDef *I2Cx, uint8_t DevAddress, uint8_t add, uint8_t * data, uint8_t size){
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	72fb      	strb	r3, [r7, #11]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	72bb      	strb	r3, [r7, #10]
		I2Cx->CR1 |= (1<<8) |(1<<10);// Start generation + ACK
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	601a      	str	r2, [r3, #0]
		while(!(I2Cx->SR1&(1<<0)));
 8002c5e:	bf00      	nop
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f9      	beq.n	8002c60 <I2Cx_ReadMulti+0x20>
		
		I2Cx->DR = (DevAddress<<1)|0;
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	005a      	lsls	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	611a      	str	r2, [r3, #16]
		while(!(I2Cx->SR1&(1<<1))  |  !(I2Cx->SR2&(1<<1)));
 8002c74:	bf00      	nop
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e9      	bne.n	8002c76 <I2Cx_ReadMulti+0x36>
		
		I2Cx->DR = add;
 8002ca2:	7aba      	ldrb	r2, [r7, #10]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
		while(!(I2Cx->SR1&(1<<7)));
 8002ca8:	bf00      	nop
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f9      	beq.n	8002caa <I2Cx_ReadMulti+0x6a>
		
		I2Cx->CR1 |= (1<<8) ;// reStart generation 
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	601a      	str	r2, [r3, #0]
		while(!(I2Cx->SR1&(1<<0)));
 8002cc2:	bf00      	nop
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f9      	beq.n	8002cc4 <I2Cx_ReadMulti+0x84>
		
		I2Cx->DR = (DevAddress<<1)|1;
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	611a      	str	r2, [r3, #16]
		while(!(I2Cx->SR1&(1<<1))  |  !(I2Cx->SR2&(1<<1)));
 8002cde:	bf00      	nop
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	4313      	orrs	r3, r2
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e9      	bne.n	8002ce0 <I2Cx_ReadMulti+0xa0>
		
		for(int i=0; i<size; i++){
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	e010      	b.n	8002d34 <I2Cx_ReadMulti+0xf4>
		while(!(I2Cx->SR1&(1<<6)));// RXE
 8002d12:	bf00      	nop
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f9      	beq.n	8002d14 <I2Cx_ReadMulti+0xd4>
		data[i] = I2Cx->DR;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6919      	ldr	r1, [r3, #16]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4413      	add	r3, r2
 8002d2a:	b2ca      	uxtb	r2, r1
 8002d2c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3301      	adds	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	dbe9      	blt.n	8002d12 <I2Cx_ReadMulti+0xd2>
		}
		
		I2Cx->CR1 &= ~(1<<10);// nACK
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	601a      	str	r2, [r3, #0]
		I2Cx->CR1 |= (1<<9) ;// Stop 
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	601a      	str	r2, [r3, #0]
		
	}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <BCDtoBIN>:
	}
	
	I2Cx->CR1 &= ~(1<<10);// nACK
	I2Cx->CR1 |= (1<<9) ;// Stop 
}
uint8_t BCDtoBIN(uint8_t bcd){
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
return 10*(bcd>>4) + (bcd&0x0f);
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	0092      	lsls	r2, r2, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	b2db      	uxtb	r3, r3

}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <DS3231Read>:
		return max;
	}
	return val;
}

void DS3231Read(uint8_t *HH, uint8_t *MM, uint8_t *SS,uint8_t *Date ,uint8_t *D,uint8_t *M,uint8_t *Y){
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
uint8_t data[7];
	
I2Cx_ReadMulti(I2C1, 0x68, 0x00, data, 7);
 8002d9e:	f107 0310 	add.w	r3, r7, #16
 8002da2:	2207      	movs	r2, #7
 8002da4:	9200      	str	r2, [sp, #0]
 8002da6:	2200      	movs	r2, #0
 8002da8:	2168      	movs	r1, #104	@ 0x68
 8002daa:	481f      	ldr	r0, [pc, #124]	@ (8002e28 <DS3231Read+0x98>)
 8002dac:	f7ff ff48 	bl	8002c40 <I2Cx_ReadMulti>
	
	*HH=BCDtoBIN(data[2]); *MM=BCDtoBIN(data[1]); *SS=BCDtoBIN(data[0]); *Date =BCDtoBIN(data[3]);*D=BCDtoBIN(data[4]);*M=BCDtoBIN(data[5]);*Y=BCDtoBIN(data[6]);
 8002db0:	7cbb      	ldrb	r3, [r7, #18]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff ffd4 	bl	8002d60 <BCDtoBIN>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	7c7b      	ldrb	r3, [r7, #17]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ffcc 	bl	8002d60 <BCDtoBIN>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	7c3b      	ldrb	r3, [r7, #16]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ffc4 	bl	8002d60 <BCDtoBIN>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ffbc 	bl	8002d60 <BCDtoBIN>
 8002de8:	4603      	mov	r3, r0
 8002dea:	461a      	mov	r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	7d3b      	ldrb	r3, [r7, #20]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ffb4 	bl	8002d60 <BCDtoBIN>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	7d7b      	ldrb	r3, [r7, #21]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ffac 	bl	8002d60 <BCDtoBIN>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	7dbb      	ldrb	r3, [r7, #22]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ffa4 	bl	8002d60 <BCDtoBIN>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1e:	701a      	strb	r2, [r3, #0]
	
}
 8002e20:	bf00      	nop
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40005400 	.word	0x40005400

08002e2c <USARTx_Init>:
 */

#include "uart.h"

void USARTx_Init(USART_TypeDef * USARTx,USART_Pin Pin,uint32_t baud)
{
 8002e2c:	b5b0      	push	{r4, r5, r7, lr}
 8002e2e:	b08a      	sub	sp, #40	@ 0x28
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	460b      	mov	r3, r1
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	72fb      	strb	r3, [r7, #11]
	  IRQn_Type IRQn  ; 
	  uint8_t u = 0 ; 
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	77bb      	strb	r3, [r7, #30]
	  uint32_t PCLKx = 0 ; 
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61bb      	str	r3, [r7, #24]
	  RCC->APB2ENR |=1<<0 ; 
 8002e42:	4b87      	ldr	r3, [pc, #540]	@ (8003060 <USARTx_Init+0x234>)
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	4a86      	ldr	r2, [pc, #536]	@ (8003060 <USARTx_Init+0x234>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6193      	str	r3, [r2, #24]
    float USARTDIV = 0.0 ;
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
    uint16_t mantisa = 0 ,fraction= 0 ;  
 8002e54:	2300      	movs	r3, #0
 8002e56:	827b      	strh	r3, [r7, #18]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	823b      	strh	r3, [r7, #16]
	
		if(USARTx == USART1 ){PCLKx =(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE1_Pos]); RCC->APB2ENR|=1<<14;IRQn = USART1_IRQn ; u=1;}
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a81      	ldr	r2, [pc, #516]	@ (8003064 <USARTx_Init+0x238>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d116      	bne.n	8002e92 <USARTx_Init+0x66>
 8002e64:	f7ff fac4 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003060 <USARTx_Init+0x234>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e74:	497c      	ldr	r1, [pc, #496]	@ (8003068 <USARTx_Init+0x23c>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	fa42 f303 	asr.w	r3, r2, r3
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	4b78      	ldr	r3, [pc, #480]	@ (8003060 <USARTx_Init+0x234>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	4a77      	ldr	r2, [pc, #476]	@ (8003060 <USARTx_Init+0x234>)
 8002e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e88:	6193      	str	r3, [r2, #24]
 8002e8a:	2325      	movs	r3, #37	@ 0x25
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	2301      	movs	r3, #1
 8002e90:	77bb      	strb	r3, [r7, #30]
		if(USARTx == USART2 ){PCLKx =(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]); RCC->APB1ENR|=1<<17;IRQn = USART2_IRQn ; u=2;} 
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a75      	ldr	r2, [pc, #468]	@ (800306c <USARTx_Init+0x240>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d116      	bne.n	8002ec8 <USARTx_Init+0x9c>
 8002e9a:	f7ff faa9 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8003060 <USARTx_Init+0x234>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	496f      	ldr	r1, [pc, #444]	@ (8003068 <USARTx_Init+0x23c>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	fa42 f303 	asr.w	r3, r2, r3
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003060 <USARTx_Init+0x234>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	4a69      	ldr	r2, [pc, #420]	@ (8003060 <USARTx_Init+0x234>)
 8002eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ebe:	61d3      	str	r3, [r2, #28]
 8002ec0:	2326      	movs	r3, #38	@ 0x26
 8002ec2:	77fb      	strb	r3, [r7, #31]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	77bb      	strb	r3, [r7, #30]
		if(USARTx == USART3 ){PCLKx =(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]); RCC->APB1ENR|=1<<18;IRQn = USART3_IRQn ; u=3;}
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a69      	ldr	r2, [pc, #420]	@ (8003070 <USARTx_Init+0x244>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d116      	bne.n	8002efe <USARTx_Init+0xd2>
 8002ed0:	f7ff fa8e 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b62      	ldr	r3, [pc, #392]	@ (8003060 <USARTx_Init+0x234>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4961      	ldr	r1, [pc, #388]	@ (8003068 <USARTx_Init+0x23c>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa42 f303 	asr.w	r3, r2, r3
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	4b5d      	ldr	r3, [pc, #372]	@ (8003060 <USARTx_Init+0x234>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4a5c      	ldr	r2, [pc, #368]	@ (8003060 <USARTx_Init+0x234>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ef4:	61d3      	str	r3, [r2, #28]
 8002ef6:	2327      	movs	r3, #39	@ 0x27
 8002ef8:	77fb      	strb	r3, [r7, #31]
 8002efa:	2303      	movs	r3, #3
 8002efc:	77bb      	strb	r3, [r7, #30]
	if(Pin==PA9PA10){//usart1
 8002efe:	7afb      	ldrb	r3, [r7, #11]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10f      	bne.n	8002f24 <USARTx_Init+0xf8>
			GPIOx_Init(GPIOA,9, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 8002f04:	2303      	movs	r3, #3
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	2109      	movs	r1, #9
 8002f0e:	4859      	ldr	r0, [pc, #356]	@ (8003074 <USARTx_Init+0x248>)
 8002f10:	f7ff fd24 	bl	800295c <GPIOx_Init>
			GPIOx_Init(GPIOA,10, INPUT_FLOATING,NOPULL, 0);//rx
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	210a      	movs	r1, #10
 8002f1e:	4855      	ldr	r0, [pc, #340]	@ (8003074 <USARTx_Init+0x248>)
 8002f20:	f7ff fd1c 	bl	800295c <GPIOx_Init>
		 }
	if(Pin==PB6PB7){//usart1
 8002f24:	7afb      	ldrb	r3, [r7, #11]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d115      	bne.n	8002f56 <USARTx_Init+0x12a>
			AFIO->MAPR|=1<<2;
 8002f2a:	4b53      	ldr	r3, [pc, #332]	@ (8003078 <USARTx_Init+0x24c>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a52      	ldr	r2, [pc, #328]	@ (8003078 <USARTx_Init+0x24c>)
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	6053      	str	r3, [r2, #4]
			GPIOx_Init(GPIOB,6, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 8002f36:	2303      	movs	r3, #3
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	2106      	movs	r1, #6
 8002f40:	484e      	ldr	r0, [pc, #312]	@ (800307c <USARTx_Init+0x250>)
 8002f42:	f7ff fd0b 	bl	800295c <GPIOx_Init>
			GPIOx_Init(GPIOB,7, INPUT_FLOATING,NOPULL, 0);//rx
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	2107      	movs	r1, #7
 8002f50:	484a      	ldr	r0, [pc, #296]	@ (800307c <USARTx_Init+0x250>)
 8002f52:	f7ff fd03 	bl	800295c <GPIOx_Init>
		 }

		if(Pin==PA2PA3){//usart2
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d10f      	bne.n	8002f7c <USARTx_Init+0x150>
		GPIOx_Init(GPIOA,2, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	2202      	movs	r2, #2
 8002f64:	2102      	movs	r1, #2
 8002f66:	4843      	ldr	r0, [pc, #268]	@ (8003074 <USARTx_Init+0x248>)
 8002f68:	f7ff fcf8 	bl	800295c <GPIOx_Init>
		GPIOx_Init(GPIOA,3, INPUT_FLOATING,NOPULL, 0);//rx
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2300      	movs	r3, #0
 8002f72:	2201      	movs	r2, #1
 8002f74:	2103      	movs	r1, #3
 8002f76:	483f      	ldr	r0, [pc, #252]	@ (8003074 <USARTx_Init+0x248>)
 8002f78:	f7ff fcf0 	bl	800295c <GPIOx_Init>
	 }
		if(Pin==PB10PB11){//usart3
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d10f      	bne.n	8002fa2 <USARTx_Init+0x176>
		GPIOx_Init(GPIOB,10, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 8002f82:	2303      	movs	r3, #3
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2300      	movs	r3, #0
 8002f88:	2202      	movs	r2, #2
 8002f8a:	210a      	movs	r1, #10
 8002f8c:	483b      	ldr	r0, [pc, #236]	@ (800307c <USARTx_Init+0x250>)
 8002f8e:	f7ff fce5 	bl	800295c <GPIOx_Init>
		GPIOx_Init(GPIOB,11, INPUT_FLOATING,NOPULL, 0);//rx
 8002f92:	2300      	movs	r3, #0
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2300      	movs	r3, #0
 8002f98:	2201      	movs	r2, #1
 8002f9a:	210b      	movs	r1, #11
 8002f9c:	4837      	ldr	r0, [pc, #220]	@ (800307c <USARTx_Init+0x250>)
 8002f9e:	f7ff fcdd 	bl	800295c <GPIOx_Init>
	 }
		USARTDIV = (float)(PCLKx/(16.0*baud)) ;
 8002fa2:	69b8      	ldr	r0, [r7, #24]
 8002fa4:	f7fd fa1e 	bl	80003e4 <__aeabi_ui2d>
 8002fa8:	4604      	mov	r4, r0
 8002faa:	460d      	mov	r5, r1
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fd fa19 	bl	80003e4 <__aeabi_ui2d>
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	4b32      	ldr	r3, [pc, #200]	@ (8003080 <USARTx_Init+0x254>)
 8002fb8:	f7fd fa8e 	bl	80004d8 <__aeabi_dmul>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	f7fd fbb2 	bl	800072c <__aeabi_ddiv>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f7fd fd7a 	bl	8000ac8 <__aeabi_d2f>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	617b      	str	r3, [r7, #20]
	    mantisa  = (uint16_t)USARTDIV ; 
 8002fd8:	6978      	ldr	r0, [r7, #20]
 8002fda:	f7fe f8af 	bl	800113c <__aeabi_f2uiz>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	827b      	strh	r3, [r7, #18]
        fraction = (USARTDIV - mantisa)*16 ; 	
 8002fe2:	8a7b      	ldrh	r3, [r7, #18]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fe79 	bl	8000cdc <__aeabi_i2f>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4619      	mov	r1, r3
 8002fee:	6978      	ldr	r0, [r7, #20]
 8002ff0:	f7fd fdbe 	bl	8000b70 <__aeabi_fsub>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fec2 	bl	8000d84 <__aeabi_fmul>
 8003000:	4603      	mov	r3, r0
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe f89a 	bl	800113c <__aeabi_f2uiz>
 8003008:	4603      	mov	r3, r0
 800300a:	823b      	strh	r3, [r7, #16]
		USARTx->BRR = (mantisa <<4)+fraction ; 
 800300c:	8a7b      	ldrh	r3, [r7, #18]
 800300e:	011a      	lsls	r2, r3, #4
 8003010:	8a3b      	ldrh	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	461a      	mov	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	609a      	str	r2, [r3, #8]
      USARTx->CR1 |=1<<2;//tx
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f043 0204 	orr.w	r2, r3, #4
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	60da      	str	r2, [r3, #12]
	  USARTx->CR1 |=1<<3;//rx
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f043 0208 	orr.w	r2, r3, #8
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	60da      	str	r2, [r3, #12]
	  USARTx->CR1 |=1<<13 ; //enable usart
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	60da      	str	r2, [r3, #12]
    USARTx->CR1 |=1<<5; //it
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f043 0220 	orr.w	r2, r3, #32
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	60da      	str	r2, [r3, #12]
    NVICx_Init(IRQn, 1, u);
 800304a:	7fba      	ldrb	r2, [r7, #30]
 800304c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003050:	2101      	movs	r1, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fc60 	bl	8002918 <NVICx_Init>
}
 8003058:	bf00      	nop
 800305a:	3720      	adds	r7, #32
 800305c:	46bd      	mov	sp, r7
 800305e:	bdb0      	pop	{r4, r5, r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	40013800 	.word	0x40013800
 8003068:	0800abfc 	.word	0x0800abfc
 800306c:	40004400 	.word	0x40004400
 8003070:	40004800 	.word	0x40004800
 8003074:	40010800 	.word	0x40010800
 8003078:	40010000 	.word	0x40010000
 800307c:	40010c00 	.word	0x40010c00
 8003080:	40300000 	.word	0x40300000

08003084 <USARTtoBUFF>:
char USART3_BUFFER[USART3_BUFFER_SIZE];

USART_ST USART1_ST  ={USART1_BUFFER,USART1_BUFFER_SIZE , 0, 0, 0} ;
USART_ST USART2_ST  ={USART2_BUFFER,USART2_BUFFER_SIZE , 0, 0, 0} ;
USART_ST USART3_ST  ={USART3_BUFFER,USART3_BUFFER_SIZE , 0, 0, 0} ;
void USARTtoBUFF(USART_ST *u , char c){
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	70fb      	strb	r3, [r7, #3]
	if(u->in<u->size){
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	88da      	ldrh	r2, [r3, #6]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	889b      	ldrh	r3, [r3, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	d21b      	bcs.n	80030d4 <USARTtoBUFF+0x50>
		 u->buffer[u->in] = c;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	88d2      	ldrh	r2, [r2, #6]
 80030a4:	4413      	add	r3, r2
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	701a      	strb	r2, [r3, #0]
		 u->in++;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	88db      	ldrh	r3, [r3, #6]
 80030ae:	3301      	adds	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	80da      	strh	r2, [r3, #6]
		 u->num++;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	895b      	ldrh	r3, [r3, #10]
 80030ba:	3301      	adds	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	815a      	strh	r2, [r3, #10]
		if(u->in==u->size) u->in = 0 ;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	88da      	ldrh	r2, [r3, #6]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	889b      	ldrh	r3, [r3, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d102      	bne.n	80030d4 <USARTtoBUFF+0x50>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	80da      	strh	r2, [r3, #6]
	}
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr

080030de <USART_PutC>:
    // Thêm null terminator
    if(i < len) str[i] = '\0';
    
    return i; 
}
void USART_PutC(USART_TypeDef * USARTx, char c) {
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	460b      	mov	r3, r1
 80030e8:	70fb      	strb	r3, [r7, #3]
    while(!(USARTx->SR & (1<<7)));  // Ð?i d?n khi TXE = 1
 80030ea:	bf00      	nop
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f9      	beq.n	80030ec <USART_PutC+0xe>
    USARTx->DR = c;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	605a      	str	r2, [r3, #4]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <USART1_IRQHandler>:

 while(*str) USART_PutC(USARTx ,*str ++) ;

}
void USART1_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
    if(USART1->SR & (1<<5)) {           // ? USART1 check USART1
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <USART1_IRQHandler+0x2c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <USART1_IRQHandler+0x22>
        char data = USART1->DR;                // ? Ð?c t? USART1
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <USART1_IRQHandler+0x2c>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART1_ST, data);         // ? Luu vào buffer USART1
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	4619      	mov	r1, r3
 8003124:	4804      	ldr	r0, [pc, #16]	@ (8003138 <USART1_IRQHandler+0x30>)
 8003126:	f7ff ffad 	bl	8003084 <USARTtoBUFF>
    }
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40013800 	.word	0x40013800
 8003138:	2000000c 	.word	0x2000000c

0800313c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
    if(USART2->SR & (1<<5)) {           // ? USART2 check USART2  
 8003142:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <USART2_IRQHandler+0x2c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <USART2_IRQHandler+0x22>
        char data = USART2->DR;                // ? Ð?c t? USART2
 800314e:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <USART2_IRQHandler+0x2c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART2_ST, data);         // ? Luu vào buffer USART2
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	4619      	mov	r1, r3
 8003158:	4804      	ldr	r0, [pc, #16]	@ (800316c <USART2_IRQHandler+0x30>)
 800315a:	f7ff ff93 	bl	8003084 <USARTtoBUFF>
    }
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40004400 	.word	0x40004400
 800316c:	20000018 	.word	0x20000018

08003170 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
    if(USART3->SR & (1<<5)) {           // ? USART3 dã dúng
 8003176:	4b09      	ldr	r3, [pc, #36]	@ (800319c <USART3_IRQHandler+0x2c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <USART3_IRQHandler+0x22>
        char data = USART3->DR;                // ? Ð?c t? USART3
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <USART3_IRQHandler+0x2c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART3_ST, data);         // ? Luu vào buffer USART3
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	4619      	mov	r1, r3
 800318c:	4804      	ldr	r0, [pc, #16]	@ (80031a0 <USART3_IRQHandler+0x30>)
 800318e:	f7ff ff79 	bl	8003084 <USARTtoBUFF>
    }
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40004800 	.word	0x40004800
 80031a0:	20000024 	.word	0x20000024

080031a4 <_write>:

// =============================================================================
// PRINTF UART REDIRECT
// =============================================================================
#ifdef __GNUC__
int _write(int file, char *ptr, int len) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	e00a      	b.n	80031cc <_write+0x28>
        USART_PutC(USART1, ptr[i]);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	4413      	add	r3, r2
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	4619      	mov	r1, r3
 80031c0:	4807      	ldr	r0, [pc, #28]	@ (80031e0 <_write+0x3c>)
 80031c2:	f7ff ff8c 	bl	80030de <USART_PutC>
    for (int i = 0; i < len; i++) {
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	3301      	adds	r3, #1
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	dbf0      	blt.n	80031b6 <_write+0x12>
    }
    return len;
 80031d4:	687b      	ldr	r3, [r7, #4]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40013800 	.word	0x40013800

080031e4 <InitMQ137Sensor>:
 *
 *  Created on: Jun 30, 2025
 *      Author: FPTSHOP
 */
#include "gas_sensor.h"
void InitMQ137Sensor(GasSensor_t* sensor) {
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    // Cấu hình base sensor
    sensor->base.sensor_id = 0;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
    sensor->base.sensor_type = SENSOR_TYPE_MQ137;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	705a      	strb	r2, [r3, #1]
    strcpy(sensor->base.sensor_name, "MQ137");
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3302      	adds	r3, #2
 80031fc:	4a20      	ldr	r2, [pc, #128]	@ (8003280 <InitMQ137Sensor+0x9c>)
 80031fe:	6810      	ldr	r0, [r2, #0]
 8003200:	6018      	str	r0, [r3, #0]
 8003202:	8892      	ldrh	r2, [r2, #4]
 8003204:	809a      	strh	r2, [r3, #4]
    sensor->base.is_enabled = 1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	749a      	strb	r2, [r3, #18]
    sensor->base.adc_channel = MQ137_ADC_CHANNEL;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2208      	movs	r2, #8
 8003210:	615a      	str	r2, [r3, #20]
    sensor->base.digital_port = MQ137_DIGITAL_PORT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1b      	ldr	r2, [pc, #108]	@ (8003284 <InitMQ137Sensor+0xa0>)
 8003216:	619a      	str	r2, [r3, #24]
    sensor->base.digital_pin = MQ137_DIGITAL_PIN;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2208      	movs	r2, #8
 800321c:	839a      	strh	r2, [r3, #28]
    sensor->base.r0_value = 10000.0f; // Giá trị mặc định, cần hiệu chuẩn
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a19      	ldr	r2, [pc, #100]	@ (8003288 <InitMQ137Sensor+0xa4>)
 8003222:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Cấu hình gas sensor
    sensor->gas_type = GAS_TYPE_NH3;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    strcpy(sensor->gas_name, "NH3");
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3339      	adds	r3, #57	@ 0x39
 8003230:	4a16      	ldr	r2, [pc, #88]	@ (800328c <InitMQ137Sensor+0xa8>)
 8003232:	6810      	ldr	r0, [r2, #0]
 8003234:	6018      	str	r0, [r3, #0]
    strcpy(sensor->unit, "ppm");
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3341      	adds	r3, #65	@ 0x41
 800323a:	4a15      	ldr	r2, [pc, #84]	@ (8003290 <InitMQ137Sensor+0xac>)
 800323c:	6810      	ldr	r0, [r2, #0]
 800323e:	6018      	str	r0, [r3, #0]
    
    // Ngưỡng cảnh báo NH3
    sensor->threshold_low = MQ137_THRESHOLD_LOW;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a14      	ldr	r2, [pc, #80]	@ (8003294 <InitMQ137Sensor+0xb0>)
 8003244:	659a      	str	r2, [r3, #88]	@ 0x58
    sensor->threshold_high = MQ137_THRESHOLD_HIGH;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a13      	ldr	r2, [pc, #76]	@ (8003298 <InitMQ137Sensor+0xb4>)
 800324a:	65da      	str	r2, [r3, #92]	@ 0x5c
    sensor->threshold_danger = MQ137_THRESHOLD_DANGER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a13      	ldr	r2, [pc, #76]	@ (800329c <InitMQ137Sensor+0xb8>)
 8003250:	661a      	str	r2, [r3, #96]	@ 0x60
    
    // Thông số đặc tuyến MQ137 cho NH3
    sensor->curve_a = -0.263f;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a12      	ldr	r2, [pc, #72]	@ (80032a0 <InitMQ137Sensor+0xbc>)
 8003256:	669a      	str	r2, [r3, #104]	@ 0x68
    sensor->curve_b = 0.42f;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a12      	ldr	r2, [pc, #72]	@ (80032a4 <InitMQ137Sensor+0xc0>)
 800325c:	66da      	str	r2, [r3, #108]	@ 0x6c
    sensor->min_ppm = 0.0f;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	671a      	str	r2, [r3, #112]	@ 0x70
    sensor->max_ppm = 500.0f;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a0f      	ldr	r2, [pc, #60]	@ (80032a8 <InitMQ137Sensor+0xc4>)
 800326a:	675a      	str	r2, [r3, #116]	@ 0x74
    
    // Khởi tạo giá trị
    sensor->alarm_level = ALARM_NORMAL;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	0800a060 	.word	0x0800a060
 8003284:	40010800 	.word	0x40010800
 8003288:	461c4000 	.word	0x461c4000
 800328c:	0800a068 	.word	0x0800a068
 8003290:	0800a06c 	.word	0x0800a06c
 8003294:	41700000 	.word	0x41700000
 8003298:	41c80000 	.word	0x41c80000
 800329c:	42480000 	.word	0x42480000
 80032a0:	be86a7f0 	.word	0xbe86a7f0
 80032a4:	3ed70a3d 	.word	0x3ed70a3d
 80032a8:	43fa0000 	.word	0x43fa0000

080032ac <InitMQ136Sensor>:

/**
 * @brief Khởi tạo cảm biến MQ136 (H2S)
 */
void InitMQ136Sensor(GasSensor_t* sensor) {
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
    // Cấu hình base sensor
    sensor->base.sensor_id = 1;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
    sensor->base.sensor_type = SENSOR_TYPE_MQ136;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	705a      	strb	r2, [r3, #1]
    strcpy(sensor->base.sensor_name, "MQ136");
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3302      	adds	r3, #2
 80032c4:	4a20      	ldr	r2, [pc, #128]	@ (8003348 <InitMQ136Sensor+0x9c>)
 80032c6:	6810      	ldr	r0, [r2, #0]
 80032c8:	6018      	str	r0, [r3, #0]
 80032ca:	8892      	ldrh	r2, [r2, #4]
 80032cc:	809a      	strh	r2, [r3, #4]
    sensor->base.is_enabled = 1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	749a      	strb	r2, [r3, #18]
    sensor->base.adc_channel = MQ136_ADC_CHANNEL;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2209      	movs	r2, #9
 80032d8:	615a      	str	r2, [r3, #20]
    sensor->base.digital_port = MQ136_DIGITAL_PORT;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1b      	ldr	r2, [pc, #108]	@ (800334c <InitMQ136Sensor+0xa0>)
 80032de:	619a      	str	r2, [r3, #24]
    sensor->base.digital_pin = MQ136_DIGITAL_PIN;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2210      	movs	r2, #16
 80032e4:	839a      	strh	r2, [r3, #28]
    sensor->base.r0_value = 10000.0f; // Giá trị mặc định, cần hiệu chuẩn
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a19      	ldr	r2, [pc, #100]	@ (8003350 <InitMQ136Sensor+0xa4>)
 80032ea:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Cấu hình gas sensor
    sensor->gas_type = GAS_TYPE_H2S;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    strcpy(sensor->gas_name, "H2S");
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3339      	adds	r3, #57	@ 0x39
 80032f8:	4a16      	ldr	r2, [pc, #88]	@ (8003354 <InitMQ136Sensor+0xa8>)
 80032fa:	6810      	ldr	r0, [r2, #0]
 80032fc:	6018      	str	r0, [r3, #0]
    strcpy(sensor->unit, "ppm");
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3341      	adds	r3, #65	@ 0x41
 8003302:	4a15      	ldr	r2, [pc, #84]	@ (8003358 <InitMQ136Sensor+0xac>)
 8003304:	6810      	ldr	r0, [r2, #0]
 8003306:	6018      	str	r0, [r3, #0]
    
    // Ngưỡng cảnh báo CO2
    sensor->threshold_low = MQ136_THRESHOLD_LOW;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a14      	ldr	r2, [pc, #80]	@ (800335c <InitMQ136Sensor+0xb0>)
 800330c:	659a      	str	r2, [r3, #88]	@ 0x58
    sensor->threshold_high = MQ136_THRESHOLD_HIGH;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <InitMQ136Sensor+0xb4>)
 8003312:	65da      	str	r2, [r3, #92]	@ 0x5c
    sensor->threshold_danger = MQ136_THRESHOLD_DANGER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a13      	ldr	r2, [pc, #76]	@ (8003364 <InitMQ136Sensor+0xb8>)
 8003318:	661a      	str	r2, [r3, #96]	@ 0x60
    
    // Thông số đặc tuyến MQ135 cho CO2
    sensor->curve_a = MQ136_CURVE_A;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a12      	ldr	r2, [pc, #72]	@ (8003368 <InitMQ136Sensor+0xbc>)
 800331e:	669a      	str	r2, [r3, #104]	@ 0x68
    sensor->curve_b = MQ136_CURVE_B;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a12      	ldr	r2, [pc, #72]	@ (800336c <InitMQ136Sensor+0xc0>)
 8003324:	66da      	str	r2, [r3, #108]	@ 0x6c
    sensor->min_ppm = MQ136_MIN_PPM;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800332c:	671a      	str	r2, [r3, #112]	@ 0x70
    sensor->max_ppm = MQ136_MAX_PPM;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a0f      	ldr	r2, [pc, #60]	@ (8003370 <InitMQ136Sensor+0xc4>)
 8003332:	675a      	str	r2, [r3, #116]	@ 0x74
    
    // Khởi tạo giá trị
    sensor->alarm_level = ALARM_NORMAL;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	0800a070 	.word	0x0800a070
 800334c:	40010800 	.word	0x40010800
 8003350:	461c4000 	.word	0x461c4000
 8003354:	0800a078 	.word	0x0800a078
 8003358:	0800a06c 	.word	0x0800a06c
 800335c:	40a00000 	.word	0x40a00000
 8003360:	41200000 	.word	0x41200000
 8003364:	41a00000 	.word	0x41a00000
 8003368:	be800000 	.word	0xbe800000
 800336c:	be75c28f 	.word	0xbe75c28f
 8003370:	42c80000 	.word	0x42c80000

08003374 <ProcessGasSensor>:
void ProcessGasSensor(GasSensor_t* sensor) {
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

    sensor->base.raw_voltage = ReadADC_Voltage(sensor->base.adc_channel);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f9b5 	bl	80036f0 <ReadADC_Voltage>
 8003386:	4602      	mov	r2, r0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	621a      	str	r2, [r3, #32]
    sensor->base.digital_state = ReadDigitalState(sensor->base.digital_port, sensor->base.digital_pin);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699a      	ldr	r2, [r3, #24]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8b9b      	ldrh	r3, [r3, #28]
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 f9d2 	bl	8003740 <ReadDigitalState>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    sensor->base.timestamp = HAL_GetTick();
 80033a6:	f7fe fb51 	bl	8001a4c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30

    // Tính toán điện trở và tỷ lệ Rs/R0
    if(sensor->base.raw_voltage > 0.2f) { // Ngưỡng thấp hơn cho ADC 3.3V
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	493f      	ldr	r1, [pc, #252]	@ (80034b4 <ProcessGasSensor+0x140>)
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fea0 	bl	80010fc <__aeabi_fcmpgt>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d059      	beq.n	8003476 <ProcessGasSensor+0x102>
        sensor->base.resistance = CalculateResistance(sensor->base.raw_voltage);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f9cc 	bl	8003764 <CalculateResistance>
 80033cc:	4602      	mov	r2, r0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	625a      	str	r2, [r3, #36]	@ 0x24
        sensor->base.rs_r0_ratio = sensor->base.resistance / sensor->base.r0_value;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f7fd fd85 	bl	8000eec <__aeabi_fdiv>
 80033e2:	4603      	mov	r3, r0
 80033e4:	461a      	mov	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	629a      	str	r2, [r3, #40]	@ 0x28

        // Tính nồng độ khí
        sensor->gas_ppm = CalculateGasPPM(sensor->base.rs_r0_ratio, sensor->curve_a, sensor->curve_b);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033f6:	461a      	mov	r2, r3
 80033f8:	f000 f9dc 	bl	80037b4 <CalculateGasPPM>
 80033fc:	4602      	mov	r2, r0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	64da      	str	r2, [r3, #76]	@ 0x4c

        // Giới hạn giá trị trong khoảng hợp lệ
        if(sensor->gas_ppm < sensor->min_ppm) sensor->gas_ppm = sensor->min_ppm;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7fd fe57 	bl	80010c0 <__aeabi_fcmplt>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <ProcessGasSensor+0xac>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	64da      	str	r2, [r3, #76]	@ 0x4c
        if(sensor->gas_ppm > sensor->max_ppm) sensor->gas_ppm = sensor->max_ppm;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f7fd fe66 	bl	80010fc <__aeabi_fcmpgt>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <ProcessGasSensor+0xca>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	64da      	str	r2, [r3, #76]	@ 0x4c

        // Lọc nhiễu đơn giản (moving average)
        sensor->filtered_ppm = 0.8f * sensor->filtered_ppm + 0.2f * sensor->gas_ppm;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003442:	491d      	ldr	r1, [pc, #116]	@ (80034b8 <ProcessGasSensor+0x144>)
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd fc9d 	bl	8000d84 <__aeabi_fmul>
 800344a:	4603      	mov	r3, r0
 800344c:	461c      	mov	r4, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	4918      	ldr	r1, [pc, #96]	@ (80034b4 <ProcessGasSensor+0x140>)
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd fc95 	bl	8000d84 <__aeabi_fmul>
 800345a:	4603      	mov	r3, r0
 800345c:	4619      	mov	r1, r3
 800345e:	4620      	mov	r0, r4
 8003460:	f7fd fb88 	bl	8000b74 <__addsf3>
 8003464:	4603      	mov	r3, r0
 8003466:	461a      	mov	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	651a      	str	r2, [r3, #80]	@ 0x50
        sensor->average_ppm = sensor->filtered_ppm;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	@ 0x54
 8003474:	e00f      	b.n	8003496 <ProcessGasSensor+0x122>

    } else {
        sensor->base.resistance = 0.0f;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	625a      	str	r2, [r3, #36]	@ 0x24
        sensor->base.rs_r0_ratio = 0.0f;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	629a      	str	r2, [r3, #40]	@ 0x28
        sensor->gas_ppm = sensor->min_ppm;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	64da      	str	r2, [r3, #76]	@ 0x4c
        sensor->filtered_ppm = sensor->min_ppm;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    // Validate dữ liệu
    sensor->base.is_valid = ValidateGasSensor(sensor);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f810 	bl	80034bc <ValidateGasSensor>
 800349c:	4603      	mov	r3, r0
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	74da      	strb	r2, [r3, #19]

    // Cập nhật mức cảnh báo
    UpdateAlarmLevel(sensor);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f85b 	bl	8003560 <UpdateAlarmLevel>
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd90      	pop	{r4, r7, pc}
 80034b2:	bf00      	nop
 80034b4:	3e4ccccd 	.word	0x3e4ccccd
 80034b8:	3f4ccccd 	.word	0x3f4ccccd

080034bc <ValidateGasSensor>:

/**
 * @brief Validate dữ liệu cảm biến (cập nhật cho điện áp 3.3V)
 */
uint8_t ValidateGasSensor(GasSensor_t* sensor) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    // Kiểm tra điện áp trong khoảng hợp lệ (0.1V - 4.8V cho cảm biến 5V)
    // Sau khi qua mạch chia áp, tín hiệu sẽ từ 0.066V - 3.168V tại ADC
    if(sensor->base.raw_voltage < 0.2f || sensor->base.raw_voltage > 4.8f) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4921      	ldr	r1, [pc, #132]	@ (8003550 <ValidateGasSensor+0x94>)
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fdf8 	bl	80010c0 <__aeabi_fcmplt>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d108      	bne.n	80034e8 <ValidateGasSensor+0x2c>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	491e      	ldr	r1, [pc, #120]	@ (8003554 <ValidateGasSensor+0x98>)
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fe0d 	bl	80010fc <__aeabi_fcmpgt>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <ValidateGasSensor+0x30>
        return 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e02c      	b.n	8003546 <ValidateGasSensor+0x8a>
    }
    
    // Kiểm tra điện trở trong khoảng hợp lệ
    if(sensor->base.resistance < 1000.0f || sensor->base.resistance > 200000.0f) {
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	4919      	ldr	r1, [pc, #100]	@ (8003558 <ValidateGasSensor+0x9c>)
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fde4 	bl	80010c0 <__aeabi_fcmplt>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d108      	bne.n	8003510 <ValidateGasSensor+0x54>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	4916      	ldr	r1, [pc, #88]	@ (800355c <ValidateGasSensor+0xa0>)
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd fdf9 	bl	80010fc <__aeabi_fcmpgt>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <ValidateGasSensor+0x58>
        return 0;
 8003510:	2300      	movs	r3, #0
 8003512:	e018      	b.n	8003546 <ValidateGasSensor+0x8a>
    }
    
    // Kiểm tra nồng độ khí trong khoảng hợp lệ
    if(sensor->gas_ppm < sensor->min_ppm || sensor->gas_ppm > sensor->max_ppm) {
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351c:	4619      	mov	r1, r3
 800351e:	4610      	mov	r0, r2
 8003520:	f7fd fdce 	bl	80010c0 <__aeabi_fcmplt>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <ValidateGasSensor+0x84>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f7fd fde1 	bl	80010fc <__aeabi_fcmpgt>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <ValidateGasSensor+0x88>
        return 0;
 8003540:	2300      	movs	r3, #0
 8003542:	e000      	b.n	8003546 <ValidateGasSensor+0x8a>
    }
    
    return 1; // Dữ liệu hợp lệ
 8003544:	2301      	movs	r3, #1
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	3e4ccccd 	.word	0x3e4ccccd
 8003554:	4099999a 	.word	0x4099999a
 8003558:	447a0000 	.word	0x447a0000
 800355c:	48435000 	.word	0x48435000

08003560 <UpdateAlarmLevel>:

/**
 * @brief Cập nhật mức cảnh báo cho cảm biến
 */
void UpdateAlarmLevel(GasSensor_t* sensor) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
    sensor->alarm_level = DetermineAlarmLevel(sensor->gas_ppm, 
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003578:	f000 f948 	bl	800380c <DetermineAlarmLevel>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
                                            sensor->threshold_low,
                                            sensor->threshold_high, 
                                            sensor->threshold_danger);
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <PrintSensorDetails>:
void PrintSensorDetails(GasSensor_t* sensor) {
 8003590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003594:	b08b      	sub	sp, #44	@ 0x2c
 8003596:	af04      	add	r7, sp, #16
 8003598:	6078      	str	r0, [r7, #4]
    printf("\r\n--- %s (%s) ---\r\n", sensor->base.sensor_name, sensor->gas_name);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	1c99      	adds	r1, r3, #2
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3339      	adds	r3, #57	@ 0x39
 80035a2:	461a      	mov	r2, r3
 80035a4:	4845      	ldr	r0, [pc, #276]	@ (80036bc <PrintSensorDetails+0x12c>)
 80035a6:	f001 ff9f 	bl	80054e8 <iprintf>
    printf("ID: %d | TRANG THAI: %s\r\n", 
           sensor->base.sensor_id, 
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	781b      	ldrb	r3, [r3, #0]
    printf("ID: %d | TRANG THAI: %s\r\n", 
 80035ae:	4619      	mov	r1, r3
           sensor->base.is_enabled ? (sensor->base.is_valid ? "HOAT DONG" : "LOI") : "OFF");
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7c9b      	ldrb	r3, [r3, #18]
    printf("ID: %d | TRANG THAI: %s\r\n", 
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <PrintSensorDetails+0x38>
           sensor->base.is_enabled ? (sensor->base.is_valid ? "HOAT DONG" : "LOI") : "OFF");
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7cdb      	ldrb	r3, [r3, #19]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <PrintSensorDetails+0x34>
 80035c0:	4b3f      	ldr	r3, [pc, #252]	@ (80036c0 <PrintSensorDetails+0x130>)
 80035c2:	e002      	b.n	80035ca <PrintSensorDetails+0x3a>
 80035c4:	4b3f      	ldr	r3, [pc, #252]	@ (80036c4 <PrintSensorDetails+0x134>)
 80035c6:	e000      	b.n	80035ca <PrintSensorDetails+0x3a>
    printf("ID: %d | TRANG THAI: %s\r\n", 
 80035c8:	4b3f      	ldr	r3, [pc, #252]	@ (80036c8 <PrintSensorDetails+0x138>)
 80035ca:	461a      	mov	r2, r3
 80035cc:	483f      	ldr	r0, [pc, #252]	@ (80036cc <PrintSensorDetails+0x13c>)
 80035ce:	f001 ff8b 	bl	80054e8 <iprintf>
    printf("DIEN AP: %.3f V | DIEN TRO: %.1f Ω\r\n", 
           sensor->base.raw_voltage, sensor->base.resistance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
    printf("DIEN AP: %.3f V | DIEN TRO: %.1f Ω\r\n", 
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc ff26 	bl	8000428 <__aeabi_f2d>
 80035dc:	4604      	mov	r4, r0
 80035de:	460d      	mov	r5, r1
           sensor->base.raw_voltage, sensor->base.resistance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    printf("DIEN AP: %.3f V | DIEN TRO: %.1f Ω\r\n", 
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fc ff1f 	bl	8000428 <__aeabi_f2d>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	e9cd 2300 	strd	r2, r3, [sp]
 80035f2:	4622      	mov	r2, r4
 80035f4:	462b      	mov	r3, r5
 80035f6:	4836      	ldr	r0, [pc, #216]	@ (80036d0 <PrintSensorDetails+0x140>)
 80035f8:	f001 ff76 	bl	80054e8 <iprintf>
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
           sensor->base.rs_r0_ratio, sensor->base.r0_value);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
 8003600:	4618      	mov	r0, r3
 8003602:	f7fc ff11 	bl	8000428 <__aeabi_f2d>
 8003606:	4604      	mov	r4, r0
 8003608:	460d      	mov	r5, r1
           sensor->base.rs_r0_ratio, sensor->base.r0_value);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
 800360e:	4618      	mov	r0, r3
 8003610:	f7fc ff0a 	bl	8000428 <__aeabi_f2d>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	e9cd 2300 	strd	r2, r3, [sp]
 800361c:	4622      	mov	r2, r4
 800361e:	462b      	mov	r3, r5
 8003620:	482c      	ldr	r0, [pc, #176]	@ (80036d4 <PrintSensorDetails+0x144>)
 8003622:	f001 ff61 	bl	80054e8 <iprintf>
    printf("NONG DO: %.1f %s \r\n", 
           sensor->gas_ppm, sensor->unit);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    printf("NONG DO: %.1f %s \r\n", 
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc fefc 	bl	8000428 <__aeabi_f2d>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
           sensor->gas_ppm, sensor->unit);
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	3141      	adds	r1, #65	@ 0x41
    printf("NONG DO: %.1f %s \r\n", 
 8003638:	9100      	str	r1, [sp, #0]
 800363a:	4827      	ldr	r0, [pc, #156]	@ (80036d8 <PrintSensorDetails+0x148>)
 800363c:	f001 ff54 	bl	80054e8 <iprintf>
    printf("Digital: %s\r\n", sensor->base.digital_state ? "HIGH" : "LOW");
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <PrintSensorDetails+0xbe>
 800364a:	4b24      	ldr	r3, [pc, #144]	@ (80036dc <PrintSensorDetails+0x14c>)
 800364c:	e000      	b.n	8003650 <PrintSensorDetails+0xc0>
 800364e:	4b24      	ldr	r3, [pc, #144]	@ (80036e0 <PrintSensorDetails+0x150>)
 8003650:	4619      	mov	r1, r3
 8003652:	4824      	ldr	r0, [pc, #144]	@ (80036e4 <PrintSensorDetails+0x154>)
 8003654:	f001 ff48 	bl	80054e8 <iprintf>
    
    const char* alarm_text[] = {"BINH THUONG", "THAP", "CAO", "NGUY HIEM"};
 8003658:	4b23      	ldr	r3, [pc, #140]	@ (80036e8 <PrintSensorDetails+0x158>)
 800365a:	f107 0408 	add.w	r4, r7, #8
 800365e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
           alarm_text[sensor->alarm_level],
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3318      	adds	r3, #24
 800366e:	443b      	add	r3, r7
 8003670:	f853 6c10 	ldr.w	r6, [r3, #-16]
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc fed5 	bl	8000428 <__aeabi_f2d>
 800367e:	4680      	mov	r8, r0
 8003680:	4689      	mov	r9, r1
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc fece 	bl	8000428 <__aeabi_f2d>
 800368c:	4604      	mov	r4, r0
 800368e:	460d      	mov	r5, r1
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 8003694:	4618      	mov	r0, r3
 8003696:	f7fc fec7 	bl	8000428 <__aeabi_f2d>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036a2:	e9cd 4500 	strd	r4, r5, [sp]
 80036a6:	4642      	mov	r2, r8
 80036a8:	464b      	mov	r3, r9
 80036aa:	4631      	mov	r1, r6
 80036ac:	480f      	ldr	r0, [pc, #60]	@ (80036ec <PrintSensorDetails+0x15c>)
 80036ae:	f001 ff1b 	bl	80054e8 <iprintf>
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036bc:	0800a07c 	.word	0x0800a07c
 80036c0:	0800a090 	.word	0x0800a090
 80036c4:	0800a09c 	.word	0x0800a09c
 80036c8:	0800a0a0 	.word	0x0800a0a0
 80036cc:	0800a0a4 	.word	0x0800a0a4
 80036d0:	0800a0c0 	.word	0x0800a0c0
 80036d4:	0800a0e8 	.word	0x0800a0e8
 80036d8:	0800a104 	.word	0x0800a104
 80036dc:	0800a118 	.word	0x0800a118
 80036e0:	0800a120 	.word	0x0800a120
 80036e4:	0800a124 	.word	0x0800a124
 80036e8:	0800a178 	.word	0x0800a178
 80036ec:	0800a134 	.word	0x0800a134

080036f0 <ReadADC_Voltage>:
 *
 *  Created on: Jun 30, 2025
 *      Author: FPTSHOP
 */
#include "sensor_hardware.h"
float ReadADC_Voltage(uint32_t channel) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
    // Đọc giá trị ADC trung bình
    float adc_avg = ADCx_Read_TB(ADC1, channel, 10)-150;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	220a      	movs	r2, #10
 80036fe:	4619      	mov	r1, r3
 8003700:	480c      	ldr	r0, [pc, #48]	@ (8003734 <ReadADC_Voltage+0x44>)
 8003702:	f7ff f834 	bl	800276e <ADCx_Read_TB>
 8003706:	4603      	mov	r3, r0
 8003708:	3b96      	subs	r3, #150	@ 0x96
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd fae6 	bl	8000cdc <__aeabi_i2f>
 8003710:	4603      	mov	r3, r0
 8003712:	60fb      	str	r3, [r7, #12]
    
    // Chuyển đổi giá trị ADC sang điện áp tại chân ADC
    float adc_voltage = adc_avg * ADC_VREF / ADC_RESOLUTION;
 8003714:	4908      	ldr	r1, [pc, #32]	@ (8003738 <ReadADC_Voltage+0x48>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f7fd fb34 	bl	8000d84 <__aeabi_fmul>
 800371c:	4603      	mov	r3, r0
 800371e:	4907      	ldr	r1, [pc, #28]	@ (800373c <ReadADC_Voltage+0x4c>)
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd fbe3 	bl	8000eec <__aeabi_fdiv>
 8003726:	4603      	mov	r3, r0
 8003728:	60bb      	str	r3, [r7, #8]

    return adc_voltage;
 800372a:	68bb      	ldr	r3, [r7, #8]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40012400 	.word	0x40012400
 8003738:	40533333 	.word	0x40533333
 800373c:	457ff000 	.word	0x457ff000

08003740 <ReadDigitalState>:
/**
 * @brief Đọc trạng thái digital
 */
uint8_t ReadDigitalState(GPIO_TypeDef* port, uint16_t pin) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	807b      	strh	r3, [r7, #2]
    return GPIOx_ReadPin(port , pin );
 800374c:	887b      	ldrh	r3, [r7, #2]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	4619      	mov	r1, r3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff f9c4 	bl	8002ae0 <GPIOx_ReadPin>
 8003758:	4603      	mov	r3, r0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <CalculateResistance>:

/**
 * @brief Tính điện trở cảm biến (hiệu chỉnh cho nguồn 5V)
 */
float CalculateResistance(float voltage) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
    if(voltage <= 0.1f) return 0.0f;
 800376c:	490e      	ldr	r1, [pc, #56]	@ (80037a8 <CalculateResistance+0x44>)
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd fcb0 	bl	80010d4 <__aeabi_fcmple>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <CalculateResistance+0x1c>
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	e00e      	b.n	800379e <CalculateResistance+0x3a>
    
    // Công thức tính điện trở cảm biến với nguồn cấp 5V
    // Rs = (Vcc - Vs) / Vs * RL
    // Trong đó: Vcc = 5V, Vs = điện áp đo được, RL = điện trở tải
    return ((SENSOR_VCC - voltage) / voltage) * LOAD_RESISTANCE;
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	480a      	ldr	r0, [pc, #40]	@ (80037ac <CalculateResistance+0x48>)
 8003784:	f7fd f9f4 	bl	8000b70 <__aeabi_fsub>
 8003788:	4603      	mov	r3, r0
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fd fbad 	bl	8000eec <__aeabi_fdiv>
 8003792:	4603      	mov	r3, r0
 8003794:	4906      	ldr	r1, [pc, #24]	@ (80037b0 <CalculateResistance+0x4c>)
 8003796:	4618      	mov	r0, r3
 8003798:	f7fd faf4 	bl	8000d84 <__aeabi_fmul>
 800379c:	4603      	mov	r3, r0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	3dcccccd 	.word	0x3dcccccd
 80037ac:	40533333 	.word	0x40533333
 80037b0:	461c4000 	.word	0x461c4000

080037b4 <CalculateGasPPM>:

/**
 * @brief Tính nồng độ khí từ tỷ lệ Rs/R0
 */
float CalculateGasPPM(float rs_r0_ratio, float curve_a, float curve_b) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
    if (rs_r0_ratio <= 0.0f) return 0.0f;
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7fd fc85 	bl	80010d4 <__aeabi_fcmple>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <CalculateGasPPM+0x22>
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e014      	b.n	8003800 <CalculateGasPPM+0x4c>

    float log_ratio = log10f(rs_r0_ratio);                          // log10(Rs/R0)
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f005 fb24 	bl	8008e24 <log10f>
 80037dc:	61f8      	str	r0, [r7, #28]
    float log_ppm   = (log_ratio - curve_b) / curve_a;             // log10(ppm)
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	69f8      	ldr	r0, [r7, #28]
 80037e2:	f7fd f9c5 	bl	8000b70 <__aeabi_fsub>
 80037e6:	4603      	mov	r3, r0
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fb7e 	bl	8000eec <__aeabi_fdiv>
 80037f0:	4603      	mov	r3, r0
 80037f2:	61bb      	str	r3, [r7, #24]
    float ppm       = powf(10.0f, log_ppm);                         // ppm = 10^log_ppm
 80037f4:	69b9      	ldr	r1, [r7, #24]
 80037f6:	4804      	ldr	r0, [pc, #16]	@ (8003808 <CalculateGasPPM+0x54>)
 80037f8:	f005 fb3c 	bl	8008e74 <powf>
 80037fc:	6178      	str	r0, [r7, #20]
    return ppm;
 80037fe:	697b      	ldr	r3, [r7, #20]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	41200000 	.word	0x41200000

0800380c <DetermineAlarmLevel>:

/**
 * @brief Xác định mức cảnh báo
 */
AlarmLevel_t DetermineAlarmLevel(float ppm, float low, float high, float danger) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
    if(ppm >= danger) return ALARM_DANGER;
 800381a:	6839      	ldr	r1, [r7, #0]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7fd fc63 	bl	80010e8 <__aeabi_fcmpge>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <DetermineAlarmLevel+0x20>
 8003828:	2303      	movs	r3, #3
 800382a:	e012      	b.n	8003852 <DetermineAlarmLevel+0x46>
    if(ppm >= high) return ALARM_HIGH;
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7fd fc5a 	bl	80010e8 <__aeabi_fcmpge>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <DetermineAlarmLevel+0x32>
 800383a:	2302      	movs	r3, #2
 800383c:	e009      	b.n	8003852 <DetermineAlarmLevel+0x46>
    if(ppm >= low) return ALARM_LOW;
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7fd fc51 	bl	80010e8 <__aeabi_fcmpge>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <DetermineAlarmLevel+0x44>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <DetermineAlarmLevel+0x46>
    return ALARM_NORMAL;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <InitSensorSystem>:
static SensorSystem_t history_buffer[HISTORY_BUFFER_SIZE];
static uint8_t history_index = 0;

// Các define khác cần thiết
#define MAIN_LOOP_DELAY 60000  // 1 phút = 60000ms
void InitSensorSystem(void) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af02      	add	r7, sp, #8
    printf("\r\nKHOI TAO HE THONG\r\n");
 8003862:	4838      	ldr	r0, [pc, #224]	@ (8003944 <InitSensorSystem+0xe8>)
 8003864:	f001 fea8 	bl	80055b8 <puts>
    
    // Reset toàn bộ hệ thống
    memset(&g_sensor_system, 0, sizeof(SensorSystem_t));
 8003868:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800386c:	2100      	movs	r1, #0
 800386e:	4836      	ldr	r0, [pc, #216]	@ (8003948 <InitSensorSystem+0xec>)
 8003870:	f001 ffa2 	bl	80057b8 <memset>
    memset(history_buffer, 0, sizeof(history_buffer));
 8003874:	f643 42f0 	movw	r2, #15600	@ 0x3cf0
 8003878:	2100      	movs	r1, #0
 800387a:	4834      	ldr	r0, [pc, #208]	@ (800394c <InitSensorSystem+0xf0>)
 800387c:	f001 ff9c 	bl	80057b8 <memset>
    
    // Khởi tạo từng cảm biến
    InitMQ137Sensor(&g_sensor_system.mq137);
 8003880:	4831      	ldr	r0, [pc, #196]	@ (8003948 <InitSensorSystem+0xec>)
 8003882:	f7ff fcaf 	bl	80031e4 <InitMQ137Sensor>
    InitMQ136Sensor(&g_sensor_system.mq136);
 8003886:	4832      	ldr	r0, [pc, #200]	@ (8003950 <InitSensorSystem+0xf4>)
 8003888:	f7ff fd10 	bl	80032ac <InitMQ136Sensor>
    
    // MQ137 Digital Pin
    GPIOx_Init(MQ137_DIGITAL_PORT ,MQ137_DIGITAL_PIN ,MODE_INPUT ,PU,0)  ; 
 800388c:	2300      	movs	r3, #0
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2301      	movs	r3, #1
 8003892:	2200      	movs	r2, #0
 8003894:	2108      	movs	r1, #8
 8003896:	482f      	ldr	r0, [pc, #188]	@ (8003954 <InitSensorSystem+0xf8>)
 8003898:	f7ff f860 	bl	800295c <GPIOx_Init>
    // MQ135 Digital Pin
    GPIOx_Init(MQ136_DIGITAL_PORT ,MQ136_DIGITAL_PIN ,MODE_INPUT ,PU,0)  ;
 800389c:	2300      	movs	r3, #0
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2301      	movs	r3, #1
 80038a2:	2200      	movs	r2, #0
 80038a4:	2110      	movs	r1, #16
 80038a6:	482b      	ldr	r0, [pc, #172]	@ (8003954 <InitSensorSystem+0xf8>)
 80038a8:	f7ff f858 	bl	800295c <GPIOx_Init>
    ADCx_Init(ADC1,MQ137_ADC_CHANNEL); // Khởi tạo ADC cho MQ137
 80038ac:	2108      	movs	r1, #8
 80038ae:	482a      	ldr	r0, [pc, #168]	@ (8003958 <InitSensorSystem+0xfc>)
 80038b0:	f7fe fdc6 	bl	8002440 <ADCx_Init>
    ADCx_Init(ADC1,MQ136_ADC_CHANNEL); // Khởi tạo ADC cho MQ136
 80038b4:	2109      	movs	r1, #9
 80038b6:	4828      	ldr	r0, [pc, #160]	@ (8003958 <InitSensorSystem+0xfc>)
 80038b8:	f7fe fdc2 	bl	8002440 <ADCx_Init>
    
    
    // Cập nhật trạng thái hệ thống
    g_sensor_system.active_sensor_count = 2;
 80038bc:	4b22      	ldr	r3, [pc, #136]	@ (8003948 <InitSensorSystem+0xec>)
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    g_sensor_system.last_update = HAL_GetTick();
 80038c4:	f7fe f8c2 	bl	8001a4c <HAL_GetTick>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003948 <InitSensorSystem+0xec>)
 80038cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    
    printf("KHOI TAO MQ137 (NH3): %s\r\n", g_sensor_system.mq137.base.is_enabled ? "OK" : "FAIL");
 80038d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <InitSensorSystem+0xec>)
 80038d2:	7c9b      	ldrb	r3, [r3, #18]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <InitSensorSystem+0x80>
 80038d8:	4b20      	ldr	r3, [pc, #128]	@ (800395c <InitSensorSystem+0x100>)
 80038da:	e000      	b.n	80038de <InitSensorSystem+0x82>
 80038dc:	4b20      	ldr	r3, [pc, #128]	@ (8003960 <InitSensorSystem+0x104>)
 80038de:	4619      	mov	r1, r3
 80038e0:	4820      	ldr	r0, [pc, #128]	@ (8003964 <InitSensorSystem+0x108>)
 80038e2:	f001 fe01 	bl	80054e8 <iprintf>
    printf("KHOI TAO MQ136 (H2S): %s\r\n", g_sensor_system.mq136.base.is_enabled ? "OK" : "FAIL");
 80038e6:	4b18      	ldr	r3, [pc, #96]	@ (8003948 <InitSensorSystem+0xec>)
 80038e8:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <InitSensorSystem+0x98>
 80038f0:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <InitSensorSystem+0x100>)
 80038f2:	e000      	b.n	80038f6 <InitSensorSystem+0x9a>
 80038f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003960 <InitSensorSystem+0x104>)
 80038f6:	4619      	mov	r1, r3
 80038f8:	481b      	ldr	r0, [pc, #108]	@ (8003968 <InitSensorSystem+0x10c>)
 80038fa:	f001 fdf5 	bl	80054e8 <iprintf>
    printf("CAM BIEN HOAT DONG: %d/2\r\n", g_sensor_system.active_sensor_count);
 80038fe:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <InitSensorSystem+0xec>)
 8003900:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8003904:	4619      	mov	r1, r3
 8003906:	4819      	ldr	r0, [pc, #100]	@ (800396c <InitSensorSystem+0x110>)
 8003908:	f001 fdee 	bl	80054e8 <iprintf>
    
    // Thời gian ổn định
    printf("DANG ON DINH CAM BIEN...\r\n");
 800390c:	4818      	ldr	r0, [pc, #96]	@ (8003970 <InitSensorSystem+0x114>)
 800390e:	f001 fe53 	bl	80055b8 <puts>
    for(int i = 30; i > 0; i--) {
 8003912:	231e      	movs	r3, #30
 8003914:	607b      	str	r3, [r7, #4]
 8003916:	e00a      	b.n	800392e <InitSensorSystem+0xd2>
        printf("ON DINH: %d GIAY\r", i);
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4816      	ldr	r0, [pc, #88]	@ (8003974 <InitSensorSystem+0x118>)
 800391c:	f001 fde4 	bl	80054e8 <iprintf>
        HAL_Delay(1000);
 8003920:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003924:	f7fe f89c 	bl	8001a60 <HAL_Delay>
    for(int i = 30; i > 0; i--) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	dcf1      	bgt.n	8003918 <InitSensorSystem+0xbc>
    }
    printf("\r\nHE THONG SAN SANG\r\n");
 8003934:	4810      	ldr	r0, [pc, #64]	@ (8003978 <InitSensorSystem+0x11c>)
 8003936:	f001 fe3f 	bl	80055b8 <puts>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	0800a188 	.word	0x0800a188
 8003948:	20000350 	.word	0x20000350
 800394c:	20000454 	.word	0x20000454
 8003950:	200003c8 	.word	0x200003c8
 8003954:	40010800 	.word	0x40010800
 8003958:	40012400 	.word	0x40012400
 800395c:	0800a1a0 	.word	0x0800a1a0
 8003960:	0800a1a4 	.word	0x0800a1a4
 8003964:	0800a1ac 	.word	0x0800a1ac
 8003968:	0800a1c8 	.word	0x0800a1c8
 800396c:	0800a1e4 	.word	0x0800a1e4
 8003970:	0800a200 	.word	0x0800a200
 8003974:	0800a21c 	.word	0x0800a21c
 8003978:	0800a230 	.word	0x0800a230

0800397c <ProcessAllSensors>:
void ProcessAllSensors(void) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8003982:	f7fe f863 	bl	8001a4c <HAL_GetTick>
 8003986:	6078      	str	r0, [r7, #4]
    printf  ("\r\nXU LY CAM BIEN TAI %lu ms \r\n", current_time);
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4819      	ldr	r0, [pc, #100]	@ (80039f0 <ProcessAllSensors+0x74>)
 800398c:	f001 fdac 	bl	80054e8 <iprintf>
    // Xử lý từng cảm biến
    if(g_sensor_system.mq137.base.is_enabled) {
 8003990:	4b18      	ldr	r3, [pc, #96]	@ (80039f4 <ProcessAllSensors+0x78>)
 8003992:	7c9b      	ldrb	r3, [r3, #18]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <ProcessAllSensors+0x22>
        ProcessGasSensor(&g_sensor_system.mq137);
 8003998:	4816      	ldr	r0, [pc, #88]	@ (80039f4 <ProcessAllSensors+0x78>)
 800399a:	f7ff fceb 	bl	8003374 <ProcessGasSensor>

    }
        

    if(g_sensor_system.mq136.base.is_enabled) {
 800399e:	4b15      	ldr	r3, [pc, #84]	@ (80039f4 <ProcessAllSensors+0x78>)
 80039a0:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <ProcessAllSensors+0x32>
        ProcessGasSensor(&g_sensor_system.mq136);
 80039a8:	4813      	ldr	r0, [pc, #76]	@ (80039f8 <ProcessAllSensors+0x7c>)
 80039aa:	f7ff fce3 	bl	8003374 <ProcessGasSensor>
    }
    // Cập nhật trạng thái hệ thống
    UpdateSystemStatus();
 80039ae:	f000 fe13 	bl	80045d8 <UpdateSystemStatus>
    
    // Lưu lịch sử
    SaveToHistory();
 80039b2:	f000 fde1 	bl	8004578 <SaveToHistory>
    
    // Cập nhật thống kê
    g_sensor_system.total_readings++;
 80039b6:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <ProcessAllSensors+0x78>)
 80039b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80039bc:	3301      	adds	r3, #1
 80039be:	4a0d      	ldr	r2, [pc, #52]	@ (80039f4 <ProcessAllSensors+0x78>)
 80039c0:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
    g_sensor_system.last_update = current_time;
 80039c4:	4a0b      	ldr	r2, [pc, #44]	@ (80039f4 <ProcessAllSensors+0x78>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    g_sensor_system.uptime_minutes = current_time / 60000.0f;
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fd f981 	bl	8000cd4 <__aeabi_ui2f>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4909      	ldr	r1, [pc, #36]	@ (80039fc <ProcessAllSensors+0x80>)
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd fa88 	bl	8000eec <__aeabi_fdiv>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <ProcessAllSensors+0x78>)
 80039e2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	0800a248 	.word	0x0800a248
 80039f4:	20000350 	.word	0x20000350
 80039f8:	200003c8 	.word	0x200003c8
 80039fc:	476a6000 	.word	0x476a6000

08003a00 <DisplaySystemStatus>:
/**
 * @brief Hiển thị trạng thái hệ thống
 */
void DisplaySystemStatus(void) {
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b089      	sub	sp, #36	@ 0x24
 8003a04:	af00      	add	r7, sp, #0
    printf("\r\n=== TRANG THAI HE THONG CAM BIEN ===\r\n");
 8003a06:	4829      	ldr	r0, [pc, #164]	@ (8003aac <DisplaySystemStatus+0xac>)
 8003a08:	f001 fdd6 	bl	80055b8 <puts>
    printf("TIME: %lu ms | Uptime: %.1f PHUT\r\n", 
 8003a0c:	f7fe f81e 	bl	8001a4c <HAL_GetTick>
 8003a10:	4604      	mov	r4, r0
           HAL_GetTick(), g_sensor_system.uptime_minutes);
 8003a12:	4b27      	ldr	r3, [pc, #156]	@ (8003ab0 <DisplaySystemStatus+0xb0>)
 8003a14:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
    printf("TIME: %lu ms | Uptime: %.1f PHUT\r\n", 
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fc fd05 	bl	8000428 <__aeabi_f2d>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4621      	mov	r1, r4
 8003a24:	4823      	ldr	r0, [pc, #140]	@ (8003ab4 <DisplaySystemStatus+0xb4>)
 8003a26:	f001 fd5f 	bl	80054e8 <iprintf>
    
    // Hiển thị MQ137
    PrintSensorDetails(&g_sensor_system.mq137);
 8003a2a:	4821      	ldr	r0, [pc, #132]	@ (8003ab0 <DisplaySystemStatus+0xb0>)
 8003a2c:	f7ff fdb0 	bl	8003590 <PrintSensorDetails>
    
    // Hiển thị MQ135
    PrintSensorDetails(&g_sensor_system.mq136);
 8003a30:	4821      	ldr	r0, [pc, #132]	@ (8003ab8 <DisplaySystemStatus+0xb8>)
 8003a32:	f7ff fdad 	bl	8003590 <PrintSensorDetails>
    
    // Trạng thái tổng thể
    printf("\r\n--- HE THONG ---\r\n");
 8003a36:	4821      	ldr	r0, [pc, #132]	@ (8003abc <DisplaySystemStatus+0xbc>)
 8003a38:	f001 fdbe 	bl	80055b8 <puts>
    const char* status_text[] = {"LOI", "CO BAN", "TOT", "TOI UU"};
 8003a3c:	4b20      	ldr	r3, [pc, #128]	@ (8003ac0 <DisplaySystemStatus+0xc0>)
 8003a3e:	f107 0410 	add.w	r4, r7, #16
 8003a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const char* alarm_text[] = {"BINH THUONG", "THAP", "CAO", "NGUY HIEM"};
 8003a48:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac4 <DisplaySystemStatus+0xc4>)
 8003a4a:	463c      	mov	r4, r7
 8003a4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    printf("TRANG THAI: %s (%d/2 CAM BIEN HOAT DONG)\r\n", 
           status_text[g_sensor_system.system_status], g_sensor_system.active_sensor_count);
 8003a52:	4b17      	ldr	r3, [pc, #92]	@ (8003ab0 <DisplaySystemStatus+0xb0>)
 8003a54:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
    printf("TRANG THAI: %s (%d/2 CAM BIEN HOAT DONG)\r\n", 
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	3320      	adds	r3, #32
 8003a5c:	443b      	add	r3, r7
 8003a5e:	f853 3c10 	ldr.w	r3, [r3, #-16]
           status_text[g_sensor_system.system_status], g_sensor_system.active_sensor_count);
 8003a62:	4a13      	ldr	r2, [pc, #76]	@ (8003ab0 <DisplaySystemStatus+0xb0>)
 8003a64:	f892 20f0 	ldrb.w	r2, [r2, #240]	@ 0xf0
    printf("TRANG THAI: %s (%d/2 CAM BIEN HOAT DONG)\r\n", 
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4817      	ldr	r0, [pc, #92]	@ (8003ac8 <DisplaySystemStatus+0xc8>)
 8003a6c:	f001 fd3c 	bl	80054e8 <iprintf>
    printf("CANH BAO TONG THE %s\r\n", alarm_text[g_sensor_system.system_alarm]);
 8003a70:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab0 <DisplaySystemStatus+0xb0>)
 8003a72:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	3320      	adds	r3, #32
 8003a7a:	443b      	add	r3, r7
 8003a7c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003a80:	4619      	mov	r1, r3
 8003a82:	4812      	ldr	r0, [pc, #72]	@ (8003acc <DisplaySystemStatus+0xcc>)
 8003a84:	f001 fd30 	bl	80054e8 <iprintf>
    printf("TONG SO DO: %lu | LOI: %lu\r\n", 
 8003a88:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <DisplaySystemStatus+0xb0>)
 8003a8a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003a8e:	4a08      	ldr	r2, [pc, #32]	@ (8003ab0 <DisplaySystemStatus+0xb0>)
 8003a90:	f8d2 20fc 	ldr.w	r2, [r2, #252]	@ 0xfc
 8003a94:	4619      	mov	r1, r3
 8003a96:	480e      	ldr	r0, [pc, #56]	@ (8003ad0 <DisplaySystemStatus+0xd0>)
 8003a98:	f001 fd26 	bl	80054e8 <iprintf>
           g_sensor_system.total_readings, g_sensor_system.error_count);
    
    printf("=====================================\r\n");
 8003a9c:	480d      	ldr	r0, [pc, #52]	@ (8003ad4 <DisplaySystemStatus+0xd4>)
 8003a9e:	f001 fd8b 	bl	80055b8 <puts>
}
 8003aa2:	bf00      	nop
 8003aa4:	3724      	adds	r7, #36	@ 0x24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd90      	pop	{r4, r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	0800a268 	.word	0x0800a268
 8003ab0:	20000350 	.word	0x20000350
 8003ab4:	0800a290 	.word	0x0800a290
 8003ab8:	200003c8 	.word	0x200003c8
 8003abc:	0800a2b4 	.word	0x0800a2b4
 8003ac0:	0800a36c 	.word	0x0800a36c
 8003ac4:	0800a3a0 	.word	0x0800a3a0
 8003ac8:	0800a2c8 	.word	0x0800a2c8
 8003acc:	0800a2f4 	.word	0x0800a2f4
 8003ad0:	0800a30c 	.word	0x0800a30c
 8003ad4:	0800a32c 	.word	0x0800a32c

08003ad8 <CalibrateSensors>:
 */
// =============================================================================
// HIỆU CHUẨN CẢM BIẾN ĐƯỢC CẢI TIẾN - MQ137 & MQ135
// =============================================================================

void CalibrateSensors(void) {
 8003ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003adc:	b09d      	sub	sp, #116	@ 0x74
 8003ade:	af08      	add	r7, sp, #32
    printf("\r\n=== HIEU CHUAN CAM BIEN CAI TIEN ===\r\n");
 8003ae0:	4884      	ldr	r0, [pc, #528]	@ (8003cf4 <CalibrateSensors+0x21c>)
 8003ae2:	f001 fd69 	bl	80055b8 <puts>
    printf("QUAN TRONG: Dam bao cam bien da chay 24h+ va o moi truong sach!\r\n");
 8003ae6:	4884      	ldr	r0, [pc, #528]	@ (8003cf8 <CalibrateSensors+0x220>)
 8003ae8:	f001 fd66 	bl	80055b8 <puts>
    
    // Kiểm tra điều kiện trước khi hiệu chuẩn
    if(!CheckCalibrationConditions()) {
 8003aec:	f000 fa38 	bl	8003f60 <CheckCalibrationConditions>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d103      	bne.n	8003afe <CalibrateSensors+0x26>
        printf("❌ DIEU KIEN KHONG DAP UNG - Huy hieu chuan!\r\n");
 8003af6:	4881      	ldr	r0, [pc, #516]	@ (8003cfc <CalibrateSensors+0x224>)
 8003af8:	f001 fd5e 	bl	80055b8 <puts>
        return;
 8003afc:	e204      	b.n	8003f08 <CalibrateSensors+0x430>
    }
    
    printf("✅ Dieu kien OK - Bat dau hieu chuan...\r\n");
 8003afe:	4880      	ldr	r0, [pc, #512]	@ (8003d00 <CalibrateSensors+0x228>)
 8003b00:	f001 fd5a 	bl	80055b8 <puts>
    printf("Thoi gian: 5 phut (300 mau)\r\n");
 8003b04:	487f      	ldr	r0, [pc, #508]	@ (8003d04 <CalibrateSensors+0x22c>)
 8003b06:	f001 fd57 	bl	80055b8 <puts>
    
    float mq137_r0_sum = 0, mq137_min = 999999, mq137_max = 0;
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b10:	4b7d      	ldr	r3, [pc, #500]	@ (8003d08 <CalibrateSensors+0x230>)
 8003b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	647b      	str	r3, [r7, #68]	@ 0x44
    float mq136_r0_sum = 0, mq136_min = 999999, mq136_max = 0;
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b20:	4b79      	ldr	r3, [pc, #484]	@ (8003d08 <CalibrateSensors+0x230>)
 8003b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	63bb      	str	r3, [r7, #56]	@ 0x38
    int valid_samples = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	637b      	str	r3, [r7, #52]	@ 0x34
    int total_samples = 300;  // 5 phút
 8003b2e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    for(int i = 0; i < total_samples; i++) {
 8003b34:	2300      	movs	r3, #0
 8003b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b38:	e098      	b.n	8003c6c <CalibrateSensors+0x194>
        ProcessAllSensors();
 8003b3a:	f7ff ff1f 	bl	800397c <ProcessAllSensors>
        
        float mq137_resistance = g_sensor_system.mq137.base.resistance;
 8003b3e:	4b73      	ldr	r3, [pc, #460]	@ (8003d0c <CalibrateSensors+0x234>)
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	60fb      	str	r3, [r7, #12]
        float mq136_resistance = g_sensor_system.mq136.base.resistance;
 8003b44:	4b71      	ldr	r3, [pc, #452]	@ (8003d0c <CalibrateSensors+0x234>)
 8003b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b4a:	60bb      	str	r3, [r7, #8]
        
        // Validate samples với điều kiện chặt chẽ hơn
        uint8_t mq137_valid = ValidateCalibrationSample(mq137_resistance, 
 8003b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d0c <CalibrateSensors+0x234>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4619      	mov	r1, r3
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 faf0 	bl	8004138 <ValidateCalibrationSample>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	71fb      	strb	r3, [r7, #7]
                                                       g_sensor_system.mq137.base.raw_voltage);
        uint8_t mq136_valid = ValidateCalibrationSample(mq136_resistance, 
 8003b5c:	4b6b      	ldr	r3, [pc, #428]	@ (8003d0c <CalibrateSensors+0x234>)
 8003b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b62:	4619      	mov	r1, r3
 8003b64:	68b8      	ldr	r0, [r7, #8]
 8003b66:	f000 fae7 	bl	8004138 <ValidateCalibrationSample>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71bb      	strb	r3, [r7, #6]
                                                       g_sensor_system.mq136.base.raw_voltage);
        
        if(mq137_valid && mq136_valid) {
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d035      	beq.n	8003be0 <CalibrateSensors+0x108>
 8003b74:	79bb      	ldrb	r3, [r7, #6]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d032      	beq.n	8003be0 <CalibrateSensors+0x108>
            // MQ137 statistics
            mq137_r0_sum += mq137_resistance;
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003b7e:	f7fc fff9 	bl	8000b74 <__addsf3>
 8003b82:	4603      	mov	r3, r0
 8003b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if(mq137_resistance < mq137_min) mq137_min = mq137_resistance;
 8003b86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7fd fa99 	bl	80010c0 <__aeabi_fcmplt>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <CalibrateSensors+0xc0>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	64bb      	str	r3, [r7, #72]	@ 0x48
            if(mq137_resistance > mq137_max) mq137_max = mq137_resistance;
 8003b98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f7fd faae 	bl	80010fc <__aeabi_fcmpgt>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <CalibrateSensors+0xd2>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	647b      	str	r3, [r7, #68]	@ 0x44
            
            // MQ135 statistics
            mq136_r0_sum += mq136_resistance;
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003bae:	f7fc ffe1 	bl	8000b74 <__addsf3>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	643b      	str	r3, [r7, #64]	@ 0x40
            if(mq136_resistance < mq136_min) mq136_min = mq136_resistance;
 8003bb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bb8:	68b8      	ldr	r0, [r7, #8]
 8003bba:	f7fd fa81 	bl	80010c0 <__aeabi_fcmplt>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <CalibrateSensors+0xf0>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if(mq136_resistance > mq136_max) mq136_max = mq136_resistance;
 8003bc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003bca:	68b8      	ldr	r0, [r7, #8]
 8003bcc:	f7fd fa96 	bl	80010fc <__aeabi_fcmpgt>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <CalibrateSensors+0x102>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
            
            valid_samples++;
 8003bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bdc:	3301      	adds	r3, #1
 8003bde:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        
        // Progress report mỗi 30 giây
        if(i % 30 == 0) {
 8003be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003be2:	4b4b      	ldr	r3, [pc, #300]	@ (8003d10 <CalibrateSensors+0x238>)
 8003be4:	fb83 1302 	smull	r1, r3, r3, r2
 8003be8:	4413      	add	r3, r2
 8003bea:	1119      	asrs	r1, r3, #4
 8003bec:	17d3      	asrs	r3, r2, #31
 8003bee:	1ac9      	subs	r1, r1, r3
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	1a5b      	subs	r3, r3, r1
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	1ad1      	subs	r1, r2, r3
 8003bfa:	2900      	cmp	r1, #0
 8003bfc:	d12f      	bne.n	8003c5e <CalibrateSensors+0x186>
            float progress = (float)i / total_samples * 100.0f;
 8003bfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c00:	f7fd f86c 	bl	8000cdc <__aeabi_i2f>
 8003c04:	4604      	mov	r4, r0
 8003c06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c08:	f7fd f868 	bl	8000cdc <__aeabi_i2f>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4620      	mov	r0, r4
 8003c12:	f7fd f96b 	bl	8000eec <__aeabi_fdiv>
 8003c16:	4603      	mov	r3, r0
 8003c18:	493e      	ldr	r1, [pc, #248]	@ (8003d14 <CalibrateSensors+0x23c>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fd f8b2 	bl	8000d84 <__aeabi_fmul>
 8003c20:	4603      	mov	r3, r0
 8003c22:	603b      	str	r3, [r7, #0]
            printf("Tien do: %.1f%% | Mau %d: MQ137=%.1fΩ, MQ136=%.1fΩ | Valid: %d\r\n", 
 8003c24:	6838      	ldr	r0, [r7, #0]
 8003c26:	f7fc fbff 	bl	8000428 <__aeabi_f2d>
 8003c2a:	4680      	mov	r8, r0
 8003c2c:	4689      	mov	r9, r1
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	1c5e      	adds	r6, r3, #1
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7fc fbf8 	bl	8000428 <__aeabi_f2d>
 8003c38:	4604      	mov	r4, r0
 8003c3a:	460d      	mov	r5, r1
 8003c3c:	68b8      	ldr	r0, [r7, #8]
 8003c3e:	f7fc fbf3 	bl	8000428 <__aeabi_f2d>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c48:	9106      	str	r1, [sp, #24]
 8003c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c4e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003c52:	9600      	str	r6, [sp, #0]
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	482f      	ldr	r0, [pc, #188]	@ (8003d18 <CalibrateSensors+0x240>)
 8003c5a:	f001 fc45 	bl	80054e8 <iprintf>
                   progress, i+1, mq137_resistance, mq136_resistance, valid_samples);
        }
        
        HAL_Delay(1000);  // 1 giây mỗi sample
 8003c5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c62:	f7fd fefd 	bl	8001a60 <HAL_Delay>
    for(int i = 0; i < total_samples; i++) {
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	3301      	adds	r3, #1
 8003c6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c70:	429a      	cmp	r2, r3
 8003c72:	f6ff af62 	blt.w	8003b3a <CalibrateSensors+0x62>
    }
    
    // Phân tích kết quả
    if(valid_samples < (total_samples * 0.8f)) {  // Cần ít nhất 80% sample hợp lệ
 8003c76:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003c78:	f7fd f830 	bl	8000cdc <__aeabi_i2f>
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c80:	f7fd f82c 	bl	8000cdc <__aeabi_i2f>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4925      	ldr	r1, [pc, #148]	@ (8003d1c <CalibrateSensors+0x244>)
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fd f87b 	bl	8000d84 <__aeabi_fmul>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4619      	mov	r1, r3
 8003c92:	4620      	mov	r0, r4
 8003c94:	f7fd fa14 	bl	80010c0 <__aeabi_fcmplt>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d04a      	beq.n	8003d34 <CalibrateSensors+0x25c>
        printf("❌ KHONG DU SAMPLE HOP LE (%d/%d = %.1f%%)\r\n", 
               valid_samples, total_samples, (float)valid_samples/total_samples*100);
 8003c9e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ca0:	f7fd f81c 	bl	8000cdc <__aeabi_i2f>
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ca8:	f7fd f818 	bl	8000cdc <__aeabi_i2f>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f7fd f91b 	bl	8000eec <__aeabi_fdiv>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4916      	ldr	r1, [pc, #88]	@ (8003d14 <CalibrateSensors+0x23c>)
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fd f862 	bl	8000d84 <__aeabi_fmul>
 8003cc0:	4603      	mov	r3, r0
        printf("❌ KHONG DU SAMPLE HOP LE (%d/%d = %.1f%%)\r\n", 
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc fbb0 	bl	8000428 <__aeabi_f2d>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	e9cd 2300 	strd	r2, r3, [sp]
 8003cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003cd4:	4812      	ldr	r0, [pc, #72]	@ (8003d20 <CalibrateSensors+0x248>)
 8003cd6:	f001 fc07 	bl	80054e8 <iprintf>
        printf("Hay kiem tra:\r\n");
 8003cda:	4812      	ldr	r0, [pc, #72]	@ (8003d24 <CalibrateSensors+0x24c>)
 8003cdc:	f001 fc6c 	bl	80055b8 <puts>
        printf("- Cam bien da preheat 24h+?\r\n");
 8003ce0:	4811      	ldr	r0, [pc, #68]	@ (8003d28 <CalibrateSensors+0x250>)
 8003ce2:	f001 fc69 	bl	80055b8 <puts>
        printf("- Moi truong thuc su sach?\r\n");
 8003ce6:	4811      	ldr	r0, [pc, #68]	@ (8003d2c <CalibrateSensors+0x254>)
 8003ce8:	f001 fc66 	bl	80055b8 <puts>
        printf("- Hardware ket noi dung?\r\n");
 8003cec:	4810      	ldr	r0, [pc, #64]	@ (8003d30 <CalibrateSensors+0x258>)
 8003cee:	f001 fc63 	bl	80055b8 <puts>
        return;
 8003cf2:	e109      	b.n	8003f08 <CalibrateSensors+0x430>
 8003cf4:	0800a458 	.word	0x0800a458
 8003cf8:	0800a480 	.word	0x0800a480
 8003cfc:	0800a4c4 	.word	0x0800a4c4
 8003d00:	0800a4f4 	.word	0x0800a4f4
 8003d04:	0800a520 	.word	0x0800a520
 8003d08:	497423f0 	.word	0x497423f0
 8003d0c:	20000350 	.word	0x20000350
 8003d10:	88888889 	.word	0x88888889
 8003d14:	42c80000 	.word	0x42c80000
 8003d18:	0800a540 	.word	0x0800a540
 8003d1c:	3f4ccccd 	.word	0x3f4ccccd
 8003d20:	0800a584 	.word	0x0800a584
 8003d24:	0800a5b4 	.word	0x0800a5b4
 8003d28:	0800a5c4 	.word	0x0800a5c4
 8003d2c:	0800a5e4 	.word	0x0800a5e4
 8003d30:	0800a600 	.word	0x0800a600
    }
    
    // Tính giá trị trung bình
    float mq137_r0_avg = mq137_r0_sum / valid_samples;
 8003d34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003d36:	f7fc ffd1 	bl	8000cdc <__aeabi_i2f>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003d40:	f7fd f8d4 	bl	8000eec <__aeabi_fdiv>
 8003d44:	4603      	mov	r3, r0
 8003d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    float mq136_r0_avg = mq136_r0_sum / valid_samples;
 8003d48:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003d4a:	f7fc ffc7 	bl	8000cdc <__aeabi_i2f>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4619      	mov	r1, r3
 8003d52:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003d54:	f7fd f8ca 	bl	8000eec <__aeabi_fdiv>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // Tính độ ổn định
    float mq137_range = mq137_max - mq137_min;
 8003d5c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003d5e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d60:	f7fc ff06 	bl	8000b70 <__aeabi_fsub>
 8003d64:	4603      	mov	r3, r0
 8003d66:	623b      	str	r3, [r7, #32]
    float mq136_range = mq136_max - mq136_min;
 8003d68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d6c:	f7fc ff00 	bl	8000b70 <__aeabi_fsub>
 8003d70:	4603      	mov	r3, r0
 8003d72:	61fb      	str	r3, [r7, #28]
    float mq137_stability = (mq137_range / mq137_r0_avg) * 100.0f;
 8003d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d76:	6a38      	ldr	r0, [r7, #32]
 8003d78:	f7fd f8b8 	bl	8000eec <__aeabi_fdiv>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4964      	ldr	r1, [pc, #400]	@ (8003f10 <CalibrateSensors+0x438>)
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc ffff 	bl	8000d84 <__aeabi_fmul>
 8003d86:	4603      	mov	r3, r0
 8003d88:	61bb      	str	r3, [r7, #24]
    float mq136_stability = (mq136_range / mq136_r0_avg) * 100.0f;
 8003d8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d8c:	69f8      	ldr	r0, [r7, #28]
 8003d8e:	f7fd f8ad 	bl	8000eec <__aeabi_fdiv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	495e      	ldr	r1, [pc, #376]	@ (8003f10 <CalibrateSensors+0x438>)
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fc fff4 	bl	8000d84 <__aeabi_fmul>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	617b      	str	r3, [r7, #20]
    
    printf("\r\n=== KET QUA HIEU CHUAN ===\r\n");
 8003da0:	485c      	ldr	r0, [pc, #368]	@ (8003f14 <CalibrateSensors+0x43c>)
 8003da2:	f001 fc09 	bl	80055b8 <puts>
    printf("Thoi gian: 5 phut | Sample hop le: %d/%d (%.1f%%)\r\n", 
           valid_samples, total_samples, (float)valid_samples/total_samples*100);
 8003da6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003da8:	f7fc ff98 	bl	8000cdc <__aeabi_i2f>
 8003dac:	4604      	mov	r4, r0
 8003dae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003db0:	f7fc ff94 	bl	8000cdc <__aeabi_i2f>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4619      	mov	r1, r3
 8003db8:	4620      	mov	r0, r4
 8003dba:	f7fd f897 	bl	8000eec <__aeabi_fdiv>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4953      	ldr	r1, [pc, #332]	@ (8003f10 <CalibrateSensors+0x438>)
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc ffde 	bl	8000d84 <__aeabi_fmul>
 8003dc8:	4603      	mov	r3, r0
    printf("Thoi gian: 5 phut | Sample hop le: %d/%d (%.1f%%)\r\n", 
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fc fb2c 	bl	8000428 <__aeabi_f2d>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	e9cd 2300 	strd	r2, r3, [sp]
 8003dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dda:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ddc:	484e      	ldr	r0, [pc, #312]	@ (8003f18 <CalibrateSensors+0x440>)
 8003dde:	f001 fb83 	bl	80054e8 <iprintf>
    
    // MQ137 results
    printf("\r\n--- MQ137 (NH3) ---\r\n");
 8003de2:	484e      	ldr	r0, [pc, #312]	@ (8003f1c <CalibrateSensors+0x444>)
 8003de4:	f001 fbe8 	bl	80055b8 <puts>
    printf("R0 trung binh: %.1f Ω\r\n", mq137_r0_avg);
 8003de8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dea:	f7fc fb1d 	bl	8000428 <__aeabi_f2d>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	484b      	ldr	r0, [pc, #300]	@ (8003f20 <CalibrateSensors+0x448>)
 8003df4:	f001 fb78 	bl	80054e8 <iprintf>
    printf("Khoang bien thien: %.1f - %.1f Ω\r\n", mq137_min, mq137_max);
 8003df8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003dfa:	f7fc fb15 	bl	8000428 <__aeabi_f2d>
 8003dfe:	4604      	mov	r4, r0
 8003e00:	460d      	mov	r5, r1
 8003e02:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003e04:	f7fc fb10 	bl	8000428 <__aeabi_f2d>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	e9cd 2300 	strd	r2, r3, [sp]
 8003e10:	4622      	mov	r2, r4
 8003e12:	462b      	mov	r3, r5
 8003e14:	4843      	ldr	r0, [pc, #268]	@ (8003f24 <CalibrateSensors+0x44c>)
 8003e16:	f001 fb67 	bl	80054e8 <iprintf>
    printf("Do on dinh: %.1f%%\r\n", mq137_stability);
 8003e1a:	69b8      	ldr	r0, [r7, #24]
 8003e1c:	f7fc fb04 	bl	8000428 <__aeabi_f2d>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4840      	ldr	r0, [pc, #256]	@ (8003f28 <CalibrateSensors+0x450>)
 8003e26:	f001 fb5f 	bl	80054e8 <iprintf>
    
    // MQ135 results  
    printf("\r\n--- MQ136 (H2S) ---\r\n");
 8003e2a:	4840      	ldr	r0, [pc, #256]	@ (8003f2c <CalibrateSensors+0x454>)
 8003e2c:	f001 fbc4 	bl	80055b8 <puts>
    printf("R0 trung binh: %.1f Ω\r\n", mq136_r0_avg);
 8003e30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e32:	f7fc faf9 	bl	8000428 <__aeabi_f2d>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4839      	ldr	r0, [pc, #228]	@ (8003f20 <CalibrateSensors+0x448>)
 8003e3c:	f001 fb54 	bl	80054e8 <iprintf>
    printf("Khoang bien thien: %.1f - %.1f Ω\r\n", mq136_min, mq136_max);
 8003e40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003e42:	f7fc faf1 	bl	8000428 <__aeabi_f2d>
 8003e46:	4604      	mov	r4, r0
 8003e48:	460d      	mov	r5, r1
 8003e4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003e4c:	f7fc faec 	bl	8000428 <__aeabi_f2d>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	e9cd 2300 	strd	r2, r3, [sp]
 8003e58:	4622      	mov	r2, r4
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	4831      	ldr	r0, [pc, #196]	@ (8003f24 <CalibrateSensors+0x44c>)
 8003e5e:	f001 fb43 	bl	80054e8 <iprintf>
    printf("Do on dinh: %.1f%%\r\n", mq136_stability);
 8003e62:	6978      	ldr	r0, [r7, #20]
 8003e64:	f7fc fae0 	bl	8000428 <__aeabi_f2d>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	482e      	ldr	r0, [pc, #184]	@ (8003f28 <CalibrateSensors+0x450>)
 8003e6e:	f001 fb3b 	bl	80054e8 <iprintf>
    
    // Validate và apply R0 values
    uint8_t mq137_r0_valid = ValidateR0Value(mq137_r0_avg, mq137_stability, "MQ137");
 8003e72:	4a2f      	ldr	r2, [pc, #188]	@ (8003f30 <CalibrateSensors+0x458>)
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e78:	f000 f990 	bl	800419c <ValidateR0Value>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	74fb      	strb	r3, [r7, #19]
    uint8_t mq136_r0_valid = ValidateR0Value(mq136_r0_avg, mq136_stability, "MQ136");
 8003e80:	4a2c      	ldr	r2, [pc, #176]	@ (8003f34 <CalibrateSensors+0x45c>)
 8003e82:	6979      	ldr	r1, [r7, #20]
 8003e84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e86:	f000 f989 	bl	800419c <ValidateR0Value>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	74bb      	strb	r3, [r7, #18]
    
    if(mq137_r0_valid && mq136_r0_valid) {
 8003e8e:	7cfb      	ldrb	r3, [r7, #19]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d029      	beq.n	8003ee8 <CalibrateSensors+0x410>
 8003e94:	7cbb      	ldrb	r3, [r7, #18]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d026      	beq.n	8003ee8 <CalibrateSensors+0x410>
        // Cập nhật giá trị R0
        g_sensor_system.mq137.base.r0_value = mq137_r0_avg;
 8003e9a:	4a27      	ldr	r2, [pc, #156]	@ (8003f38 <CalibrateSensors+0x460>)
 8003e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9e:	6353      	str	r3, [r2, #52]	@ 0x34
        g_sensor_system.mq136.base.r0_value = mq136_r0_avg;
 8003ea0:	4a25      	ldr	r2, [pc, #148]	@ (8003f38 <CalibrateSensors+0x460>)
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
        
        printf("\r\n✅ HIEU CHUAN THANH CONG!\r\n");
 8003ea8:	4824      	ldr	r0, [pc, #144]	@ (8003f3c <CalibrateSensors+0x464>)
 8003eaa:	f001 fb85 	bl	80055b8 <puts>
        printf("R0 da duoc cap nhat:\r\n");
 8003eae:	4824      	ldr	r0, [pc, #144]	@ (8003f40 <CalibrateSensors+0x468>)
 8003eb0:	f001 fb82 	bl	80055b8 <puts>
        printf("- MQ137: %.1f Ω\r\n", mq137_r0_avg);
 8003eb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eb6:	f7fc fab7 	bl	8000428 <__aeabi_f2d>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4821      	ldr	r0, [pc, #132]	@ (8003f44 <CalibrateSensors+0x46c>)
 8003ec0:	f001 fb12 	bl	80054e8 <iprintf>
        printf("- MQ136: %.1f Ω\r\n", mq136_r0_avg);
 8003ec4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ec6:	f7fc faaf 	bl	8000428 <__aeabi_f2d>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	481e      	ldr	r0, [pc, #120]	@ (8003f48 <CalibrateSensors+0x470>)
 8003ed0:	f001 fb0a 	bl	80054e8 <iprintf>
        
        // Lưu vào Flash (optional)
        SaveCalibrationToFlash(mq137_r0_avg, mq136_r0_avg);
 8003ed4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ed8:	f000 fa84 	bl	80043e4 <SaveCalibrationToFlash>
        
        // Test ngay với R0 mới
        printf("\r\n🧪 TEST VOI R0 MOI:\r\n");
 8003edc:	481b      	ldr	r0, [pc, #108]	@ (8003f4c <CalibrateSensors+0x474>)
 8003ede:	f001 fb6b 	bl	80055b8 <puts>
        TestCalibrationResult();
 8003ee2:	f000 fa47 	bl	8004374 <TestCalibrationResult>
 8003ee6:	e00c      	b.n	8003f02 <CalibrateSensors+0x42a>
        
    } else {
        printf("\r\n❌ HIEU CHUAN THAT BAI!\r\n");
 8003ee8:	4819      	ldr	r0, [pc, #100]	@ (8003f50 <CalibrateSensors+0x478>)
 8003eea:	f001 fb65 	bl	80055b8 <puts>
        printf("Su dung gia tri R0 mac dinh\r\n");
 8003eee:	4819      	ldr	r0, [pc, #100]	@ (8003f54 <CalibrateSensors+0x47c>)
 8003ef0:	f001 fb62 	bl	80055b8 <puts>
        g_sensor_system.mq137.base.r0_value = 10000.0f;
 8003ef4:	4b10      	ldr	r3, [pc, #64]	@ (8003f38 <CalibrateSensors+0x460>)
 8003ef6:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <CalibrateSensors+0x480>)
 8003ef8:	635a      	str	r2, [r3, #52]	@ 0x34
        g_sensor_system.mq136.base.r0_value = 10000.0f;
 8003efa:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <CalibrateSensors+0x460>)
 8003efc:	4a16      	ldr	r2, [pc, #88]	@ (8003f58 <CalibrateSensors+0x480>)
 8003efe:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }
    
    printf("===============================\r\n");
 8003f02:	4816      	ldr	r0, [pc, #88]	@ (8003f5c <CalibrateSensors+0x484>)
 8003f04:	f001 fb58 	bl	80055b8 <puts>
}
 8003f08:	3754      	adds	r7, #84	@ 0x54
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f10:	42c80000 	.word	0x42c80000
 8003f14:	0800a61c 	.word	0x0800a61c
 8003f18:	0800a63c 	.word	0x0800a63c
 8003f1c:	0800a670 	.word	0x0800a670
 8003f20:	0800a688 	.word	0x0800a688
 8003f24:	0800a6a4 	.word	0x0800a6a4
 8003f28:	0800a6c8 	.word	0x0800a6c8
 8003f2c:	0800a6e0 	.word	0x0800a6e0
 8003f30:	0800a6f8 	.word	0x0800a6f8
 8003f34:	0800a700 	.word	0x0800a700
 8003f38:	20000350 	.word	0x20000350
 8003f3c:	0800a708 	.word	0x0800a708
 8003f40:	0800a728 	.word	0x0800a728
 8003f44:	0800a740 	.word	0x0800a740
 8003f48:	0800a754 	.word	0x0800a754
 8003f4c:	0800a768 	.word	0x0800a768
 8003f50:	0800a784 	.word	0x0800a784
 8003f54:	0800a7a0 	.word	0x0800a7a0
 8003f58:	461c4000 	.word	0x461c4000
 8003f5c:	0800a7c0 	.word	0x0800a7c0

08003f60 <CheckCalibrationConditions>:

// =============================================================================
// CÁC HÀM HỖ TRỢ
// =============================================================================

uint8_t CheckCalibrationConditions(void) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b09a      	sub	sp, #104	@ 0x68
 8003f64:	af00      	add	r7, sp, #0
    printf("Kiem tra dieu kien hieu chuan...\r\n");
 8003f66:	4865      	ldr	r0, [pc, #404]	@ (80040fc <CheckCalibrationConditions+0x19c>)
 8003f68:	f001 fb26 	bl	80055b8 <puts>
    
    // Kiểm tra 10 sample để đánh giá ổn định
    float mq137_readings[10], mq136_readings[10];
    
    for(int i = 0; i < 10; i++) {
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f70:	e019      	b.n	8003fa6 <CheckCalibrationConditions+0x46>
        ProcessAllSensors();
 8003f72:	f7ff fd03 	bl	800397c <ProcessAllSensors>
        mq137_readings[i] = g_sensor_system.mq137.base.resistance;
 8003f76:	4b62      	ldr	r3, [pc, #392]	@ (8004100 <CheckCalibrationConditions+0x1a0>)
 8003f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	3368      	adds	r3, #104	@ 0x68
 8003f80:	443b      	add	r3, r7
 8003f82:	f843 2c3c 	str.w	r2, [r3, #-60]
        mq136_readings[i] = g_sensor_system.mq136.base.resistance;
 8003f86:	4b5e      	ldr	r3, [pc, #376]	@ (8004100 <CheckCalibrationConditions+0x1a0>)
 8003f88:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003f8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	3368      	adds	r3, #104	@ 0x68
 8003f92:	443b      	add	r3, r7
 8003f94:	f843 2c64 	str.w	r2, [r3, #-100]
        HAL_Delay(2000);  // 2 giây mỗi sample
 8003f98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003f9c:	f7fd fd60 	bl	8001a60 <HAL_Delay>
    for(int i = 0; i < 10; i++) {
 8003fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fa6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fa8:	2b09      	cmp	r3, #9
 8003faa:	dde2      	ble.n	8003f72 <CheckCalibrationConditions+0x12>
    }
    
    // Tính coefficient of variation
    float mq137_cv = CalculateCV(mq137_readings, 10);
 8003fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fb0:	210a      	movs	r1, #10
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f94c 	bl	8004250 <CalculateCV>
 8003fb8:	6638      	str	r0, [r7, #96]	@ 0x60
    float mq136_cv = CalculateCV(mq136_readings, 10);
 8003fba:	1d3b      	adds	r3, r7, #4
 8003fbc:	210a      	movs	r1, #10
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 f946 	bl	8004250 <CalculateCV>
 8003fc4:	65f8      	str	r0, [r7, #92]	@ 0x5c
    
    printf("Do on dinh MQ137: %.1f%% (can <10%%)\r\n", mq137_cv);
 8003fc6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003fc8:	f7fc fa2e 	bl	8000428 <__aeabi_f2d>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	484c      	ldr	r0, [pc, #304]	@ (8004104 <CheckCalibrationConditions+0x1a4>)
 8003fd2:	f001 fa89 	bl	80054e8 <iprintf>
    printf("Do on dinh MQ136: %.1f%% (can <10%%)\r\n", mq136_cv);
 8003fd6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8003fd8:	f7fc fa26 	bl	8000428 <__aeabi_f2d>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4849      	ldr	r0, [pc, #292]	@ (8004108 <CheckCalibrationConditions+0x1a8>)
 8003fe2:	f001 fa81 	bl	80054e8 <iprintf>
    
    // Kiểm tra range hợp lý
    float mq137_avg = CalculateAverage(mq137_readings, 10);
 8003fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fea:	210a      	movs	r1, #10
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f997 	bl	8004320 <CalculateAverage>
 8003ff2:	65b8      	str	r0, [r7, #88]	@ 0x58
    float mq136_avg = CalculateAverage(mq136_readings, 10);
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	210a      	movs	r1, #10
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f991 	bl	8004320 <CalculateAverage>
 8003ffe:	6578      	str	r0, [r7, #84]	@ 0x54
    
    printf("Dien tro trung binh MQ137: %.1f Ω\r\n", mq137_avg);
 8004000:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004002:	f7fc fa11 	bl	8000428 <__aeabi_f2d>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4840      	ldr	r0, [pc, #256]	@ (800410c <CheckCalibrationConditions+0x1ac>)
 800400c:	f001 fa6c 	bl	80054e8 <iprintf>
    printf("Dien tro trung binh MQ136: %.1f Ω\r\n", mq136_avg);
 8004010:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004012:	f7fc fa09 	bl	8000428 <__aeabi_f2d>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	483d      	ldr	r0, [pc, #244]	@ (8004110 <CheckCalibrationConditions+0x1b0>)
 800401c:	f001 fa64 	bl	80054e8 <iprintf>
    
    // Điều kiện pass
    if(mq137_cv < 10.0f && mq136_cv < 10.0f && 
 8004020:	493c      	ldr	r1, [pc, #240]	@ (8004114 <CheckCalibrationConditions+0x1b4>)
 8004022:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004024:	f7fd f84c 	bl	80010c0 <__aeabi_fcmplt>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d027      	beq.n	800407e <CheckCalibrationConditions+0x11e>
 800402e:	4939      	ldr	r1, [pc, #228]	@ (8004114 <CheckCalibrationConditions+0x1b4>)
 8004030:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8004032:	f7fd f845 	bl	80010c0 <__aeabi_fcmplt>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <CheckCalibrationConditions+0x11e>
 800403c:	4936      	ldr	r1, [pc, #216]	@ (8004118 <CheckCalibrationConditions+0x1b8>)
 800403e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004040:	f7fd f85c 	bl	80010fc <__aeabi_fcmpgt>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d019      	beq.n	800407e <CheckCalibrationConditions+0x11e>
       mq137_avg > 10000.0f && mq137_avg < 200000.0f &&
 800404a:	4934      	ldr	r1, [pc, #208]	@ (800411c <CheckCalibrationConditions+0x1bc>)
 800404c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800404e:	f7fd f837 	bl	80010c0 <__aeabi_fcmplt>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d012      	beq.n	800407e <CheckCalibrationConditions+0x11e>
 8004058:	492f      	ldr	r1, [pc, #188]	@ (8004118 <CheckCalibrationConditions+0x1b8>)
 800405a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800405c:	f7fd f84e 	bl	80010fc <__aeabi_fcmpgt>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <CheckCalibrationConditions+0x11e>
       mq136_avg > 10000.0f && mq136_avg < 200000.0f) {
 8004066:	492d      	ldr	r1, [pc, #180]	@ (800411c <CheckCalibrationConditions+0x1bc>)
 8004068:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800406a:	f7fd f829 	bl	80010c0 <__aeabi_fcmplt>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <CheckCalibrationConditions+0x11e>
        printf("✅ Dieu kien dat yeu cau\r\n");
 8004074:	482a      	ldr	r0, [pc, #168]	@ (8004120 <CheckCalibrationConditions+0x1c0>)
 8004076:	f001 fa9f 	bl	80055b8 <puts>
        return 1;
 800407a:	2301      	movs	r3, #1
 800407c:	e039      	b.n	80040f2 <CheckCalibrationConditions+0x192>
    } else {
        printf("❌ Dieu kien chua dat yeu cau\r\n");
 800407e:	4829      	ldr	r0, [pc, #164]	@ (8004124 <CheckCalibrationConditions+0x1c4>)
 8004080:	f001 fa9a 	bl	80055b8 <puts>
        if(mq137_cv >= 10.0f) printf("- MQ137 chua on dinh\r\n");
 8004084:	4923      	ldr	r1, [pc, #140]	@ (8004114 <CheckCalibrationConditions+0x1b4>)
 8004086:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004088:	f7fd f82e 	bl	80010e8 <__aeabi_fcmpge>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <CheckCalibrationConditions+0x138>
 8004092:	4825      	ldr	r0, [pc, #148]	@ (8004128 <CheckCalibrationConditions+0x1c8>)
 8004094:	f001 fa90 	bl	80055b8 <puts>
        if(mq136_cv >= 10.0f) printf("- MQ136 chua on dinh\r\n");
 8004098:	491e      	ldr	r1, [pc, #120]	@ (8004114 <CheckCalibrationConditions+0x1b4>)
 800409a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800409c:	f7fd f824 	bl	80010e8 <__aeabi_fcmpge>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <CheckCalibrationConditions+0x14c>
 80040a6:	4821      	ldr	r0, [pc, #132]	@ (800412c <CheckCalibrationConditions+0x1cc>)
 80040a8:	f001 fa86 	bl	80055b8 <puts>
        if(mq137_avg <= 10000.0f || mq137_avg >= 200000.0f) {
 80040ac:	491a      	ldr	r1, [pc, #104]	@ (8004118 <CheckCalibrationConditions+0x1b8>)
 80040ae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80040b0:	f7fd f810 	bl	80010d4 <__aeabi_fcmple>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <CheckCalibrationConditions+0x168>
 80040ba:	4918      	ldr	r1, [pc, #96]	@ (800411c <CheckCalibrationConditions+0x1bc>)
 80040bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80040be:	f7fd f813 	bl	80010e8 <__aeabi_fcmpge>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <CheckCalibrationConditions+0x16e>
            printf("- MQ137 dien tro bat thuong\r\n");
 80040c8:	4819      	ldr	r0, [pc, #100]	@ (8004130 <CheckCalibrationConditions+0x1d0>)
 80040ca:	f001 fa75 	bl	80055b8 <puts>
        }
        if(mq136_avg <= 10000.0f || mq136_avg >= 200000.0f) {
 80040ce:	4912      	ldr	r1, [pc, #72]	@ (8004118 <CheckCalibrationConditions+0x1b8>)
 80040d0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80040d2:	f7fc ffff 	bl	80010d4 <__aeabi_fcmple>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <CheckCalibrationConditions+0x18a>
 80040dc:	490f      	ldr	r1, [pc, #60]	@ (800411c <CheckCalibrationConditions+0x1bc>)
 80040de:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80040e0:	f7fd f802 	bl	80010e8 <__aeabi_fcmpge>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <CheckCalibrationConditions+0x190>
            printf("- MQ136 dien tro bat thuong\r\n");
 80040ea:	4812      	ldr	r0, [pc, #72]	@ (8004134 <CheckCalibrationConditions+0x1d4>)
 80040ec:	f001 fa64 	bl	80055b8 <puts>
        }
        return 0;
 80040f0:	2300      	movs	r3, #0
    }
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3768      	adds	r7, #104	@ 0x68
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	0800a7e4 	.word	0x0800a7e4
 8004100:	20000350 	.word	0x20000350
 8004104:	0800a808 	.word	0x0800a808
 8004108:	0800a830 	.word	0x0800a830
 800410c:	0800a858 	.word	0x0800a858
 8004110:	0800a880 	.word	0x0800a880
 8004114:	41200000 	.word	0x41200000
 8004118:	461c4000 	.word	0x461c4000
 800411c:	48435000 	.word	0x48435000
 8004120:	0800a8a8 	.word	0x0800a8a8
 8004124:	0800a8c4 	.word	0x0800a8c4
 8004128:	0800a8e4 	.word	0x0800a8e4
 800412c:	0800a8fc 	.word	0x0800a8fc
 8004130:	0800a914 	.word	0x0800a914
 8004134:	0800a934 	.word	0x0800a934

08004138 <ValidateCalibrationSample>:

uint8_t ValidateCalibrationSample(float resistance, float voltage) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
    // Kiểm tra điện áp hợp lệ
    if(voltage < 0.2f || voltage > 4.8f) return 0;
 8004142:	4912      	ldr	r1, [pc, #72]	@ (800418c <ValidateCalibrationSample+0x54>)
 8004144:	6838      	ldr	r0, [r7, #0]
 8004146:	f7fc ffbb 	bl	80010c0 <__aeabi_fcmplt>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <ValidateCalibrationSample+0x26>
 8004150:	490f      	ldr	r1, [pc, #60]	@ (8004190 <ValidateCalibrationSample+0x58>)
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f7fc ffd2 	bl	80010fc <__aeabi_fcmpgt>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <ValidateCalibrationSample+0x2a>
 800415e:	2300      	movs	r3, #0
 8004160:	e010      	b.n	8004184 <ValidateCalibrationSample+0x4c>
    
    // Kiểm tra điện trở trong khoảng cho clean air
    if(resistance < 8000.0f || resistance > 300000.0f) return 0;
 8004162:	490c      	ldr	r1, [pc, #48]	@ (8004194 <ValidateCalibrationSample+0x5c>)
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fc ffab 	bl	80010c0 <__aeabi_fcmplt>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <ValidateCalibrationSample+0x46>
 8004170:	4909      	ldr	r1, [pc, #36]	@ (8004198 <ValidateCalibrationSample+0x60>)
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fc ffc2 	bl	80010fc <__aeabi_fcmpgt>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <ValidateCalibrationSample+0x4a>
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <ValidateCalibrationSample+0x4c>
    
    return 1;
 8004182:	2301      	movs	r3, #1
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	3e4ccccd 	.word	0x3e4ccccd
 8004190:	4099999a 	.word	0x4099999a
 8004194:	45fa0000 	.word	0x45fa0000
 8004198:	48927c00 	.word	0x48927c00

0800419c <ValidateR0Value>:

uint8_t ValidateR0Value(float r0_value, float stability, const char* sensor_name) {
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
    printf("\r\nValidate %s R0...\r\n", sensor_name);
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4821      	ldr	r0, [pc, #132]	@ (8004230 <ValidateR0Value+0x94>)
 80041ac:	f001 f99c 	bl	80054e8 <iprintf>
    
    // Kiểm tra range
    if(r0_value < 8000.0f) {
 80041b0:	4920      	ldr	r1, [pc, #128]	@ (8004234 <ValidateR0Value+0x98>)
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7fc ff84 	bl	80010c0 <__aeabi_fcmplt>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <ValidateR0Value+0x38>
        printf("❌ %s R0 qua thap (%.1f < 8kΩ)\r\n", sensor_name, r0_value);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7fc f932 	bl	8000428 <__aeabi_f2d>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	481b      	ldr	r0, [pc, #108]	@ (8004238 <ValidateR0Value+0x9c>)
 80041cc:	f001 f98c 	bl	80054e8 <iprintf>
        return 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	e028      	b.n	8004226 <ValidateR0Value+0x8a>
    }
    if(r0_value > 200000.0f) {
 80041d4:	4919      	ldr	r1, [pc, #100]	@ (800423c <ValidateR0Value+0xa0>)
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f7fc ff90 	bl	80010fc <__aeabi_fcmpgt>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <ValidateR0Value+0x5c>
        printf("❌ %s R0 qua cao (%.1f > 200kΩ)\r\n", sensor_name, r0_value);
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7fc f920 	bl	8000428 <__aeabi_f2d>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4814      	ldr	r0, [pc, #80]	@ (8004240 <ValidateR0Value+0xa4>)
 80041f0:	f001 f97a 	bl	80054e8 <iprintf>
        return 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e016      	b.n	8004226 <ValidateR0Value+0x8a>
    }
    
    // Kiểm tra stability
    if(stability > 15.0f) {
 80041f8:	4912      	ldr	r1, [pc, #72]	@ (8004244 <ValidateR0Value+0xa8>)
 80041fa:	68b8      	ldr	r0, [r7, #8]
 80041fc:	f7fc ff7e 	bl	80010fc <__aeabi_fcmpgt>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <ValidateR0Value+0x80>
        printf("❌ %s chua on dinh (%.1f%% > 15%%)\r\n", sensor_name, stability);
 8004206:	68b8      	ldr	r0, [r7, #8]
 8004208:	f7fc f90e 	bl	8000428 <__aeabi_f2d>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	480d      	ldr	r0, [pc, #52]	@ (8004248 <ValidateR0Value+0xac>)
 8004214:	f001 f968 	bl	80054e8 <iprintf>
        return 0;
 8004218:	2300      	movs	r3, #0
 800421a:	e004      	b.n	8004226 <ValidateR0Value+0x8a>
    }
    
    printf("✅ %s R0 hop le\r\n", sensor_name);
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	480b      	ldr	r0, [pc, #44]	@ (800424c <ValidateR0Value+0xb0>)
 8004220:	f001 f962 	bl	80054e8 <iprintf>
    return 1;
 8004224:	2301      	movs	r3, #1
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	0800a954 	.word	0x0800a954
 8004234:	45fa0000 	.word	0x45fa0000
 8004238:	0800a96c 	.word	0x0800a96c
 800423c:	48435000 	.word	0x48435000
 8004240:	0800a990 	.word	0x0800a990
 8004244:	41700000 	.word	0x41700000
 8004248:	0800a9b4 	.word	0x0800a9b4
 800424c:	0800a9dc 	.word	0x0800a9dc

08004250 <CalculateCV>:

float CalculateCV(float* data, int count) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
    float sum = 0, avg, variance = 0;
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	61bb      	str	r3, [r7, #24]
    
    // Tính trung bình
    for(int i = 0; i < count; i++) {
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e00d      	b.n	8004288 <CalculateCV+0x38>
        sum += data[i];
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	69f8      	ldr	r0, [r7, #28]
 800427a:	f7fc fc7b 	bl	8000b74 <__addsf3>
 800427e:	4603      	mov	r3, r0
 8004280:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < count; i++) {
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3301      	adds	r3, #1
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	dbed      	blt.n	800426c <CalculateCV+0x1c>
    }
    avg = sum / count;
 8004290:	6838      	ldr	r0, [r7, #0]
 8004292:	f7fc fd23 	bl	8000cdc <__aeabi_i2f>
 8004296:	4603      	mov	r3, r0
 8004298:	4619      	mov	r1, r3
 800429a:	69f8      	ldr	r0, [r7, #28]
 800429c:	f7fc fe26 	bl	8000eec <__aeabi_fdiv>
 80042a0:	4603      	mov	r3, r0
 80042a2:	60fb      	str	r3, [r7, #12]
    
    // Tính variance
    for(int i = 0; i < count; i++) {
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	e018      	b.n	80042dc <CalculateCV+0x8c>
        variance += powf(data[i] - avg, 2);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68f9      	ldr	r1, [r7, #12]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fc fc5a 	bl	8000b70 <__aeabi_fsub>
 80042bc:	4603      	mov	r3, r0
 80042be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80042c2:	4618      	mov	r0, r3
 80042c4:	f004 fdd6 	bl	8008e74 <powf>
 80042c8:	4603      	mov	r3, r0
 80042ca:	4619      	mov	r1, r3
 80042cc:	69b8      	ldr	r0, [r7, #24]
 80042ce:	f7fc fc51 	bl	8000b74 <__addsf3>
 80042d2:	4603      	mov	r3, r0
 80042d4:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < count; i++) {
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	3301      	adds	r3, #1
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	dbe2      	blt.n	80042aa <CalculateCV+0x5a>
    }
    variance /= count;
 80042e4:	6838      	ldr	r0, [r7, #0]
 80042e6:	f7fc fcf9 	bl	8000cdc <__aeabi_i2f>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4619      	mov	r1, r3
 80042ee:	69b8      	ldr	r0, [r7, #24]
 80042f0:	f7fc fdfc 	bl	8000eec <__aeabi_fdiv>
 80042f4:	4603      	mov	r3, r0
 80042f6:	61bb      	str	r3, [r7, #24]
    
    // Coefficient of variation = (std_dev / mean) * 100%
    float std_dev = sqrtf(variance);
 80042f8:	69b8      	ldr	r0, [r7, #24]
 80042fa:	f004 fe08 	bl	8008f0e <sqrtf>
 80042fe:	60b8      	str	r0, [r7, #8]
    return (std_dev / avg) * 100.0f;
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	68b8      	ldr	r0, [r7, #8]
 8004304:	f7fc fdf2 	bl	8000eec <__aeabi_fdiv>
 8004308:	4603      	mov	r3, r0
 800430a:	4904      	ldr	r1, [pc, #16]	@ (800431c <CalculateCV+0xcc>)
 800430c:	4618      	mov	r0, r3
 800430e:	f7fc fd39 	bl	8000d84 <__aeabi_fmul>
 8004312:	4603      	mov	r3, r0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	42c80000 	.word	0x42c80000

08004320 <CalculateAverage>:

float CalculateAverage(float* data, int count) {
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
    float sum = 0;
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < count; i++) {
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	e00d      	b.n	8004352 <CalculateAverage+0x32>
        sum += data[i];
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4619      	mov	r1, r3
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f7fc fc16 	bl	8000b74 <__addsf3>
 8004348:	4603      	mov	r3, r0
 800434a:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < count; i++) {
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	3301      	adds	r3, #1
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	dbed      	blt.n	8004336 <CalculateAverage+0x16>
    }
    return sum / count;
 800435a:	6838      	ldr	r0, [r7, #0]
 800435c:	f7fc fcbe 	bl	8000cdc <__aeabi_i2f>
 8004360:	4603      	mov	r3, r0
 8004362:	4619      	mov	r1, r3
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7fc fdc1 	bl	8000eec <__aeabi_fdiv>
 800436a:	4603      	mov	r3, r0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <TestCalibrationResult>:

void TestCalibrationResult(void) {
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	b087      	sub	sp, #28
 8004378:	af02      	add	r7, sp, #8
    printf("Test 5 lan voi R0 moi...\r\n");
 800437a:	4818      	ldr	r0, [pc, #96]	@ (80043dc <TestCalibrationResult+0x68>)
 800437c:	f001 f91c 	bl	80055b8 <puts>
    
    for(int i = 0; i < 5; i++) {
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e022      	b.n	80043cc <TestCalibrationResult+0x58>
        ProcessAllSensors();
 8004386:	f7ff faf9 	bl	800397c <ProcessAllSensors>
        
        float nh3_ppm = GetNH3_PPM();
 800438a:	f000 f89f 	bl	80044cc <GetNH3_PPM>
 800438e:	60b8      	str	r0, [r7, #8]
        float h2s_ppm = GetH2S_PPM();
 8004390:	f000 f8ae 	bl	80044f0 <GetH2S_PPM>
 8004394:	6078      	str	r0, [r7, #4]
        
        printf("Test %d: NH3=%.1f ppm, H2S=%.1f ppm\r\n", i+1, nh3_ppm, h2s_ppm);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1c5e      	adds	r6, r3, #1
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f7fc f844 	bl	8000428 <__aeabi_f2d>
 80043a0:	4604      	mov	r4, r0
 80043a2:	460d      	mov	r5, r1
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7fc f83f 	bl	8000428 <__aeabi_f2d>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	e9cd 2300 	strd	r2, r3, [sp]
 80043b2:	4622      	mov	r2, r4
 80043b4:	462b      	mov	r3, r5
 80043b6:	4631      	mov	r1, r6
 80043b8:	4809      	ldr	r0, [pc, #36]	@ (80043e0 <TestCalibrationResult+0x6c>)
 80043ba:	f001 f895 	bl	80054e8 <iprintf>
        
        HAL_Delay(3000);
 80043be:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80043c2:	f7fd fb4d 	bl	8001a60 <HAL_Delay>
    for(int i = 0; i < 5; i++) {
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3301      	adds	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	ddd9      	ble.n	8004386 <TestCalibrationResult+0x12>
    }
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043dc:	0800a9f0 	.word	0x0800a9f0
 80043e0:	0800aa0c 	.word	0x0800aa0c

080043e4 <SaveCalibrationToFlash>:

void SaveCalibrationToFlash(float mq137_r0, float mq136_r0) {
 80043e4:	b5b0      	push	{r4, r5, r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
    // TODO: Implement Flash save
    printf("💾 Luu R0 vao Flash: MQ137=%.1f, MQ136=%.1f\r\n", mq137_r0, mq136_r0);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc f81a 	bl	8000428 <__aeabi_f2d>
 80043f4:	4604      	mov	r4, r0
 80043f6:	460d      	mov	r5, r1
 80043f8:	6838      	ldr	r0, [r7, #0]
 80043fa:	f7fc f815 	bl	8000428 <__aeabi_f2d>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	e9cd 2300 	strd	r2, r3, [sp]
 8004406:	4622      	mov	r2, r4
 8004408:	462b      	mov	r3, r5
 800440a:	4803      	ldr	r0, [pc, #12]	@ (8004418 <SaveCalibrationToFlash+0x34>)
 800440c:	f001 f86c 	bl	80054e8 <iprintf>
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bdb0      	pop	{r4, r5, r7, pc}
 8004418:	0800aa34 	.word	0x0800aa34

0800441c <SetManualR0>:

// =============================================================================
// MANUAL R0 SETTING
// =============================================================================

void SetManualR0(float mq137_r0, float mq136_r0) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
    printf("\r\nTHIET LAP R0 THU CONG:\r\n");
 8004426:	4821      	ldr	r0, [pc, #132]	@ (80044ac <SetManualR0+0x90>)
 8004428:	f001 f8c6 	bl	80055b8 <puts>
    
    if(mq137_r0 > 5000.0f && mq137_r0 < 300000.0f) {
 800442c:	4920      	ldr	r1, [pc, #128]	@ (80044b0 <SetManualR0+0x94>)
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fc fe64 	bl	80010fc <__aeabi_fcmpgt>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d012      	beq.n	8004460 <SetManualR0+0x44>
 800443a:	491e      	ldr	r1, [pc, #120]	@ (80044b4 <SetManualR0+0x98>)
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fc fe3f 	bl	80010c0 <__aeabi_fcmplt>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00b      	beq.n	8004460 <SetManualR0+0x44>
        g_sensor_system.mq137.base.r0_value = mq137_r0;
 8004448:	4a1b      	ldr	r2, [pc, #108]	@ (80044b8 <SetManualR0+0x9c>)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6353      	str	r3, [r2, #52]	@ 0x34
        printf("✅ MQ137 R0 = %.1f Ω\r\n", mq137_r0);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fb ffea 	bl	8000428 <__aeabi_f2d>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4818      	ldr	r0, [pc, #96]	@ (80044bc <SetManualR0+0xa0>)
 800445a:	f001 f845 	bl	80054e8 <iprintf>
 800445e:	e002      	b.n	8004466 <SetManualR0+0x4a>
    } else {
        printf("❌ MQ137 R0 khong hop le\r\n");
 8004460:	4817      	ldr	r0, [pc, #92]	@ (80044c0 <SetManualR0+0xa4>)
 8004462:	f001 f8a9 	bl	80055b8 <puts>
    }
    
    if(mq136_r0 > 5000.0f && mq136_r0 < 300000.0f) {
 8004466:	4912      	ldr	r1, [pc, #72]	@ (80044b0 <SetManualR0+0x94>)
 8004468:	6838      	ldr	r0, [r7, #0]
 800446a:	f7fc fe47 	bl	80010fc <__aeabi_fcmpgt>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d013      	beq.n	800449c <SetManualR0+0x80>
 8004474:	490f      	ldr	r1, [pc, #60]	@ (80044b4 <SetManualR0+0x98>)
 8004476:	6838      	ldr	r0, [r7, #0]
 8004478:	f7fc fe22 	bl	80010c0 <__aeabi_fcmplt>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00c      	beq.n	800449c <SetManualR0+0x80>
        g_sensor_system.mq136.base.r0_value = mq136_r0;
 8004482:	4a0d      	ldr	r2, [pc, #52]	@ (80044b8 <SetManualR0+0x9c>)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
        printf("✅ MQ136 R0 = %.1f Ω\r\n", mq136_r0);
 800448a:	6838      	ldr	r0, [r7, #0]
 800448c:	f7fb ffcc 	bl	8000428 <__aeabi_f2d>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	480b      	ldr	r0, [pc, #44]	@ (80044c4 <SetManualR0+0xa8>)
 8004496:	f001 f827 	bl	80054e8 <iprintf>
 800449a:	e003      	b.n	80044a4 <SetManualR0+0x88>
    } else {
        printf("❌ MQ136 R0 khong hop le\r\n");
 800449c:	480a      	ldr	r0, [pc, #40]	@ (80044c8 <SetManualR0+0xac>)
 800449e:	f001 f88b 	bl	80055b8 <puts>
    }
}
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	0800ab60 	.word	0x0800ab60
 80044b0:	459c4000 	.word	0x459c4000
 80044b4:	48927c00 	.word	0x48927c00
 80044b8:	20000350 	.word	0x20000350
 80044bc:	0800ab7c 	.word	0x0800ab7c
 80044c0:	0800ab98 	.word	0x0800ab98
 80044c4:	0800abb4 	.word	0x0800abb4
 80044c8:	0800abd0 	.word	0x0800abd0

080044cc <GetNH3_PPM>:
// =============================================================================

/**
 * @brief Lấy nồng độ NH3 hiện tại
 */
float GetNH3_PPM(void) {
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
    return g_sensor_system.mq137.base.is_valid ? g_sensor_system.mq137.gas_ppm : 0.0f;
 80044d0:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <GetNH3_PPM+0x20>)
 80044d2:	7cdb      	ldrb	r3, [r3, #19]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <GetNH3_PPM+0x12>
 80044d8:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <GetNH3_PPM+0x20>)
 80044da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044dc:	e001      	b.n	80044e2 <GetNH3_PPM+0x16>
 80044de:	f04f 0300 	mov.w	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000350 	.word	0x20000350

080044f0 <GetH2S_PPM>:

/**
 * @brief Lấy nồng độ CO2 hiện tại
 */
float GetH2S_PPM(void) {
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
    return g_sensor_system.mq136.base.is_valid ? g_sensor_system.mq136.gas_ppm : 0.0f;
 80044f4:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <GetH2S_PPM+0x24>)
 80044f6:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <GetH2S_PPM+0x16>
 80044fe:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <GetH2S_PPM+0x24>)
 8004500:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004504:	e001      	b.n	800450a <GetH2S_PPM+0x1a>
 8004506:	f04f 0300 	mov.w	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000350 	.word	0x20000350

08004518 <GetNH3AlarmLevel>:

/**
 * @brief Lấy mức cảnh báo NH3
 */
AlarmLevel_t GetNH3AlarmLevel(void) {
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
    return g_sensor_system.mq137.alarm_level;
 800451c:	4b03      	ldr	r3, [pc, #12]	@ (800452c <GetNH3AlarmLevel+0x14>)
 800451e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
}
 8004522:	4618      	mov	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000350 	.word	0x20000350

08004530 <GetH2SAlarmLevel>:

/**
 * @brief Lấy mức cảnh báo CO2
 */
AlarmLevel_t GetH2SAlarmLevel(void) {
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
    return g_sensor_system.mq136.alarm_level;
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <GetH2SAlarmLevel+0x14>)
 8004536:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
}
 800453a:	4618      	mov	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000350 	.word	0x20000350

08004548 <GetSystemAlarmLevel>:

/**
 * @brief Lấy mức cảnh báo tổng thể
 */
AlarmLevel_t GetSystemAlarmLevel(void) {
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
    return g_sensor_system.system_alarm;
 800454c:	4b03      	ldr	r3, [pc, #12]	@ (800455c <GetSystemAlarmLevel+0x14>)
 800454e:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
}
 8004552:	4618      	mov	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000350 	.word	0x20000350

08004560 <GetSystemStatus>:

/**
 * @brief Lấy trạng thái hệ thống
 */
uint8_t GetSystemStatus(void) {
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
    return g_sensor_system.system_status;
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <GetSystemStatus+0x14>)
 8004566:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
}
 800456a:	4618      	mov	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000350 	.word	0x20000350

08004578 <SaveToHistory>:
/**
 * @brief Lưu dữ liệu vào buffer lịch sử
 */
void SaveToHistory(void) {
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
    history_buffer[history_index] = g_sensor_system;
 800457c:	4b12      	ldr	r3, [pc, #72]	@ (80045c8 <SaveToHistory+0x50>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	4619      	mov	r1, r3
 8004582:	4a12      	ldr	r2, [pc, #72]	@ (80045cc <SaveToHistory+0x54>)
 8004584:	460b      	mov	r3, r1
 8004586:	019b      	lsls	r3, r3, #6
 8004588:	440b      	add	r3, r1
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	4a10      	ldr	r2, [pc, #64]	@ (80045d0 <SaveToHistory+0x58>)
 8004590:	4618      	mov	r0, r3
 8004592:	4611      	mov	r1, r2
 8004594:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004598:	461a      	mov	r2, r3
 800459a:	f001 f99a 	bl	80058d2 <memcpy>
    history_index = (history_index + 1) % HISTORY_SIZE;
 800459e:	4b0a      	ldr	r3, [pc, #40]	@ (80045c8 <SaveToHistory+0x50>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	4b0b      	ldr	r3, [pc, #44]	@ (80045d4 <SaveToHistory+0x5c>)
 80045a6:	fb83 1302 	smull	r1, r3, r3, r2
 80045aa:	4413      	add	r3, r2
 80045ac:	1159      	asrs	r1, r3, #5
 80045ae:	17d3      	asrs	r3, r2, #31
 80045b0:	1ac9      	subs	r1, r1, r3
 80045b2:	460b      	mov	r3, r1
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	1a5b      	subs	r3, r3, r1
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	1ad1      	subs	r1, r2, r3
 80045bc:	b2ca      	uxtb	r2, r1
 80045be:	4b02      	ldr	r3, [pc, #8]	@ (80045c8 <SaveToHistory+0x50>)
 80045c0:	701a      	strb	r2, [r3, #0]
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20004144 	.word	0x20004144
 80045cc:	20000454 	.word	0x20000454
 80045d0:	20000350 	.word	0x20000350
 80045d4:	88888889 	.word	0x88888889

080045d8 <UpdateSystemStatus>:
/**
 * @brief Cập nhật trạng thái hệ thống
 */         

void UpdateSystemStatus(void) {
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
    uint8_t valid_sensors = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	71fb      	strb	r3, [r7, #7]
    AlarmLevel_t max_alarm = ALARM_NORMAL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	71bb      	strb	r3, [r7, #6]
    
    // Đếm cảm biến hợp lệ và tìm mức cảnh báo cao nhất
    if(g_sensor_system.mq137.base.is_enabled && g_sensor_system.mq137.base.is_valid) {
 80045e6:	4b28      	ldr	r3, [pc, #160]	@ (8004688 <UpdateSystemStatus+0xb0>)
 80045e8:	7c9b      	ldrb	r3, [r3, #18]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d010      	beq.n	8004610 <UpdateSystemStatus+0x38>
 80045ee:	4b26      	ldr	r3, [pc, #152]	@ (8004688 <UpdateSystemStatus+0xb0>)
 80045f0:	7cdb      	ldrb	r3, [r3, #19]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <UpdateSystemStatus+0x38>
        valid_sensors++;
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	3301      	adds	r3, #1
 80045fa:	71fb      	strb	r3, [r7, #7]
        if(g_sensor_system.mq137.alarm_level > max_alarm) {
 80045fc:	4b22      	ldr	r3, [pc, #136]	@ (8004688 <UpdateSystemStatus+0xb0>)
 80045fe:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8004602:	79ba      	ldrb	r2, [r7, #6]
 8004604:	429a      	cmp	r2, r3
 8004606:	d203      	bcs.n	8004610 <UpdateSystemStatus+0x38>
            max_alarm = g_sensor_system.mq137.alarm_level;
 8004608:	4b1f      	ldr	r3, [pc, #124]	@ (8004688 <UpdateSystemStatus+0xb0>)
 800460a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800460e:	71bb      	strb	r3, [r7, #6]
        }
    }
    
    if(g_sensor_system.mq136.base.is_enabled && g_sensor_system.mq136.base.is_valid) {
 8004610:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <UpdateSystemStatus+0xb0>)
 8004612:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8004616:	2b00      	cmp	r3, #0
 8004618:	d011      	beq.n	800463e <UpdateSystemStatus+0x66>
 800461a:	4b1b      	ldr	r3, [pc, #108]	@ (8004688 <UpdateSystemStatus+0xb0>)
 800461c:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00c      	beq.n	800463e <UpdateSystemStatus+0x66>
        valid_sensors++;
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	3301      	adds	r3, #1
 8004628:	71fb      	strb	r3, [r7, #7]
        if(g_sensor_system.mq136.alarm_level > max_alarm) {
 800462a:	4b17      	ldr	r3, [pc, #92]	@ (8004688 <UpdateSystemStatus+0xb0>)
 800462c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004630:	79ba      	ldrb	r2, [r7, #6]
 8004632:	429a      	cmp	r2, r3
 8004634:	d203      	bcs.n	800463e <UpdateSystemStatus+0x66>
            max_alarm = g_sensor_system.mq136.alarm_level;
 8004636:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <UpdateSystemStatus+0xb0>)
 8004638:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800463c:	71bb      	strb	r3, [r7, #6]
        }
    }
    
    // Cập nhật trạng thái hệ thống
    if(valid_sensors == 2) {
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d104      	bne.n	800464e <UpdateSystemStatus+0x76>
        g_sensor_system.system_status = 3; // Tối ưu
 8004644:	4b10      	ldr	r3, [pc, #64]	@ (8004688 <UpdateSystemStatus+0xb0>)
 8004646:	2203      	movs	r2, #3
 8004648:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
 800464c:	e012      	b.n	8004674 <UpdateSystemStatus+0x9c>
    } else if(valid_sensors == 1) {
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d104      	bne.n	800465e <UpdateSystemStatus+0x86>
        g_sensor_system.system_status = 2; // Tốt
 8004654:	4b0c      	ldr	r3, [pc, #48]	@ (8004688 <UpdateSystemStatus+0xb0>)
 8004656:	2202      	movs	r2, #2
 8004658:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
 800465c:	e00a      	b.n	8004674 <UpdateSystemStatus+0x9c>
    } else {
        g_sensor_system.system_status = 0; // Lỗi
 800465e:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <UpdateSystemStatus+0xb0>)
 8004660:	2200      	movs	r2, #0
 8004662:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
        g_sensor_system.error_count++;
 8004666:	4b08      	ldr	r3, [pc, #32]	@ (8004688 <UpdateSystemStatus+0xb0>)
 8004668:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800466c:	3301      	adds	r3, #1
 800466e:	4a06      	ldr	r2, [pc, #24]	@ (8004688 <UpdateSystemStatus+0xb0>)
 8004670:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
    }
    
    g_sensor_system.system_alarm = max_alarm;
 8004674:	4a04      	ldr	r2, [pc, #16]	@ (8004688 <UpdateSystemStatus+0xb0>)
 8004676:	79bb      	ldrb	r3, [r7, #6]
 8004678:	f882 30f2 	strb.w	r3, [r2, #242]	@ 0xf2
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000350 	.word	0x20000350

0800468c <__cvt>:
 800468c:	2b00      	cmp	r3, #0
 800468e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004692:	461d      	mov	r5, r3
 8004694:	bfbb      	ittet	lt
 8004696:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800469a:	461d      	movlt	r5, r3
 800469c:	2300      	movge	r3, #0
 800469e:	232d      	movlt	r3, #45	@ 0x2d
 80046a0:	b088      	sub	sp, #32
 80046a2:	4614      	mov	r4, r2
 80046a4:	bfb8      	it	lt
 80046a6:	4614      	movlt	r4, r2
 80046a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80046aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80046ac:	7013      	strb	r3, [r2, #0]
 80046ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80046b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80046b4:	f023 0820 	bic.w	r8, r3, #32
 80046b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80046bc:	d005      	beq.n	80046ca <__cvt+0x3e>
 80046be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80046c2:	d100      	bne.n	80046c6 <__cvt+0x3a>
 80046c4:	3601      	adds	r6, #1
 80046c6:	2302      	movs	r3, #2
 80046c8:	e000      	b.n	80046cc <__cvt+0x40>
 80046ca:	2303      	movs	r3, #3
 80046cc:	aa07      	add	r2, sp, #28
 80046ce:	9204      	str	r2, [sp, #16]
 80046d0:	aa06      	add	r2, sp, #24
 80046d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80046d6:	e9cd 3600 	strd	r3, r6, [sp]
 80046da:	4622      	mov	r2, r4
 80046dc:	462b      	mov	r3, r5
 80046de:	f001 f993 	bl	8005a08 <_dtoa_r>
 80046e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80046e6:	4607      	mov	r7, r0
 80046e8:	d119      	bne.n	800471e <__cvt+0x92>
 80046ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80046ec:	07db      	lsls	r3, r3, #31
 80046ee:	d50e      	bpl.n	800470e <__cvt+0x82>
 80046f0:	eb00 0906 	add.w	r9, r0, r6
 80046f4:	2200      	movs	r2, #0
 80046f6:	2300      	movs	r3, #0
 80046f8:	4620      	mov	r0, r4
 80046fa:	4629      	mov	r1, r5
 80046fc:	f7fc f954 	bl	80009a8 <__aeabi_dcmpeq>
 8004700:	b108      	cbz	r0, 8004706 <__cvt+0x7a>
 8004702:	f8cd 901c 	str.w	r9, [sp, #28]
 8004706:	2230      	movs	r2, #48	@ 0x30
 8004708:	9b07      	ldr	r3, [sp, #28]
 800470a:	454b      	cmp	r3, r9
 800470c:	d31e      	bcc.n	800474c <__cvt+0xc0>
 800470e:	4638      	mov	r0, r7
 8004710:	9b07      	ldr	r3, [sp, #28]
 8004712:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004714:	1bdb      	subs	r3, r3, r7
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	b008      	add	sp, #32
 800471a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004722:	eb00 0906 	add.w	r9, r0, r6
 8004726:	d1e5      	bne.n	80046f4 <__cvt+0x68>
 8004728:	7803      	ldrb	r3, [r0, #0]
 800472a:	2b30      	cmp	r3, #48	@ 0x30
 800472c:	d10a      	bne.n	8004744 <__cvt+0xb8>
 800472e:	2200      	movs	r2, #0
 8004730:	2300      	movs	r3, #0
 8004732:	4620      	mov	r0, r4
 8004734:	4629      	mov	r1, r5
 8004736:	f7fc f937 	bl	80009a8 <__aeabi_dcmpeq>
 800473a:	b918      	cbnz	r0, 8004744 <__cvt+0xb8>
 800473c:	f1c6 0601 	rsb	r6, r6, #1
 8004740:	f8ca 6000 	str.w	r6, [sl]
 8004744:	f8da 3000 	ldr.w	r3, [sl]
 8004748:	4499      	add	r9, r3
 800474a:	e7d3      	b.n	80046f4 <__cvt+0x68>
 800474c:	1c59      	adds	r1, r3, #1
 800474e:	9107      	str	r1, [sp, #28]
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	e7d9      	b.n	8004708 <__cvt+0x7c>

08004754 <__exponent>:
 8004754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004756:	2900      	cmp	r1, #0
 8004758:	bfb6      	itet	lt
 800475a:	232d      	movlt	r3, #45	@ 0x2d
 800475c:	232b      	movge	r3, #43	@ 0x2b
 800475e:	4249      	neglt	r1, r1
 8004760:	2909      	cmp	r1, #9
 8004762:	7002      	strb	r2, [r0, #0]
 8004764:	7043      	strb	r3, [r0, #1]
 8004766:	dd29      	ble.n	80047bc <__exponent+0x68>
 8004768:	f10d 0307 	add.w	r3, sp, #7
 800476c:	461d      	mov	r5, r3
 800476e:	270a      	movs	r7, #10
 8004770:	fbb1 f6f7 	udiv	r6, r1, r7
 8004774:	461a      	mov	r2, r3
 8004776:	fb07 1416 	mls	r4, r7, r6, r1
 800477a:	3430      	adds	r4, #48	@ 0x30
 800477c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004780:	460c      	mov	r4, r1
 8004782:	2c63      	cmp	r4, #99	@ 0x63
 8004784:	4631      	mov	r1, r6
 8004786:	f103 33ff 	add.w	r3, r3, #4294967295
 800478a:	dcf1      	bgt.n	8004770 <__exponent+0x1c>
 800478c:	3130      	adds	r1, #48	@ 0x30
 800478e:	1e94      	subs	r4, r2, #2
 8004790:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004794:	4623      	mov	r3, r4
 8004796:	1c41      	adds	r1, r0, #1
 8004798:	42ab      	cmp	r3, r5
 800479a:	d30a      	bcc.n	80047b2 <__exponent+0x5e>
 800479c:	f10d 0309 	add.w	r3, sp, #9
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	42ac      	cmp	r4, r5
 80047a4:	bf88      	it	hi
 80047a6:	2300      	movhi	r3, #0
 80047a8:	3302      	adds	r3, #2
 80047aa:	4403      	add	r3, r0
 80047ac:	1a18      	subs	r0, r3, r0
 80047ae:	b003      	add	sp, #12
 80047b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80047b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80047ba:	e7ed      	b.n	8004798 <__exponent+0x44>
 80047bc:	2330      	movs	r3, #48	@ 0x30
 80047be:	3130      	adds	r1, #48	@ 0x30
 80047c0:	7083      	strb	r3, [r0, #2]
 80047c2:	70c1      	strb	r1, [r0, #3]
 80047c4:	1d03      	adds	r3, r0, #4
 80047c6:	e7f1      	b.n	80047ac <__exponent+0x58>

080047c8 <_printf_float>:
 80047c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047cc:	b091      	sub	sp, #68	@ 0x44
 80047ce:	460c      	mov	r4, r1
 80047d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80047d4:	4616      	mov	r6, r2
 80047d6:	461f      	mov	r7, r3
 80047d8:	4605      	mov	r5, r0
 80047da:	f000 fff5 	bl	80057c8 <_localeconv_r>
 80047de:	6803      	ldr	r3, [r0, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	9308      	str	r3, [sp, #32]
 80047e4:	f7fb fcb4 	bl	8000150 <strlen>
 80047e8:	2300      	movs	r3, #0
 80047ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80047ec:	f8d8 3000 	ldr.w	r3, [r8]
 80047f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80047f2:	3307      	adds	r3, #7
 80047f4:	f023 0307 	bic.w	r3, r3, #7
 80047f8:	f103 0208 	add.w	r2, r3, #8
 80047fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004800:	f8d4 b000 	ldr.w	fp, [r4]
 8004804:	f8c8 2000 	str.w	r2, [r8]
 8004808:	e9d3 8900 	ldrd	r8, r9, [r3]
 800480c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004812:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004816:	f04f 32ff 	mov.w	r2, #4294967295
 800481a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800481e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004822:	4b9c      	ldr	r3, [pc, #624]	@ (8004a94 <_printf_float+0x2cc>)
 8004824:	f7fc f8f2 	bl	8000a0c <__aeabi_dcmpun>
 8004828:	bb70      	cbnz	r0, 8004888 <_printf_float+0xc0>
 800482a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800482e:	f04f 32ff 	mov.w	r2, #4294967295
 8004832:	4b98      	ldr	r3, [pc, #608]	@ (8004a94 <_printf_float+0x2cc>)
 8004834:	f7fc f8cc 	bl	80009d0 <__aeabi_dcmple>
 8004838:	bb30      	cbnz	r0, 8004888 <_printf_float+0xc0>
 800483a:	2200      	movs	r2, #0
 800483c:	2300      	movs	r3, #0
 800483e:	4640      	mov	r0, r8
 8004840:	4649      	mov	r1, r9
 8004842:	f7fc f8bb 	bl	80009bc <__aeabi_dcmplt>
 8004846:	b110      	cbz	r0, 800484e <_printf_float+0x86>
 8004848:	232d      	movs	r3, #45	@ 0x2d
 800484a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800484e:	4a92      	ldr	r2, [pc, #584]	@ (8004a98 <_printf_float+0x2d0>)
 8004850:	4b92      	ldr	r3, [pc, #584]	@ (8004a9c <_printf_float+0x2d4>)
 8004852:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004856:	bf94      	ite	ls
 8004858:	4690      	movls	r8, r2
 800485a:	4698      	movhi	r8, r3
 800485c:	2303      	movs	r3, #3
 800485e:	f04f 0900 	mov.w	r9, #0
 8004862:	6123      	str	r3, [r4, #16]
 8004864:	f02b 0304 	bic.w	r3, fp, #4
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	4633      	mov	r3, r6
 800486c:	4621      	mov	r1, r4
 800486e:	4628      	mov	r0, r5
 8004870:	9700      	str	r7, [sp, #0]
 8004872:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004874:	f000 f9d4 	bl	8004c20 <_printf_common>
 8004878:	3001      	adds	r0, #1
 800487a:	f040 8090 	bne.w	800499e <_printf_float+0x1d6>
 800487e:	f04f 30ff 	mov.w	r0, #4294967295
 8004882:	b011      	add	sp, #68	@ 0x44
 8004884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004888:	4642      	mov	r2, r8
 800488a:	464b      	mov	r3, r9
 800488c:	4640      	mov	r0, r8
 800488e:	4649      	mov	r1, r9
 8004890:	f7fc f8bc 	bl	8000a0c <__aeabi_dcmpun>
 8004894:	b148      	cbz	r0, 80048aa <_printf_float+0xe2>
 8004896:	464b      	mov	r3, r9
 8004898:	2b00      	cmp	r3, #0
 800489a:	bfb8      	it	lt
 800489c:	232d      	movlt	r3, #45	@ 0x2d
 800489e:	4a80      	ldr	r2, [pc, #512]	@ (8004aa0 <_printf_float+0x2d8>)
 80048a0:	bfb8      	it	lt
 80048a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80048a6:	4b7f      	ldr	r3, [pc, #508]	@ (8004aa4 <_printf_float+0x2dc>)
 80048a8:	e7d3      	b.n	8004852 <_printf_float+0x8a>
 80048aa:	6863      	ldr	r3, [r4, #4]
 80048ac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	d13f      	bne.n	8004934 <_printf_float+0x16c>
 80048b4:	2306      	movs	r3, #6
 80048b6:	6063      	str	r3, [r4, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80048be:	6023      	str	r3, [r4, #0]
 80048c0:	9206      	str	r2, [sp, #24]
 80048c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80048c4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80048c8:	aa0d      	add	r2, sp, #52	@ 0x34
 80048ca:	9203      	str	r2, [sp, #12]
 80048cc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80048d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	4642      	mov	r2, r8
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	4628      	mov	r0, r5
 80048dc:	464b      	mov	r3, r9
 80048de:	910a      	str	r1, [sp, #40]	@ 0x28
 80048e0:	f7ff fed4 	bl	800468c <__cvt>
 80048e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80048e6:	4680      	mov	r8, r0
 80048e8:	2947      	cmp	r1, #71	@ 0x47
 80048ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80048ec:	d128      	bne.n	8004940 <_printf_float+0x178>
 80048ee:	1cc8      	adds	r0, r1, #3
 80048f0:	db02      	blt.n	80048f8 <_printf_float+0x130>
 80048f2:	6863      	ldr	r3, [r4, #4]
 80048f4:	4299      	cmp	r1, r3
 80048f6:	dd40      	ble.n	800497a <_printf_float+0x1b2>
 80048f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80048fc:	fa5f fa8a 	uxtb.w	sl, sl
 8004900:	4652      	mov	r2, sl
 8004902:	3901      	subs	r1, #1
 8004904:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004908:	910d      	str	r1, [sp, #52]	@ 0x34
 800490a:	f7ff ff23 	bl	8004754 <__exponent>
 800490e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004910:	4681      	mov	r9, r0
 8004912:	1813      	adds	r3, r2, r0
 8004914:	2a01      	cmp	r2, #1
 8004916:	6123      	str	r3, [r4, #16]
 8004918:	dc02      	bgt.n	8004920 <_printf_float+0x158>
 800491a:	6822      	ldr	r2, [r4, #0]
 800491c:	07d2      	lsls	r2, r2, #31
 800491e:	d501      	bpl.n	8004924 <_printf_float+0x15c>
 8004920:	3301      	adds	r3, #1
 8004922:	6123      	str	r3, [r4, #16]
 8004924:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004928:	2b00      	cmp	r3, #0
 800492a:	d09e      	beq.n	800486a <_printf_float+0xa2>
 800492c:	232d      	movs	r3, #45	@ 0x2d
 800492e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004932:	e79a      	b.n	800486a <_printf_float+0xa2>
 8004934:	2947      	cmp	r1, #71	@ 0x47
 8004936:	d1bf      	bne.n	80048b8 <_printf_float+0xf0>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1bd      	bne.n	80048b8 <_printf_float+0xf0>
 800493c:	2301      	movs	r3, #1
 800493e:	e7ba      	b.n	80048b6 <_printf_float+0xee>
 8004940:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004944:	d9dc      	bls.n	8004900 <_printf_float+0x138>
 8004946:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800494a:	d118      	bne.n	800497e <_printf_float+0x1b6>
 800494c:	2900      	cmp	r1, #0
 800494e:	6863      	ldr	r3, [r4, #4]
 8004950:	dd0b      	ble.n	800496a <_printf_float+0x1a2>
 8004952:	6121      	str	r1, [r4, #16]
 8004954:	b913      	cbnz	r3, 800495c <_printf_float+0x194>
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	07d0      	lsls	r0, r2, #31
 800495a:	d502      	bpl.n	8004962 <_printf_float+0x19a>
 800495c:	3301      	adds	r3, #1
 800495e:	440b      	add	r3, r1
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	f04f 0900 	mov.w	r9, #0
 8004966:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004968:	e7dc      	b.n	8004924 <_printf_float+0x15c>
 800496a:	b913      	cbnz	r3, 8004972 <_printf_float+0x1aa>
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	07d2      	lsls	r2, r2, #31
 8004970:	d501      	bpl.n	8004976 <_printf_float+0x1ae>
 8004972:	3302      	adds	r3, #2
 8004974:	e7f4      	b.n	8004960 <_printf_float+0x198>
 8004976:	2301      	movs	r3, #1
 8004978:	e7f2      	b.n	8004960 <_printf_float+0x198>
 800497a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800497e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004980:	4299      	cmp	r1, r3
 8004982:	db05      	blt.n	8004990 <_printf_float+0x1c8>
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	6121      	str	r1, [r4, #16]
 8004988:	07d8      	lsls	r0, r3, #31
 800498a:	d5ea      	bpl.n	8004962 <_printf_float+0x19a>
 800498c:	1c4b      	adds	r3, r1, #1
 800498e:	e7e7      	b.n	8004960 <_printf_float+0x198>
 8004990:	2900      	cmp	r1, #0
 8004992:	bfcc      	ite	gt
 8004994:	2201      	movgt	r2, #1
 8004996:	f1c1 0202 	rsble	r2, r1, #2
 800499a:	4413      	add	r3, r2
 800499c:	e7e0      	b.n	8004960 <_printf_float+0x198>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	055a      	lsls	r2, r3, #21
 80049a2:	d407      	bmi.n	80049b4 <_printf_float+0x1ec>
 80049a4:	6923      	ldr	r3, [r4, #16]
 80049a6:	4642      	mov	r2, r8
 80049a8:	4631      	mov	r1, r6
 80049aa:	4628      	mov	r0, r5
 80049ac:	47b8      	blx	r7
 80049ae:	3001      	adds	r0, #1
 80049b0:	d12b      	bne.n	8004a0a <_printf_float+0x242>
 80049b2:	e764      	b.n	800487e <_printf_float+0xb6>
 80049b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80049b8:	f240 80dc 	bls.w	8004b74 <_printf_float+0x3ac>
 80049bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80049c0:	2200      	movs	r2, #0
 80049c2:	2300      	movs	r3, #0
 80049c4:	f7fb fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d033      	beq.n	8004a34 <_printf_float+0x26c>
 80049cc:	2301      	movs	r3, #1
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	4a35      	ldr	r2, [pc, #212]	@ (8004aa8 <_printf_float+0x2e0>)
 80049d4:	47b8      	blx	r7
 80049d6:	3001      	adds	r0, #1
 80049d8:	f43f af51 	beq.w	800487e <_printf_float+0xb6>
 80049dc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80049e0:	4543      	cmp	r3, r8
 80049e2:	db02      	blt.n	80049ea <_printf_float+0x222>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	07d8      	lsls	r0, r3, #31
 80049e8:	d50f      	bpl.n	8004a0a <_printf_float+0x242>
 80049ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049ee:	4631      	mov	r1, r6
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b8      	blx	r7
 80049f4:	3001      	adds	r0, #1
 80049f6:	f43f af42 	beq.w	800487e <_printf_float+0xb6>
 80049fa:	f04f 0900 	mov.w	r9, #0
 80049fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a02:	f104 0a1a 	add.w	sl, r4, #26
 8004a06:	45c8      	cmp	r8, r9
 8004a08:	dc09      	bgt.n	8004a1e <_printf_float+0x256>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	079b      	lsls	r3, r3, #30
 8004a0e:	f100 8102 	bmi.w	8004c16 <_printf_float+0x44e>
 8004a12:	68e0      	ldr	r0, [r4, #12]
 8004a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a16:	4298      	cmp	r0, r3
 8004a18:	bfb8      	it	lt
 8004a1a:	4618      	movlt	r0, r3
 8004a1c:	e731      	b.n	8004882 <_printf_float+0xba>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	4652      	mov	r2, sl
 8004a22:	4631      	mov	r1, r6
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b8      	blx	r7
 8004a28:	3001      	adds	r0, #1
 8004a2a:	f43f af28 	beq.w	800487e <_printf_float+0xb6>
 8004a2e:	f109 0901 	add.w	r9, r9, #1
 8004a32:	e7e8      	b.n	8004a06 <_printf_float+0x23e>
 8004a34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	dc38      	bgt.n	8004aac <_printf_float+0x2e4>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4628      	mov	r0, r5
 8004a40:	4a19      	ldr	r2, [pc, #100]	@ (8004aa8 <_printf_float+0x2e0>)
 8004a42:	47b8      	blx	r7
 8004a44:	3001      	adds	r0, #1
 8004a46:	f43f af1a 	beq.w	800487e <_printf_float+0xb6>
 8004a4a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004a4e:	ea59 0303 	orrs.w	r3, r9, r3
 8004a52:	d102      	bne.n	8004a5a <_printf_float+0x292>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	07d9      	lsls	r1, r3, #31
 8004a58:	d5d7      	bpl.n	8004a0a <_printf_float+0x242>
 8004a5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4628      	mov	r0, r5
 8004a62:	47b8      	blx	r7
 8004a64:	3001      	adds	r0, #1
 8004a66:	f43f af0a 	beq.w	800487e <_printf_float+0xb6>
 8004a6a:	f04f 0a00 	mov.w	sl, #0
 8004a6e:	f104 0b1a 	add.w	fp, r4, #26
 8004a72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a74:	425b      	negs	r3, r3
 8004a76:	4553      	cmp	r3, sl
 8004a78:	dc01      	bgt.n	8004a7e <_printf_float+0x2b6>
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	e793      	b.n	80049a6 <_printf_float+0x1de>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	465a      	mov	r2, fp
 8004a82:	4631      	mov	r1, r6
 8004a84:	4628      	mov	r0, r5
 8004a86:	47b8      	blx	r7
 8004a88:	3001      	adds	r0, #1
 8004a8a:	f43f aef8 	beq.w	800487e <_printf_float+0xb6>
 8004a8e:	f10a 0a01 	add.w	sl, sl, #1
 8004a92:	e7ee      	b.n	8004a72 <_printf_float+0x2aa>
 8004a94:	7fefffff 	.word	0x7fefffff
 8004a98:	0800ac16 	.word	0x0800ac16
 8004a9c:	0800ac1a 	.word	0x0800ac1a
 8004aa0:	0800ac1e 	.word	0x0800ac1e
 8004aa4:	0800ac22 	.word	0x0800ac22
 8004aa8:	0800ac26 	.word	0x0800ac26
 8004aac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004aae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004ab2:	4553      	cmp	r3, sl
 8004ab4:	bfa8      	it	ge
 8004ab6:	4653      	movge	r3, sl
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	4699      	mov	r9, r3
 8004abc:	dc36      	bgt.n	8004b2c <_printf_float+0x364>
 8004abe:	f04f 0b00 	mov.w	fp, #0
 8004ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ac6:	f104 021a 	add.w	r2, r4, #26
 8004aca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004acc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ace:	eba3 0309 	sub.w	r3, r3, r9
 8004ad2:	455b      	cmp	r3, fp
 8004ad4:	dc31      	bgt.n	8004b3a <_printf_float+0x372>
 8004ad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ad8:	459a      	cmp	sl, r3
 8004ada:	dc3a      	bgt.n	8004b52 <_printf_float+0x38a>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	07da      	lsls	r2, r3, #31
 8004ae0:	d437      	bmi.n	8004b52 <_printf_float+0x38a>
 8004ae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ae4:	ebaa 0903 	sub.w	r9, sl, r3
 8004ae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004aea:	ebaa 0303 	sub.w	r3, sl, r3
 8004aee:	4599      	cmp	r9, r3
 8004af0:	bfa8      	it	ge
 8004af2:	4699      	movge	r9, r3
 8004af4:	f1b9 0f00 	cmp.w	r9, #0
 8004af8:	dc33      	bgt.n	8004b62 <_printf_float+0x39a>
 8004afa:	f04f 0800 	mov.w	r8, #0
 8004afe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b02:	f104 0b1a 	add.w	fp, r4, #26
 8004b06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b08:	ebaa 0303 	sub.w	r3, sl, r3
 8004b0c:	eba3 0309 	sub.w	r3, r3, r9
 8004b10:	4543      	cmp	r3, r8
 8004b12:	f77f af7a 	ble.w	8004a0a <_printf_float+0x242>
 8004b16:	2301      	movs	r3, #1
 8004b18:	465a      	mov	r2, fp
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	f43f aeac 	beq.w	800487e <_printf_float+0xb6>
 8004b26:	f108 0801 	add.w	r8, r8, #1
 8004b2a:	e7ec      	b.n	8004b06 <_printf_float+0x33e>
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4628      	mov	r0, r5
 8004b32:	47b8      	blx	r7
 8004b34:	3001      	adds	r0, #1
 8004b36:	d1c2      	bne.n	8004abe <_printf_float+0x2f6>
 8004b38:	e6a1      	b.n	800487e <_printf_float+0xb6>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	4631      	mov	r1, r6
 8004b3e:	4628      	mov	r0, r5
 8004b40:	920a      	str	r2, [sp, #40]	@ 0x28
 8004b42:	47b8      	blx	r7
 8004b44:	3001      	adds	r0, #1
 8004b46:	f43f ae9a 	beq.w	800487e <_printf_float+0xb6>
 8004b4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b4c:	f10b 0b01 	add.w	fp, fp, #1
 8004b50:	e7bb      	b.n	8004aca <_printf_float+0x302>
 8004b52:	4631      	mov	r1, r6
 8004b54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b58:	4628      	mov	r0, r5
 8004b5a:	47b8      	blx	r7
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d1c0      	bne.n	8004ae2 <_printf_float+0x31a>
 8004b60:	e68d      	b.n	800487e <_printf_float+0xb6>
 8004b62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b64:	464b      	mov	r3, r9
 8004b66:	4631      	mov	r1, r6
 8004b68:	4628      	mov	r0, r5
 8004b6a:	4442      	add	r2, r8
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d1c3      	bne.n	8004afa <_printf_float+0x332>
 8004b72:	e684      	b.n	800487e <_printf_float+0xb6>
 8004b74:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004b78:	f1ba 0f01 	cmp.w	sl, #1
 8004b7c:	dc01      	bgt.n	8004b82 <_printf_float+0x3ba>
 8004b7e:	07db      	lsls	r3, r3, #31
 8004b80:	d536      	bpl.n	8004bf0 <_printf_float+0x428>
 8004b82:	2301      	movs	r3, #1
 8004b84:	4642      	mov	r2, r8
 8004b86:	4631      	mov	r1, r6
 8004b88:	4628      	mov	r0, r5
 8004b8a:	47b8      	blx	r7
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	f43f ae76 	beq.w	800487e <_printf_float+0xb6>
 8004b92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b96:	4631      	mov	r1, r6
 8004b98:	4628      	mov	r0, r5
 8004b9a:	47b8      	blx	r7
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	f43f ae6e 	beq.w	800487e <_printf_float+0xb6>
 8004ba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bae:	f7fb fefb 	bl	80009a8 <__aeabi_dcmpeq>
 8004bb2:	b9c0      	cbnz	r0, 8004be6 <_printf_float+0x41e>
 8004bb4:	4653      	mov	r3, sl
 8004bb6:	f108 0201 	add.w	r2, r8, #1
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d10c      	bne.n	8004bde <_printf_float+0x416>
 8004bc4:	e65b      	b.n	800487e <_printf_float+0xb6>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	465a      	mov	r2, fp
 8004bca:	4631      	mov	r1, r6
 8004bcc:	4628      	mov	r0, r5
 8004bce:	47b8      	blx	r7
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	f43f ae54 	beq.w	800487e <_printf_float+0xb6>
 8004bd6:	f108 0801 	add.w	r8, r8, #1
 8004bda:	45d0      	cmp	r8, sl
 8004bdc:	dbf3      	blt.n	8004bc6 <_printf_float+0x3fe>
 8004bde:	464b      	mov	r3, r9
 8004be0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004be4:	e6e0      	b.n	80049a8 <_printf_float+0x1e0>
 8004be6:	f04f 0800 	mov.w	r8, #0
 8004bea:	f104 0b1a 	add.w	fp, r4, #26
 8004bee:	e7f4      	b.n	8004bda <_printf_float+0x412>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	e7e1      	b.n	8004bba <_printf_float+0x3f2>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	464a      	mov	r2, r9
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	47b8      	blx	r7
 8004c00:	3001      	adds	r0, #1
 8004c02:	f43f ae3c 	beq.w	800487e <_printf_float+0xb6>
 8004c06:	f108 0801 	add.w	r8, r8, #1
 8004c0a:	68e3      	ldr	r3, [r4, #12]
 8004c0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004c0e:	1a5b      	subs	r3, r3, r1
 8004c10:	4543      	cmp	r3, r8
 8004c12:	dcf0      	bgt.n	8004bf6 <_printf_float+0x42e>
 8004c14:	e6fd      	b.n	8004a12 <_printf_float+0x24a>
 8004c16:	f04f 0800 	mov.w	r8, #0
 8004c1a:	f104 0919 	add.w	r9, r4, #25
 8004c1e:	e7f4      	b.n	8004c0a <_printf_float+0x442>

08004c20 <_printf_common>:
 8004c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	4616      	mov	r6, r2
 8004c26:	4698      	mov	r8, r3
 8004c28:	688a      	ldr	r2, [r1, #8]
 8004c2a:	690b      	ldr	r3, [r1, #16]
 8004c2c:	4607      	mov	r7, r0
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	bfb8      	it	lt
 8004c32:	4613      	movlt	r3, r2
 8004c34:	6033      	str	r3, [r6, #0]
 8004c36:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c40:	b10a      	cbz	r2, 8004c46 <_printf_common+0x26>
 8004c42:	3301      	adds	r3, #1
 8004c44:	6033      	str	r3, [r6, #0]
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	0699      	lsls	r1, r3, #26
 8004c4a:	bf42      	ittt	mi
 8004c4c:	6833      	ldrmi	r3, [r6, #0]
 8004c4e:	3302      	addmi	r3, #2
 8004c50:	6033      	strmi	r3, [r6, #0]
 8004c52:	6825      	ldr	r5, [r4, #0]
 8004c54:	f015 0506 	ands.w	r5, r5, #6
 8004c58:	d106      	bne.n	8004c68 <_printf_common+0x48>
 8004c5a:	f104 0a19 	add.w	sl, r4, #25
 8004c5e:	68e3      	ldr	r3, [r4, #12]
 8004c60:	6832      	ldr	r2, [r6, #0]
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	42ab      	cmp	r3, r5
 8004c66:	dc2b      	bgt.n	8004cc0 <_printf_common+0xa0>
 8004c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c6c:	6822      	ldr	r2, [r4, #0]
 8004c6e:	3b00      	subs	r3, #0
 8004c70:	bf18      	it	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	0692      	lsls	r2, r2, #26
 8004c76:	d430      	bmi.n	8004cda <_printf_common+0xba>
 8004c78:	4641      	mov	r1, r8
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c80:	47c8      	blx	r9
 8004c82:	3001      	adds	r0, #1
 8004c84:	d023      	beq.n	8004cce <_printf_common+0xae>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	6922      	ldr	r2, [r4, #16]
 8004c8a:	f003 0306 	and.w	r3, r3, #6
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	bf14      	ite	ne
 8004c92:	2500      	movne	r5, #0
 8004c94:	6833      	ldreq	r3, [r6, #0]
 8004c96:	f04f 0600 	mov.w	r6, #0
 8004c9a:	bf08      	it	eq
 8004c9c:	68e5      	ldreq	r5, [r4, #12]
 8004c9e:	f104 041a 	add.w	r4, r4, #26
 8004ca2:	bf08      	it	eq
 8004ca4:	1aed      	subeq	r5, r5, r3
 8004ca6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004caa:	bf08      	it	eq
 8004cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	bfc4      	itt	gt
 8004cb4:	1a9b      	subgt	r3, r3, r2
 8004cb6:	18ed      	addgt	r5, r5, r3
 8004cb8:	42b5      	cmp	r5, r6
 8004cba:	d11a      	bne.n	8004cf2 <_printf_common+0xd2>
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e008      	b.n	8004cd2 <_printf_common+0xb2>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4652      	mov	r2, sl
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	47c8      	blx	r9
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d103      	bne.n	8004cd6 <_printf_common+0xb6>
 8004cce:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd6:	3501      	adds	r5, #1
 8004cd8:	e7c1      	b.n	8004c5e <_printf_common+0x3e>
 8004cda:	2030      	movs	r0, #48	@ 0x30
 8004cdc:	18e1      	adds	r1, r4, r3
 8004cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ce8:	4422      	add	r2, r4
 8004cea:	3302      	adds	r3, #2
 8004cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cf0:	e7c2      	b.n	8004c78 <_printf_common+0x58>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	47c8      	blx	r9
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d0e6      	beq.n	8004cce <_printf_common+0xae>
 8004d00:	3601      	adds	r6, #1
 8004d02:	e7d9      	b.n	8004cb8 <_printf_common+0x98>

08004d04 <_printf_i>:
 8004d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	7e0f      	ldrb	r7, [r1, #24]
 8004d0a:	4691      	mov	r9, r2
 8004d0c:	2f78      	cmp	r7, #120	@ 0x78
 8004d0e:	4680      	mov	r8, r0
 8004d10:	460c      	mov	r4, r1
 8004d12:	469a      	mov	sl, r3
 8004d14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d1a:	d807      	bhi.n	8004d2c <_printf_i+0x28>
 8004d1c:	2f62      	cmp	r7, #98	@ 0x62
 8004d1e:	d80a      	bhi.n	8004d36 <_printf_i+0x32>
 8004d20:	2f00      	cmp	r7, #0
 8004d22:	f000 80d3 	beq.w	8004ecc <_printf_i+0x1c8>
 8004d26:	2f58      	cmp	r7, #88	@ 0x58
 8004d28:	f000 80ba 	beq.w	8004ea0 <_printf_i+0x19c>
 8004d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d34:	e03a      	b.n	8004dac <_printf_i+0xa8>
 8004d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d3a:	2b15      	cmp	r3, #21
 8004d3c:	d8f6      	bhi.n	8004d2c <_printf_i+0x28>
 8004d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8004d44 <_printf_i+0x40>)
 8004d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d44:	08004d9d 	.word	0x08004d9d
 8004d48:	08004db1 	.word	0x08004db1
 8004d4c:	08004d2d 	.word	0x08004d2d
 8004d50:	08004d2d 	.word	0x08004d2d
 8004d54:	08004d2d 	.word	0x08004d2d
 8004d58:	08004d2d 	.word	0x08004d2d
 8004d5c:	08004db1 	.word	0x08004db1
 8004d60:	08004d2d 	.word	0x08004d2d
 8004d64:	08004d2d 	.word	0x08004d2d
 8004d68:	08004d2d 	.word	0x08004d2d
 8004d6c:	08004d2d 	.word	0x08004d2d
 8004d70:	08004eb3 	.word	0x08004eb3
 8004d74:	08004ddb 	.word	0x08004ddb
 8004d78:	08004e6d 	.word	0x08004e6d
 8004d7c:	08004d2d 	.word	0x08004d2d
 8004d80:	08004d2d 	.word	0x08004d2d
 8004d84:	08004ed5 	.word	0x08004ed5
 8004d88:	08004d2d 	.word	0x08004d2d
 8004d8c:	08004ddb 	.word	0x08004ddb
 8004d90:	08004d2d 	.word	0x08004d2d
 8004d94:	08004d2d 	.word	0x08004d2d
 8004d98:	08004e75 	.word	0x08004e75
 8004d9c:	6833      	ldr	r3, [r6, #0]
 8004d9e:	1d1a      	adds	r2, r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6032      	str	r2, [r6, #0]
 8004da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004dac:	2301      	movs	r3, #1
 8004dae:	e09e      	b.n	8004eee <_printf_i+0x1ea>
 8004db0:	6833      	ldr	r3, [r6, #0]
 8004db2:	6820      	ldr	r0, [r4, #0]
 8004db4:	1d19      	adds	r1, r3, #4
 8004db6:	6031      	str	r1, [r6, #0]
 8004db8:	0606      	lsls	r6, r0, #24
 8004dba:	d501      	bpl.n	8004dc0 <_printf_i+0xbc>
 8004dbc:	681d      	ldr	r5, [r3, #0]
 8004dbe:	e003      	b.n	8004dc8 <_printf_i+0xc4>
 8004dc0:	0645      	lsls	r5, r0, #25
 8004dc2:	d5fb      	bpl.n	8004dbc <_printf_i+0xb8>
 8004dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	da03      	bge.n	8004dd4 <_printf_i+0xd0>
 8004dcc:	232d      	movs	r3, #45	@ 0x2d
 8004dce:	426d      	negs	r5, r5
 8004dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dd4:	230a      	movs	r3, #10
 8004dd6:	4859      	ldr	r0, [pc, #356]	@ (8004f3c <_printf_i+0x238>)
 8004dd8:	e011      	b.n	8004dfe <_printf_i+0xfa>
 8004dda:	6821      	ldr	r1, [r4, #0]
 8004ddc:	6833      	ldr	r3, [r6, #0]
 8004dde:	0608      	lsls	r0, r1, #24
 8004de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004de4:	d402      	bmi.n	8004dec <_printf_i+0xe8>
 8004de6:	0649      	lsls	r1, r1, #25
 8004de8:	bf48      	it	mi
 8004dea:	b2ad      	uxthmi	r5, r5
 8004dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dee:	6033      	str	r3, [r6, #0]
 8004df0:	bf14      	ite	ne
 8004df2:	230a      	movne	r3, #10
 8004df4:	2308      	moveq	r3, #8
 8004df6:	4851      	ldr	r0, [pc, #324]	@ (8004f3c <_printf_i+0x238>)
 8004df8:	2100      	movs	r1, #0
 8004dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dfe:	6866      	ldr	r6, [r4, #4]
 8004e00:	2e00      	cmp	r6, #0
 8004e02:	bfa8      	it	ge
 8004e04:	6821      	ldrge	r1, [r4, #0]
 8004e06:	60a6      	str	r6, [r4, #8]
 8004e08:	bfa4      	itt	ge
 8004e0a:	f021 0104 	bicge.w	r1, r1, #4
 8004e0e:	6021      	strge	r1, [r4, #0]
 8004e10:	b90d      	cbnz	r5, 8004e16 <_printf_i+0x112>
 8004e12:	2e00      	cmp	r6, #0
 8004e14:	d04b      	beq.n	8004eae <_printf_i+0x1aa>
 8004e16:	4616      	mov	r6, r2
 8004e18:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e1c:	fb03 5711 	mls	r7, r3, r1, r5
 8004e20:	5dc7      	ldrb	r7, [r0, r7]
 8004e22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e26:	462f      	mov	r7, r5
 8004e28:	42bb      	cmp	r3, r7
 8004e2a:	460d      	mov	r5, r1
 8004e2c:	d9f4      	bls.n	8004e18 <_printf_i+0x114>
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d10b      	bne.n	8004e4a <_printf_i+0x146>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	07df      	lsls	r7, r3, #31
 8004e36:	d508      	bpl.n	8004e4a <_printf_i+0x146>
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	6861      	ldr	r1, [r4, #4]
 8004e3c:	4299      	cmp	r1, r3
 8004e3e:	bfde      	ittt	le
 8004e40:	2330      	movle	r3, #48	@ 0x30
 8004e42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e4a:	1b92      	subs	r2, r2, r6
 8004e4c:	6122      	str	r2, [r4, #16]
 8004e4e:	464b      	mov	r3, r9
 8004e50:	4621      	mov	r1, r4
 8004e52:	4640      	mov	r0, r8
 8004e54:	f8cd a000 	str.w	sl, [sp]
 8004e58:	aa03      	add	r2, sp, #12
 8004e5a:	f7ff fee1 	bl	8004c20 <_printf_common>
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d14a      	bne.n	8004ef8 <_printf_i+0x1f4>
 8004e62:	f04f 30ff 	mov.w	r0, #4294967295
 8004e66:	b004      	add	sp, #16
 8004e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	f043 0320 	orr.w	r3, r3, #32
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	2778      	movs	r7, #120	@ 0x78
 8004e76:	4832      	ldr	r0, [pc, #200]	@ (8004f40 <_printf_i+0x23c>)
 8004e78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	6831      	ldr	r1, [r6, #0]
 8004e80:	061f      	lsls	r7, r3, #24
 8004e82:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e86:	d402      	bmi.n	8004e8e <_printf_i+0x18a>
 8004e88:	065f      	lsls	r7, r3, #25
 8004e8a:	bf48      	it	mi
 8004e8c:	b2ad      	uxthmi	r5, r5
 8004e8e:	6031      	str	r1, [r6, #0]
 8004e90:	07d9      	lsls	r1, r3, #31
 8004e92:	bf44      	itt	mi
 8004e94:	f043 0320 	orrmi.w	r3, r3, #32
 8004e98:	6023      	strmi	r3, [r4, #0]
 8004e9a:	b11d      	cbz	r5, 8004ea4 <_printf_i+0x1a0>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	e7ab      	b.n	8004df8 <_printf_i+0xf4>
 8004ea0:	4826      	ldr	r0, [pc, #152]	@ (8004f3c <_printf_i+0x238>)
 8004ea2:	e7e9      	b.n	8004e78 <_printf_i+0x174>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	f023 0320 	bic.w	r3, r3, #32
 8004eaa:	6023      	str	r3, [r4, #0]
 8004eac:	e7f6      	b.n	8004e9c <_printf_i+0x198>
 8004eae:	4616      	mov	r6, r2
 8004eb0:	e7bd      	b.n	8004e2e <_printf_i+0x12a>
 8004eb2:	6833      	ldr	r3, [r6, #0]
 8004eb4:	6825      	ldr	r5, [r4, #0]
 8004eb6:	1d18      	adds	r0, r3, #4
 8004eb8:	6961      	ldr	r1, [r4, #20]
 8004eba:	6030      	str	r0, [r6, #0]
 8004ebc:	062e      	lsls	r6, r5, #24
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	d501      	bpl.n	8004ec6 <_printf_i+0x1c2>
 8004ec2:	6019      	str	r1, [r3, #0]
 8004ec4:	e002      	b.n	8004ecc <_printf_i+0x1c8>
 8004ec6:	0668      	lsls	r0, r5, #25
 8004ec8:	d5fb      	bpl.n	8004ec2 <_printf_i+0x1be>
 8004eca:	8019      	strh	r1, [r3, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4616      	mov	r6, r2
 8004ed0:	6123      	str	r3, [r4, #16]
 8004ed2:	e7bc      	b.n	8004e4e <_printf_i+0x14a>
 8004ed4:	6833      	ldr	r3, [r6, #0]
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	6032      	str	r2, [r6, #0]
 8004edc:	681e      	ldr	r6, [r3, #0]
 8004ede:	6862      	ldr	r2, [r4, #4]
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f000 fce8 	bl	80058b6 <memchr>
 8004ee6:	b108      	cbz	r0, 8004eec <_printf_i+0x1e8>
 8004ee8:	1b80      	subs	r0, r0, r6
 8004eea:	6060      	str	r0, [r4, #4]
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	6123      	str	r3, [r4, #16]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ef6:	e7aa      	b.n	8004e4e <_printf_i+0x14a>
 8004ef8:	4632      	mov	r2, r6
 8004efa:	4649      	mov	r1, r9
 8004efc:	4640      	mov	r0, r8
 8004efe:	6923      	ldr	r3, [r4, #16]
 8004f00:	47d0      	blx	sl
 8004f02:	3001      	adds	r0, #1
 8004f04:	d0ad      	beq.n	8004e62 <_printf_i+0x15e>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	079b      	lsls	r3, r3, #30
 8004f0a:	d413      	bmi.n	8004f34 <_printf_i+0x230>
 8004f0c:	68e0      	ldr	r0, [r4, #12]
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	4298      	cmp	r0, r3
 8004f12:	bfb8      	it	lt
 8004f14:	4618      	movlt	r0, r3
 8004f16:	e7a6      	b.n	8004e66 <_printf_i+0x162>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	4632      	mov	r2, r6
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	4640      	mov	r0, r8
 8004f20:	47d0      	blx	sl
 8004f22:	3001      	adds	r0, #1
 8004f24:	d09d      	beq.n	8004e62 <_printf_i+0x15e>
 8004f26:	3501      	adds	r5, #1
 8004f28:	68e3      	ldr	r3, [r4, #12]
 8004f2a:	9903      	ldr	r1, [sp, #12]
 8004f2c:	1a5b      	subs	r3, r3, r1
 8004f2e:	42ab      	cmp	r3, r5
 8004f30:	dcf2      	bgt.n	8004f18 <_printf_i+0x214>
 8004f32:	e7eb      	b.n	8004f0c <_printf_i+0x208>
 8004f34:	2500      	movs	r5, #0
 8004f36:	f104 0619 	add.w	r6, r4, #25
 8004f3a:	e7f5      	b.n	8004f28 <_printf_i+0x224>
 8004f3c:	0800ac28 	.word	0x0800ac28
 8004f40:	0800ac39 	.word	0x0800ac39

08004f44 <_scanf_float>:
 8004f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f48:	b087      	sub	sp, #28
 8004f4a:	9303      	str	r3, [sp, #12]
 8004f4c:	688b      	ldr	r3, [r1, #8]
 8004f4e:	4617      	mov	r7, r2
 8004f50:	1e5a      	subs	r2, r3, #1
 8004f52:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004f56:	bf82      	ittt	hi
 8004f58:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004f5c:	eb03 0b05 	addhi.w	fp, r3, r5
 8004f60:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004f64:	460a      	mov	r2, r1
 8004f66:	f04f 0500 	mov.w	r5, #0
 8004f6a:	bf88      	it	hi
 8004f6c:	608b      	strhi	r3, [r1, #8]
 8004f6e:	680b      	ldr	r3, [r1, #0]
 8004f70:	4680      	mov	r8, r0
 8004f72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004f76:	f842 3b1c 	str.w	r3, [r2], #28
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	bf98      	it	ls
 8004f7e:	f04f 0b00 	movls.w	fp, #0
 8004f82:	4616      	mov	r6, r2
 8004f84:	46aa      	mov	sl, r5
 8004f86:	46a9      	mov	r9, r5
 8004f88:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004f8c:	9201      	str	r2, [sp, #4]
 8004f8e:	9502      	str	r5, [sp, #8]
 8004f90:	68a2      	ldr	r2, [r4, #8]
 8004f92:	b152      	cbz	r2, 8004faa <_scanf_float+0x66>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b4e      	cmp	r3, #78	@ 0x4e
 8004f9a:	d865      	bhi.n	8005068 <_scanf_float+0x124>
 8004f9c:	2b40      	cmp	r3, #64	@ 0x40
 8004f9e:	d83d      	bhi.n	800501c <_scanf_float+0xd8>
 8004fa0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004fa4:	b2c8      	uxtb	r0, r1
 8004fa6:	280e      	cmp	r0, #14
 8004fa8:	d93b      	bls.n	8005022 <_scanf_float+0xde>
 8004faa:	f1b9 0f00 	cmp.w	r9, #0
 8004fae:	d003      	beq.n	8004fb8 <_scanf_float+0x74>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fbc:	f1ba 0f01 	cmp.w	sl, #1
 8004fc0:	f200 8118 	bhi.w	80051f4 <_scanf_float+0x2b0>
 8004fc4:	9b01      	ldr	r3, [sp, #4]
 8004fc6:	429e      	cmp	r6, r3
 8004fc8:	f200 8109 	bhi.w	80051de <_scanf_float+0x29a>
 8004fcc:	2001      	movs	r0, #1
 8004fce:	b007      	add	sp, #28
 8004fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004fd8:	2a0d      	cmp	r2, #13
 8004fda:	d8e6      	bhi.n	8004faa <_scanf_float+0x66>
 8004fdc:	a101      	add	r1, pc, #4	@ (adr r1, 8004fe4 <_scanf_float+0xa0>)
 8004fde:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	0800512b 	.word	0x0800512b
 8004fe8:	08004fab 	.word	0x08004fab
 8004fec:	08004fab 	.word	0x08004fab
 8004ff0:	08004fab 	.word	0x08004fab
 8004ff4:	0800518b 	.word	0x0800518b
 8004ff8:	08005163 	.word	0x08005163
 8004ffc:	08004fab 	.word	0x08004fab
 8005000:	08004fab 	.word	0x08004fab
 8005004:	08005139 	.word	0x08005139
 8005008:	08004fab 	.word	0x08004fab
 800500c:	08004fab 	.word	0x08004fab
 8005010:	08004fab 	.word	0x08004fab
 8005014:	08004fab 	.word	0x08004fab
 8005018:	080050f1 	.word	0x080050f1
 800501c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005020:	e7da      	b.n	8004fd8 <_scanf_float+0x94>
 8005022:	290e      	cmp	r1, #14
 8005024:	d8c1      	bhi.n	8004faa <_scanf_float+0x66>
 8005026:	a001      	add	r0, pc, #4	@ (adr r0, 800502c <_scanf_float+0xe8>)
 8005028:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800502c:	080050e1 	.word	0x080050e1
 8005030:	08004fab 	.word	0x08004fab
 8005034:	080050e1 	.word	0x080050e1
 8005038:	08005177 	.word	0x08005177
 800503c:	08004fab 	.word	0x08004fab
 8005040:	08005089 	.word	0x08005089
 8005044:	080050c7 	.word	0x080050c7
 8005048:	080050c7 	.word	0x080050c7
 800504c:	080050c7 	.word	0x080050c7
 8005050:	080050c7 	.word	0x080050c7
 8005054:	080050c7 	.word	0x080050c7
 8005058:	080050c7 	.word	0x080050c7
 800505c:	080050c7 	.word	0x080050c7
 8005060:	080050c7 	.word	0x080050c7
 8005064:	080050c7 	.word	0x080050c7
 8005068:	2b6e      	cmp	r3, #110	@ 0x6e
 800506a:	d809      	bhi.n	8005080 <_scanf_float+0x13c>
 800506c:	2b60      	cmp	r3, #96	@ 0x60
 800506e:	d8b1      	bhi.n	8004fd4 <_scanf_float+0x90>
 8005070:	2b54      	cmp	r3, #84	@ 0x54
 8005072:	d07b      	beq.n	800516c <_scanf_float+0x228>
 8005074:	2b59      	cmp	r3, #89	@ 0x59
 8005076:	d198      	bne.n	8004faa <_scanf_float+0x66>
 8005078:	2d07      	cmp	r5, #7
 800507a:	d196      	bne.n	8004faa <_scanf_float+0x66>
 800507c:	2508      	movs	r5, #8
 800507e:	e02c      	b.n	80050da <_scanf_float+0x196>
 8005080:	2b74      	cmp	r3, #116	@ 0x74
 8005082:	d073      	beq.n	800516c <_scanf_float+0x228>
 8005084:	2b79      	cmp	r3, #121	@ 0x79
 8005086:	e7f6      	b.n	8005076 <_scanf_float+0x132>
 8005088:	6821      	ldr	r1, [r4, #0]
 800508a:	05c8      	lsls	r0, r1, #23
 800508c:	d51b      	bpl.n	80050c6 <_scanf_float+0x182>
 800508e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005092:	6021      	str	r1, [r4, #0]
 8005094:	f109 0901 	add.w	r9, r9, #1
 8005098:	f1bb 0f00 	cmp.w	fp, #0
 800509c:	d003      	beq.n	80050a6 <_scanf_float+0x162>
 800509e:	3201      	adds	r2, #1
 80050a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80050a4:	60a2      	str	r2, [r4, #8]
 80050a6:	68a3      	ldr	r3, [r4, #8]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	60a3      	str	r3, [r4, #8]
 80050ac:	6923      	ldr	r3, [r4, #16]
 80050ae:	3301      	adds	r3, #1
 80050b0:	6123      	str	r3, [r4, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	f340 8087 	ble.w	80051cc <_scanf_float+0x288>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	e764      	b.n	8004f90 <_scanf_float+0x4c>
 80050c6:	eb1a 0105 	adds.w	r1, sl, r5
 80050ca:	f47f af6e 	bne.w	8004faa <_scanf_float+0x66>
 80050ce:	460d      	mov	r5, r1
 80050d0:	468a      	mov	sl, r1
 80050d2:	6822      	ldr	r2, [r4, #0]
 80050d4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80050d8:	6022      	str	r2, [r4, #0]
 80050da:	f806 3b01 	strb.w	r3, [r6], #1
 80050de:	e7e2      	b.n	80050a6 <_scanf_float+0x162>
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	0610      	lsls	r0, r2, #24
 80050e4:	f57f af61 	bpl.w	8004faa <_scanf_float+0x66>
 80050e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050ec:	6022      	str	r2, [r4, #0]
 80050ee:	e7f4      	b.n	80050da <_scanf_float+0x196>
 80050f0:	f1ba 0f00 	cmp.w	sl, #0
 80050f4:	d10e      	bne.n	8005114 <_scanf_float+0x1d0>
 80050f6:	f1b9 0f00 	cmp.w	r9, #0
 80050fa:	d10e      	bne.n	800511a <_scanf_float+0x1d6>
 80050fc:	6822      	ldr	r2, [r4, #0]
 80050fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005102:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005106:	d108      	bne.n	800511a <_scanf_float+0x1d6>
 8005108:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800510c:	f04f 0a01 	mov.w	sl, #1
 8005110:	6022      	str	r2, [r4, #0]
 8005112:	e7e2      	b.n	80050da <_scanf_float+0x196>
 8005114:	f1ba 0f02 	cmp.w	sl, #2
 8005118:	d055      	beq.n	80051c6 <_scanf_float+0x282>
 800511a:	2d01      	cmp	r5, #1
 800511c:	d002      	beq.n	8005124 <_scanf_float+0x1e0>
 800511e:	2d04      	cmp	r5, #4
 8005120:	f47f af43 	bne.w	8004faa <_scanf_float+0x66>
 8005124:	3501      	adds	r5, #1
 8005126:	b2ed      	uxtb	r5, r5
 8005128:	e7d7      	b.n	80050da <_scanf_float+0x196>
 800512a:	f1ba 0f01 	cmp.w	sl, #1
 800512e:	f47f af3c 	bne.w	8004faa <_scanf_float+0x66>
 8005132:	f04f 0a02 	mov.w	sl, #2
 8005136:	e7d0      	b.n	80050da <_scanf_float+0x196>
 8005138:	b97d      	cbnz	r5, 800515a <_scanf_float+0x216>
 800513a:	f1b9 0f00 	cmp.w	r9, #0
 800513e:	f47f af37 	bne.w	8004fb0 <_scanf_float+0x6c>
 8005142:	6822      	ldr	r2, [r4, #0]
 8005144:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005148:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800514c:	f040 8103 	bne.w	8005356 <_scanf_float+0x412>
 8005150:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005154:	2501      	movs	r5, #1
 8005156:	6022      	str	r2, [r4, #0]
 8005158:	e7bf      	b.n	80050da <_scanf_float+0x196>
 800515a:	2d03      	cmp	r5, #3
 800515c:	d0e2      	beq.n	8005124 <_scanf_float+0x1e0>
 800515e:	2d05      	cmp	r5, #5
 8005160:	e7de      	b.n	8005120 <_scanf_float+0x1dc>
 8005162:	2d02      	cmp	r5, #2
 8005164:	f47f af21 	bne.w	8004faa <_scanf_float+0x66>
 8005168:	2503      	movs	r5, #3
 800516a:	e7b6      	b.n	80050da <_scanf_float+0x196>
 800516c:	2d06      	cmp	r5, #6
 800516e:	f47f af1c 	bne.w	8004faa <_scanf_float+0x66>
 8005172:	2507      	movs	r5, #7
 8005174:	e7b1      	b.n	80050da <_scanf_float+0x196>
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	0591      	lsls	r1, r2, #22
 800517a:	f57f af16 	bpl.w	8004faa <_scanf_float+0x66>
 800517e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005182:	6022      	str	r2, [r4, #0]
 8005184:	f8cd 9008 	str.w	r9, [sp, #8]
 8005188:	e7a7      	b.n	80050da <_scanf_float+0x196>
 800518a:	6822      	ldr	r2, [r4, #0]
 800518c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005190:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005194:	d006      	beq.n	80051a4 <_scanf_float+0x260>
 8005196:	0550      	lsls	r0, r2, #21
 8005198:	f57f af07 	bpl.w	8004faa <_scanf_float+0x66>
 800519c:	f1b9 0f00 	cmp.w	r9, #0
 80051a0:	f000 80d9 	beq.w	8005356 <_scanf_float+0x412>
 80051a4:	0591      	lsls	r1, r2, #22
 80051a6:	bf58      	it	pl
 80051a8:	9902      	ldrpl	r1, [sp, #8]
 80051aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80051ae:	bf58      	it	pl
 80051b0:	eba9 0101 	subpl.w	r1, r9, r1
 80051b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80051b8:	f04f 0900 	mov.w	r9, #0
 80051bc:	bf58      	it	pl
 80051be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80051c2:	6022      	str	r2, [r4, #0]
 80051c4:	e789      	b.n	80050da <_scanf_float+0x196>
 80051c6:	f04f 0a03 	mov.w	sl, #3
 80051ca:	e786      	b.n	80050da <_scanf_float+0x196>
 80051cc:	4639      	mov	r1, r7
 80051ce:	4640      	mov	r0, r8
 80051d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80051d4:	4798      	blx	r3
 80051d6:	2800      	cmp	r0, #0
 80051d8:	f43f aeda 	beq.w	8004f90 <_scanf_float+0x4c>
 80051dc:	e6e5      	b.n	8004faa <_scanf_float+0x66>
 80051de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80051e2:	463a      	mov	r2, r7
 80051e4:	4640      	mov	r0, r8
 80051e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051ea:	4798      	blx	r3
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	6123      	str	r3, [r4, #16]
 80051f2:	e6e7      	b.n	8004fc4 <_scanf_float+0x80>
 80051f4:	1e6b      	subs	r3, r5, #1
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d824      	bhi.n	8005244 <_scanf_float+0x300>
 80051fa:	2d02      	cmp	r5, #2
 80051fc:	d836      	bhi.n	800526c <_scanf_float+0x328>
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	429e      	cmp	r6, r3
 8005202:	f67f aee3 	bls.w	8004fcc <_scanf_float+0x88>
 8005206:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800520a:	463a      	mov	r2, r7
 800520c:	4640      	mov	r0, r8
 800520e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005212:	4798      	blx	r3
 8005214:	6923      	ldr	r3, [r4, #16]
 8005216:	3b01      	subs	r3, #1
 8005218:	6123      	str	r3, [r4, #16]
 800521a:	e7f0      	b.n	80051fe <_scanf_float+0x2ba>
 800521c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005220:	463a      	mov	r2, r7
 8005222:	4640      	mov	r0, r8
 8005224:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005228:	4798      	blx	r3
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	3b01      	subs	r3, #1
 800522e:	6123      	str	r3, [r4, #16]
 8005230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005234:	fa5f fa8a 	uxtb.w	sl, sl
 8005238:	f1ba 0f02 	cmp.w	sl, #2
 800523c:	d1ee      	bne.n	800521c <_scanf_float+0x2d8>
 800523e:	3d03      	subs	r5, #3
 8005240:	b2ed      	uxtb	r5, r5
 8005242:	1b76      	subs	r6, r6, r5
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	05da      	lsls	r2, r3, #23
 8005248:	d530      	bpl.n	80052ac <_scanf_float+0x368>
 800524a:	055b      	lsls	r3, r3, #21
 800524c:	d511      	bpl.n	8005272 <_scanf_float+0x32e>
 800524e:	9b01      	ldr	r3, [sp, #4]
 8005250:	429e      	cmp	r6, r3
 8005252:	f67f aebb 	bls.w	8004fcc <_scanf_float+0x88>
 8005256:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800525a:	463a      	mov	r2, r7
 800525c:	4640      	mov	r0, r8
 800525e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005262:	4798      	blx	r3
 8005264:	6923      	ldr	r3, [r4, #16]
 8005266:	3b01      	subs	r3, #1
 8005268:	6123      	str	r3, [r4, #16]
 800526a:	e7f0      	b.n	800524e <_scanf_float+0x30a>
 800526c:	46aa      	mov	sl, r5
 800526e:	46b3      	mov	fp, r6
 8005270:	e7de      	b.n	8005230 <_scanf_float+0x2ec>
 8005272:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	2965      	cmp	r1, #101	@ 0x65
 800527a:	f103 33ff 	add.w	r3, r3, #4294967295
 800527e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005282:	6123      	str	r3, [r4, #16]
 8005284:	d00c      	beq.n	80052a0 <_scanf_float+0x35c>
 8005286:	2945      	cmp	r1, #69	@ 0x45
 8005288:	d00a      	beq.n	80052a0 <_scanf_float+0x35c>
 800528a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800528e:	463a      	mov	r2, r7
 8005290:	4640      	mov	r0, r8
 8005292:	4798      	blx	r3
 8005294:	6923      	ldr	r3, [r4, #16]
 8005296:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800529a:	3b01      	subs	r3, #1
 800529c:	1eb5      	subs	r5, r6, #2
 800529e:	6123      	str	r3, [r4, #16]
 80052a0:	463a      	mov	r2, r7
 80052a2:	4640      	mov	r0, r8
 80052a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052a8:	4798      	blx	r3
 80052aa:	462e      	mov	r6, r5
 80052ac:	6822      	ldr	r2, [r4, #0]
 80052ae:	f012 0210 	ands.w	r2, r2, #16
 80052b2:	d001      	beq.n	80052b8 <_scanf_float+0x374>
 80052b4:	2000      	movs	r0, #0
 80052b6:	e68a      	b.n	8004fce <_scanf_float+0x8a>
 80052b8:	7032      	strb	r2, [r6, #0]
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c4:	d11c      	bne.n	8005300 <_scanf_float+0x3bc>
 80052c6:	9b02      	ldr	r3, [sp, #8]
 80052c8:	454b      	cmp	r3, r9
 80052ca:	eba3 0209 	sub.w	r2, r3, r9
 80052ce:	d123      	bne.n	8005318 <_scanf_float+0x3d4>
 80052d0:	2200      	movs	r2, #0
 80052d2:	4640      	mov	r0, r8
 80052d4:	9901      	ldr	r1, [sp, #4]
 80052d6:	f002 fcff 	bl	8007cd8 <_strtod_r>
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	6825      	ldr	r5, [r4, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f015 0f02 	tst.w	r5, #2
 80052e4:	4606      	mov	r6, r0
 80052e6:	460f      	mov	r7, r1
 80052e8:	f103 0204 	add.w	r2, r3, #4
 80052ec:	d01f      	beq.n	800532e <_scanf_float+0x3ea>
 80052ee:	9903      	ldr	r1, [sp, #12]
 80052f0:	600a      	str	r2, [r1, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	e9c3 6700 	strd	r6, r7, [r3]
 80052f8:	68e3      	ldr	r3, [r4, #12]
 80052fa:	3301      	adds	r3, #1
 80052fc:	60e3      	str	r3, [r4, #12]
 80052fe:	e7d9      	b.n	80052b4 <_scanf_float+0x370>
 8005300:	9b04      	ldr	r3, [sp, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0e4      	beq.n	80052d0 <_scanf_float+0x38c>
 8005306:	9905      	ldr	r1, [sp, #20]
 8005308:	230a      	movs	r3, #10
 800530a:	4640      	mov	r0, r8
 800530c:	3101      	adds	r1, #1
 800530e:	f002 fd63 	bl	8007dd8 <_strtol_r>
 8005312:	9b04      	ldr	r3, [sp, #16]
 8005314:	9e05      	ldr	r6, [sp, #20]
 8005316:	1ac2      	subs	r2, r0, r3
 8005318:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800531c:	429e      	cmp	r6, r3
 800531e:	bf28      	it	cs
 8005320:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005324:	4630      	mov	r0, r6
 8005326:	490d      	ldr	r1, [pc, #52]	@ (800535c <_scanf_float+0x418>)
 8005328:	f000 f94e 	bl	80055c8 <siprintf>
 800532c:	e7d0      	b.n	80052d0 <_scanf_float+0x38c>
 800532e:	076d      	lsls	r5, r5, #29
 8005330:	d4dd      	bmi.n	80052ee <_scanf_float+0x3aa>
 8005332:	9d03      	ldr	r5, [sp, #12]
 8005334:	602a      	str	r2, [r5, #0]
 8005336:	681d      	ldr	r5, [r3, #0]
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	f7fb fb66 	bl	8000a0c <__aeabi_dcmpun>
 8005340:	b120      	cbz	r0, 800534c <_scanf_float+0x408>
 8005342:	4807      	ldr	r0, [pc, #28]	@ (8005360 <_scanf_float+0x41c>)
 8005344:	f000 fad4 	bl	80058f0 <nanf>
 8005348:	6028      	str	r0, [r5, #0]
 800534a:	e7d5      	b.n	80052f8 <_scanf_float+0x3b4>
 800534c:	4630      	mov	r0, r6
 800534e:	4639      	mov	r1, r7
 8005350:	f7fb fbba 	bl	8000ac8 <__aeabi_d2f>
 8005354:	e7f8      	b.n	8005348 <_scanf_float+0x404>
 8005356:	f04f 0900 	mov.w	r9, #0
 800535a:	e62d      	b.n	8004fb8 <_scanf_float+0x74>
 800535c:	0800ac4a 	.word	0x0800ac4a
 8005360:	0800afe5 	.word	0x0800afe5

08005364 <std>:
 8005364:	2300      	movs	r3, #0
 8005366:	b510      	push	{r4, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	e9c0 3300 	strd	r3, r3, [r0]
 800536e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005372:	6083      	str	r3, [r0, #8]
 8005374:	8181      	strh	r1, [r0, #12]
 8005376:	6643      	str	r3, [r0, #100]	@ 0x64
 8005378:	81c2      	strh	r2, [r0, #14]
 800537a:	6183      	str	r3, [r0, #24]
 800537c:	4619      	mov	r1, r3
 800537e:	2208      	movs	r2, #8
 8005380:	305c      	adds	r0, #92	@ 0x5c
 8005382:	f000 fa19 	bl	80057b8 <memset>
 8005386:	4b0d      	ldr	r3, [pc, #52]	@ (80053bc <std+0x58>)
 8005388:	6224      	str	r4, [r4, #32]
 800538a:	6263      	str	r3, [r4, #36]	@ 0x24
 800538c:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <std+0x5c>)
 800538e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005390:	4b0c      	ldr	r3, [pc, #48]	@ (80053c4 <std+0x60>)
 8005392:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005394:	4b0c      	ldr	r3, [pc, #48]	@ (80053c8 <std+0x64>)
 8005396:	6323      	str	r3, [r4, #48]	@ 0x30
 8005398:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <std+0x68>)
 800539a:	429c      	cmp	r4, r3
 800539c:	d006      	beq.n	80053ac <std+0x48>
 800539e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053a2:	4294      	cmp	r4, r2
 80053a4:	d002      	beq.n	80053ac <std+0x48>
 80053a6:	33d0      	adds	r3, #208	@ 0xd0
 80053a8:	429c      	cmp	r4, r3
 80053aa:	d105      	bne.n	80053b8 <std+0x54>
 80053ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b4:	f000 ba7c 	b.w	80058b0 <__retarget_lock_init_recursive>
 80053b8:	bd10      	pop	{r4, pc}
 80053ba:	bf00      	nop
 80053bc:	08005609 	.word	0x08005609
 80053c0:	0800562b 	.word	0x0800562b
 80053c4:	08005663 	.word	0x08005663
 80053c8:	08005687 	.word	0x08005687
 80053cc:	20004148 	.word	0x20004148

080053d0 <stdio_exit_handler>:
 80053d0:	4a02      	ldr	r2, [pc, #8]	@ (80053dc <stdio_exit_handler+0xc>)
 80053d2:	4903      	ldr	r1, [pc, #12]	@ (80053e0 <stdio_exit_handler+0x10>)
 80053d4:	4803      	ldr	r0, [pc, #12]	@ (80053e4 <stdio_exit_handler+0x14>)
 80053d6:	f000 b869 	b.w	80054ac <_fwalk_sglue>
 80053da:	bf00      	nop
 80053dc:	20000030 	.word	0x20000030
 80053e0:	0800840d 	.word	0x0800840d
 80053e4:	20000040 	.word	0x20000040

080053e8 <cleanup_stdio>:
 80053e8:	6841      	ldr	r1, [r0, #4]
 80053ea:	4b0c      	ldr	r3, [pc, #48]	@ (800541c <cleanup_stdio+0x34>)
 80053ec:	b510      	push	{r4, lr}
 80053ee:	4299      	cmp	r1, r3
 80053f0:	4604      	mov	r4, r0
 80053f2:	d001      	beq.n	80053f8 <cleanup_stdio+0x10>
 80053f4:	f003 f80a 	bl	800840c <_fflush_r>
 80053f8:	68a1      	ldr	r1, [r4, #8]
 80053fa:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <cleanup_stdio+0x38>)
 80053fc:	4299      	cmp	r1, r3
 80053fe:	d002      	beq.n	8005406 <cleanup_stdio+0x1e>
 8005400:	4620      	mov	r0, r4
 8005402:	f003 f803 	bl	800840c <_fflush_r>
 8005406:	68e1      	ldr	r1, [r4, #12]
 8005408:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <cleanup_stdio+0x3c>)
 800540a:	4299      	cmp	r1, r3
 800540c:	d004      	beq.n	8005418 <cleanup_stdio+0x30>
 800540e:	4620      	mov	r0, r4
 8005410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005414:	f002 bffa 	b.w	800840c <_fflush_r>
 8005418:	bd10      	pop	{r4, pc}
 800541a:	bf00      	nop
 800541c:	20004148 	.word	0x20004148
 8005420:	200041b0 	.word	0x200041b0
 8005424:	20004218 	.word	0x20004218

08005428 <global_stdio_init.part.0>:
 8005428:	b510      	push	{r4, lr}
 800542a:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <global_stdio_init.part.0+0x30>)
 800542c:	4c0b      	ldr	r4, [pc, #44]	@ (800545c <global_stdio_init.part.0+0x34>)
 800542e:	4a0c      	ldr	r2, [pc, #48]	@ (8005460 <global_stdio_init.part.0+0x38>)
 8005430:	4620      	mov	r0, r4
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	2104      	movs	r1, #4
 8005436:	2200      	movs	r2, #0
 8005438:	f7ff ff94 	bl	8005364 <std>
 800543c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005440:	2201      	movs	r2, #1
 8005442:	2109      	movs	r1, #9
 8005444:	f7ff ff8e 	bl	8005364 <std>
 8005448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800544c:	2202      	movs	r2, #2
 800544e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005452:	2112      	movs	r1, #18
 8005454:	f7ff bf86 	b.w	8005364 <std>
 8005458:	20004280 	.word	0x20004280
 800545c:	20004148 	.word	0x20004148
 8005460:	080053d1 	.word	0x080053d1

08005464 <__sfp_lock_acquire>:
 8005464:	4801      	ldr	r0, [pc, #4]	@ (800546c <__sfp_lock_acquire+0x8>)
 8005466:	f000 ba24 	b.w	80058b2 <__retarget_lock_acquire_recursive>
 800546a:	bf00      	nop
 800546c:	20004289 	.word	0x20004289

08005470 <__sfp_lock_release>:
 8005470:	4801      	ldr	r0, [pc, #4]	@ (8005478 <__sfp_lock_release+0x8>)
 8005472:	f000 ba1f 	b.w	80058b4 <__retarget_lock_release_recursive>
 8005476:	bf00      	nop
 8005478:	20004289 	.word	0x20004289

0800547c <__sinit>:
 800547c:	b510      	push	{r4, lr}
 800547e:	4604      	mov	r4, r0
 8005480:	f7ff fff0 	bl	8005464 <__sfp_lock_acquire>
 8005484:	6a23      	ldr	r3, [r4, #32]
 8005486:	b11b      	cbz	r3, 8005490 <__sinit+0x14>
 8005488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800548c:	f7ff bff0 	b.w	8005470 <__sfp_lock_release>
 8005490:	4b04      	ldr	r3, [pc, #16]	@ (80054a4 <__sinit+0x28>)
 8005492:	6223      	str	r3, [r4, #32]
 8005494:	4b04      	ldr	r3, [pc, #16]	@ (80054a8 <__sinit+0x2c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1f5      	bne.n	8005488 <__sinit+0xc>
 800549c:	f7ff ffc4 	bl	8005428 <global_stdio_init.part.0>
 80054a0:	e7f2      	b.n	8005488 <__sinit+0xc>
 80054a2:	bf00      	nop
 80054a4:	080053e9 	.word	0x080053e9
 80054a8:	20004280 	.word	0x20004280

080054ac <_fwalk_sglue>:
 80054ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b0:	4607      	mov	r7, r0
 80054b2:	4688      	mov	r8, r1
 80054b4:	4614      	mov	r4, r2
 80054b6:	2600      	movs	r6, #0
 80054b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054bc:	f1b9 0901 	subs.w	r9, r9, #1
 80054c0:	d505      	bpl.n	80054ce <_fwalk_sglue+0x22>
 80054c2:	6824      	ldr	r4, [r4, #0]
 80054c4:	2c00      	cmp	r4, #0
 80054c6:	d1f7      	bne.n	80054b8 <_fwalk_sglue+0xc>
 80054c8:	4630      	mov	r0, r6
 80054ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ce:	89ab      	ldrh	r3, [r5, #12]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d907      	bls.n	80054e4 <_fwalk_sglue+0x38>
 80054d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054d8:	3301      	adds	r3, #1
 80054da:	d003      	beq.n	80054e4 <_fwalk_sglue+0x38>
 80054dc:	4629      	mov	r1, r5
 80054de:	4638      	mov	r0, r7
 80054e0:	47c0      	blx	r8
 80054e2:	4306      	orrs	r6, r0
 80054e4:	3568      	adds	r5, #104	@ 0x68
 80054e6:	e7e9      	b.n	80054bc <_fwalk_sglue+0x10>

080054e8 <iprintf>:
 80054e8:	b40f      	push	{r0, r1, r2, r3}
 80054ea:	b507      	push	{r0, r1, r2, lr}
 80054ec:	4906      	ldr	r1, [pc, #24]	@ (8005508 <iprintf+0x20>)
 80054ee:	ab04      	add	r3, sp, #16
 80054f0:	6808      	ldr	r0, [r1, #0]
 80054f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f6:	6881      	ldr	r1, [r0, #8]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	f002 fdef 	bl	80080dc <_vfiprintf_r>
 80054fe:	b003      	add	sp, #12
 8005500:	f85d eb04 	ldr.w	lr, [sp], #4
 8005504:	b004      	add	sp, #16
 8005506:	4770      	bx	lr
 8005508:	2000003c 	.word	0x2000003c

0800550c <_puts_r>:
 800550c:	6a03      	ldr	r3, [r0, #32]
 800550e:	b570      	push	{r4, r5, r6, lr}
 8005510:	4605      	mov	r5, r0
 8005512:	460e      	mov	r6, r1
 8005514:	6884      	ldr	r4, [r0, #8]
 8005516:	b90b      	cbnz	r3, 800551c <_puts_r+0x10>
 8005518:	f7ff ffb0 	bl	800547c <__sinit>
 800551c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800551e:	07db      	lsls	r3, r3, #31
 8005520:	d405      	bmi.n	800552e <_puts_r+0x22>
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	0598      	lsls	r0, r3, #22
 8005526:	d402      	bmi.n	800552e <_puts_r+0x22>
 8005528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800552a:	f000 f9c2 	bl	80058b2 <__retarget_lock_acquire_recursive>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	0719      	lsls	r1, r3, #28
 8005532:	d502      	bpl.n	800553a <_puts_r+0x2e>
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d135      	bne.n	80055a6 <_puts_r+0x9a>
 800553a:	4621      	mov	r1, r4
 800553c:	4628      	mov	r0, r5
 800553e:	f000 f8e5 	bl	800570c <__swsetup_r>
 8005542:	b380      	cbz	r0, 80055a6 <_puts_r+0x9a>
 8005544:	f04f 35ff 	mov.w	r5, #4294967295
 8005548:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800554a:	07da      	lsls	r2, r3, #31
 800554c:	d405      	bmi.n	800555a <_puts_r+0x4e>
 800554e:	89a3      	ldrh	r3, [r4, #12]
 8005550:	059b      	lsls	r3, r3, #22
 8005552:	d402      	bmi.n	800555a <_puts_r+0x4e>
 8005554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005556:	f000 f9ad 	bl	80058b4 <__retarget_lock_release_recursive>
 800555a:	4628      	mov	r0, r5
 800555c:	bd70      	pop	{r4, r5, r6, pc}
 800555e:	2b00      	cmp	r3, #0
 8005560:	da04      	bge.n	800556c <_puts_r+0x60>
 8005562:	69a2      	ldr	r2, [r4, #24]
 8005564:	429a      	cmp	r2, r3
 8005566:	dc17      	bgt.n	8005598 <_puts_r+0x8c>
 8005568:	290a      	cmp	r1, #10
 800556a:	d015      	beq.n	8005598 <_puts_r+0x8c>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	6022      	str	r2, [r4, #0]
 8005572:	7019      	strb	r1, [r3, #0]
 8005574:	68a3      	ldr	r3, [r4, #8]
 8005576:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800557a:	3b01      	subs	r3, #1
 800557c:	60a3      	str	r3, [r4, #8]
 800557e:	2900      	cmp	r1, #0
 8005580:	d1ed      	bne.n	800555e <_puts_r+0x52>
 8005582:	2b00      	cmp	r3, #0
 8005584:	da11      	bge.n	80055aa <_puts_r+0x9e>
 8005586:	4622      	mov	r2, r4
 8005588:	210a      	movs	r1, #10
 800558a:	4628      	mov	r0, r5
 800558c:	f000 f87f 	bl	800568e <__swbuf_r>
 8005590:	3001      	adds	r0, #1
 8005592:	d0d7      	beq.n	8005544 <_puts_r+0x38>
 8005594:	250a      	movs	r5, #10
 8005596:	e7d7      	b.n	8005548 <_puts_r+0x3c>
 8005598:	4622      	mov	r2, r4
 800559a:	4628      	mov	r0, r5
 800559c:	f000 f877 	bl	800568e <__swbuf_r>
 80055a0:	3001      	adds	r0, #1
 80055a2:	d1e7      	bne.n	8005574 <_puts_r+0x68>
 80055a4:	e7ce      	b.n	8005544 <_puts_r+0x38>
 80055a6:	3e01      	subs	r6, #1
 80055a8:	e7e4      	b.n	8005574 <_puts_r+0x68>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	6022      	str	r2, [r4, #0]
 80055b0:	220a      	movs	r2, #10
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	e7ee      	b.n	8005594 <_puts_r+0x88>
	...

080055b8 <puts>:
 80055b8:	4b02      	ldr	r3, [pc, #8]	@ (80055c4 <puts+0xc>)
 80055ba:	4601      	mov	r1, r0
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	f7ff bfa5 	b.w	800550c <_puts_r>
 80055c2:	bf00      	nop
 80055c4:	2000003c 	.word	0x2000003c

080055c8 <siprintf>:
 80055c8:	b40e      	push	{r1, r2, r3}
 80055ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055ce:	b500      	push	{lr}
 80055d0:	b09c      	sub	sp, #112	@ 0x70
 80055d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80055d4:	9002      	str	r0, [sp, #8]
 80055d6:	9006      	str	r0, [sp, #24]
 80055d8:	9107      	str	r1, [sp, #28]
 80055da:	9104      	str	r1, [sp, #16]
 80055dc:	4808      	ldr	r0, [pc, #32]	@ (8005600 <siprintf+0x38>)
 80055de:	4909      	ldr	r1, [pc, #36]	@ (8005604 <siprintf+0x3c>)
 80055e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055e4:	9105      	str	r1, [sp, #20]
 80055e6:	6800      	ldr	r0, [r0, #0]
 80055e8:	a902      	add	r1, sp, #8
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	f002 fc52 	bl	8007e94 <_svfiprintf_r>
 80055f0:	2200      	movs	r2, #0
 80055f2:	9b02      	ldr	r3, [sp, #8]
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	b01c      	add	sp, #112	@ 0x70
 80055f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055fc:	b003      	add	sp, #12
 80055fe:	4770      	bx	lr
 8005600:	2000003c 	.word	0x2000003c
 8005604:	ffff0208 	.word	0xffff0208

08005608 <__sread>:
 8005608:	b510      	push	{r4, lr}
 800560a:	460c      	mov	r4, r1
 800560c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005610:	f000 f900 	bl	8005814 <_read_r>
 8005614:	2800      	cmp	r0, #0
 8005616:	bfab      	itete	ge
 8005618:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800561a:	89a3      	ldrhlt	r3, [r4, #12]
 800561c:	181b      	addge	r3, r3, r0
 800561e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005622:	bfac      	ite	ge
 8005624:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005626:	81a3      	strhlt	r3, [r4, #12]
 8005628:	bd10      	pop	{r4, pc}

0800562a <__swrite>:
 800562a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562e:	461f      	mov	r7, r3
 8005630:	898b      	ldrh	r3, [r1, #12]
 8005632:	4605      	mov	r5, r0
 8005634:	05db      	lsls	r3, r3, #23
 8005636:	460c      	mov	r4, r1
 8005638:	4616      	mov	r6, r2
 800563a:	d505      	bpl.n	8005648 <__swrite+0x1e>
 800563c:	2302      	movs	r3, #2
 800563e:	2200      	movs	r2, #0
 8005640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005644:	f000 f8d4 	bl	80057f0 <_lseek_r>
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	4632      	mov	r2, r6
 800564c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005650:	81a3      	strh	r3, [r4, #12]
 8005652:	4628      	mov	r0, r5
 8005654:	463b      	mov	r3, r7
 8005656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800565a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800565e:	f000 b8eb 	b.w	8005838 <_write_r>

08005662 <__sseek>:
 8005662:	b510      	push	{r4, lr}
 8005664:	460c      	mov	r4, r1
 8005666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566a:	f000 f8c1 	bl	80057f0 <_lseek_r>
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	bf15      	itete	ne
 8005674:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005676:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800567a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800567e:	81a3      	strheq	r3, [r4, #12]
 8005680:	bf18      	it	ne
 8005682:	81a3      	strhne	r3, [r4, #12]
 8005684:	bd10      	pop	{r4, pc}

08005686 <__sclose>:
 8005686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800568a:	f000 b8a1 	b.w	80057d0 <_close_r>

0800568e <__swbuf_r>:
 800568e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005690:	460e      	mov	r6, r1
 8005692:	4614      	mov	r4, r2
 8005694:	4605      	mov	r5, r0
 8005696:	b118      	cbz	r0, 80056a0 <__swbuf_r+0x12>
 8005698:	6a03      	ldr	r3, [r0, #32]
 800569a:	b90b      	cbnz	r3, 80056a0 <__swbuf_r+0x12>
 800569c:	f7ff feee 	bl	800547c <__sinit>
 80056a0:	69a3      	ldr	r3, [r4, #24]
 80056a2:	60a3      	str	r3, [r4, #8]
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	071a      	lsls	r2, r3, #28
 80056a8:	d501      	bpl.n	80056ae <__swbuf_r+0x20>
 80056aa:	6923      	ldr	r3, [r4, #16]
 80056ac:	b943      	cbnz	r3, 80056c0 <__swbuf_r+0x32>
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f82b 	bl	800570c <__swsetup_r>
 80056b6:	b118      	cbz	r0, 80056c0 <__swbuf_r+0x32>
 80056b8:	f04f 37ff 	mov.w	r7, #4294967295
 80056bc:	4638      	mov	r0, r7
 80056be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	6922      	ldr	r2, [r4, #16]
 80056c4:	b2f6      	uxtb	r6, r6
 80056c6:	1a98      	subs	r0, r3, r2
 80056c8:	6963      	ldr	r3, [r4, #20]
 80056ca:	4637      	mov	r7, r6
 80056cc:	4283      	cmp	r3, r0
 80056ce:	dc05      	bgt.n	80056dc <__swbuf_r+0x4e>
 80056d0:	4621      	mov	r1, r4
 80056d2:	4628      	mov	r0, r5
 80056d4:	f002 fe9a 	bl	800840c <_fflush_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d1ed      	bne.n	80056b8 <__swbuf_r+0x2a>
 80056dc:	68a3      	ldr	r3, [r4, #8]
 80056de:	3b01      	subs	r3, #1
 80056e0:	60a3      	str	r3, [r4, #8]
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	6022      	str	r2, [r4, #0]
 80056e8:	701e      	strb	r6, [r3, #0]
 80056ea:	6962      	ldr	r2, [r4, #20]
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d004      	beq.n	80056fc <__swbuf_r+0x6e>
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	07db      	lsls	r3, r3, #31
 80056f6:	d5e1      	bpl.n	80056bc <__swbuf_r+0x2e>
 80056f8:	2e0a      	cmp	r6, #10
 80056fa:	d1df      	bne.n	80056bc <__swbuf_r+0x2e>
 80056fc:	4621      	mov	r1, r4
 80056fe:	4628      	mov	r0, r5
 8005700:	f002 fe84 	bl	800840c <_fflush_r>
 8005704:	2800      	cmp	r0, #0
 8005706:	d0d9      	beq.n	80056bc <__swbuf_r+0x2e>
 8005708:	e7d6      	b.n	80056b8 <__swbuf_r+0x2a>
	...

0800570c <__swsetup_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4b29      	ldr	r3, [pc, #164]	@ (80057b4 <__swsetup_r+0xa8>)
 8005710:	4605      	mov	r5, r0
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	460c      	mov	r4, r1
 8005716:	b118      	cbz	r0, 8005720 <__swsetup_r+0x14>
 8005718:	6a03      	ldr	r3, [r0, #32]
 800571a:	b90b      	cbnz	r3, 8005720 <__swsetup_r+0x14>
 800571c:	f7ff feae 	bl	800547c <__sinit>
 8005720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005724:	0719      	lsls	r1, r3, #28
 8005726:	d422      	bmi.n	800576e <__swsetup_r+0x62>
 8005728:	06da      	lsls	r2, r3, #27
 800572a:	d407      	bmi.n	800573c <__swsetup_r+0x30>
 800572c:	2209      	movs	r2, #9
 800572e:	602a      	str	r2, [r5, #0]
 8005730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	81a3      	strh	r3, [r4, #12]
 800573a:	e033      	b.n	80057a4 <__swsetup_r+0x98>
 800573c:	0758      	lsls	r0, r3, #29
 800573e:	d512      	bpl.n	8005766 <__swsetup_r+0x5a>
 8005740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005742:	b141      	cbz	r1, 8005756 <__swsetup_r+0x4a>
 8005744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005748:	4299      	cmp	r1, r3
 800574a:	d002      	beq.n	8005752 <__swsetup_r+0x46>
 800574c:	4628      	mov	r0, r5
 800574e:	f000 ff23 	bl	8006598 <_free_r>
 8005752:	2300      	movs	r3, #0
 8005754:	6363      	str	r3, [r4, #52]	@ 0x34
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800575c:	81a3      	strh	r3, [r4, #12]
 800575e:	2300      	movs	r3, #0
 8005760:	6063      	str	r3, [r4, #4]
 8005762:	6923      	ldr	r3, [r4, #16]
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	f043 0308 	orr.w	r3, r3, #8
 800576c:	81a3      	strh	r3, [r4, #12]
 800576e:	6923      	ldr	r3, [r4, #16]
 8005770:	b94b      	cbnz	r3, 8005786 <__swsetup_r+0x7a>
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800577c:	d003      	beq.n	8005786 <__swsetup_r+0x7a>
 800577e:	4621      	mov	r1, r4
 8005780:	4628      	mov	r0, r5
 8005782:	f002 fe90 	bl	80084a6 <__smakebuf_r>
 8005786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800578a:	f013 0201 	ands.w	r2, r3, #1
 800578e:	d00a      	beq.n	80057a6 <__swsetup_r+0x9a>
 8005790:	2200      	movs	r2, #0
 8005792:	60a2      	str	r2, [r4, #8]
 8005794:	6962      	ldr	r2, [r4, #20]
 8005796:	4252      	negs	r2, r2
 8005798:	61a2      	str	r2, [r4, #24]
 800579a:	6922      	ldr	r2, [r4, #16]
 800579c:	b942      	cbnz	r2, 80057b0 <__swsetup_r+0xa4>
 800579e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80057a2:	d1c5      	bne.n	8005730 <__swsetup_r+0x24>
 80057a4:	bd38      	pop	{r3, r4, r5, pc}
 80057a6:	0799      	lsls	r1, r3, #30
 80057a8:	bf58      	it	pl
 80057aa:	6962      	ldrpl	r2, [r4, #20]
 80057ac:	60a2      	str	r2, [r4, #8]
 80057ae:	e7f4      	b.n	800579a <__swsetup_r+0x8e>
 80057b0:	2000      	movs	r0, #0
 80057b2:	e7f7      	b.n	80057a4 <__swsetup_r+0x98>
 80057b4:	2000003c 	.word	0x2000003c

080057b8 <memset>:
 80057b8:	4603      	mov	r3, r0
 80057ba:	4402      	add	r2, r0
 80057bc:	4293      	cmp	r3, r2
 80057be:	d100      	bne.n	80057c2 <memset+0xa>
 80057c0:	4770      	bx	lr
 80057c2:	f803 1b01 	strb.w	r1, [r3], #1
 80057c6:	e7f9      	b.n	80057bc <memset+0x4>

080057c8 <_localeconv_r>:
 80057c8:	4800      	ldr	r0, [pc, #0]	@ (80057cc <_localeconv_r+0x4>)
 80057ca:	4770      	bx	lr
 80057cc:	2000017c 	.word	0x2000017c

080057d0 <_close_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	2300      	movs	r3, #0
 80057d4:	4d05      	ldr	r5, [pc, #20]	@ (80057ec <_close_r+0x1c>)
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	602b      	str	r3, [r5, #0]
 80057dc:	f7fc f84b 	bl	8001876 <_close>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_close_r+0x1a>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_close_r+0x1a>
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	20004284 	.word	0x20004284

080057f0 <_lseek_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4604      	mov	r4, r0
 80057f4:	4608      	mov	r0, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	2200      	movs	r2, #0
 80057fa:	4d05      	ldr	r5, [pc, #20]	@ (8005810 <_lseek_r+0x20>)
 80057fc:	602a      	str	r2, [r5, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	f7fc f85d 	bl	80018be <_lseek>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d102      	bne.n	800580e <_lseek_r+0x1e>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	b103      	cbz	r3, 800580e <_lseek_r+0x1e>
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	20004284 	.word	0x20004284

08005814 <_read_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4604      	mov	r4, r0
 8005818:	4608      	mov	r0, r1
 800581a:	4611      	mov	r1, r2
 800581c:	2200      	movs	r2, #0
 800581e:	4d05      	ldr	r5, [pc, #20]	@ (8005834 <_read_r+0x20>)
 8005820:	602a      	str	r2, [r5, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	f7fc f80a 	bl	800183c <_read>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d102      	bne.n	8005832 <_read_r+0x1e>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	b103      	cbz	r3, 8005832 <_read_r+0x1e>
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	20004284 	.word	0x20004284

08005838 <_write_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	4611      	mov	r1, r2
 8005840:	2200      	movs	r2, #0
 8005842:	4d05      	ldr	r5, [pc, #20]	@ (8005858 <_write_r+0x20>)
 8005844:	602a      	str	r2, [r5, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	f7fd fcac 	bl	80031a4 <_write>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_write_r+0x1e>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	b103      	cbz	r3, 8005856 <_write_r+0x1e>
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	20004284 	.word	0x20004284

0800585c <__errno>:
 800585c:	4b01      	ldr	r3, [pc, #4]	@ (8005864 <__errno+0x8>)
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	2000003c 	.word	0x2000003c

08005868 <__libc_init_array>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	2600      	movs	r6, #0
 800586c:	4d0c      	ldr	r5, [pc, #48]	@ (80058a0 <__libc_init_array+0x38>)
 800586e:	4c0d      	ldr	r4, [pc, #52]	@ (80058a4 <__libc_init_array+0x3c>)
 8005870:	1b64      	subs	r4, r4, r5
 8005872:	10a4      	asrs	r4, r4, #2
 8005874:	42a6      	cmp	r6, r4
 8005876:	d109      	bne.n	800588c <__libc_init_array+0x24>
 8005878:	f004 f924 	bl	8009ac4 <_init>
 800587c:	2600      	movs	r6, #0
 800587e:	4d0a      	ldr	r5, [pc, #40]	@ (80058a8 <__libc_init_array+0x40>)
 8005880:	4c0a      	ldr	r4, [pc, #40]	@ (80058ac <__libc_init_array+0x44>)
 8005882:	1b64      	subs	r4, r4, r5
 8005884:	10a4      	asrs	r4, r4, #2
 8005886:	42a6      	cmp	r6, r4
 8005888:	d105      	bne.n	8005896 <__libc_init_array+0x2e>
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005890:	4798      	blx	r3
 8005892:	3601      	adds	r6, #1
 8005894:	e7ee      	b.n	8005874 <__libc_init_array+0xc>
 8005896:	f855 3b04 	ldr.w	r3, [r5], #4
 800589a:	4798      	blx	r3
 800589c:	3601      	adds	r6, #1
 800589e:	e7f2      	b.n	8005886 <__libc_init_array+0x1e>
 80058a0:	0800b068 	.word	0x0800b068
 80058a4:	0800b068 	.word	0x0800b068
 80058a8:	0800b068 	.word	0x0800b068
 80058ac:	0800b06c 	.word	0x0800b06c

080058b0 <__retarget_lock_init_recursive>:
 80058b0:	4770      	bx	lr

080058b2 <__retarget_lock_acquire_recursive>:
 80058b2:	4770      	bx	lr

080058b4 <__retarget_lock_release_recursive>:
 80058b4:	4770      	bx	lr

080058b6 <memchr>:
 80058b6:	4603      	mov	r3, r0
 80058b8:	b510      	push	{r4, lr}
 80058ba:	b2c9      	uxtb	r1, r1
 80058bc:	4402      	add	r2, r0
 80058be:	4293      	cmp	r3, r2
 80058c0:	4618      	mov	r0, r3
 80058c2:	d101      	bne.n	80058c8 <memchr+0x12>
 80058c4:	2000      	movs	r0, #0
 80058c6:	e003      	b.n	80058d0 <memchr+0x1a>
 80058c8:	7804      	ldrb	r4, [r0, #0]
 80058ca:	3301      	adds	r3, #1
 80058cc:	428c      	cmp	r4, r1
 80058ce:	d1f6      	bne.n	80058be <memchr+0x8>
 80058d0:	bd10      	pop	{r4, pc}

080058d2 <memcpy>:
 80058d2:	440a      	add	r2, r1
 80058d4:	4291      	cmp	r1, r2
 80058d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80058da:	d100      	bne.n	80058de <memcpy+0xc>
 80058dc:	4770      	bx	lr
 80058de:	b510      	push	{r4, lr}
 80058e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058e4:	4291      	cmp	r1, r2
 80058e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ea:	d1f9      	bne.n	80058e0 <memcpy+0xe>
 80058ec:	bd10      	pop	{r4, pc}
	...

080058f0 <nanf>:
 80058f0:	4800      	ldr	r0, [pc, #0]	@ (80058f4 <nanf+0x4>)
 80058f2:	4770      	bx	lr
 80058f4:	7fc00000 	.word	0x7fc00000

080058f8 <quorem>:
 80058f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fc:	6903      	ldr	r3, [r0, #16]
 80058fe:	690c      	ldr	r4, [r1, #16]
 8005900:	4607      	mov	r7, r0
 8005902:	42a3      	cmp	r3, r4
 8005904:	db7e      	blt.n	8005a04 <quorem+0x10c>
 8005906:	3c01      	subs	r4, #1
 8005908:	00a3      	lsls	r3, r4, #2
 800590a:	f100 0514 	add.w	r5, r0, #20
 800590e:	f101 0814 	add.w	r8, r1, #20
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800591e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005922:	3301      	adds	r3, #1
 8005924:	429a      	cmp	r2, r3
 8005926:	fbb2 f6f3 	udiv	r6, r2, r3
 800592a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800592e:	d32e      	bcc.n	800598e <quorem+0x96>
 8005930:	f04f 0a00 	mov.w	sl, #0
 8005934:	46c4      	mov	ip, r8
 8005936:	46ae      	mov	lr, r5
 8005938:	46d3      	mov	fp, sl
 800593a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800593e:	b298      	uxth	r0, r3
 8005940:	fb06 a000 	mla	r0, r6, r0, sl
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	0c02      	lsrs	r2, r0, #16
 8005948:	fb06 2303 	mla	r3, r6, r3, r2
 800594c:	f8de 2000 	ldr.w	r2, [lr]
 8005950:	b280      	uxth	r0, r0
 8005952:	b292      	uxth	r2, r2
 8005954:	1a12      	subs	r2, r2, r0
 8005956:	445a      	add	r2, fp
 8005958:	f8de 0000 	ldr.w	r0, [lr]
 800595c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005960:	b29b      	uxth	r3, r3
 8005962:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005966:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800596a:	b292      	uxth	r2, r2
 800596c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005970:	45e1      	cmp	r9, ip
 8005972:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005976:	f84e 2b04 	str.w	r2, [lr], #4
 800597a:	d2de      	bcs.n	800593a <quorem+0x42>
 800597c:	9b00      	ldr	r3, [sp, #0]
 800597e:	58eb      	ldr	r3, [r5, r3]
 8005980:	b92b      	cbnz	r3, 800598e <quorem+0x96>
 8005982:	9b01      	ldr	r3, [sp, #4]
 8005984:	3b04      	subs	r3, #4
 8005986:	429d      	cmp	r5, r3
 8005988:	461a      	mov	r2, r3
 800598a:	d32f      	bcc.n	80059ec <quorem+0xf4>
 800598c:	613c      	str	r4, [r7, #16]
 800598e:	4638      	mov	r0, r7
 8005990:	f001 f9c2 	bl	8006d18 <__mcmp>
 8005994:	2800      	cmp	r0, #0
 8005996:	db25      	blt.n	80059e4 <quorem+0xec>
 8005998:	4629      	mov	r1, r5
 800599a:	2000      	movs	r0, #0
 800599c:	f858 2b04 	ldr.w	r2, [r8], #4
 80059a0:	f8d1 c000 	ldr.w	ip, [r1]
 80059a4:	fa1f fe82 	uxth.w	lr, r2
 80059a8:	fa1f f38c 	uxth.w	r3, ip
 80059ac:	eba3 030e 	sub.w	r3, r3, lr
 80059b0:	4403      	add	r3, r0
 80059b2:	0c12      	lsrs	r2, r2, #16
 80059b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80059b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80059bc:	b29b      	uxth	r3, r3
 80059be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059c2:	45c1      	cmp	r9, r8
 80059c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059c8:	f841 3b04 	str.w	r3, [r1], #4
 80059cc:	d2e6      	bcs.n	800599c <quorem+0xa4>
 80059ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059d6:	b922      	cbnz	r2, 80059e2 <quorem+0xea>
 80059d8:	3b04      	subs	r3, #4
 80059da:	429d      	cmp	r5, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	d30b      	bcc.n	80059f8 <quorem+0x100>
 80059e0:	613c      	str	r4, [r7, #16]
 80059e2:	3601      	adds	r6, #1
 80059e4:	4630      	mov	r0, r6
 80059e6:	b003      	add	sp, #12
 80059e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ec:	6812      	ldr	r2, [r2, #0]
 80059ee:	3b04      	subs	r3, #4
 80059f0:	2a00      	cmp	r2, #0
 80059f2:	d1cb      	bne.n	800598c <quorem+0x94>
 80059f4:	3c01      	subs	r4, #1
 80059f6:	e7c6      	b.n	8005986 <quorem+0x8e>
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	3b04      	subs	r3, #4
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	d1ef      	bne.n	80059e0 <quorem+0xe8>
 8005a00:	3c01      	subs	r4, #1
 8005a02:	e7ea      	b.n	80059da <quorem+0xe2>
 8005a04:	2000      	movs	r0, #0
 8005a06:	e7ee      	b.n	80059e6 <quorem+0xee>

08005a08 <_dtoa_r>:
 8005a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0c:	4614      	mov	r4, r2
 8005a0e:	461d      	mov	r5, r3
 8005a10:	69c7      	ldr	r7, [r0, #28]
 8005a12:	b097      	sub	sp, #92	@ 0x5c
 8005a14:	4683      	mov	fp, r0
 8005a16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005a1a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005a1c:	b97f      	cbnz	r7, 8005a3e <_dtoa_r+0x36>
 8005a1e:	2010      	movs	r0, #16
 8005a20:	f000 fe02 	bl	8006628 <malloc>
 8005a24:	4602      	mov	r2, r0
 8005a26:	f8cb 001c 	str.w	r0, [fp, #28]
 8005a2a:	b920      	cbnz	r0, 8005a36 <_dtoa_r+0x2e>
 8005a2c:	21ef      	movs	r1, #239	@ 0xef
 8005a2e:	4ba8      	ldr	r3, [pc, #672]	@ (8005cd0 <_dtoa_r+0x2c8>)
 8005a30:	48a8      	ldr	r0, [pc, #672]	@ (8005cd4 <_dtoa_r+0x2cc>)
 8005a32:	f002 fdd9 	bl	80085e8 <__assert_func>
 8005a36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005a3a:	6007      	str	r7, [r0, #0]
 8005a3c:	60c7      	str	r7, [r0, #12]
 8005a3e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a42:	6819      	ldr	r1, [r3, #0]
 8005a44:	b159      	cbz	r1, 8005a5e <_dtoa_r+0x56>
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4093      	lsls	r3, r2
 8005a4c:	604a      	str	r2, [r1, #4]
 8005a4e:	608b      	str	r3, [r1, #8]
 8005a50:	4658      	mov	r0, fp
 8005a52:	f000 fedf 	bl	8006814 <_Bfree>
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	1e2b      	subs	r3, r5, #0
 8005a60:	bfaf      	iteee	ge
 8005a62:	2300      	movge	r3, #0
 8005a64:	2201      	movlt	r2, #1
 8005a66:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005a6a:	9303      	strlt	r3, [sp, #12]
 8005a6c:	bfa8      	it	ge
 8005a6e:	6033      	strge	r3, [r6, #0]
 8005a70:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a74:	4b98      	ldr	r3, [pc, #608]	@ (8005cd8 <_dtoa_r+0x2d0>)
 8005a76:	bfb8      	it	lt
 8005a78:	6032      	strlt	r2, [r6, #0]
 8005a7a:	ea33 0308 	bics.w	r3, r3, r8
 8005a7e:	d112      	bne.n	8005aa6 <_dtoa_r+0x9e>
 8005a80:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005a84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005a8c:	4323      	orrs	r3, r4
 8005a8e:	f000 8550 	beq.w	8006532 <_dtoa_r+0xb2a>
 8005a92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a94:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005cdc <_dtoa_r+0x2d4>
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8552 	beq.w	8006542 <_dtoa_r+0xb3a>
 8005a9e:	f10a 0303 	add.w	r3, sl, #3
 8005aa2:	f000 bd4c 	b.w	800653e <_dtoa_r+0xb36>
 8005aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005aaa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f7fa ff77 	bl	80009a8 <__aeabi_dcmpeq>
 8005aba:	4607      	mov	r7, r0
 8005abc:	b158      	cbz	r0, 8005ad6 <_dtoa_r+0xce>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005ac2:	6013      	str	r3, [r2, #0]
 8005ac4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ac6:	b113      	cbz	r3, 8005ace <_dtoa_r+0xc6>
 8005ac8:	4b85      	ldr	r3, [pc, #532]	@ (8005ce0 <_dtoa_r+0x2d8>)
 8005aca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005ce4 <_dtoa_r+0x2dc>
 8005ad2:	f000 bd36 	b.w	8006542 <_dtoa_r+0xb3a>
 8005ad6:	ab14      	add	r3, sp, #80	@ 0x50
 8005ad8:	9301      	str	r3, [sp, #4]
 8005ada:	ab15      	add	r3, sp, #84	@ 0x54
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	4658      	mov	r0, fp
 8005ae0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005ae4:	f001 fa30 	bl	8006f48 <__d2b>
 8005ae8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005aec:	4681      	mov	r9, r0
 8005aee:	2e00      	cmp	r6, #0
 8005af0:	d077      	beq.n	8005be2 <_dtoa_r+0x1da>
 8005af2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005af8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b00:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b04:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005b08:	9712      	str	r7, [sp, #72]	@ 0x48
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4b76      	ldr	r3, [pc, #472]	@ (8005ce8 <_dtoa_r+0x2e0>)
 8005b10:	f7fa fb2a 	bl	8000168 <__aeabi_dsub>
 8005b14:	a368      	add	r3, pc, #416	@ (adr r3, 8005cb8 <_dtoa_r+0x2b0>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	f7fa fcdd 	bl	80004d8 <__aeabi_dmul>
 8005b1e:	a368      	add	r3, pc, #416	@ (adr r3, 8005cc0 <_dtoa_r+0x2b8>)
 8005b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b24:	f7fa fb22 	bl	800016c <__adddf3>
 8005b28:	4604      	mov	r4, r0
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	f7fa fc69 	bl	8000404 <__aeabi_i2d>
 8005b32:	a365      	add	r3, pc, #404	@ (adr r3, 8005cc8 <_dtoa_r+0x2c0>)
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f7fa fcce 	bl	80004d8 <__aeabi_dmul>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4620      	mov	r0, r4
 8005b42:	4629      	mov	r1, r5
 8005b44:	f7fa fb12 	bl	800016c <__adddf3>
 8005b48:	4604      	mov	r4, r0
 8005b4a:	460d      	mov	r5, r1
 8005b4c:	f7fa ff74 	bl	8000a38 <__aeabi_d2iz>
 8005b50:	2200      	movs	r2, #0
 8005b52:	4607      	mov	r7, r0
 8005b54:	2300      	movs	r3, #0
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa ff2f 	bl	80009bc <__aeabi_dcmplt>
 8005b5e:	b140      	cbz	r0, 8005b72 <_dtoa_r+0x16a>
 8005b60:	4638      	mov	r0, r7
 8005b62:	f7fa fc4f 	bl	8000404 <__aeabi_i2d>
 8005b66:	4622      	mov	r2, r4
 8005b68:	462b      	mov	r3, r5
 8005b6a:	f7fa ff1d 	bl	80009a8 <__aeabi_dcmpeq>
 8005b6e:	b900      	cbnz	r0, 8005b72 <_dtoa_r+0x16a>
 8005b70:	3f01      	subs	r7, #1
 8005b72:	2f16      	cmp	r7, #22
 8005b74:	d853      	bhi.n	8005c1e <_dtoa_r+0x216>
 8005b76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cec <_dtoa_r+0x2e4>)
 8005b7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f7fa ff1a 	bl	80009bc <__aeabi_dcmplt>
 8005b88:	2800      	cmp	r0, #0
 8005b8a:	d04a      	beq.n	8005c22 <_dtoa_r+0x21a>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	3f01      	subs	r7, #1
 8005b90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005b94:	1b9b      	subs	r3, r3, r6
 8005b96:	1e5a      	subs	r2, r3, #1
 8005b98:	bf46      	itte	mi
 8005b9a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005b9e:	2300      	movmi	r3, #0
 8005ba0:	f04f 0800 	movpl.w	r8, #0
 8005ba4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ba6:	bf48      	it	mi
 8005ba8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005baa:	2f00      	cmp	r7, #0
 8005bac:	db3b      	blt.n	8005c26 <_dtoa_r+0x21e>
 8005bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bb0:	970e      	str	r7, [sp, #56]	@ 0x38
 8005bb2:	443b      	add	r3, r7
 8005bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bbc:	2b09      	cmp	r3, #9
 8005bbe:	d866      	bhi.n	8005c8e <_dtoa_r+0x286>
 8005bc0:	2b05      	cmp	r3, #5
 8005bc2:	bfc4      	itt	gt
 8005bc4:	3b04      	subgt	r3, #4
 8005bc6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005bc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005bca:	bfc8      	it	gt
 8005bcc:	2400      	movgt	r4, #0
 8005bce:	f1a3 0302 	sub.w	r3, r3, #2
 8005bd2:	bfd8      	it	le
 8005bd4:	2401      	movle	r4, #1
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d864      	bhi.n	8005ca4 <_dtoa_r+0x29c>
 8005bda:	e8df f003 	tbb	[pc, r3]
 8005bde:	382b      	.short	0x382b
 8005be0:	5636      	.short	0x5636
 8005be2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005be6:	441e      	add	r6, r3
 8005be8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	bfc1      	itttt	gt
 8005bf0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005bf4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005bf8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005bfc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005c00:	bfd6      	itet	le
 8005c02:	f1c3 0320 	rsble	r3, r3, #32
 8005c06:	ea48 0003 	orrgt.w	r0, r8, r3
 8005c0a:	fa04 f003 	lslle.w	r0, r4, r3
 8005c0e:	f7fa fbe9 	bl	80003e4 <__aeabi_ui2d>
 8005c12:	2201      	movs	r2, #1
 8005c14:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005c18:	3e01      	subs	r6, #1
 8005c1a:	9212      	str	r2, [sp, #72]	@ 0x48
 8005c1c:	e775      	b.n	8005b0a <_dtoa_r+0x102>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7b6      	b.n	8005b90 <_dtoa_r+0x188>
 8005c22:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005c24:	e7b5      	b.n	8005b92 <_dtoa_r+0x18a>
 8005c26:	427b      	negs	r3, r7
 8005c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	eba8 0807 	sub.w	r8, r8, r7
 8005c30:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c32:	e7c2      	b.n	8005bba <_dtoa_r+0x1b2>
 8005c34:	2300      	movs	r3, #0
 8005c36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	dc35      	bgt.n	8005caa <_dtoa_r+0x2a2>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	461a      	mov	r2, r3
 8005c42:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005c46:	9221      	str	r2, [sp, #132]	@ 0x84
 8005c48:	e00b      	b.n	8005c62 <_dtoa_r+0x25a>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e7f3      	b.n	8005c36 <_dtoa_r+0x22e>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	9308      	str	r3, [sp, #32]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	9307      	str	r3, [sp, #28]
 8005c5e:	bfb8      	it	lt
 8005c60:	2301      	movlt	r3, #1
 8005c62:	2100      	movs	r1, #0
 8005c64:	2204      	movs	r2, #4
 8005c66:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005c6a:	f102 0514 	add.w	r5, r2, #20
 8005c6e:	429d      	cmp	r5, r3
 8005c70:	d91f      	bls.n	8005cb2 <_dtoa_r+0x2aa>
 8005c72:	6041      	str	r1, [r0, #4]
 8005c74:	4658      	mov	r0, fp
 8005c76:	f000 fd8d 	bl	8006794 <_Balloc>
 8005c7a:	4682      	mov	sl, r0
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d139      	bne.n	8005cf4 <_dtoa_r+0x2ec>
 8005c80:	4602      	mov	r2, r0
 8005c82:	f240 11af 	movw	r1, #431	@ 0x1af
 8005c86:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf0 <_dtoa_r+0x2e8>)
 8005c88:	e6d2      	b.n	8005a30 <_dtoa_r+0x28>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e7e0      	b.n	8005c50 <_dtoa_r+0x248>
 8005c8e:	2401      	movs	r4, #1
 8005c90:	2300      	movs	r3, #0
 8005c92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005c94:	9320      	str	r3, [sp, #128]	@ 0x80
 8005c96:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ca0:	2312      	movs	r3, #18
 8005ca2:	e7d0      	b.n	8005c46 <_dtoa_r+0x23e>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ca8:	e7f5      	b.n	8005c96 <_dtoa_r+0x28e>
 8005caa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005cb0:	e7d7      	b.n	8005c62 <_dtoa_r+0x25a>
 8005cb2:	3101      	adds	r1, #1
 8005cb4:	0052      	lsls	r2, r2, #1
 8005cb6:	e7d8      	b.n	8005c6a <_dtoa_r+0x262>
 8005cb8:	636f4361 	.word	0x636f4361
 8005cbc:	3fd287a7 	.word	0x3fd287a7
 8005cc0:	8b60c8b3 	.word	0x8b60c8b3
 8005cc4:	3fc68a28 	.word	0x3fc68a28
 8005cc8:	509f79fb 	.word	0x509f79fb
 8005ccc:	3fd34413 	.word	0x3fd34413
 8005cd0:	0800ac5c 	.word	0x0800ac5c
 8005cd4:	0800ac73 	.word	0x0800ac73
 8005cd8:	7ff00000 	.word	0x7ff00000
 8005cdc:	0800ac58 	.word	0x0800ac58
 8005ce0:	0800ac27 	.word	0x0800ac27
 8005ce4:	0800ac26 	.word	0x0800ac26
 8005ce8:	3ff80000 	.word	0x3ff80000
 8005cec:	0800ad70 	.word	0x0800ad70
 8005cf0:	0800accb 	.word	0x0800accb
 8005cf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005cf8:	6018      	str	r0, [r3, #0]
 8005cfa:	9b07      	ldr	r3, [sp, #28]
 8005cfc:	2b0e      	cmp	r3, #14
 8005cfe:	f200 80a4 	bhi.w	8005e4a <_dtoa_r+0x442>
 8005d02:	2c00      	cmp	r4, #0
 8005d04:	f000 80a1 	beq.w	8005e4a <_dtoa_r+0x442>
 8005d08:	2f00      	cmp	r7, #0
 8005d0a:	dd33      	ble.n	8005d74 <_dtoa_r+0x36c>
 8005d0c:	4b86      	ldr	r3, [pc, #536]	@ (8005f28 <_dtoa_r+0x520>)
 8005d0e:	f007 020f 	and.w	r2, r7, #15
 8005d12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d16:	05f8      	lsls	r0, r7, #23
 8005d18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d1c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005d24:	d516      	bpl.n	8005d54 <_dtoa_r+0x34c>
 8005d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d2a:	4b80      	ldr	r3, [pc, #512]	@ (8005f2c <_dtoa_r+0x524>)
 8005d2c:	2603      	movs	r6, #3
 8005d2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d32:	f7fa fcfb 	bl	800072c <__aeabi_ddiv>
 8005d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d3a:	f004 040f 	and.w	r4, r4, #15
 8005d3e:	4d7b      	ldr	r5, [pc, #492]	@ (8005f2c <_dtoa_r+0x524>)
 8005d40:	b954      	cbnz	r4, 8005d58 <_dtoa_r+0x350>
 8005d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d4a:	f7fa fcef 	bl	800072c <__aeabi_ddiv>
 8005d4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d52:	e028      	b.n	8005da6 <_dtoa_r+0x39e>
 8005d54:	2602      	movs	r6, #2
 8005d56:	e7f2      	b.n	8005d3e <_dtoa_r+0x336>
 8005d58:	07e1      	lsls	r1, r4, #31
 8005d5a:	d508      	bpl.n	8005d6e <_dtoa_r+0x366>
 8005d5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d64:	f7fa fbb8 	bl	80004d8 <__aeabi_dmul>
 8005d68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d6c:	3601      	adds	r6, #1
 8005d6e:	1064      	asrs	r4, r4, #1
 8005d70:	3508      	adds	r5, #8
 8005d72:	e7e5      	b.n	8005d40 <_dtoa_r+0x338>
 8005d74:	f000 80d2 	beq.w	8005f1c <_dtoa_r+0x514>
 8005d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d7c:	427c      	negs	r4, r7
 8005d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8005f28 <_dtoa_r+0x520>)
 8005d80:	f004 020f 	and.w	r2, r4, #15
 8005d84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f7fa fba4 	bl	80004d8 <__aeabi_dmul>
 8005d90:	2602      	movs	r6, #2
 8005d92:	2300      	movs	r3, #0
 8005d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d98:	4d64      	ldr	r5, [pc, #400]	@ (8005f2c <_dtoa_r+0x524>)
 8005d9a:	1124      	asrs	r4, r4, #4
 8005d9c:	2c00      	cmp	r4, #0
 8005d9e:	f040 80b2 	bne.w	8005f06 <_dtoa_r+0x4fe>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1d3      	bne.n	8005d4e <_dtoa_r+0x346>
 8005da6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005daa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80b7 	beq.w	8005f20 <_dtoa_r+0x518>
 8005db2:	2200      	movs	r2, #0
 8005db4:	4620      	mov	r0, r4
 8005db6:	4629      	mov	r1, r5
 8005db8:	4b5d      	ldr	r3, [pc, #372]	@ (8005f30 <_dtoa_r+0x528>)
 8005dba:	f7fa fdff 	bl	80009bc <__aeabi_dcmplt>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	f000 80ae 	beq.w	8005f20 <_dtoa_r+0x518>
 8005dc4:	9b07      	ldr	r3, [sp, #28]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 80aa 	beq.w	8005f20 <_dtoa_r+0x518>
 8005dcc:	9b08      	ldr	r3, [sp, #32]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	dd37      	ble.n	8005e42 <_dtoa_r+0x43a>
 8005dd2:	1e7b      	subs	r3, r7, #1
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	9304      	str	r3, [sp, #16]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4629      	mov	r1, r5
 8005ddc:	4b55      	ldr	r3, [pc, #340]	@ (8005f34 <_dtoa_r+0x52c>)
 8005dde:	f7fa fb7b 	bl	80004d8 <__aeabi_dmul>
 8005de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de6:	9c08      	ldr	r4, [sp, #32]
 8005de8:	3601      	adds	r6, #1
 8005dea:	4630      	mov	r0, r6
 8005dec:	f7fa fb0a 	bl	8000404 <__aeabi_i2d>
 8005df0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005df4:	f7fa fb70 	bl	80004d8 <__aeabi_dmul>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8005f38 <_dtoa_r+0x530>)
 8005dfc:	f7fa f9b6 	bl	800016c <__adddf3>
 8005e00:	4605      	mov	r5, r0
 8005e02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005e06:	2c00      	cmp	r4, #0
 8005e08:	f040 809a 	bne.w	8005f40 <_dtoa_r+0x538>
 8005e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e10:	2200      	movs	r2, #0
 8005e12:	4b4a      	ldr	r3, [pc, #296]	@ (8005f3c <_dtoa_r+0x534>)
 8005e14:	f7fa f9a8 	bl	8000168 <__aeabi_dsub>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e20:	462a      	mov	r2, r5
 8005e22:	4633      	mov	r3, r6
 8005e24:	f7fa fde8 	bl	80009f8 <__aeabi_dcmpgt>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	f040 828e 	bne.w	800634a <_dtoa_r+0x942>
 8005e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e32:	462a      	mov	r2, r5
 8005e34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005e38:	f7fa fdc0 	bl	80009bc <__aeabi_dcmplt>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	f040 8127 	bne.w	8006090 <_dtoa_r+0x688>
 8005e42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005e46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005e4a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f2c0 8163 	blt.w	8006118 <_dtoa_r+0x710>
 8005e52:	2f0e      	cmp	r7, #14
 8005e54:	f300 8160 	bgt.w	8006118 <_dtoa_r+0x710>
 8005e58:	4b33      	ldr	r3, [pc, #204]	@ (8005f28 <_dtoa_r+0x520>)
 8005e5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	da03      	bge.n	8005e74 <_dtoa_r+0x46c>
 8005e6c:	9b07      	ldr	r3, [sp, #28]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f340 8100 	ble.w	8006074 <_dtoa_r+0x66c>
 8005e74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005e78:	4656      	mov	r6, sl
 8005e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e7e:	4620      	mov	r0, r4
 8005e80:	4629      	mov	r1, r5
 8005e82:	f7fa fc53 	bl	800072c <__aeabi_ddiv>
 8005e86:	f7fa fdd7 	bl	8000a38 <__aeabi_d2iz>
 8005e8a:	4680      	mov	r8, r0
 8005e8c:	f7fa faba 	bl	8000404 <__aeabi_i2d>
 8005e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e94:	f7fa fb20 	bl	80004d8 <__aeabi_dmul>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7fa f962 	bl	8000168 <__aeabi_dsub>
 8005ea4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005ea8:	9d07      	ldr	r5, [sp, #28]
 8005eaa:	f806 4b01 	strb.w	r4, [r6], #1
 8005eae:	eba6 040a 	sub.w	r4, r6, sl
 8005eb2:	42a5      	cmp	r5, r4
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	f040 8116 	bne.w	80060e8 <_dtoa_r+0x6e0>
 8005ebc:	f7fa f956 	bl	800016c <__adddf3>
 8005ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	460d      	mov	r5, r1
 8005ec8:	f7fa fd96 	bl	80009f8 <__aeabi_dcmpgt>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	f040 80f8 	bne.w	80060c2 <_dtoa_r+0x6ba>
 8005ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	4629      	mov	r1, r5
 8005eda:	f7fa fd65 	bl	80009a8 <__aeabi_dcmpeq>
 8005ede:	b118      	cbz	r0, 8005ee8 <_dtoa_r+0x4e0>
 8005ee0:	f018 0f01 	tst.w	r8, #1
 8005ee4:	f040 80ed 	bne.w	80060c2 <_dtoa_r+0x6ba>
 8005ee8:	4649      	mov	r1, r9
 8005eea:	4658      	mov	r0, fp
 8005eec:	f000 fc92 	bl	8006814 <_Bfree>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	7033      	strb	r3, [r6, #0]
 8005ef4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005ef6:	3701      	adds	r7, #1
 8005ef8:	601f      	str	r7, [r3, #0]
 8005efa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8320 	beq.w	8006542 <_dtoa_r+0xb3a>
 8005f02:	601e      	str	r6, [r3, #0]
 8005f04:	e31d      	b.n	8006542 <_dtoa_r+0xb3a>
 8005f06:	07e2      	lsls	r2, r4, #31
 8005f08:	d505      	bpl.n	8005f16 <_dtoa_r+0x50e>
 8005f0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f0e:	f7fa fae3 	bl	80004d8 <__aeabi_dmul>
 8005f12:	2301      	movs	r3, #1
 8005f14:	3601      	adds	r6, #1
 8005f16:	1064      	asrs	r4, r4, #1
 8005f18:	3508      	adds	r5, #8
 8005f1a:	e73f      	b.n	8005d9c <_dtoa_r+0x394>
 8005f1c:	2602      	movs	r6, #2
 8005f1e:	e742      	b.n	8005da6 <_dtoa_r+0x39e>
 8005f20:	9c07      	ldr	r4, [sp, #28]
 8005f22:	9704      	str	r7, [sp, #16]
 8005f24:	e761      	b.n	8005dea <_dtoa_r+0x3e2>
 8005f26:	bf00      	nop
 8005f28:	0800ad70 	.word	0x0800ad70
 8005f2c:	0800ad48 	.word	0x0800ad48
 8005f30:	3ff00000 	.word	0x3ff00000
 8005f34:	40240000 	.word	0x40240000
 8005f38:	401c0000 	.word	0x401c0000
 8005f3c:	40140000 	.word	0x40140000
 8005f40:	4b70      	ldr	r3, [pc, #448]	@ (8006104 <_dtoa_r+0x6fc>)
 8005f42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005f44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f4c:	4454      	add	r4, sl
 8005f4e:	2900      	cmp	r1, #0
 8005f50:	d045      	beq.n	8005fde <_dtoa_r+0x5d6>
 8005f52:	2000      	movs	r0, #0
 8005f54:	496c      	ldr	r1, [pc, #432]	@ (8006108 <_dtoa_r+0x700>)
 8005f56:	f7fa fbe9 	bl	800072c <__aeabi_ddiv>
 8005f5a:	4633      	mov	r3, r6
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	f7fa f903 	bl	8000168 <__aeabi_dsub>
 8005f62:	4656      	mov	r6, sl
 8005f64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f6c:	f7fa fd64 	bl	8000a38 <__aeabi_d2iz>
 8005f70:	4605      	mov	r5, r0
 8005f72:	f7fa fa47 	bl	8000404 <__aeabi_i2d>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f7e:	f7fa f8f3 	bl	8000168 <__aeabi_dsub>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	3530      	adds	r5, #48	@ 0x30
 8005f88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f90:	f806 5b01 	strb.w	r5, [r6], #1
 8005f94:	f7fa fd12 	bl	80009bc <__aeabi_dcmplt>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d163      	bne.n	8006064 <_dtoa_r+0x65c>
 8005f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	495a      	ldr	r1, [pc, #360]	@ (800610c <_dtoa_r+0x704>)
 8005fa4:	f7fa f8e0 	bl	8000168 <__aeabi_dsub>
 8005fa8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005fac:	f7fa fd06 	bl	80009bc <__aeabi_dcmplt>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	f040 8087 	bne.w	80060c4 <_dtoa_r+0x6bc>
 8005fb6:	42a6      	cmp	r6, r4
 8005fb8:	f43f af43 	beq.w	8005e42 <_dtoa_r+0x43a>
 8005fbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4b53      	ldr	r3, [pc, #332]	@ (8006110 <_dtoa_r+0x708>)
 8005fc4:	f7fa fa88 	bl	80004d8 <__aeabi_dmul>
 8005fc8:	2200      	movs	r2, #0
 8005fca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fd2:	4b4f      	ldr	r3, [pc, #316]	@ (8006110 <_dtoa_r+0x708>)
 8005fd4:	f7fa fa80 	bl	80004d8 <__aeabi_dmul>
 8005fd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fdc:	e7c4      	b.n	8005f68 <_dtoa_r+0x560>
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f7fa fa79 	bl	80004d8 <__aeabi_dmul>
 8005fe6:	4656      	mov	r6, sl
 8005fe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005fec:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ff2:	f7fa fd21 	bl	8000a38 <__aeabi_d2iz>
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	f7fa fa04 	bl	8000404 <__aeabi_i2d>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006004:	f7fa f8b0 	bl	8000168 <__aeabi_dsub>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	3530      	adds	r5, #48	@ 0x30
 800600e:	f806 5b01 	strb.w	r5, [r6], #1
 8006012:	42a6      	cmp	r6, r4
 8006014:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	d124      	bne.n	8006068 <_dtoa_r+0x660>
 800601e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006022:	4b39      	ldr	r3, [pc, #228]	@ (8006108 <_dtoa_r+0x700>)
 8006024:	f7fa f8a2 	bl	800016c <__adddf3>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006030:	f7fa fce2 	bl	80009f8 <__aeabi_dcmpgt>
 8006034:	2800      	cmp	r0, #0
 8006036:	d145      	bne.n	80060c4 <_dtoa_r+0x6bc>
 8006038:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800603c:	2000      	movs	r0, #0
 800603e:	4932      	ldr	r1, [pc, #200]	@ (8006108 <_dtoa_r+0x700>)
 8006040:	f7fa f892 	bl	8000168 <__aeabi_dsub>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800604c:	f7fa fcb6 	bl	80009bc <__aeabi_dcmplt>
 8006050:	2800      	cmp	r0, #0
 8006052:	f43f aef6 	beq.w	8005e42 <_dtoa_r+0x43a>
 8006056:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006058:	1e73      	subs	r3, r6, #1
 800605a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800605c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006060:	2b30      	cmp	r3, #48	@ 0x30
 8006062:	d0f8      	beq.n	8006056 <_dtoa_r+0x64e>
 8006064:	9f04      	ldr	r7, [sp, #16]
 8006066:	e73f      	b.n	8005ee8 <_dtoa_r+0x4e0>
 8006068:	4b29      	ldr	r3, [pc, #164]	@ (8006110 <_dtoa_r+0x708>)
 800606a:	f7fa fa35 	bl	80004d8 <__aeabi_dmul>
 800606e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006072:	e7bc      	b.n	8005fee <_dtoa_r+0x5e6>
 8006074:	d10c      	bne.n	8006090 <_dtoa_r+0x688>
 8006076:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800607a:	2200      	movs	r2, #0
 800607c:	4b25      	ldr	r3, [pc, #148]	@ (8006114 <_dtoa_r+0x70c>)
 800607e:	f7fa fa2b 	bl	80004d8 <__aeabi_dmul>
 8006082:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006086:	f7fa fcad 	bl	80009e4 <__aeabi_dcmpge>
 800608a:	2800      	cmp	r0, #0
 800608c:	f000 815b 	beq.w	8006346 <_dtoa_r+0x93e>
 8006090:	2400      	movs	r4, #0
 8006092:	4625      	mov	r5, r4
 8006094:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006096:	4656      	mov	r6, sl
 8006098:	43db      	mvns	r3, r3
 800609a:	9304      	str	r3, [sp, #16]
 800609c:	2700      	movs	r7, #0
 800609e:	4621      	mov	r1, r4
 80060a0:	4658      	mov	r0, fp
 80060a2:	f000 fbb7 	bl	8006814 <_Bfree>
 80060a6:	2d00      	cmp	r5, #0
 80060a8:	d0dc      	beq.n	8006064 <_dtoa_r+0x65c>
 80060aa:	b12f      	cbz	r7, 80060b8 <_dtoa_r+0x6b0>
 80060ac:	42af      	cmp	r7, r5
 80060ae:	d003      	beq.n	80060b8 <_dtoa_r+0x6b0>
 80060b0:	4639      	mov	r1, r7
 80060b2:	4658      	mov	r0, fp
 80060b4:	f000 fbae 	bl	8006814 <_Bfree>
 80060b8:	4629      	mov	r1, r5
 80060ba:	4658      	mov	r0, fp
 80060bc:	f000 fbaa 	bl	8006814 <_Bfree>
 80060c0:	e7d0      	b.n	8006064 <_dtoa_r+0x65c>
 80060c2:	9704      	str	r7, [sp, #16]
 80060c4:	4633      	mov	r3, r6
 80060c6:	461e      	mov	r6, r3
 80060c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060cc:	2a39      	cmp	r2, #57	@ 0x39
 80060ce:	d107      	bne.n	80060e0 <_dtoa_r+0x6d8>
 80060d0:	459a      	cmp	sl, r3
 80060d2:	d1f8      	bne.n	80060c6 <_dtoa_r+0x6be>
 80060d4:	9a04      	ldr	r2, [sp, #16]
 80060d6:	3201      	adds	r2, #1
 80060d8:	9204      	str	r2, [sp, #16]
 80060da:	2230      	movs	r2, #48	@ 0x30
 80060dc:	f88a 2000 	strb.w	r2, [sl]
 80060e0:	781a      	ldrb	r2, [r3, #0]
 80060e2:	3201      	adds	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e7bd      	b.n	8006064 <_dtoa_r+0x65c>
 80060e8:	2200      	movs	r2, #0
 80060ea:	4b09      	ldr	r3, [pc, #36]	@ (8006110 <_dtoa_r+0x708>)
 80060ec:	f7fa f9f4 	bl	80004d8 <__aeabi_dmul>
 80060f0:	2200      	movs	r2, #0
 80060f2:	2300      	movs	r3, #0
 80060f4:	4604      	mov	r4, r0
 80060f6:	460d      	mov	r5, r1
 80060f8:	f7fa fc56 	bl	80009a8 <__aeabi_dcmpeq>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	f43f aebc 	beq.w	8005e7a <_dtoa_r+0x472>
 8006102:	e6f1      	b.n	8005ee8 <_dtoa_r+0x4e0>
 8006104:	0800ad70 	.word	0x0800ad70
 8006108:	3fe00000 	.word	0x3fe00000
 800610c:	3ff00000 	.word	0x3ff00000
 8006110:	40240000 	.word	0x40240000
 8006114:	40140000 	.word	0x40140000
 8006118:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800611a:	2a00      	cmp	r2, #0
 800611c:	f000 80db 	beq.w	80062d6 <_dtoa_r+0x8ce>
 8006120:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006122:	2a01      	cmp	r2, #1
 8006124:	f300 80bf 	bgt.w	80062a6 <_dtoa_r+0x89e>
 8006128:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800612a:	2a00      	cmp	r2, #0
 800612c:	f000 80b7 	beq.w	800629e <_dtoa_r+0x896>
 8006130:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006134:	4646      	mov	r6, r8
 8006136:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800613a:	2101      	movs	r1, #1
 800613c:	441a      	add	r2, r3
 800613e:	4658      	mov	r0, fp
 8006140:	4498      	add	r8, r3
 8006142:	9209      	str	r2, [sp, #36]	@ 0x24
 8006144:	f000 fc64 	bl	8006a10 <__i2b>
 8006148:	4605      	mov	r5, r0
 800614a:	b15e      	cbz	r6, 8006164 <_dtoa_r+0x75c>
 800614c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	dd08      	ble.n	8006164 <_dtoa_r+0x75c>
 8006152:	42b3      	cmp	r3, r6
 8006154:	bfa8      	it	ge
 8006156:	4633      	movge	r3, r6
 8006158:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800615a:	eba8 0803 	sub.w	r8, r8, r3
 800615e:	1af6      	subs	r6, r6, r3
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	9309      	str	r3, [sp, #36]	@ 0x24
 8006164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006166:	b1f3      	cbz	r3, 80061a6 <_dtoa_r+0x79e>
 8006168:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80b7 	beq.w	80062de <_dtoa_r+0x8d6>
 8006170:	b18c      	cbz	r4, 8006196 <_dtoa_r+0x78e>
 8006172:	4629      	mov	r1, r5
 8006174:	4622      	mov	r2, r4
 8006176:	4658      	mov	r0, fp
 8006178:	f000 fd08 	bl	8006b8c <__pow5mult>
 800617c:	464a      	mov	r2, r9
 800617e:	4601      	mov	r1, r0
 8006180:	4605      	mov	r5, r0
 8006182:	4658      	mov	r0, fp
 8006184:	f000 fc5a 	bl	8006a3c <__multiply>
 8006188:	4649      	mov	r1, r9
 800618a:	9004      	str	r0, [sp, #16]
 800618c:	4658      	mov	r0, fp
 800618e:	f000 fb41 	bl	8006814 <_Bfree>
 8006192:	9b04      	ldr	r3, [sp, #16]
 8006194:	4699      	mov	r9, r3
 8006196:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006198:	1b1a      	subs	r2, r3, r4
 800619a:	d004      	beq.n	80061a6 <_dtoa_r+0x79e>
 800619c:	4649      	mov	r1, r9
 800619e:	4658      	mov	r0, fp
 80061a0:	f000 fcf4 	bl	8006b8c <__pow5mult>
 80061a4:	4681      	mov	r9, r0
 80061a6:	2101      	movs	r1, #1
 80061a8:	4658      	mov	r0, fp
 80061aa:	f000 fc31 	bl	8006a10 <__i2b>
 80061ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061b0:	4604      	mov	r4, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 81c9 	beq.w	800654a <_dtoa_r+0xb42>
 80061b8:	461a      	mov	r2, r3
 80061ba:	4601      	mov	r1, r0
 80061bc:	4658      	mov	r0, fp
 80061be:	f000 fce5 	bl	8006b8c <__pow5mult>
 80061c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061c4:	4604      	mov	r4, r0
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	f300 808f 	bgt.w	80062ea <_dtoa_r+0x8e2>
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 8087 	bne.w	80062e2 <_dtoa_r+0x8da>
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f040 8083 	bne.w	80062e6 <_dtoa_r+0x8de>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061e6:	0d1b      	lsrs	r3, r3, #20
 80061e8:	051b      	lsls	r3, r3, #20
 80061ea:	b12b      	cbz	r3, 80061f8 <_dtoa_r+0x7f0>
 80061ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ee:	f108 0801 	add.w	r8, r8, #1
 80061f2:	3301      	adds	r3, #1
 80061f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80061f6:	2301      	movs	r3, #1
 80061f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80061fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 81aa 	beq.w	8006556 <_dtoa_r+0xb4e>
 8006202:	6923      	ldr	r3, [r4, #16]
 8006204:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006208:	6918      	ldr	r0, [r3, #16]
 800620a:	f000 fbb5 	bl	8006978 <__hi0bits>
 800620e:	f1c0 0020 	rsb	r0, r0, #32
 8006212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006214:	4418      	add	r0, r3
 8006216:	f010 001f 	ands.w	r0, r0, #31
 800621a:	d071      	beq.n	8006300 <_dtoa_r+0x8f8>
 800621c:	f1c0 0320 	rsb	r3, r0, #32
 8006220:	2b04      	cmp	r3, #4
 8006222:	dd65      	ble.n	80062f0 <_dtoa_r+0x8e8>
 8006224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006226:	f1c0 001c 	rsb	r0, r0, #28
 800622a:	4403      	add	r3, r0
 800622c:	4480      	add	r8, r0
 800622e:	4406      	add	r6, r0
 8006230:	9309      	str	r3, [sp, #36]	@ 0x24
 8006232:	f1b8 0f00 	cmp.w	r8, #0
 8006236:	dd05      	ble.n	8006244 <_dtoa_r+0x83c>
 8006238:	4649      	mov	r1, r9
 800623a:	4642      	mov	r2, r8
 800623c:	4658      	mov	r0, fp
 800623e:	f000 fcff 	bl	8006c40 <__lshift>
 8006242:	4681      	mov	r9, r0
 8006244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	dd05      	ble.n	8006256 <_dtoa_r+0x84e>
 800624a:	4621      	mov	r1, r4
 800624c:	461a      	mov	r2, r3
 800624e:	4658      	mov	r0, fp
 8006250:	f000 fcf6 	bl	8006c40 <__lshift>
 8006254:	4604      	mov	r4, r0
 8006256:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d053      	beq.n	8006304 <_dtoa_r+0x8fc>
 800625c:	4621      	mov	r1, r4
 800625e:	4648      	mov	r0, r9
 8006260:	f000 fd5a 	bl	8006d18 <__mcmp>
 8006264:	2800      	cmp	r0, #0
 8006266:	da4d      	bge.n	8006304 <_dtoa_r+0x8fc>
 8006268:	1e7b      	subs	r3, r7, #1
 800626a:	4649      	mov	r1, r9
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	220a      	movs	r2, #10
 8006270:	2300      	movs	r3, #0
 8006272:	4658      	mov	r0, fp
 8006274:	f000 faf0 	bl	8006858 <__multadd>
 8006278:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800627a:	4681      	mov	r9, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 816c 	beq.w	800655a <_dtoa_r+0xb52>
 8006282:	2300      	movs	r3, #0
 8006284:	4629      	mov	r1, r5
 8006286:	220a      	movs	r2, #10
 8006288:	4658      	mov	r0, fp
 800628a:	f000 fae5 	bl	8006858 <__multadd>
 800628e:	9b08      	ldr	r3, [sp, #32]
 8006290:	4605      	mov	r5, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	dc61      	bgt.n	800635a <_dtoa_r+0x952>
 8006296:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006298:	2b02      	cmp	r3, #2
 800629a:	dc3b      	bgt.n	8006314 <_dtoa_r+0x90c>
 800629c:	e05d      	b.n	800635a <_dtoa_r+0x952>
 800629e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062a0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80062a4:	e746      	b.n	8006134 <_dtoa_r+0x72c>
 80062a6:	9b07      	ldr	r3, [sp, #28]
 80062a8:	1e5c      	subs	r4, r3, #1
 80062aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	bfbf      	itttt	lt
 80062b0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80062b2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80062b4:	1ae3      	sublt	r3, r4, r3
 80062b6:	18d2      	addlt	r2, r2, r3
 80062b8:	bfa8      	it	ge
 80062ba:	1b1c      	subge	r4, r3, r4
 80062bc:	9b07      	ldr	r3, [sp, #28]
 80062be:	bfbe      	ittt	lt
 80062c0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80062c2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80062c4:	2400      	movlt	r4, #0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bfb5      	itete	lt
 80062ca:	eba8 0603 	sublt.w	r6, r8, r3
 80062ce:	4646      	movge	r6, r8
 80062d0:	2300      	movlt	r3, #0
 80062d2:	9b07      	ldrge	r3, [sp, #28]
 80062d4:	e730      	b.n	8006138 <_dtoa_r+0x730>
 80062d6:	4646      	mov	r6, r8
 80062d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80062da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80062dc:	e735      	b.n	800614a <_dtoa_r+0x742>
 80062de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062e0:	e75c      	b.n	800619c <_dtoa_r+0x794>
 80062e2:	2300      	movs	r3, #0
 80062e4:	e788      	b.n	80061f8 <_dtoa_r+0x7f0>
 80062e6:	9b02      	ldr	r3, [sp, #8]
 80062e8:	e786      	b.n	80061f8 <_dtoa_r+0x7f0>
 80062ea:	2300      	movs	r3, #0
 80062ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80062ee:	e788      	b.n	8006202 <_dtoa_r+0x7fa>
 80062f0:	d09f      	beq.n	8006232 <_dtoa_r+0x82a>
 80062f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062f4:	331c      	adds	r3, #28
 80062f6:	441a      	add	r2, r3
 80062f8:	4498      	add	r8, r3
 80062fa:	441e      	add	r6, r3
 80062fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80062fe:	e798      	b.n	8006232 <_dtoa_r+0x82a>
 8006300:	4603      	mov	r3, r0
 8006302:	e7f6      	b.n	80062f2 <_dtoa_r+0x8ea>
 8006304:	9b07      	ldr	r3, [sp, #28]
 8006306:	9704      	str	r7, [sp, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	dc20      	bgt.n	800634e <_dtoa_r+0x946>
 800630c:	9308      	str	r3, [sp, #32]
 800630e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006310:	2b02      	cmp	r3, #2
 8006312:	dd1e      	ble.n	8006352 <_dtoa_r+0x94a>
 8006314:	9b08      	ldr	r3, [sp, #32]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f47f aebc 	bne.w	8006094 <_dtoa_r+0x68c>
 800631c:	4621      	mov	r1, r4
 800631e:	2205      	movs	r2, #5
 8006320:	4658      	mov	r0, fp
 8006322:	f000 fa99 	bl	8006858 <__multadd>
 8006326:	4601      	mov	r1, r0
 8006328:	4604      	mov	r4, r0
 800632a:	4648      	mov	r0, r9
 800632c:	f000 fcf4 	bl	8006d18 <__mcmp>
 8006330:	2800      	cmp	r0, #0
 8006332:	f77f aeaf 	ble.w	8006094 <_dtoa_r+0x68c>
 8006336:	2331      	movs	r3, #49	@ 0x31
 8006338:	4656      	mov	r6, sl
 800633a:	f806 3b01 	strb.w	r3, [r6], #1
 800633e:	9b04      	ldr	r3, [sp, #16]
 8006340:	3301      	adds	r3, #1
 8006342:	9304      	str	r3, [sp, #16]
 8006344:	e6aa      	b.n	800609c <_dtoa_r+0x694>
 8006346:	9c07      	ldr	r4, [sp, #28]
 8006348:	9704      	str	r7, [sp, #16]
 800634a:	4625      	mov	r5, r4
 800634c:	e7f3      	b.n	8006336 <_dtoa_r+0x92e>
 800634e:	9b07      	ldr	r3, [sp, #28]
 8006350:	9308      	str	r3, [sp, #32]
 8006352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8104 	beq.w	8006562 <_dtoa_r+0xb5a>
 800635a:	2e00      	cmp	r6, #0
 800635c:	dd05      	ble.n	800636a <_dtoa_r+0x962>
 800635e:	4629      	mov	r1, r5
 8006360:	4632      	mov	r2, r6
 8006362:	4658      	mov	r0, fp
 8006364:	f000 fc6c 	bl	8006c40 <__lshift>
 8006368:	4605      	mov	r5, r0
 800636a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800636c:	2b00      	cmp	r3, #0
 800636e:	d05a      	beq.n	8006426 <_dtoa_r+0xa1e>
 8006370:	4658      	mov	r0, fp
 8006372:	6869      	ldr	r1, [r5, #4]
 8006374:	f000 fa0e 	bl	8006794 <_Balloc>
 8006378:	4606      	mov	r6, r0
 800637a:	b928      	cbnz	r0, 8006388 <_dtoa_r+0x980>
 800637c:	4602      	mov	r2, r0
 800637e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006382:	4b83      	ldr	r3, [pc, #524]	@ (8006590 <_dtoa_r+0xb88>)
 8006384:	f7ff bb54 	b.w	8005a30 <_dtoa_r+0x28>
 8006388:	692a      	ldr	r2, [r5, #16]
 800638a:	f105 010c 	add.w	r1, r5, #12
 800638e:	3202      	adds	r2, #2
 8006390:	0092      	lsls	r2, r2, #2
 8006392:	300c      	adds	r0, #12
 8006394:	f7ff fa9d 	bl	80058d2 <memcpy>
 8006398:	2201      	movs	r2, #1
 800639a:	4631      	mov	r1, r6
 800639c:	4658      	mov	r0, fp
 800639e:	f000 fc4f 	bl	8006c40 <__lshift>
 80063a2:	462f      	mov	r7, r5
 80063a4:	4605      	mov	r5, r0
 80063a6:	f10a 0301 	add.w	r3, sl, #1
 80063aa:	9307      	str	r3, [sp, #28]
 80063ac:	9b08      	ldr	r3, [sp, #32]
 80063ae:	4453      	add	r3, sl
 80063b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063b2:	9b02      	ldr	r3, [sp, #8]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80063ba:	9b07      	ldr	r3, [sp, #28]
 80063bc:	4621      	mov	r1, r4
 80063be:	3b01      	subs	r3, #1
 80063c0:	4648      	mov	r0, r9
 80063c2:	9302      	str	r3, [sp, #8]
 80063c4:	f7ff fa98 	bl	80058f8 <quorem>
 80063c8:	4639      	mov	r1, r7
 80063ca:	9008      	str	r0, [sp, #32]
 80063cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80063d0:	4648      	mov	r0, r9
 80063d2:	f000 fca1 	bl	8006d18 <__mcmp>
 80063d6:	462a      	mov	r2, r5
 80063d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80063da:	4621      	mov	r1, r4
 80063dc:	4658      	mov	r0, fp
 80063de:	f000 fcb7 	bl	8006d50 <__mdiff>
 80063e2:	68c2      	ldr	r2, [r0, #12]
 80063e4:	4606      	mov	r6, r0
 80063e6:	bb02      	cbnz	r2, 800642a <_dtoa_r+0xa22>
 80063e8:	4601      	mov	r1, r0
 80063ea:	4648      	mov	r0, r9
 80063ec:	f000 fc94 	bl	8006d18 <__mcmp>
 80063f0:	4602      	mov	r2, r0
 80063f2:	4631      	mov	r1, r6
 80063f4:	4658      	mov	r0, fp
 80063f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80063f8:	f000 fa0c 	bl	8006814 <_Bfree>
 80063fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006400:	9e07      	ldr	r6, [sp, #28]
 8006402:	ea43 0102 	orr.w	r1, r3, r2
 8006406:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006408:	4319      	orrs	r1, r3
 800640a:	d110      	bne.n	800642e <_dtoa_r+0xa26>
 800640c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006410:	d029      	beq.n	8006466 <_dtoa_r+0xa5e>
 8006412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	dd02      	ble.n	800641e <_dtoa_r+0xa16>
 8006418:	9b08      	ldr	r3, [sp, #32]
 800641a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800641e:	9b02      	ldr	r3, [sp, #8]
 8006420:	f883 8000 	strb.w	r8, [r3]
 8006424:	e63b      	b.n	800609e <_dtoa_r+0x696>
 8006426:	4628      	mov	r0, r5
 8006428:	e7bb      	b.n	80063a2 <_dtoa_r+0x99a>
 800642a:	2201      	movs	r2, #1
 800642c:	e7e1      	b.n	80063f2 <_dtoa_r+0x9ea>
 800642e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006430:	2b00      	cmp	r3, #0
 8006432:	db04      	blt.n	800643e <_dtoa_r+0xa36>
 8006434:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006436:	430b      	orrs	r3, r1
 8006438:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800643a:	430b      	orrs	r3, r1
 800643c:	d120      	bne.n	8006480 <_dtoa_r+0xa78>
 800643e:	2a00      	cmp	r2, #0
 8006440:	dded      	ble.n	800641e <_dtoa_r+0xa16>
 8006442:	4649      	mov	r1, r9
 8006444:	2201      	movs	r2, #1
 8006446:	4658      	mov	r0, fp
 8006448:	f000 fbfa 	bl	8006c40 <__lshift>
 800644c:	4621      	mov	r1, r4
 800644e:	4681      	mov	r9, r0
 8006450:	f000 fc62 	bl	8006d18 <__mcmp>
 8006454:	2800      	cmp	r0, #0
 8006456:	dc03      	bgt.n	8006460 <_dtoa_r+0xa58>
 8006458:	d1e1      	bne.n	800641e <_dtoa_r+0xa16>
 800645a:	f018 0f01 	tst.w	r8, #1
 800645e:	d0de      	beq.n	800641e <_dtoa_r+0xa16>
 8006460:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006464:	d1d8      	bne.n	8006418 <_dtoa_r+0xa10>
 8006466:	2339      	movs	r3, #57	@ 0x39
 8006468:	9a02      	ldr	r2, [sp, #8]
 800646a:	7013      	strb	r3, [r2, #0]
 800646c:	4633      	mov	r3, r6
 800646e:	461e      	mov	r6, r3
 8006470:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006474:	3b01      	subs	r3, #1
 8006476:	2a39      	cmp	r2, #57	@ 0x39
 8006478:	d052      	beq.n	8006520 <_dtoa_r+0xb18>
 800647a:	3201      	adds	r2, #1
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	e60e      	b.n	800609e <_dtoa_r+0x696>
 8006480:	2a00      	cmp	r2, #0
 8006482:	dd07      	ble.n	8006494 <_dtoa_r+0xa8c>
 8006484:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006488:	d0ed      	beq.n	8006466 <_dtoa_r+0xa5e>
 800648a:	9a02      	ldr	r2, [sp, #8]
 800648c:	f108 0301 	add.w	r3, r8, #1
 8006490:	7013      	strb	r3, [r2, #0]
 8006492:	e604      	b.n	800609e <_dtoa_r+0x696>
 8006494:	9b07      	ldr	r3, [sp, #28]
 8006496:	9a07      	ldr	r2, [sp, #28]
 8006498:	f803 8c01 	strb.w	r8, [r3, #-1]
 800649c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800649e:	4293      	cmp	r3, r2
 80064a0:	d028      	beq.n	80064f4 <_dtoa_r+0xaec>
 80064a2:	4649      	mov	r1, r9
 80064a4:	2300      	movs	r3, #0
 80064a6:	220a      	movs	r2, #10
 80064a8:	4658      	mov	r0, fp
 80064aa:	f000 f9d5 	bl	8006858 <__multadd>
 80064ae:	42af      	cmp	r7, r5
 80064b0:	4681      	mov	r9, r0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	f04f 020a 	mov.w	r2, #10
 80064ba:	4639      	mov	r1, r7
 80064bc:	4658      	mov	r0, fp
 80064be:	d107      	bne.n	80064d0 <_dtoa_r+0xac8>
 80064c0:	f000 f9ca 	bl	8006858 <__multadd>
 80064c4:	4607      	mov	r7, r0
 80064c6:	4605      	mov	r5, r0
 80064c8:	9b07      	ldr	r3, [sp, #28]
 80064ca:	3301      	adds	r3, #1
 80064cc:	9307      	str	r3, [sp, #28]
 80064ce:	e774      	b.n	80063ba <_dtoa_r+0x9b2>
 80064d0:	f000 f9c2 	bl	8006858 <__multadd>
 80064d4:	4629      	mov	r1, r5
 80064d6:	4607      	mov	r7, r0
 80064d8:	2300      	movs	r3, #0
 80064da:	220a      	movs	r2, #10
 80064dc:	4658      	mov	r0, fp
 80064de:	f000 f9bb 	bl	8006858 <__multadd>
 80064e2:	4605      	mov	r5, r0
 80064e4:	e7f0      	b.n	80064c8 <_dtoa_r+0xac0>
 80064e6:	9b08      	ldr	r3, [sp, #32]
 80064e8:	2700      	movs	r7, #0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	bfcc      	ite	gt
 80064ee:	461e      	movgt	r6, r3
 80064f0:	2601      	movle	r6, #1
 80064f2:	4456      	add	r6, sl
 80064f4:	4649      	mov	r1, r9
 80064f6:	2201      	movs	r2, #1
 80064f8:	4658      	mov	r0, fp
 80064fa:	f000 fba1 	bl	8006c40 <__lshift>
 80064fe:	4621      	mov	r1, r4
 8006500:	4681      	mov	r9, r0
 8006502:	f000 fc09 	bl	8006d18 <__mcmp>
 8006506:	2800      	cmp	r0, #0
 8006508:	dcb0      	bgt.n	800646c <_dtoa_r+0xa64>
 800650a:	d102      	bne.n	8006512 <_dtoa_r+0xb0a>
 800650c:	f018 0f01 	tst.w	r8, #1
 8006510:	d1ac      	bne.n	800646c <_dtoa_r+0xa64>
 8006512:	4633      	mov	r3, r6
 8006514:	461e      	mov	r6, r3
 8006516:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800651a:	2a30      	cmp	r2, #48	@ 0x30
 800651c:	d0fa      	beq.n	8006514 <_dtoa_r+0xb0c>
 800651e:	e5be      	b.n	800609e <_dtoa_r+0x696>
 8006520:	459a      	cmp	sl, r3
 8006522:	d1a4      	bne.n	800646e <_dtoa_r+0xa66>
 8006524:	9b04      	ldr	r3, [sp, #16]
 8006526:	3301      	adds	r3, #1
 8006528:	9304      	str	r3, [sp, #16]
 800652a:	2331      	movs	r3, #49	@ 0x31
 800652c:	f88a 3000 	strb.w	r3, [sl]
 8006530:	e5b5      	b.n	800609e <_dtoa_r+0x696>
 8006532:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006534:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006594 <_dtoa_r+0xb8c>
 8006538:	b11b      	cbz	r3, 8006542 <_dtoa_r+0xb3a>
 800653a:	f10a 0308 	add.w	r3, sl, #8
 800653e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	4650      	mov	r0, sl
 8006544:	b017      	add	sp, #92	@ 0x5c
 8006546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800654c:	2b01      	cmp	r3, #1
 800654e:	f77f ae3d 	ble.w	80061cc <_dtoa_r+0x7c4>
 8006552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006554:	930a      	str	r3, [sp, #40]	@ 0x28
 8006556:	2001      	movs	r0, #1
 8006558:	e65b      	b.n	8006212 <_dtoa_r+0x80a>
 800655a:	9b08      	ldr	r3, [sp, #32]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f77f aed6 	ble.w	800630e <_dtoa_r+0x906>
 8006562:	4656      	mov	r6, sl
 8006564:	4621      	mov	r1, r4
 8006566:	4648      	mov	r0, r9
 8006568:	f7ff f9c6 	bl	80058f8 <quorem>
 800656c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006570:	9b08      	ldr	r3, [sp, #32]
 8006572:	f806 8b01 	strb.w	r8, [r6], #1
 8006576:	eba6 020a 	sub.w	r2, r6, sl
 800657a:	4293      	cmp	r3, r2
 800657c:	ddb3      	ble.n	80064e6 <_dtoa_r+0xade>
 800657e:	4649      	mov	r1, r9
 8006580:	2300      	movs	r3, #0
 8006582:	220a      	movs	r2, #10
 8006584:	4658      	mov	r0, fp
 8006586:	f000 f967 	bl	8006858 <__multadd>
 800658a:	4681      	mov	r9, r0
 800658c:	e7ea      	b.n	8006564 <_dtoa_r+0xb5c>
 800658e:	bf00      	nop
 8006590:	0800accb 	.word	0x0800accb
 8006594:	0800ac4f 	.word	0x0800ac4f

08006598 <_free_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4605      	mov	r5, r0
 800659c:	2900      	cmp	r1, #0
 800659e:	d040      	beq.n	8006622 <_free_r+0x8a>
 80065a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065a4:	1f0c      	subs	r4, r1, #4
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	bfb8      	it	lt
 80065aa:	18e4      	addlt	r4, r4, r3
 80065ac:	f000 f8e6 	bl	800677c <__malloc_lock>
 80065b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006624 <_free_r+0x8c>)
 80065b2:	6813      	ldr	r3, [r2, #0]
 80065b4:	b933      	cbnz	r3, 80065c4 <_free_r+0x2c>
 80065b6:	6063      	str	r3, [r4, #4]
 80065b8:	6014      	str	r4, [r2, #0]
 80065ba:	4628      	mov	r0, r5
 80065bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065c0:	f000 b8e2 	b.w	8006788 <__malloc_unlock>
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d908      	bls.n	80065da <_free_r+0x42>
 80065c8:	6820      	ldr	r0, [r4, #0]
 80065ca:	1821      	adds	r1, r4, r0
 80065cc:	428b      	cmp	r3, r1
 80065ce:	bf01      	itttt	eq
 80065d0:	6819      	ldreq	r1, [r3, #0]
 80065d2:	685b      	ldreq	r3, [r3, #4]
 80065d4:	1809      	addeq	r1, r1, r0
 80065d6:	6021      	streq	r1, [r4, #0]
 80065d8:	e7ed      	b.n	80065b6 <_free_r+0x1e>
 80065da:	461a      	mov	r2, r3
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	b10b      	cbz	r3, 80065e4 <_free_r+0x4c>
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	d9fa      	bls.n	80065da <_free_r+0x42>
 80065e4:	6811      	ldr	r1, [r2, #0]
 80065e6:	1850      	adds	r0, r2, r1
 80065e8:	42a0      	cmp	r0, r4
 80065ea:	d10b      	bne.n	8006604 <_free_r+0x6c>
 80065ec:	6820      	ldr	r0, [r4, #0]
 80065ee:	4401      	add	r1, r0
 80065f0:	1850      	adds	r0, r2, r1
 80065f2:	4283      	cmp	r3, r0
 80065f4:	6011      	str	r1, [r2, #0]
 80065f6:	d1e0      	bne.n	80065ba <_free_r+0x22>
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	4408      	add	r0, r1
 80065fe:	6010      	str	r0, [r2, #0]
 8006600:	6053      	str	r3, [r2, #4]
 8006602:	e7da      	b.n	80065ba <_free_r+0x22>
 8006604:	d902      	bls.n	800660c <_free_r+0x74>
 8006606:	230c      	movs	r3, #12
 8006608:	602b      	str	r3, [r5, #0]
 800660a:	e7d6      	b.n	80065ba <_free_r+0x22>
 800660c:	6820      	ldr	r0, [r4, #0]
 800660e:	1821      	adds	r1, r4, r0
 8006610:	428b      	cmp	r3, r1
 8006612:	bf01      	itttt	eq
 8006614:	6819      	ldreq	r1, [r3, #0]
 8006616:	685b      	ldreq	r3, [r3, #4]
 8006618:	1809      	addeq	r1, r1, r0
 800661a:	6021      	streq	r1, [r4, #0]
 800661c:	6063      	str	r3, [r4, #4]
 800661e:	6054      	str	r4, [r2, #4]
 8006620:	e7cb      	b.n	80065ba <_free_r+0x22>
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20004290 	.word	0x20004290

08006628 <malloc>:
 8006628:	4b02      	ldr	r3, [pc, #8]	@ (8006634 <malloc+0xc>)
 800662a:	4601      	mov	r1, r0
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	f000 b825 	b.w	800667c <_malloc_r>
 8006632:	bf00      	nop
 8006634:	2000003c 	.word	0x2000003c

08006638 <sbrk_aligned>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	4e0f      	ldr	r6, [pc, #60]	@ (8006678 <sbrk_aligned+0x40>)
 800663c:	460c      	mov	r4, r1
 800663e:	6831      	ldr	r1, [r6, #0]
 8006640:	4605      	mov	r5, r0
 8006642:	b911      	cbnz	r1, 800664a <sbrk_aligned+0x12>
 8006644:	f001 ffba 	bl	80085bc <_sbrk_r>
 8006648:	6030      	str	r0, [r6, #0]
 800664a:	4621      	mov	r1, r4
 800664c:	4628      	mov	r0, r5
 800664e:	f001 ffb5 	bl	80085bc <_sbrk_r>
 8006652:	1c43      	adds	r3, r0, #1
 8006654:	d103      	bne.n	800665e <sbrk_aligned+0x26>
 8006656:	f04f 34ff 	mov.w	r4, #4294967295
 800665a:	4620      	mov	r0, r4
 800665c:	bd70      	pop	{r4, r5, r6, pc}
 800665e:	1cc4      	adds	r4, r0, #3
 8006660:	f024 0403 	bic.w	r4, r4, #3
 8006664:	42a0      	cmp	r0, r4
 8006666:	d0f8      	beq.n	800665a <sbrk_aligned+0x22>
 8006668:	1a21      	subs	r1, r4, r0
 800666a:	4628      	mov	r0, r5
 800666c:	f001 ffa6 	bl	80085bc <_sbrk_r>
 8006670:	3001      	adds	r0, #1
 8006672:	d1f2      	bne.n	800665a <sbrk_aligned+0x22>
 8006674:	e7ef      	b.n	8006656 <sbrk_aligned+0x1e>
 8006676:	bf00      	nop
 8006678:	2000428c 	.word	0x2000428c

0800667c <_malloc_r>:
 800667c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006680:	1ccd      	adds	r5, r1, #3
 8006682:	f025 0503 	bic.w	r5, r5, #3
 8006686:	3508      	adds	r5, #8
 8006688:	2d0c      	cmp	r5, #12
 800668a:	bf38      	it	cc
 800668c:	250c      	movcc	r5, #12
 800668e:	2d00      	cmp	r5, #0
 8006690:	4606      	mov	r6, r0
 8006692:	db01      	blt.n	8006698 <_malloc_r+0x1c>
 8006694:	42a9      	cmp	r1, r5
 8006696:	d904      	bls.n	80066a2 <_malloc_r+0x26>
 8006698:	230c      	movs	r3, #12
 800669a:	6033      	str	r3, [r6, #0]
 800669c:	2000      	movs	r0, #0
 800669e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006778 <_malloc_r+0xfc>
 80066a6:	f000 f869 	bl	800677c <__malloc_lock>
 80066aa:	f8d8 3000 	ldr.w	r3, [r8]
 80066ae:	461c      	mov	r4, r3
 80066b0:	bb44      	cbnz	r4, 8006704 <_malloc_r+0x88>
 80066b2:	4629      	mov	r1, r5
 80066b4:	4630      	mov	r0, r6
 80066b6:	f7ff ffbf 	bl	8006638 <sbrk_aligned>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	4604      	mov	r4, r0
 80066be:	d158      	bne.n	8006772 <_malloc_r+0xf6>
 80066c0:	f8d8 4000 	ldr.w	r4, [r8]
 80066c4:	4627      	mov	r7, r4
 80066c6:	2f00      	cmp	r7, #0
 80066c8:	d143      	bne.n	8006752 <_malloc_r+0xd6>
 80066ca:	2c00      	cmp	r4, #0
 80066cc:	d04b      	beq.n	8006766 <_malloc_r+0xea>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	4639      	mov	r1, r7
 80066d2:	4630      	mov	r0, r6
 80066d4:	eb04 0903 	add.w	r9, r4, r3
 80066d8:	f001 ff70 	bl	80085bc <_sbrk_r>
 80066dc:	4581      	cmp	r9, r0
 80066de:	d142      	bne.n	8006766 <_malloc_r+0xea>
 80066e0:	6821      	ldr	r1, [r4, #0]
 80066e2:	4630      	mov	r0, r6
 80066e4:	1a6d      	subs	r5, r5, r1
 80066e6:	4629      	mov	r1, r5
 80066e8:	f7ff ffa6 	bl	8006638 <sbrk_aligned>
 80066ec:	3001      	adds	r0, #1
 80066ee:	d03a      	beq.n	8006766 <_malloc_r+0xea>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	442b      	add	r3, r5
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	f8d8 3000 	ldr.w	r3, [r8]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	bb62      	cbnz	r2, 8006758 <_malloc_r+0xdc>
 80066fe:	f8c8 7000 	str.w	r7, [r8]
 8006702:	e00f      	b.n	8006724 <_malloc_r+0xa8>
 8006704:	6822      	ldr	r2, [r4, #0]
 8006706:	1b52      	subs	r2, r2, r5
 8006708:	d420      	bmi.n	800674c <_malloc_r+0xd0>
 800670a:	2a0b      	cmp	r2, #11
 800670c:	d917      	bls.n	800673e <_malloc_r+0xc2>
 800670e:	1961      	adds	r1, r4, r5
 8006710:	42a3      	cmp	r3, r4
 8006712:	6025      	str	r5, [r4, #0]
 8006714:	bf18      	it	ne
 8006716:	6059      	strne	r1, [r3, #4]
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	bf08      	it	eq
 800671c:	f8c8 1000 	streq.w	r1, [r8]
 8006720:	5162      	str	r2, [r4, r5]
 8006722:	604b      	str	r3, [r1, #4]
 8006724:	4630      	mov	r0, r6
 8006726:	f000 f82f 	bl	8006788 <__malloc_unlock>
 800672a:	f104 000b 	add.w	r0, r4, #11
 800672e:	1d23      	adds	r3, r4, #4
 8006730:	f020 0007 	bic.w	r0, r0, #7
 8006734:	1ac2      	subs	r2, r0, r3
 8006736:	bf1c      	itt	ne
 8006738:	1a1b      	subne	r3, r3, r0
 800673a:	50a3      	strne	r3, [r4, r2]
 800673c:	e7af      	b.n	800669e <_malloc_r+0x22>
 800673e:	6862      	ldr	r2, [r4, #4]
 8006740:	42a3      	cmp	r3, r4
 8006742:	bf0c      	ite	eq
 8006744:	f8c8 2000 	streq.w	r2, [r8]
 8006748:	605a      	strne	r2, [r3, #4]
 800674a:	e7eb      	b.n	8006724 <_malloc_r+0xa8>
 800674c:	4623      	mov	r3, r4
 800674e:	6864      	ldr	r4, [r4, #4]
 8006750:	e7ae      	b.n	80066b0 <_malloc_r+0x34>
 8006752:	463c      	mov	r4, r7
 8006754:	687f      	ldr	r7, [r7, #4]
 8006756:	e7b6      	b.n	80066c6 <_malloc_r+0x4a>
 8006758:	461a      	mov	r2, r3
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	42a3      	cmp	r3, r4
 800675e:	d1fb      	bne.n	8006758 <_malloc_r+0xdc>
 8006760:	2300      	movs	r3, #0
 8006762:	6053      	str	r3, [r2, #4]
 8006764:	e7de      	b.n	8006724 <_malloc_r+0xa8>
 8006766:	230c      	movs	r3, #12
 8006768:	4630      	mov	r0, r6
 800676a:	6033      	str	r3, [r6, #0]
 800676c:	f000 f80c 	bl	8006788 <__malloc_unlock>
 8006770:	e794      	b.n	800669c <_malloc_r+0x20>
 8006772:	6005      	str	r5, [r0, #0]
 8006774:	e7d6      	b.n	8006724 <_malloc_r+0xa8>
 8006776:	bf00      	nop
 8006778:	20004290 	.word	0x20004290

0800677c <__malloc_lock>:
 800677c:	4801      	ldr	r0, [pc, #4]	@ (8006784 <__malloc_lock+0x8>)
 800677e:	f7ff b898 	b.w	80058b2 <__retarget_lock_acquire_recursive>
 8006782:	bf00      	nop
 8006784:	20004288 	.word	0x20004288

08006788 <__malloc_unlock>:
 8006788:	4801      	ldr	r0, [pc, #4]	@ (8006790 <__malloc_unlock+0x8>)
 800678a:	f7ff b893 	b.w	80058b4 <__retarget_lock_release_recursive>
 800678e:	bf00      	nop
 8006790:	20004288 	.word	0x20004288

08006794 <_Balloc>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	69c6      	ldr	r6, [r0, #28]
 8006798:	4604      	mov	r4, r0
 800679a:	460d      	mov	r5, r1
 800679c:	b976      	cbnz	r6, 80067bc <_Balloc+0x28>
 800679e:	2010      	movs	r0, #16
 80067a0:	f7ff ff42 	bl	8006628 <malloc>
 80067a4:	4602      	mov	r2, r0
 80067a6:	61e0      	str	r0, [r4, #28]
 80067a8:	b920      	cbnz	r0, 80067b4 <_Balloc+0x20>
 80067aa:	216b      	movs	r1, #107	@ 0x6b
 80067ac:	4b17      	ldr	r3, [pc, #92]	@ (800680c <_Balloc+0x78>)
 80067ae:	4818      	ldr	r0, [pc, #96]	@ (8006810 <_Balloc+0x7c>)
 80067b0:	f001 ff1a 	bl	80085e8 <__assert_func>
 80067b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067b8:	6006      	str	r6, [r0, #0]
 80067ba:	60c6      	str	r6, [r0, #12]
 80067bc:	69e6      	ldr	r6, [r4, #28]
 80067be:	68f3      	ldr	r3, [r6, #12]
 80067c0:	b183      	cbz	r3, 80067e4 <_Balloc+0x50>
 80067c2:	69e3      	ldr	r3, [r4, #28]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80067ca:	b9b8      	cbnz	r0, 80067fc <_Balloc+0x68>
 80067cc:	2101      	movs	r1, #1
 80067ce:	fa01 f605 	lsl.w	r6, r1, r5
 80067d2:	1d72      	adds	r2, r6, #5
 80067d4:	4620      	mov	r0, r4
 80067d6:	0092      	lsls	r2, r2, #2
 80067d8:	f001 ff24 	bl	8008624 <_calloc_r>
 80067dc:	b160      	cbz	r0, 80067f8 <_Balloc+0x64>
 80067de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80067e2:	e00e      	b.n	8006802 <_Balloc+0x6e>
 80067e4:	2221      	movs	r2, #33	@ 0x21
 80067e6:	2104      	movs	r1, #4
 80067e8:	4620      	mov	r0, r4
 80067ea:	f001 ff1b 	bl	8008624 <_calloc_r>
 80067ee:	69e3      	ldr	r3, [r4, #28]
 80067f0:	60f0      	str	r0, [r6, #12]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e4      	bne.n	80067c2 <_Balloc+0x2e>
 80067f8:	2000      	movs	r0, #0
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	6802      	ldr	r2, [r0, #0]
 80067fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006802:	2300      	movs	r3, #0
 8006804:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006808:	e7f7      	b.n	80067fa <_Balloc+0x66>
 800680a:	bf00      	nop
 800680c:	0800ac5c 	.word	0x0800ac5c
 8006810:	0800acdc 	.word	0x0800acdc

08006814 <_Bfree>:
 8006814:	b570      	push	{r4, r5, r6, lr}
 8006816:	69c6      	ldr	r6, [r0, #28]
 8006818:	4605      	mov	r5, r0
 800681a:	460c      	mov	r4, r1
 800681c:	b976      	cbnz	r6, 800683c <_Bfree+0x28>
 800681e:	2010      	movs	r0, #16
 8006820:	f7ff ff02 	bl	8006628 <malloc>
 8006824:	4602      	mov	r2, r0
 8006826:	61e8      	str	r0, [r5, #28]
 8006828:	b920      	cbnz	r0, 8006834 <_Bfree+0x20>
 800682a:	218f      	movs	r1, #143	@ 0x8f
 800682c:	4b08      	ldr	r3, [pc, #32]	@ (8006850 <_Bfree+0x3c>)
 800682e:	4809      	ldr	r0, [pc, #36]	@ (8006854 <_Bfree+0x40>)
 8006830:	f001 feda 	bl	80085e8 <__assert_func>
 8006834:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006838:	6006      	str	r6, [r0, #0]
 800683a:	60c6      	str	r6, [r0, #12]
 800683c:	b13c      	cbz	r4, 800684e <_Bfree+0x3a>
 800683e:	69eb      	ldr	r3, [r5, #28]
 8006840:	6862      	ldr	r2, [r4, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006848:	6021      	str	r1, [r4, #0]
 800684a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800684e:	bd70      	pop	{r4, r5, r6, pc}
 8006850:	0800ac5c 	.word	0x0800ac5c
 8006854:	0800acdc 	.word	0x0800acdc

08006858 <__multadd>:
 8006858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800685c:	4607      	mov	r7, r0
 800685e:	460c      	mov	r4, r1
 8006860:	461e      	mov	r6, r3
 8006862:	2000      	movs	r0, #0
 8006864:	690d      	ldr	r5, [r1, #16]
 8006866:	f101 0c14 	add.w	ip, r1, #20
 800686a:	f8dc 3000 	ldr.w	r3, [ip]
 800686e:	3001      	adds	r0, #1
 8006870:	b299      	uxth	r1, r3
 8006872:	fb02 6101 	mla	r1, r2, r1, r6
 8006876:	0c1e      	lsrs	r6, r3, #16
 8006878:	0c0b      	lsrs	r3, r1, #16
 800687a:	fb02 3306 	mla	r3, r2, r6, r3
 800687e:	b289      	uxth	r1, r1
 8006880:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006884:	4285      	cmp	r5, r0
 8006886:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800688a:	f84c 1b04 	str.w	r1, [ip], #4
 800688e:	dcec      	bgt.n	800686a <__multadd+0x12>
 8006890:	b30e      	cbz	r6, 80068d6 <__multadd+0x7e>
 8006892:	68a3      	ldr	r3, [r4, #8]
 8006894:	42ab      	cmp	r3, r5
 8006896:	dc19      	bgt.n	80068cc <__multadd+0x74>
 8006898:	6861      	ldr	r1, [r4, #4]
 800689a:	4638      	mov	r0, r7
 800689c:	3101      	adds	r1, #1
 800689e:	f7ff ff79 	bl	8006794 <_Balloc>
 80068a2:	4680      	mov	r8, r0
 80068a4:	b928      	cbnz	r0, 80068b2 <__multadd+0x5a>
 80068a6:	4602      	mov	r2, r0
 80068a8:	21ba      	movs	r1, #186	@ 0xba
 80068aa:	4b0c      	ldr	r3, [pc, #48]	@ (80068dc <__multadd+0x84>)
 80068ac:	480c      	ldr	r0, [pc, #48]	@ (80068e0 <__multadd+0x88>)
 80068ae:	f001 fe9b 	bl	80085e8 <__assert_func>
 80068b2:	6922      	ldr	r2, [r4, #16]
 80068b4:	f104 010c 	add.w	r1, r4, #12
 80068b8:	3202      	adds	r2, #2
 80068ba:	0092      	lsls	r2, r2, #2
 80068bc:	300c      	adds	r0, #12
 80068be:	f7ff f808 	bl	80058d2 <memcpy>
 80068c2:	4621      	mov	r1, r4
 80068c4:	4638      	mov	r0, r7
 80068c6:	f7ff ffa5 	bl	8006814 <_Bfree>
 80068ca:	4644      	mov	r4, r8
 80068cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068d0:	3501      	adds	r5, #1
 80068d2:	615e      	str	r6, [r3, #20]
 80068d4:	6125      	str	r5, [r4, #16]
 80068d6:	4620      	mov	r0, r4
 80068d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068dc:	0800accb 	.word	0x0800accb
 80068e0:	0800acdc 	.word	0x0800acdc

080068e4 <__s2b>:
 80068e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e8:	4615      	mov	r5, r2
 80068ea:	2209      	movs	r2, #9
 80068ec:	461f      	mov	r7, r3
 80068ee:	3308      	adds	r3, #8
 80068f0:	460c      	mov	r4, r1
 80068f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80068f6:	4606      	mov	r6, r0
 80068f8:	2201      	movs	r2, #1
 80068fa:	2100      	movs	r1, #0
 80068fc:	429a      	cmp	r2, r3
 80068fe:	db09      	blt.n	8006914 <__s2b+0x30>
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff ff47 	bl	8006794 <_Balloc>
 8006906:	b940      	cbnz	r0, 800691a <__s2b+0x36>
 8006908:	4602      	mov	r2, r0
 800690a:	21d3      	movs	r1, #211	@ 0xd3
 800690c:	4b18      	ldr	r3, [pc, #96]	@ (8006970 <__s2b+0x8c>)
 800690e:	4819      	ldr	r0, [pc, #100]	@ (8006974 <__s2b+0x90>)
 8006910:	f001 fe6a 	bl	80085e8 <__assert_func>
 8006914:	0052      	lsls	r2, r2, #1
 8006916:	3101      	adds	r1, #1
 8006918:	e7f0      	b.n	80068fc <__s2b+0x18>
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	2d09      	cmp	r5, #9
 800691e:	6143      	str	r3, [r0, #20]
 8006920:	f04f 0301 	mov.w	r3, #1
 8006924:	6103      	str	r3, [r0, #16]
 8006926:	dd16      	ble.n	8006956 <__s2b+0x72>
 8006928:	f104 0909 	add.w	r9, r4, #9
 800692c:	46c8      	mov	r8, r9
 800692e:	442c      	add	r4, r5
 8006930:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006934:	4601      	mov	r1, r0
 8006936:	220a      	movs	r2, #10
 8006938:	4630      	mov	r0, r6
 800693a:	3b30      	subs	r3, #48	@ 0x30
 800693c:	f7ff ff8c 	bl	8006858 <__multadd>
 8006940:	45a0      	cmp	r8, r4
 8006942:	d1f5      	bne.n	8006930 <__s2b+0x4c>
 8006944:	f1a5 0408 	sub.w	r4, r5, #8
 8006948:	444c      	add	r4, r9
 800694a:	1b2d      	subs	r5, r5, r4
 800694c:	1963      	adds	r3, r4, r5
 800694e:	42bb      	cmp	r3, r7
 8006950:	db04      	blt.n	800695c <__s2b+0x78>
 8006952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006956:	2509      	movs	r5, #9
 8006958:	340a      	adds	r4, #10
 800695a:	e7f6      	b.n	800694a <__s2b+0x66>
 800695c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006960:	4601      	mov	r1, r0
 8006962:	220a      	movs	r2, #10
 8006964:	4630      	mov	r0, r6
 8006966:	3b30      	subs	r3, #48	@ 0x30
 8006968:	f7ff ff76 	bl	8006858 <__multadd>
 800696c:	e7ee      	b.n	800694c <__s2b+0x68>
 800696e:	bf00      	nop
 8006970:	0800accb 	.word	0x0800accb
 8006974:	0800acdc 	.word	0x0800acdc

08006978 <__hi0bits>:
 8006978:	4603      	mov	r3, r0
 800697a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800697e:	bf3a      	itte	cc
 8006980:	0403      	lslcc	r3, r0, #16
 8006982:	2010      	movcc	r0, #16
 8006984:	2000      	movcs	r0, #0
 8006986:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800698a:	bf3c      	itt	cc
 800698c:	021b      	lslcc	r3, r3, #8
 800698e:	3008      	addcc	r0, #8
 8006990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006994:	bf3c      	itt	cc
 8006996:	011b      	lslcc	r3, r3, #4
 8006998:	3004      	addcc	r0, #4
 800699a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800699e:	bf3c      	itt	cc
 80069a0:	009b      	lslcc	r3, r3, #2
 80069a2:	3002      	addcc	r0, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	db05      	blt.n	80069b4 <__hi0bits+0x3c>
 80069a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80069ac:	f100 0001 	add.w	r0, r0, #1
 80069b0:	bf08      	it	eq
 80069b2:	2020      	moveq	r0, #32
 80069b4:	4770      	bx	lr

080069b6 <__lo0bits>:
 80069b6:	6803      	ldr	r3, [r0, #0]
 80069b8:	4602      	mov	r2, r0
 80069ba:	f013 0007 	ands.w	r0, r3, #7
 80069be:	d00b      	beq.n	80069d8 <__lo0bits+0x22>
 80069c0:	07d9      	lsls	r1, r3, #31
 80069c2:	d421      	bmi.n	8006a08 <__lo0bits+0x52>
 80069c4:	0798      	lsls	r0, r3, #30
 80069c6:	bf49      	itett	mi
 80069c8:	085b      	lsrmi	r3, r3, #1
 80069ca:	089b      	lsrpl	r3, r3, #2
 80069cc:	2001      	movmi	r0, #1
 80069ce:	6013      	strmi	r3, [r2, #0]
 80069d0:	bf5c      	itt	pl
 80069d2:	2002      	movpl	r0, #2
 80069d4:	6013      	strpl	r3, [r2, #0]
 80069d6:	4770      	bx	lr
 80069d8:	b299      	uxth	r1, r3
 80069da:	b909      	cbnz	r1, 80069e0 <__lo0bits+0x2a>
 80069dc:	2010      	movs	r0, #16
 80069de:	0c1b      	lsrs	r3, r3, #16
 80069e0:	b2d9      	uxtb	r1, r3
 80069e2:	b909      	cbnz	r1, 80069e8 <__lo0bits+0x32>
 80069e4:	3008      	adds	r0, #8
 80069e6:	0a1b      	lsrs	r3, r3, #8
 80069e8:	0719      	lsls	r1, r3, #28
 80069ea:	bf04      	itt	eq
 80069ec:	091b      	lsreq	r3, r3, #4
 80069ee:	3004      	addeq	r0, #4
 80069f0:	0799      	lsls	r1, r3, #30
 80069f2:	bf04      	itt	eq
 80069f4:	089b      	lsreq	r3, r3, #2
 80069f6:	3002      	addeq	r0, #2
 80069f8:	07d9      	lsls	r1, r3, #31
 80069fa:	d403      	bmi.n	8006a04 <__lo0bits+0x4e>
 80069fc:	085b      	lsrs	r3, r3, #1
 80069fe:	f100 0001 	add.w	r0, r0, #1
 8006a02:	d003      	beq.n	8006a0c <__lo0bits+0x56>
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	4770      	bx	lr
 8006a08:	2000      	movs	r0, #0
 8006a0a:	4770      	bx	lr
 8006a0c:	2020      	movs	r0, #32
 8006a0e:	4770      	bx	lr

08006a10 <__i2b>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	460c      	mov	r4, r1
 8006a14:	2101      	movs	r1, #1
 8006a16:	f7ff febd 	bl	8006794 <_Balloc>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	b928      	cbnz	r0, 8006a2a <__i2b+0x1a>
 8006a1e:	f240 1145 	movw	r1, #325	@ 0x145
 8006a22:	4b04      	ldr	r3, [pc, #16]	@ (8006a34 <__i2b+0x24>)
 8006a24:	4804      	ldr	r0, [pc, #16]	@ (8006a38 <__i2b+0x28>)
 8006a26:	f001 fddf 	bl	80085e8 <__assert_func>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	6144      	str	r4, [r0, #20]
 8006a2e:	6103      	str	r3, [r0, #16]
 8006a30:	bd10      	pop	{r4, pc}
 8006a32:	bf00      	nop
 8006a34:	0800accb 	.word	0x0800accb
 8006a38:	0800acdc 	.word	0x0800acdc

08006a3c <__multiply>:
 8006a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a40:	4614      	mov	r4, r2
 8006a42:	690a      	ldr	r2, [r1, #16]
 8006a44:	6923      	ldr	r3, [r4, #16]
 8006a46:	460f      	mov	r7, r1
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	bfa2      	ittt	ge
 8006a4c:	4623      	movge	r3, r4
 8006a4e:	460c      	movge	r4, r1
 8006a50:	461f      	movge	r7, r3
 8006a52:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006a56:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	6861      	ldr	r1, [r4, #4]
 8006a5e:	eb0a 0609 	add.w	r6, sl, r9
 8006a62:	42b3      	cmp	r3, r6
 8006a64:	b085      	sub	sp, #20
 8006a66:	bfb8      	it	lt
 8006a68:	3101      	addlt	r1, #1
 8006a6a:	f7ff fe93 	bl	8006794 <_Balloc>
 8006a6e:	b930      	cbnz	r0, 8006a7e <__multiply+0x42>
 8006a70:	4602      	mov	r2, r0
 8006a72:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a76:	4b43      	ldr	r3, [pc, #268]	@ (8006b84 <__multiply+0x148>)
 8006a78:	4843      	ldr	r0, [pc, #268]	@ (8006b88 <__multiply+0x14c>)
 8006a7a:	f001 fdb5 	bl	80085e8 <__assert_func>
 8006a7e:	f100 0514 	add.w	r5, r0, #20
 8006a82:	462b      	mov	r3, r5
 8006a84:	2200      	movs	r2, #0
 8006a86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a8a:	4543      	cmp	r3, r8
 8006a8c:	d321      	bcc.n	8006ad2 <__multiply+0x96>
 8006a8e:	f107 0114 	add.w	r1, r7, #20
 8006a92:	f104 0214 	add.w	r2, r4, #20
 8006a96:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006a9a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006a9e:	9302      	str	r3, [sp, #8]
 8006aa0:	1b13      	subs	r3, r2, r4
 8006aa2:	3b15      	subs	r3, #21
 8006aa4:	f023 0303 	bic.w	r3, r3, #3
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	f104 0715 	add.w	r7, r4, #21
 8006aae:	42ba      	cmp	r2, r7
 8006ab0:	bf38      	it	cc
 8006ab2:	2304      	movcc	r3, #4
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	9103      	str	r1, [sp, #12]
 8006aba:	428b      	cmp	r3, r1
 8006abc:	d80c      	bhi.n	8006ad8 <__multiply+0x9c>
 8006abe:	2e00      	cmp	r6, #0
 8006ac0:	dd03      	ble.n	8006aca <__multiply+0x8e>
 8006ac2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d05a      	beq.n	8006b80 <__multiply+0x144>
 8006aca:	6106      	str	r6, [r0, #16]
 8006acc:	b005      	add	sp, #20
 8006ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad2:	f843 2b04 	str.w	r2, [r3], #4
 8006ad6:	e7d8      	b.n	8006a8a <__multiply+0x4e>
 8006ad8:	f8b1 a000 	ldrh.w	sl, [r1]
 8006adc:	f1ba 0f00 	cmp.w	sl, #0
 8006ae0:	d023      	beq.n	8006b2a <__multiply+0xee>
 8006ae2:	46a9      	mov	r9, r5
 8006ae4:	f04f 0c00 	mov.w	ip, #0
 8006ae8:	f104 0e14 	add.w	lr, r4, #20
 8006aec:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006af0:	f8d9 3000 	ldr.w	r3, [r9]
 8006af4:	fa1f fb87 	uxth.w	fp, r7
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	fb0a 330b 	mla	r3, sl, fp, r3
 8006afe:	4463      	add	r3, ip
 8006b00:	f8d9 c000 	ldr.w	ip, [r9]
 8006b04:	0c3f      	lsrs	r7, r7, #16
 8006b06:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b0a:	fb0a c707 	mla	r7, sl, r7, ip
 8006b0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b18:	4572      	cmp	r2, lr
 8006b1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b1e:	f849 3b04 	str.w	r3, [r9], #4
 8006b22:	d8e3      	bhi.n	8006aec <__multiply+0xb0>
 8006b24:	9b01      	ldr	r3, [sp, #4]
 8006b26:	f845 c003 	str.w	ip, [r5, r3]
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	3104      	adds	r1, #4
 8006b2e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b32:	f1b9 0f00 	cmp.w	r9, #0
 8006b36:	d021      	beq.n	8006b7c <__multiply+0x140>
 8006b38:	46ae      	mov	lr, r5
 8006b3a:	f04f 0a00 	mov.w	sl, #0
 8006b3e:	682b      	ldr	r3, [r5, #0]
 8006b40:	f104 0c14 	add.w	ip, r4, #20
 8006b44:	f8bc b000 	ldrh.w	fp, [ip]
 8006b48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	fb09 770b 	mla	r7, r9, fp, r7
 8006b52:	4457      	add	r7, sl
 8006b54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b58:	f84e 3b04 	str.w	r3, [lr], #4
 8006b5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b64:	f8be 3000 	ldrh.w	r3, [lr]
 8006b68:	4562      	cmp	r2, ip
 8006b6a:	fb09 330a 	mla	r3, r9, sl, r3
 8006b6e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006b72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b76:	d8e5      	bhi.n	8006b44 <__multiply+0x108>
 8006b78:	9f01      	ldr	r7, [sp, #4]
 8006b7a:	51eb      	str	r3, [r5, r7]
 8006b7c:	3504      	adds	r5, #4
 8006b7e:	e79a      	b.n	8006ab6 <__multiply+0x7a>
 8006b80:	3e01      	subs	r6, #1
 8006b82:	e79c      	b.n	8006abe <__multiply+0x82>
 8006b84:	0800accb 	.word	0x0800accb
 8006b88:	0800acdc 	.word	0x0800acdc

08006b8c <__pow5mult>:
 8006b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b90:	4615      	mov	r5, r2
 8006b92:	f012 0203 	ands.w	r2, r2, #3
 8006b96:	4607      	mov	r7, r0
 8006b98:	460e      	mov	r6, r1
 8006b9a:	d007      	beq.n	8006bac <__pow5mult+0x20>
 8006b9c:	4c25      	ldr	r4, [pc, #148]	@ (8006c34 <__pow5mult+0xa8>)
 8006b9e:	3a01      	subs	r2, #1
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ba6:	f7ff fe57 	bl	8006858 <__multadd>
 8006baa:	4606      	mov	r6, r0
 8006bac:	10ad      	asrs	r5, r5, #2
 8006bae:	d03d      	beq.n	8006c2c <__pow5mult+0xa0>
 8006bb0:	69fc      	ldr	r4, [r7, #28]
 8006bb2:	b97c      	cbnz	r4, 8006bd4 <__pow5mult+0x48>
 8006bb4:	2010      	movs	r0, #16
 8006bb6:	f7ff fd37 	bl	8006628 <malloc>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	61f8      	str	r0, [r7, #28]
 8006bbe:	b928      	cbnz	r0, 8006bcc <__pow5mult+0x40>
 8006bc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c38 <__pow5mult+0xac>)
 8006bc6:	481d      	ldr	r0, [pc, #116]	@ (8006c3c <__pow5mult+0xb0>)
 8006bc8:	f001 fd0e 	bl	80085e8 <__assert_func>
 8006bcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bd0:	6004      	str	r4, [r0, #0]
 8006bd2:	60c4      	str	r4, [r0, #12]
 8006bd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006bd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bdc:	b94c      	cbnz	r4, 8006bf2 <__pow5mult+0x66>
 8006bde:	f240 2171 	movw	r1, #625	@ 0x271
 8006be2:	4638      	mov	r0, r7
 8006be4:	f7ff ff14 	bl	8006a10 <__i2b>
 8006be8:	2300      	movs	r3, #0
 8006bea:	4604      	mov	r4, r0
 8006bec:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bf0:	6003      	str	r3, [r0, #0]
 8006bf2:	f04f 0900 	mov.w	r9, #0
 8006bf6:	07eb      	lsls	r3, r5, #31
 8006bf8:	d50a      	bpl.n	8006c10 <__pow5mult+0x84>
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f7ff ff1c 	bl	8006a3c <__multiply>
 8006c04:	4680      	mov	r8, r0
 8006c06:	4631      	mov	r1, r6
 8006c08:	4638      	mov	r0, r7
 8006c0a:	f7ff fe03 	bl	8006814 <_Bfree>
 8006c0e:	4646      	mov	r6, r8
 8006c10:	106d      	asrs	r5, r5, #1
 8006c12:	d00b      	beq.n	8006c2c <__pow5mult+0xa0>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	b938      	cbnz	r0, 8006c28 <__pow5mult+0x9c>
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	f7ff ff0d 	bl	8006a3c <__multiply>
 8006c22:	6020      	str	r0, [r4, #0]
 8006c24:	f8c0 9000 	str.w	r9, [r0]
 8006c28:	4604      	mov	r4, r0
 8006c2a:	e7e4      	b.n	8006bf6 <__pow5mult+0x6a>
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c32:	bf00      	nop
 8006c34:	0800ad38 	.word	0x0800ad38
 8006c38:	0800ac5c 	.word	0x0800ac5c
 8006c3c:	0800acdc 	.word	0x0800acdc

08006c40 <__lshift>:
 8006c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	460c      	mov	r4, r1
 8006c46:	4607      	mov	r7, r0
 8006c48:	4691      	mov	r9, r2
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	6849      	ldr	r1, [r1, #4]
 8006c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c52:	68a3      	ldr	r3, [r4, #8]
 8006c54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c58:	f108 0601 	add.w	r6, r8, #1
 8006c5c:	42b3      	cmp	r3, r6
 8006c5e:	db0b      	blt.n	8006c78 <__lshift+0x38>
 8006c60:	4638      	mov	r0, r7
 8006c62:	f7ff fd97 	bl	8006794 <_Balloc>
 8006c66:	4605      	mov	r5, r0
 8006c68:	b948      	cbnz	r0, 8006c7e <__lshift+0x3e>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c70:	4b27      	ldr	r3, [pc, #156]	@ (8006d10 <__lshift+0xd0>)
 8006c72:	4828      	ldr	r0, [pc, #160]	@ (8006d14 <__lshift+0xd4>)
 8006c74:	f001 fcb8 	bl	80085e8 <__assert_func>
 8006c78:	3101      	adds	r1, #1
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	e7ee      	b.n	8006c5c <__lshift+0x1c>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f100 0114 	add.w	r1, r0, #20
 8006c84:	f100 0210 	add.w	r2, r0, #16
 8006c88:	4618      	mov	r0, r3
 8006c8a:	4553      	cmp	r3, sl
 8006c8c:	db33      	blt.n	8006cf6 <__lshift+0xb6>
 8006c8e:	6920      	ldr	r0, [r4, #16]
 8006c90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c94:	f104 0314 	add.w	r3, r4, #20
 8006c98:	f019 091f 	ands.w	r9, r9, #31
 8006c9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ca0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ca4:	d02b      	beq.n	8006cfe <__lshift+0xbe>
 8006ca6:	468a      	mov	sl, r1
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f1c9 0e20 	rsb	lr, r9, #32
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	fa00 f009 	lsl.w	r0, r0, r9
 8006cb4:	4310      	orrs	r0, r2
 8006cb6:	f84a 0b04 	str.w	r0, [sl], #4
 8006cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cbe:	459c      	cmp	ip, r3
 8006cc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cc4:	d8f3      	bhi.n	8006cae <__lshift+0x6e>
 8006cc6:	ebac 0304 	sub.w	r3, ip, r4
 8006cca:	3b15      	subs	r3, #21
 8006ccc:	f023 0303 	bic.w	r3, r3, #3
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	f104 0015 	add.w	r0, r4, #21
 8006cd6:	4584      	cmp	ip, r0
 8006cd8:	bf38      	it	cc
 8006cda:	2304      	movcc	r3, #4
 8006cdc:	50ca      	str	r2, [r1, r3]
 8006cde:	b10a      	cbz	r2, 8006ce4 <__lshift+0xa4>
 8006ce0:	f108 0602 	add.w	r6, r8, #2
 8006ce4:	3e01      	subs	r6, #1
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	4621      	mov	r1, r4
 8006cea:	612e      	str	r6, [r5, #16]
 8006cec:	f7ff fd92 	bl	8006814 <_Bfree>
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	e7c5      	b.n	8006c8a <__lshift+0x4a>
 8006cfe:	3904      	subs	r1, #4
 8006d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d04:	459c      	cmp	ip, r3
 8006d06:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d0a:	d8f9      	bhi.n	8006d00 <__lshift+0xc0>
 8006d0c:	e7ea      	b.n	8006ce4 <__lshift+0xa4>
 8006d0e:	bf00      	nop
 8006d10:	0800accb 	.word	0x0800accb
 8006d14:	0800acdc 	.word	0x0800acdc

08006d18 <__mcmp>:
 8006d18:	4603      	mov	r3, r0
 8006d1a:	690a      	ldr	r2, [r1, #16]
 8006d1c:	6900      	ldr	r0, [r0, #16]
 8006d1e:	b530      	push	{r4, r5, lr}
 8006d20:	1a80      	subs	r0, r0, r2
 8006d22:	d10e      	bne.n	8006d42 <__mcmp+0x2a>
 8006d24:	3314      	adds	r3, #20
 8006d26:	3114      	adds	r1, #20
 8006d28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d38:	4295      	cmp	r5, r2
 8006d3a:	d003      	beq.n	8006d44 <__mcmp+0x2c>
 8006d3c:	d205      	bcs.n	8006d4a <__mcmp+0x32>
 8006d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d42:	bd30      	pop	{r4, r5, pc}
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	d3f3      	bcc.n	8006d30 <__mcmp+0x18>
 8006d48:	e7fb      	b.n	8006d42 <__mcmp+0x2a>
 8006d4a:	2001      	movs	r0, #1
 8006d4c:	e7f9      	b.n	8006d42 <__mcmp+0x2a>
	...

08006d50 <__mdiff>:
 8006d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	4689      	mov	r9, r1
 8006d56:	4606      	mov	r6, r0
 8006d58:	4611      	mov	r1, r2
 8006d5a:	4648      	mov	r0, r9
 8006d5c:	4614      	mov	r4, r2
 8006d5e:	f7ff ffdb 	bl	8006d18 <__mcmp>
 8006d62:	1e05      	subs	r5, r0, #0
 8006d64:	d112      	bne.n	8006d8c <__mdiff+0x3c>
 8006d66:	4629      	mov	r1, r5
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f7ff fd13 	bl	8006794 <_Balloc>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	b928      	cbnz	r0, 8006d7e <__mdiff+0x2e>
 8006d72:	f240 2137 	movw	r1, #567	@ 0x237
 8006d76:	4b3e      	ldr	r3, [pc, #248]	@ (8006e70 <__mdiff+0x120>)
 8006d78:	483e      	ldr	r0, [pc, #248]	@ (8006e74 <__mdiff+0x124>)
 8006d7a:	f001 fc35 	bl	80085e8 <__assert_func>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d84:	4610      	mov	r0, r2
 8006d86:	b003      	add	sp, #12
 8006d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8c:	bfbc      	itt	lt
 8006d8e:	464b      	movlt	r3, r9
 8006d90:	46a1      	movlt	r9, r4
 8006d92:	4630      	mov	r0, r6
 8006d94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006d98:	bfba      	itte	lt
 8006d9a:	461c      	movlt	r4, r3
 8006d9c:	2501      	movlt	r5, #1
 8006d9e:	2500      	movge	r5, #0
 8006da0:	f7ff fcf8 	bl	8006794 <_Balloc>
 8006da4:	4602      	mov	r2, r0
 8006da6:	b918      	cbnz	r0, 8006db0 <__mdiff+0x60>
 8006da8:	f240 2145 	movw	r1, #581	@ 0x245
 8006dac:	4b30      	ldr	r3, [pc, #192]	@ (8006e70 <__mdiff+0x120>)
 8006dae:	e7e3      	b.n	8006d78 <__mdiff+0x28>
 8006db0:	f100 0b14 	add.w	fp, r0, #20
 8006db4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006db8:	f109 0310 	add.w	r3, r9, #16
 8006dbc:	60c5      	str	r5, [r0, #12]
 8006dbe:	f04f 0c00 	mov.w	ip, #0
 8006dc2:	f109 0514 	add.w	r5, r9, #20
 8006dc6:	46d9      	mov	r9, fp
 8006dc8:	6926      	ldr	r6, [r4, #16]
 8006dca:	f104 0e14 	add.w	lr, r4, #20
 8006dce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006dd2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006dde:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006de2:	b281      	uxth	r1, r0
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	fa1f f38a 	uxth.w	r3, sl
 8006dea:	1a5b      	subs	r3, r3, r1
 8006dec:	0c00      	lsrs	r0, r0, #16
 8006dee:	4463      	add	r3, ip
 8006df0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006df4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006dfe:	4576      	cmp	r6, lr
 8006e00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e04:	f849 3b04 	str.w	r3, [r9], #4
 8006e08:	d8e6      	bhi.n	8006dd8 <__mdiff+0x88>
 8006e0a:	1b33      	subs	r3, r6, r4
 8006e0c:	3b15      	subs	r3, #21
 8006e0e:	f023 0303 	bic.w	r3, r3, #3
 8006e12:	3415      	adds	r4, #21
 8006e14:	3304      	adds	r3, #4
 8006e16:	42a6      	cmp	r6, r4
 8006e18:	bf38      	it	cc
 8006e1a:	2304      	movcc	r3, #4
 8006e1c:	441d      	add	r5, r3
 8006e1e:	445b      	add	r3, fp
 8006e20:	461e      	mov	r6, r3
 8006e22:	462c      	mov	r4, r5
 8006e24:	4544      	cmp	r4, r8
 8006e26:	d30e      	bcc.n	8006e46 <__mdiff+0xf6>
 8006e28:	f108 0103 	add.w	r1, r8, #3
 8006e2c:	1b49      	subs	r1, r1, r5
 8006e2e:	f021 0103 	bic.w	r1, r1, #3
 8006e32:	3d03      	subs	r5, #3
 8006e34:	45a8      	cmp	r8, r5
 8006e36:	bf38      	it	cc
 8006e38:	2100      	movcc	r1, #0
 8006e3a:	440b      	add	r3, r1
 8006e3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e40:	b199      	cbz	r1, 8006e6a <__mdiff+0x11a>
 8006e42:	6117      	str	r7, [r2, #16]
 8006e44:	e79e      	b.n	8006d84 <__mdiff+0x34>
 8006e46:	46e6      	mov	lr, ip
 8006e48:	f854 1b04 	ldr.w	r1, [r4], #4
 8006e4c:	fa1f fc81 	uxth.w	ip, r1
 8006e50:	44f4      	add	ip, lr
 8006e52:	0c08      	lsrs	r0, r1, #16
 8006e54:	4471      	add	r1, lr
 8006e56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006e5a:	b289      	uxth	r1, r1
 8006e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e64:	f846 1b04 	str.w	r1, [r6], #4
 8006e68:	e7dc      	b.n	8006e24 <__mdiff+0xd4>
 8006e6a:	3f01      	subs	r7, #1
 8006e6c:	e7e6      	b.n	8006e3c <__mdiff+0xec>
 8006e6e:	bf00      	nop
 8006e70:	0800accb 	.word	0x0800accb
 8006e74:	0800acdc 	.word	0x0800acdc

08006e78 <__ulp>:
 8006e78:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb4 <__ulp+0x3c>)
 8006e7a:	400b      	ands	r3, r1
 8006e7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	dc08      	bgt.n	8006e96 <__ulp+0x1e>
 8006e84:	425b      	negs	r3, r3
 8006e86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006e8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e8e:	da04      	bge.n	8006e9a <__ulp+0x22>
 8006e90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006e94:	4113      	asrs	r3, r2
 8006e96:	2200      	movs	r2, #0
 8006e98:	e008      	b.n	8006eac <__ulp+0x34>
 8006e9a:	f1a2 0314 	sub.w	r3, r2, #20
 8006e9e:	2b1e      	cmp	r3, #30
 8006ea0:	bfd6      	itet	le
 8006ea2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006ea6:	2201      	movgt	r2, #1
 8006ea8:	40da      	lsrle	r2, r3
 8006eaa:	2300      	movs	r3, #0
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	7ff00000 	.word	0x7ff00000

08006eb8 <__b2d>:
 8006eb8:	6902      	ldr	r2, [r0, #16]
 8006eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebc:	f100 0614 	add.w	r6, r0, #20
 8006ec0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006ec4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006ec8:	4f1e      	ldr	r7, [pc, #120]	@ (8006f44 <__b2d+0x8c>)
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f7ff fd54 	bl	8006978 <__hi0bits>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	f1c0 0020 	rsb	r0, r0, #32
 8006ed6:	2b0a      	cmp	r3, #10
 8006ed8:	f1a2 0504 	sub.w	r5, r2, #4
 8006edc:	6008      	str	r0, [r1, #0]
 8006ede:	dc12      	bgt.n	8006f06 <__b2d+0x4e>
 8006ee0:	42ae      	cmp	r6, r5
 8006ee2:	bf2c      	ite	cs
 8006ee4:	2200      	movcs	r2, #0
 8006ee6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006eea:	f1c3 0c0b 	rsb	ip, r3, #11
 8006eee:	3315      	adds	r3, #21
 8006ef0:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006ef4:	fa04 f303 	lsl.w	r3, r4, r3
 8006ef8:	fa22 f20c 	lsr.w	r2, r2, ip
 8006efc:	ea4e 0107 	orr.w	r1, lr, r7
 8006f00:	431a      	orrs	r2, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f06:	42ae      	cmp	r6, r5
 8006f08:	bf36      	itet	cc
 8006f0a:	f1a2 0508 	subcc.w	r5, r2, #8
 8006f0e:	2200      	movcs	r2, #0
 8006f10:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006f14:	3b0b      	subs	r3, #11
 8006f16:	d012      	beq.n	8006f3e <__b2d+0x86>
 8006f18:	f1c3 0720 	rsb	r7, r3, #32
 8006f1c:	fa22 f107 	lsr.w	r1, r2, r7
 8006f20:	409c      	lsls	r4, r3
 8006f22:	430c      	orrs	r4, r1
 8006f24:	42b5      	cmp	r5, r6
 8006f26:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006f2a:	bf94      	ite	ls
 8006f2c:	2400      	movls	r4, #0
 8006f2e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006f32:	409a      	lsls	r2, r3
 8006f34:	40fc      	lsrs	r4, r7
 8006f36:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006f3a:	4322      	orrs	r2, r4
 8006f3c:	e7e1      	b.n	8006f02 <__b2d+0x4a>
 8006f3e:	ea44 0107 	orr.w	r1, r4, r7
 8006f42:	e7de      	b.n	8006f02 <__b2d+0x4a>
 8006f44:	3ff00000 	.word	0x3ff00000

08006f48 <__d2b>:
 8006f48:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	4690      	mov	r8, r2
 8006f50:	4699      	mov	r9, r3
 8006f52:	9e08      	ldr	r6, [sp, #32]
 8006f54:	f7ff fc1e 	bl	8006794 <_Balloc>
 8006f58:	4604      	mov	r4, r0
 8006f5a:	b930      	cbnz	r0, 8006f6a <__d2b+0x22>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	f240 310f 	movw	r1, #783	@ 0x30f
 8006f62:	4b23      	ldr	r3, [pc, #140]	@ (8006ff0 <__d2b+0xa8>)
 8006f64:	4823      	ldr	r0, [pc, #140]	@ (8006ff4 <__d2b+0xac>)
 8006f66:	f001 fb3f 	bl	80085e8 <__assert_func>
 8006f6a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f72:	b10d      	cbz	r5, 8006f78 <__d2b+0x30>
 8006f74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	f1b8 0300 	subs.w	r3, r8, #0
 8006f7e:	d024      	beq.n	8006fca <__d2b+0x82>
 8006f80:	4668      	mov	r0, sp
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	f7ff fd17 	bl	80069b6 <__lo0bits>
 8006f88:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f8c:	b1d8      	cbz	r0, 8006fc6 <__d2b+0x7e>
 8006f8e:	f1c0 0320 	rsb	r3, r0, #32
 8006f92:	fa02 f303 	lsl.w	r3, r2, r3
 8006f96:	430b      	orrs	r3, r1
 8006f98:	40c2      	lsrs	r2, r0
 8006f9a:	6163      	str	r3, [r4, #20]
 8006f9c:	9201      	str	r2, [sp, #4]
 8006f9e:	9b01      	ldr	r3, [sp, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bf0c      	ite	eq
 8006fa4:	2201      	moveq	r2, #1
 8006fa6:	2202      	movne	r2, #2
 8006fa8:	61a3      	str	r3, [r4, #24]
 8006faa:	6122      	str	r2, [r4, #16]
 8006fac:	b1ad      	cbz	r5, 8006fda <__d2b+0x92>
 8006fae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006fb2:	4405      	add	r5, r0
 8006fb4:	6035      	str	r5, [r6, #0]
 8006fb6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fbc:	6018      	str	r0, [r3, #0]
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	b002      	add	sp, #8
 8006fc2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006fc6:	6161      	str	r1, [r4, #20]
 8006fc8:	e7e9      	b.n	8006f9e <__d2b+0x56>
 8006fca:	a801      	add	r0, sp, #4
 8006fcc:	f7ff fcf3 	bl	80069b6 <__lo0bits>
 8006fd0:	9b01      	ldr	r3, [sp, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	6163      	str	r3, [r4, #20]
 8006fd6:	3020      	adds	r0, #32
 8006fd8:	e7e7      	b.n	8006faa <__d2b+0x62>
 8006fda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006fde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fe2:	6030      	str	r0, [r6, #0]
 8006fe4:	6918      	ldr	r0, [r3, #16]
 8006fe6:	f7ff fcc7 	bl	8006978 <__hi0bits>
 8006fea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006fee:	e7e4      	b.n	8006fba <__d2b+0x72>
 8006ff0:	0800accb 	.word	0x0800accb
 8006ff4:	0800acdc 	.word	0x0800acdc

08006ff8 <__ratio>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	e9cd 1000 	strd	r1, r0, [sp]
 8007002:	a902      	add	r1, sp, #8
 8007004:	f7ff ff58 	bl	8006eb8 <__b2d>
 8007008:	468b      	mov	fp, r1
 800700a:	4606      	mov	r6, r0
 800700c:	460f      	mov	r7, r1
 800700e:	9800      	ldr	r0, [sp, #0]
 8007010:	a903      	add	r1, sp, #12
 8007012:	f7ff ff51 	bl	8006eb8 <__b2d>
 8007016:	460d      	mov	r5, r1
 8007018:	9b01      	ldr	r3, [sp, #4]
 800701a:	4689      	mov	r9, r1
 800701c:	6919      	ldr	r1, [r3, #16]
 800701e:	9b00      	ldr	r3, [sp, #0]
 8007020:	4604      	mov	r4, r0
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	4630      	mov	r0, r6
 8007026:	1ac9      	subs	r1, r1, r3
 8007028:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007032:	2b00      	cmp	r3, #0
 8007034:	bfcd      	iteet	gt
 8007036:	463a      	movgt	r2, r7
 8007038:	462a      	movle	r2, r5
 800703a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800703e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007042:	bfd8      	it	le
 8007044:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007048:	464b      	mov	r3, r9
 800704a:	4622      	mov	r2, r4
 800704c:	4659      	mov	r1, fp
 800704e:	f7f9 fb6d 	bl	800072c <__aeabi_ddiv>
 8007052:	b005      	add	sp, #20
 8007054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007058 <__copybits>:
 8007058:	3901      	subs	r1, #1
 800705a:	b570      	push	{r4, r5, r6, lr}
 800705c:	1149      	asrs	r1, r1, #5
 800705e:	6914      	ldr	r4, [r2, #16]
 8007060:	3101      	adds	r1, #1
 8007062:	f102 0314 	add.w	r3, r2, #20
 8007066:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800706a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800706e:	1f05      	subs	r5, r0, #4
 8007070:	42a3      	cmp	r3, r4
 8007072:	d30c      	bcc.n	800708e <__copybits+0x36>
 8007074:	1aa3      	subs	r3, r4, r2
 8007076:	3b11      	subs	r3, #17
 8007078:	f023 0303 	bic.w	r3, r3, #3
 800707c:	3211      	adds	r2, #17
 800707e:	42a2      	cmp	r2, r4
 8007080:	bf88      	it	hi
 8007082:	2300      	movhi	r3, #0
 8007084:	4418      	add	r0, r3
 8007086:	2300      	movs	r3, #0
 8007088:	4288      	cmp	r0, r1
 800708a:	d305      	bcc.n	8007098 <__copybits+0x40>
 800708c:	bd70      	pop	{r4, r5, r6, pc}
 800708e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007092:	f845 6f04 	str.w	r6, [r5, #4]!
 8007096:	e7eb      	b.n	8007070 <__copybits+0x18>
 8007098:	f840 3b04 	str.w	r3, [r0], #4
 800709c:	e7f4      	b.n	8007088 <__copybits+0x30>

0800709e <__any_on>:
 800709e:	f100 0214 	add.w	r2, r0, #20
 80070a2:	6900      	ldr	r0, [r0, #16]
 80070a4:	114b      	asrs	r3, r1, #5
 80070a6:	4298      	cmp	r0, r3
 80070a8:	b510      	push	{r4, lr}
 80070aa:	db11      	blt.n	80070d0 <__any_on+0x32>
 80070ac:	dd0a      	ble.n	80070c4 <__any_on+0x26>
 80070ae:	f011 011f 	ands.w	r1, r1, #31
 80070b2:	d007      	beq.n	80070c4 <__any_on+0x26>
 80070b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80070b8:	fa24 f001 	lsr.w	r0, r4, r1
 80070bc:	fa00 f101 	lsl.w	r1, r0, r1
 80070c0:	428c      	cmp	r4, r1
 80070c2:	d10b      	bne.n	80070dc <__any_on+0x3e>
 80070c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d803      	bhi.n	80070d4 <__any_on+0x36>
 80070cc:	2000      	movs	r0, #0
 80070ce:	bd10      	pop	{r4, pc}
 80070d0:	4603      	mov	r3, r0
 80070d2:	e7f7      	b.n	80070c4 <__any_on+0x26>
 80070d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070d8:	2900      	cmp	r1, #0
 80070da:	d0f5      	beq.n	80070c8 <__any_on+0x2a>
 80070dc:	2001      	movs	r0, #1
 80070de:	e7f6      	b.n	80070ce <__any_on+0x30>

080070e0 <sulp>:
 80070e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e4:	460f      	mov	r7, r1
 80070e6:	4690      	mov	r8, r2
 80070e8:	f7ff fec6 	bl	8006e78 <__ulp>
 80070ec:	4604      	mov	r4, r0
 80070ee:	460d      	mov	r5, r1
 80070f0:	f1b8 0f00 	cmp.w	r8, #0
 80070f4:	d011      	beq.n	800711a <sulp+0x3a>
 80070f6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80070fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80070fe:	2b00      	cmp	r3, #0
 8007100:	dd0b      	ble.n	800711a <sulp+0x3a>
 8007102:	2400      	movs	r4, #0
 8007104:	051b      	lsls	r3, r3, #20
 8007106:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800710a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800710e:	4622      	mov	r2, r4
 8007110:	462b      	mov	r3, r5
 8007112:	f7f9 f9e1 	bl	80004d8 <__aeabi_dmul>
 8007116:	4604      	mov	r4, r0
 8007118:	460d      	mov	r5, r1
 800711a:	4620      	mov	r0, r4
 800711c:	4629      	mov	r1, r5
 800711e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007122:	0000      	movs	r0, r0
 8007124:	0000      	movs	r0, r0
	...

08007128 <_strtod_l>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	b09f      	sub	sp, #124	@ 0x7c
 800712e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007130:	2200      	movs	r2, #0
 8007132:	460c      	mov	r4, r1
 8007134:	921a      	str	r2, [sp, #104]	@ 0x68
 8007136:	f04f 0a00 	mov.w	sl, #0
 800713a:	f04f 0b00 	mov.w	fp, #0
 800713e:	460a      	mov	r2, r1
 8007140:	9005      	str	r0, [sp, #20]
 8007142:	9219      	str	r2, [sp, #100]	@ 0x64
 8007144:	7811      	ldrb	r1, [r2, #0]
 8007146:	292b      	cmp	r1, #43	@ 0x2b
 8007148:	d048      	beq.n	80071dc <_strtod_l+0xb4>
 800714a:	d836      	bhi.n	80071ba <_strtod_l+0x92>
 800714c:	290d      	cmp	r1, #13
 800714e:	d830      	bhi.n	80071b2 <_strtod_l+0x8a>
 8007150:	2908      	cmp	r1, #8
 8007152:	d830      	bhi.n	80071b6 <_strtod_l+0x8e>
 8007154:	2900      	cmp	r1, #0
 8007156:	d039      	beq.n	80071cc <_strtod_l+0xa4>
 8007158:	2200      	movs	r2, #0
 800715a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800715c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800715e:	782a      	ldrb	r2, [r5, #0]
 8007160:	2a30      	cmp	r2, #48	@ 0x30
 8007162:	f040 80b1 	bne.w	80072c8 <_strtod_l+0x1a0>
 8007166:	786a      	ldrb	r2, [r5, #1]
 8007168:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800716c:	2a58      	cmp	r2, #88	@ 0x58
 800716e:	d16c      	bne.n	800724a <_strtod_l+0x122>
 8007170:	9302      	str	r3, [sp, #8]
 8007172:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007174:	4a8e      	ldr	r2, [pc, #568]	@ (80073b0 <_strtod_l+0x288>)
 8007176:	9301      	str	r3, [sp, #4]
 8007178:	ab1a      	add	r3, sp, #104	@ 0x68
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	9805      	ldr	r0, [sp, #20]
 800717e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007180:	a919      	add	r1, sp, #100	@ 0x64
 8007182:	f001 facb 	bl	800871c <__gethex>
 8007186:	f010 060f 	ands.w	r6, r0, #15
 800718a:	4604      	mov	r4, r0
 800718c:	d005      	beq.n	800719a <_strtod_l+0x72>
 800718e:	2e06      	cmp	r6, #6
 8007190:	d126      	bne.n	80071e0 <_strtod_l+0xb8>
 8007192:	2300      	movs	r3, #0
 8007194:	3501      	adds	r5, #1
 8007196:	9519      	str	r5, [sp, #100]	@ 0x64
 8007198:	930b      	str	r3, [sp, #44]	@ 0x2c
 800719a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800719c:	2b00      	cmp	r3, #0
 800719e:	f040 8584 	bne.w	8007caa <_strtod_l+0xb82>
 80071a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071a4:	b1bb      	cbz	r3, 80071d6 <_strtod_l+0xae>
 80071a6:	4650      	mov	r0, sl
 80071a8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80071ac:	b01f      	add	sp, #124	@ 0x7c
 80071ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b2:	2920      	cmp	r1, #32
 80071b4:	d1d0      	bne.n	8007158 <_strtod_l+0x30>
 80071b6:	3201      	adds	r2, #1
 80071b8:	e7c3      	b.n	8007142 <_strtod_l+0x1a>
 80071ba:	292d      	cmp	r1, #45	@ 0x2d
 80071bc:	d1cc      	bne.n	8007158 <_strtod_l+0x30>
 80071be:	2101      	movs	r1, #1
 80071c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80071c2:	1c51      	adds	r1, r2, #1
 80071c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80071c6:	7852      	ldrb	r2, [r2, #1]
 80071c8:	2a00      	cmp	r2, #0
 80071ca:	d1c7      	bne.n	800715c <_strtod_l+0x34>
 80071cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071ce:	9419      	str	r4, [sp, #100]	@ 0x64
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 8568 	bne.w	8007ca6 <_strtod_l+0xb7e>
 80071d6:	4650      	mov	r0, sl
 80071d8:	4659      	mov	r1, fp
 80071da:	e7e7      	b.n	80071ac <_strtod_l+0x84>
 80071dc:	2100      	movs	r1, #0
 80071de:	e7ef      	b.n	80071c0 <_strtod_l+0x98>
 80071e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80071e2:	b13a      	cbz	r2, 80071f4 <_strtod_l+0xcc>
 80071e4:	2135      	movs	r1, #53	@ 0x35
 80071e6:	a81c      	add	r0, sp, #112	@ 0x70
 80071e8:	f7ff ff36 	bl	8007058 <__copybits>
 80071ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071ee:	9805      	ldr	r0, [sp, #20]
 80071f0:	f7ff fb10 	bl	8006814 <_Bfree>
 80071f4:	3e01      	subs	r6, #1
 80071f6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80071f8:	2e04      	cmp	r6, #4
 80071fa:	d806      	bhi.n	800720a <_strtod_l+0xe2>
 80071fc:	e8df f006 	tbb	[pc, r6]
 8007200:	201d0314 	.word	0x201d0314
 8007204:	14          	.byte	0x14
 8007205:	00          	.byte	0x00
 8007206:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800720a:	05e1      	lsls	r1, r4, #23
 800720c:	bf48      	it	mi
 800720e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007212:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007216:	0d1b      	lsrs	r3, r3, #20
 8007218:	051b      	lsls	r3, r3, #20
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1bd      	bne.n	800719a <_strtod_l+0x72>
 800721e:	f7fe fb1d 	bl	800585c <__errno>
 8007222:	2322      	movs	r3, #34	@ 0x22
 8007224:	6003      	str	r3, [r0, #0]
 8007226:	e7b8      	b.n	800719a <_strtod_l+0x72>
 8007228:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800722c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007230:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007234:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007238:	e7e7      	b.n	800720a <_strtod_l+0xe2>
 800723a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80073b4 <_strtod_l+0x28c>
 800723e:	e7e4      	b.n	800720a <_strtod_l+0xe2>
 8007240:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007244:	f04f 3aff 	mov.w	sl, #4294967295
 8007248:	e7df      	b.n	800720a <_strtod_l+0xe2>
 800724a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	2b30      	cmp	r3, #48	@ 0x30
 8007254:	d0f9      	beq.n	800724a <_strtod_l+0x122>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d09f      	beq.n	800719a <_strtod_l+0x72>
 800725a:	2301      	movs	r3, #1
 800725c:	9309      	str	r3, [sp, #36]	@ 0x24
 800725e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007260:	220a      	movs	r2, #10
 8007262:	930c      	str	r3, [sp, #48]	@ 0x30
 8007264:	2300      	movs	r3, #0
 8007266:	461f      	mov	r7, r3
 8007268:	9308      	str	r3, [sp, #32]
 800726a:	930a      	str	r3, [sp, #40]	@ 0x28
 800726c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800726e:	7805      	ldrb	r5, [r0, #0]
 8007270:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007274:	b2d9      	uxtb	r1, r3
 8007276:	2909      	cmp	r1, #9
 8007278:	d928      	bls.n	80072cc <_strtod_l+0x1a4>
 800727a:	2201      	movs	r2, #1
 800727c:	494e      	ldr	r1, [pc, #312]	@ (80073b8 <_strtod_l+0x290>)
 800727e:	f001 f968 	bl	8008552 <strncmp>
 8007282:	2800      	cmp	r0, #0
 8007284:	d032      	beq.n	80072ec <_strtod_l+0x1c4>
 8007286:	2000      	movs	r0, #0
 8007288:	462a      	mov	r2, r5
 800728a:	4681      	mov	r9, r0
 800728c:	463d      	mov	r5, r7
 800728e:	4603      	mov	r3, r0
 8007290:	2a65      	cmp	r2, #101	@ 0x65
 8007292:	d001      	beq.n	8007298 <_strtod_l+0x170>
 8007294:	2a45      	cmp	r2, #69	@ 0x45
 8007296:	d114      	bne.n	80072c2 <_strtod_l+0x19a>
 8007298:	b91d      	cbnz	r5, 80072a2 <_strtod_l+0x17a>
 800729a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800729c:	4302      	orrs	r2, r0
 800729e:	d095      	beq.n	80071cc <_strtod_l+0xa4>
 80072a0:	2500      	movs	r5, #0
 80072a2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80072a4:	1c62      	adds	r2, r4, #1
 80072a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80072a8:	7862      	ldrb	r2, [r4, #1]
 80072aa:	2a2b      	cmp	r2, #43	@ 0x2b
 80072ac:	d077      	beq.n	800739e <_strtod_l+0x276>
 80072ae:	2a2d      	cmp	r2, #45	@ 0x2d
 80072b0:	d07b      	beq.n	80073aa <_strtod_l+0x282>
 80072b2:	f04f 0c00 	mov.w	ip, #0
 80072b6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80072ba:	2909      	cmp	r1, #9
 80072bc:	f240 8082 	bls.w	80073c4 <_strtod_l+0x29c>
 80072c0:	9419      	str	r4, [sp, #100]	@ 0x64
 80072c2:	f04f 0800 	mov.w	r8, #0
 80072c6:	e0a2      	b.n	800740e <_strtod_l+0x2e6>
 80072c8:	2300      	movs	r3, #0
 80072ca:	e7c7      	b.n	800725c <_strtod_l+0x134>
 80072cc:	2f08      	cmp	r7, #8
 80072ce:	bfd5      	itete	le
 80072d0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80072d2:	9908      	ldrgt	r1, [sp, #32]
 80072d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80072d8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80072dc:	f100 0001 	add.w	r0, r0, #1
 80072e0:	bfd4      	ite	le
 80072e2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80072e4:	9308      	strgt	r3, [sp, #32]
 80072e6:	3701      	adds	r7, #1
 80072e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80072ea:	e7bf      	b.n	800726c <_strtod_l+0x144>
 80072ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80072f2:	785a      	ldrb	r2, [r3, #1]
 80072f4:	b37f      	cbz	r7, 8007356 <_strtod_l+0x22e>
 80072f6:	4681      	mov	r9, r0
 80072f8:	463d      	mov	r5, r7
 80072fa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80072fe:	2b09      	cmp	r3, #9
 8007300:	d912      	bls.n	8007328 <_strtod_l+0x200>
 8007302:	2301      	movs	r3, #1
 8007304:	e7c4      	b.n	8007290 <_strtod_l+0x168>
 8007306:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007308:	3001      	adds	r0, #1
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	9219      	str	r2, [sp, #100]	@ 0x64
 800730e:	785a      	ldrb	r2, [r3, #1]
 8007310:	2a30      	cmp	r2, #48	@ 0x30
 8007312:	d0f8      	beq.n	8007306 <_strtod_l+0x1de>
 8007314:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007318:	2b08      	cmp	r3, #8
 800731a:	f200 84cb 	bhi.w	8007cb4 <_strtod_l+0xb8c>
 800731e:	4681      	mov	r9, r0
 8007320:	2000      	movs	r0, #0
 8007322:	4605      	mov	r5, r0
 8007324:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007326:	930c      	str	r3, [sp, #48]	@ 0x30
 8007328:	3a30      	subs	r2, #48	@ 0x30
 800732a:	f100 0301 	add.w	r3, r0, #1
 800732e:	d02a      	beq.n	8007386 <_strtod_l+0x25e>
 8007330:	4499      	add	r9, r3
 8007332:	210a      	movs	r1, #10
 8007334:	462b      	mov	r3, r5
 8007336:	eb00 0c05 	add.w	ip, r0, r5
 800733a:	4563      	cmp	r3, ip
 800733c:	d10d      	bne.n	800735a <_strtod_l+0x232>
 800733e:	1c69      	adds	r1, r5, #1
 8007340:	4401      	add	r1, r0
 8007342:	4428      	add	r0, r5
 8007344:	2808      	cmp	r0, #8
 8007346:	dc16      	bgt.n	8007376 <_strtod_l+0x24e>
 8007348:	230a      	movs	r3, #10
 800734a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800734c:	fb03 2300 	mla	r3, r3, r0, r2
 8007350:	930a      	str	r3, [sp, #40]	@ 0x28
 8007352:	2300      	movs	r3, #0
 8007354:	e018      	b.n	8007388 <_strtod_l+0x260>
 8007356:	4638      	mov	r0, r7
 8007358:	e7da      	b.n	8007310 <_strtod_l+0x1e8>
 800735a:	2b08      	cmp	r3, #8
 800735c:	f103 0301 	add.w	r3, r3, #1
 8007360:	dc03      	bgt.n	800736a <_strtod_l+0x242>
 8007362:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007364:	434e      	muls	r6, r1
 8007366:	960a      	str	r6, [sp, #40]	@ 0x28
 8007368:	e7e7      	b.n	800733a <_strtod_l+0x212>
 800736a:	2b10      	cmp	r3, #16
 800736c:	bfde      	ittt	le
 800736e:	9e08      	ldrle	r6, [sp, #32]
 8007370:	434e      	mulle	r6, r1
 8007372:	9608      	strle	r6, [sp, #32]
 8007374:	e7e1      	b.n	800733a <_strtod_l+0x212>
 8007376:	280f      	cmp	r0, #15
 8007378:	dceb      	bgt.n	8007352 <_strtod_l+0x22a>
 800737a:	230a      	movs	r3, #10
 800737c:	9808      	ldr	r0, [sp, #32]
 800737e:	fb03 2300 	mla	r3, r3, r0, r2
 8007382:	9308      	str	r3, [sp, #32]
 8007384:	e7e5      	b.n	8007352 <_strtod_l+0x22a>
 8007386:	4629      	mov	r1, r5
 8007388:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800738a:	460d      	mov	r5, r1
 800738c:	1c50      	adds	r0, r2, #1
 800738e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007390:	7852      	ldrb	r2, [r2, #1]
 8007392:	4618      	mov	r0, r3
 8007394:	e7b1      	b.n	80072fa <_strtod_l+0x1d2>
 8007396:	f04f 0900 	mov.w	r9, #0
 800739a:	2301      	movs	r3, #1
 800739c:	e77d      	b.n	800729a <_strtod_l+0x172>
 800739e:	f04f 0c00 	mov.w	ip, #0
 80073a2:	1ca2      	adds	r2, r4, #2
 80073a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80073a6:	78a2      	ldrb	r2, [r4, #2]
 80073a8:	e785      	b.n	80072b6 <_strtod_l+0x18e>
 80073aa:	f04f 0c01 	mov.w	ip, #1
 80073ae:	e7f8      	b.n	80073a2 <_strtod_l+0x27a>
 80073b0:	0800ae50 	.word	0x0800ae50
 80073b4:	7ff00000 	.word	0x7ff00000
 80073b8:	0800ae38 	.word	0x0800ae38
 80073bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073be:	1c51      	adds	r1, r2, #1
 80073c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80073c2:	7852      	ldrb	r2, [r2, #1]
 80073c4:	2a30      	cmp	r2, #48	@ 0x30
 80073c6:	d0f9      	beq.n	80073bc <_strtod_l+0x294>
 80073c8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80073cc:	2908      	cmp	r1, #8
 80073ce:	f63f af78 	bhi.w	80072c2 <_strtod_l+0x19a>
 80073d2:	f04f 080a 	mov.w	r8, #10
 80073d6:	3a30      	subs	r2, #48	@ 0x30
 80073d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80073da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80073de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80073e0:	1c56      	adds	r6, r2, #1
 80073e2:	9619      	str	r6, [sp, #100]	@ 0x64
 80073e4:	7852      	ldrb	r2, [r2, #1]
 80073e6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80073ea:	f1be 0f09 	cmp.w	lr, #9
 80073ee:	d939      	bls.n	8007464 <_strtod_l+0x33c>
 80073f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80073f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80073f6:	1a76      	subs	r6, r6, r1
 80073f8:	2e08      	cmp	r6, #8
 80073fa:	dc03      	bgt.n	8007404 <_strtod_l+0x2dc>
 80073fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80073fe:	4588      	cmp	r8, r1
 8007400:	bfa8      	it	ge
 8007402:	4688      	movge	r8, r1
 8007404:	f1bc 0f00 	cmp.w	ip, #0
 8007408:	d001      	beq.n	800740e <_strtod_l+0x2e6>
 800740a:	f1c8 0800 	rsb	r8, r8, #0
 800740e:	2d00      	cmp	r5, #0
 8007410:	d14e      	bne.n	80074b0 <_strtod_l+0x388>
 8007412:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007414:	4308      	orrs	r0, r1
 8007416:	f47f aec0 	bne.w	800719a <_strtod_l+0x72>
 800741a:	2b00      	cmp	r3, #0
 800741c:	f47f aed6 	bne.w	80071cc <_strtod_l+0xa4>
 8007420:	2a69      	cmp	r2, #105	@ 0x69
 8007422:	d028      	beq.n	8007476 <_strtod_l+0x34e>
 8007424:	dc25      	bgt.n	8007472 <_strtod_l+0x34a>
 8007426:	2a49      	cmp	r2, #73	@ 0x49
 8007428:	d025      	beq.n	8007476 <_strtod_l+0x34e>
 800742a:	2a4e      	cmp	r2, #78	@ 0x4e
 800742c:	f47f aece 	bne.w	80071cc <_strtod_l+0xa4>
 8007430:	499a      	ldr	r1, [pc, #616]	@ (800769c <_strtod_l+0x574>)
 8007432:	a819      	add	r0, sp, #100	@ 0x64
 8007434:	f001 fb94 	bl	8008b60 <__match>
 8007438:	2800      	cmp	r0, #0
 800743a:	f43f aec7 	beq.w	80071cc <_strtod_l+0xa4>
 800743e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b28      	cmp	r3, #40	@ 0x28
 8007444:	d12e      	bne.n	80074a4 <_strtod_l+0x37c>
 8007446:	4996      	ldr	r1, [pc, #600]	@ (80076a0 <_strtod_l+0x578>)
 8007448:	aa1c      	add	r2, sp, #112	@ 0x70
 800744a:	a819      	add	r0, sp, #100	@ 0x64
 800744c:	f001 fb9c 	bl	8008b88 <__hexnan>
 8007450:	2805      	cmp	r0, #5
 8007452:	d127      	bne.n	80074a4 <_strtod_l+0x37c>
 8007454:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007456:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800745a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800745e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007462:	e69a      	b.n	800719a <_strtod_l+0x72>
 8007464:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007466:	fb08 2101 	mla	r1, r8, r1, r2
 800746a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800746e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007470:	e7b5      	b.n	80073de <_strtod_l+0x2b6>
 8007472:	2a6e      	cmp	r2, #110	@ 0x6e
 8007474:	e7da      	b.n	800742c <_strtod_l+0x304>
 8007476:	498b      	ldr	r1, [pc, #556]	@ (80076a4 <_strtod_l+0x57c>)
 8007478:	a819      	add	r0, sp, #100	@ 0x64
 800747a:	f001 fb71 	bl	8008b60 <__match>
 800747e:	2800      	cmp	r0, #0
 8007480:	f43f aea4 	beq.w	80071cc <_strtod_l+0xa4>
 8007484:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007486:	4988      	ldr	r1, [pc, #544]	@ (80076a8 <_strtod_l+0x580>)
 8007488:	3b01      	subs	r3, #1
 800748a:	a819      	add	r0, sp, #100	@ 0x64
 800748c:	9319      	str	r3, [sp, #100]	@ 0x64
 800748e:	f001 fb67 	bl	8008b60 <__match>
 8007492:	b910      	cbnz	r0, 800749a <_strtod_l+0x372>
 8007494:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007496:	3301      	adds	r3, #1
 8007498:	9319      	str	r3, [sp, #100]	@ 0x64
 800749a:	f04f 0a00 	mov.w	sl, #0
 800749e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80076ac <_strtod_l+0x584>
 80074a2:	e67a      	b.n	800719a <_strtod_l+0x72>
 80074a4:	4882      	ldr	r0, [pc, #520]	@ (80076b0 <_strtod_l+0x588>)
 80074a6:	f001 f899 	bl	80085dc <nan>
 80074aa:	4682      	mov	sl, r0
 80074ac:	468b      	mov	fp, r1
 80074ae:	e674      	b.n	800719a <_strtod_l+0x72>
 80074b0:	eba8 0309 	sub.w	r3, r8, r9
 80074b4:	2f00      	cmp	r7, #0
 80074b6:	bf08      	it	eq
 80074b8:	462f      	moveq	r7, r5
 80074ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80074bc:	2d10      	cmp	r5, #16
 80074be:	462c      	mov	r4, r5
 80074c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80074c2:	bfa8      	it	ge
 80074c4:	2410      	movge	r4, #16
 80074c6:	f7f8 ff8d 	bl	80003e4 <__aeabi_ui2d>
 80074ca:	2d09      	cmp	r5, #9
 80074cc:	4682      	mov	sl, r0
 80074ce:	468b      	mov	fp, r1
 80074d0:	dc11      	bgt.n	80074f6 <_strtod_l+0x3ce>
 80074d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f43f ae60 	beq.w	800719a <_strtod_l+0x72>
 80074da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074dc:	dd76      	ble.n	80075cc <_strtod_l+0x4a4>
 80074de:	2b16      	cmp	r3, #22
 80074e0:	dc5d      	bgt.n	800759e <_strtod_l+0x476>
 80074e2:	4974      	ldr	r1, [pc, #464]	@ (80076b4 <_strtod_l+0x58c>)
 80074e4:	4652      	mov	r2, sl
 80074e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074ea:	465b      	mov	r3, fp
 80074ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f0:	f7f8 fff2 	bl	80004d8 <__aeabi_dmul>
 80074f4:	e7d9      	b.n	80074aa <_strtod_l+0x382>
 80074f6:	4b6f      	ldr	r3, [pc, #444]	@ (80076b4 <_strtod_l+0x58c>)
 80074f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007500:	f7f8 ffea 	bl	80004d8 <__aeabi_dmul>
 8007504:	4682      	mov	sl, r0
 8007506:	9808      	ldr	r0, [sp, #32]
 8007508:	468b      	mov	fp, r1
 800750a:	f7f8 ff6b 	bl	80003e4 <__aeabi_ui2d>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4650      	mov	r0, sl
 8007514:	4659      	mov	r1, fp
 8007516:	f7f8 fe29 	bl	800016c <__adddf3>
 800751a:	2d0f      	cmp	r5, #15
 800751c:	4682      	mov	sl, r0
 800751e:	468b      	mov	fp, r1
 8007520:	ddd7      	ble.n	80074d2 <_strtod_l+0x3aa>
 8007522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007524:	1b2c      	subs	r4, r5, r4
 8007526:	441c      	add	r4, r3
 8007528:	2c00      	cmp	r4, #0
 800752a:	f340 8096 	ble.w	800765a <_strtod_l+0x532>
 800752e:	f014 030f 	ands.w	r3, r4, #15
 8007532:	d00a      	beq.n	800754a <_strtod_l+0x422>
 8007534:	495f      	ldr	r1, [pc, #380]	@ (80076b4 <_strtod_l+0x58c>)
 8007536:	4652      	mov	r2, sl
 8007538:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800753c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007540:	465b      	mov	r3, fp
 8007542:	f7f8 ffc9 	bl	80004d8 <__aeabi_dmul>
 8007546:	4682      	mov	sl, r0
 8007548:	468b      	mov	fp, r1
 800754a:	f034 040f 	bics.w	r4, r4, #15
 800754e:	d073      	beq.n	8007638 <_strtod_l+0x510>
 8007550:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007554:	dd48      	ble.n	80075e8 <_strtod_l+0x4c0>
 8007556:	2400      	movs	r4, #0
 8007558:	46a0      	mov	r8, r4
 800755a:	46a1      	mov	r9, r4
 800755c:	940a      	str	r4, [sp, #40]	@ 0x28
 800755e:	2322      	movs	r3, #34	@ 0x22
 8007560:	f04f 0a00 	mov.w	sl, #0
 8007564:	9a05      	ldr	r2, [sp, #20]
 8007566:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80076ac <_strtod_l+0x584>
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800756e:	2b00      	cmp	r3, #0
 8007570:	f43f ae13 	beq.w	800719a <_strtod_l+0x72>
 8007574:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007576:	9805      	ldr	r0, [sp, #20]
 8007578:	f7ff f94c 	bl	8006814 <_Bfree>
 800757c:	4649      	mov	r1, r9
 800757e:	9805      	ldr	r0, [sp, #20]
 8007580:	f7ff f948 	bl	8006814 <_Bfree>
 8007584:	4641      	mov	r1, r8
 8007586:	9805      	ldr	r0, [sp, #20]
 8007588:	f7ff f944 	bl	8006814 <_Bfree>
 800758c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800758e:	9805      	ldr	r0, [sp, #20]
 8007590:	f7ff f940 	bl	8006814 <_Bfree>
 8007594:	4621      	mov	r1, r4
 8007596:	9805      	ldr	r0, [sp, #20]
 8007598:	f7ff f93c 	bl	8006814 <_Bfree>
 800759c:	e5fd      	b.n	800719a <_strtod_l+0x72>
 800759e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80075a4:	4293      	cmp	r3, r2
 80075a6:	dbbc      	blt.n	8007522 <_strtod_l+0x3fa>
 80075a8:	4c42      	ldr	r4, [pc, #264]	@ (80076b4 <_strtod_l+0x58c>)
 80075aa:	f1c5 050f 	rsb	r5, r5, #15
 80075ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80075b2:	4652      	mov	r2, sl
 80075b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b8:	465b      	mov	r3, fp
 80075ba:	f7f8 ff8d 	bl	80004d8 <__aeabi_dmul>
 80075be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075c0:	1b5d      	subs	r5, r3, r5
 80075c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80075c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80075ca:	e791      	b.n	80074f0 <_strtod_l+0x3c8>
 80075cc:	3316      	adds	r3, #22
 80075ce:	dba8      	blt.n	8007522 <_strtod_l+0x3fa>
 80075d0:	4b38      	ldr	r3, [pc, #224]	@ (80076b4 <_strtod_l+0x58c>)
 80075d2:	eba9 0808 	sub.w	r8, r9, r8
 80075d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80075da:	4650      	mov	r0, sl
 80075dc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80075e0:	4659      	mov	r1, fp
 80075e2:	f7f9 f8a3 	bl	800072c <__aeabi_ddiv>
 80075e6:	e760      	b.n	80074aa <_strtod_l+0x382>
 80075e8:	4b33      	ldr	r3, [pc, #204]	@ (80076b8 <_strtod_l+0x590>)
 80075ea:	4650      	mov	r0, sl
 80075ec:	9308      	str	r3, [sp, #32]
 80075ee:	2300      	movs	r3, #0
 80075f0:	4659      	mov	r1, fp
 80075f2:	461e      	mov	r6, r3
 80075f4:	1124      	asrs	r4, r4, #4
 80075f6:	2c01      	cmp	r4, #1
 80075f8:	dc21      	bgt.n	800763e <_strtod_l+0x516>
 80075fa:	b10b      	cbz	r3, 8007600 <_strtod_l+0x4d8>
 80075fc:	4682      	mov	sl, r0
 80075fe:	468b      	mov	fp, r1
 8007600:	492d      	ldr	r1, [pc, #180]	@ (80076b8 <_strtod_l+0x590>)
 8007602:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007606:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800760a:	4652      	mov	r2, sl
 800760c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007610:	465b      	mov	r3, fp
 8007612:	f7f8 ff61 	bl	80004d8 <__aeabi_dmul>
 8007616:	4b25      	ldr	r3, [pc, #148]	@ (80076ac <_strtod_l+0x584>)
 8007618:	460a      	mov	r2, r1
 800761a:	400b      	ands	r3, r1
 800761c:	4927      	ldr	r1, [pc, #156]	@ (80076bc <_strtod_l+0x594>)
 800761e:	4682      	mov	sl, r0
 8007620:	428b      	cmp	r3, r1
 8007622:	d898      	bhi.n	8007556 <_strtod_l+0x42e>
 8007624:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007628:	428b      	cmp	r3, r1
 800762a:	bf86      	itte	hi
 800762c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007630:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80076c0 <_strtod_l+0x598>
 8007634:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007638:	2300      	movs	r3, #0
 800763a:	9308      	str	r3, [sp, #32]
 800763c:	e07a      	b.n	8007734 <_strtod_l+0x60c>
 800763e:	07e2      	lsls	r2, r4, #31
 8007640:	d505      	bpl.n	800764e <_strtod_l+0x526>
 8007642:	9b08      	ldr	r3, [sp, #32]
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f7f8 ff46 	bl	80004d8 <__aeabi_dmul>
 800764c:	2301      	movs	r3, #1
 800764e:	9a08      	ldr	r2, [sp, #32]
 8007650:	3601      	adds	r6, #1
 8007652:	3208      	adds	r2, #8
 8007654:	1064      	asrs	r4, r4, #1
 8007656:	9208      	str	r2, [sp, #32]
 8007658:	e7cd      	b.n	80075f6 <_strtod_l+0x4ce>
 800765a:	d0ed      	beq.n	8007638 <_strtod_l+0x510>
 800765c:	4264      	negs	r4, r4
 800765e:	f014 020f 	ands.w	r2, r4, #15
 8007662:	d00a      	beq.n	800767a <_strtod_l+0x552>
 8007664:	4b13      	ldr	r3, [pc, #76]	@ (80076b4 <_strtod_l+0x58c>)
 8007666:	4650      	mov	r0, sl
 8007668:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800766c:	4659      	mov	r1, fp
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f7f9 f85b 	bl	800072c <__aeabi_ddiv>
 8007676:	4682      	mov	sl, r0
 8007678:	468b      	mov	fp, r1
 800767a:	1124      	asrs	r4, r4, #4
 800767c:	d0dc      	beq.n	8007638 <_strtod_l+0x510>
 800767e:	2c1f      	cmp	r4, #31
 8007680:	dd20      	ble.n	80076c4 <_strtod_l+0x59c>
 8007682:	2400      	movs	r4, #0
 8007684:	46a0      	mov	r8, r4
 8007686:	46a1      	mov	r9, r4
 8007688:	940a      	str	r4, [sp, #40]	@ 0x28
 800768a:	2322      	movs	r3, #34	@ 0x22
 800768c:	9a05      	ldr	r2, [sp, #20]
 800768e:	f04f 0a00 	mov.w	sl, #0
 8007692:	f04f 0b00 	mov.w	fp, #0
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	e768      	b.n	800756c <_strtod_l+0x444>
 800769a:	bf00      	nop
 800769c:	0800ac23 	.word	0x0800ac23
 80076a0:	0800ae3c 	.word	0x0800ae3c
 80076a4:	0800ac1b 	.word	0x0800ac1b
 80076a8:	0800ac52 	.word	0x0800ac52
 80076ac:	7ff00000 	.word	0x7ff00000
 80076b0:	0800afe5 	.word	0x0800afe5
 80076b4:	0800ad70 	.word	0x0800ad70
 80076b8:	0800ad48 	.word	0x0800ad48
 80076bc:	7ca00000 	.word	0x7ca00000
 80076c0:	7fefffff 	.word	0x7fefffff
 80076c4:	f014 0310 	ands.w	r3, r4, #16
 80076c8:	bf18      	it	ne
 80076ca:	236a      	movne	r3, #106	@ 0x6a
 80076cc:	4650      	mov	r0, sl
 80076ce:	9308      	str	r3, [sp, #32]
 80076d0:	4659      	mov	r1, fp
 80076d2:	2300      	movs	r3, #0
 80076d4:	4ea9      	ldr	r6, [pc, #676]	@ (800797c <_strtod_l+0x854>)
 80076d6:	07e2      	lsls	r2, r4, #31
 80076d8:	d504      	bpl.n	80076e4 <_strtod_l+0x5bc>
 80076da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80076de:	f7f8 fefb 	bl	80004d8 <__aeabi_dmul>
 80076e2:	2301      	movs	r3, #1
 80076e4:	1064      	asrs	r4, r4, #1
 80076e6:	f106 0608 	add.w	r6, r6, #8
 80076ea:	d1f4      	bne.n	80076d6 <_strtod_l+0x5ae>
 80076ec:	b10b      	cbz	r3, 80076f2 <_strtod_l+0x5ca>
 80076ee:	4682      	mov	sl, r0
 80076f0:	468b      	mov	fp, r1
 80076f2:	9b08      	ldr	r3, [sp, #32]
 80076f4:	b1b3      	cbz	r3, 8007724 <_strtod_l+0x5fc>
 80076f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80076fe:	2b00      	cmp	r3, #0
 8007700:	4659      	mov	r1, fp
 8007702:	dd0f      	ble.n	8007724 <_strtod_l+0x5fc>
 8007704:	2b1f      	cmp	r3, #31
 8007706:	dd57      	ble.n	80077b8 <_strtod_l+0x690>
 8007708:	2b34      	cmp	r3, #52	@ 0x34
 800770a:	bfd8      	it	le
 800770c:	f04f 33ff 	movle.w	r3, #4294967295
 8007710:	f04f 0a00 	mov.w	sl, #0
 8007714:	bfcf      	iteee	gt
 8007716:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800771a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800771e:	4093      	lslle	r3, r2
 8007720:	ea03 0b01 	andle.w	fp, r3, r1
 8007724:	2200      	movs	r2, #0
 8007726:	2300      	movs	r3, #0
 8007728:	4650      	mov	r0, sl
 800772a:	4659      	mov	r1, fp
 800772c:	f7f9 f93c 	bl	80009a8 <__aeabi_dcmpeq>
 8007730:	2800      	cmp	r0, #0
 8007732:	d1a6      	bne.n	8007682 <_strtod_l+0x55a>
 8007734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007736:	463a      	mov	r2, r7
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800773c:	462b      	mov	r3, r5
 800773e:	9805      	ldr	r0, [sp, #20]
 8007740:	f7ff f8d0 	bl	80068e4 <__s2b>
 8007744:	900a      	str	r0, [sp, #40]	@ 0x28
 8007746:	2800      	cmp	r0, #0
 8007748:	f43f af05 	beq.w	8007556 <_strtod_l+0x42e>
 800774c:	2400      	movs	r4, #0
 800774e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007750:	eba9 0308 	sub.w	r3, r9, r8
 8007754:	2a00      	cmp	r2, #0
 8007756:	bfa8      	it	ge
 8007758:	2300      	movge	r3, #0
 800775a:	46a0      	mov	r8, r4
 800775c:	9312      	str	r3, [sp, #72]	@ 0x48
 800775e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007762:	9316      	str	r3, [sp, #88]	@ 0x58
 8007764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007766:	9805      	ldr	r0, [sp, #20]
 8007768:	6859      	ldr	r1, [r3, #4]
 800776a:	f7ff f813 	bl	8006794 <_Balloc>
 800776e:	4681      	mov	r9, r0
 8007770:	2800      	cmp	r0, #0
 8007772:	f43f aef4 	beq.w	800755e <_strtod_l+0x436>
 8007776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007778:	300c      	adds	r0, #12
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	f103 010c 	add.w	r1, r3, #12
 8007780:	3202      	adds	r2, #2
 8007782:	0092      	lsls	r2, r2, #2
 8007784:	f7fe f8a5 	bl	80058d2 <memcpy>
 8007788:	ab1c      	add	r3, sp, #112	@ 0x70
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4652      	mov	r2, sl
 8007792:	465b      	mov	r3, fp
 8007794:	9805      	ldr	r0, [sp, #20]
 8007796:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800779a:	f7ff fbd5 	bl	8006f48 <__d2b>
 800779e:	901a      	str	r0, [sp, #104]	@ 0x68
 80077a0:	2800      	cmp	r0, #0
 80077a2:	f43f aedc 	beq.w	800755e <_strtod_l+0x436>
 80077a6:	2101      	movs	r1, #1
 80077a8:	9805      	ldr	r0, [sp, #20]
 80077aa:	f7ff f931 	bl	8006a10 <__i2b>
 80077ae:	4680      	mov	r8, r0
 80077b0:	b948      	cbnz	r0, 80077c6 <_strtod_l+0x69e>
 80077b2:	f04f 0800 	mov.w	r8, #0
 80077b6:	e6d2      	b.n	800755e <_strtod_l+0x436>
 80077b8:	f04f 32ff 	mov.w	r2, #4294967295
 80077bc:	fa02 f303 	lsl.w	r3, r2, r3
 80077c0:	ea03 0a0a 	and.w	sl, r3, sl
 80077c4:	e7ae      	b.n	8007724 <_strtod_l+0x5fc>
 80077c6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80077c8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80077ca:	2d00      	cmp	r5, #0
 80077cc:	bfab      	itete	ge
 80077ce:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80077d0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80077d2:	18ef      	addge	r7, r5, r3
 80077d4:	1b5e      	sublt	r6, r3, r5
 80077d6:	9b08      	ldr	r3, [sp, #32]
 80077d8:	bfa8      	it	ge
 80077da:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80077dc:	eba5 0503 	sub.w	r5, r5, r3
 80077e0:	4415      	add	r5, r2
 80077e2:	4b67      	ldr	r3, [pc, #412]	@ (8007980 <_strtod_l+0x858>)
 80077e4:	f105 35ff 	add.w	r5, r5, #4294967295
 80077e8:	bfb8      	it	lt
 80077ea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80077ec:	429d      	cmp	r5, r3
 80077ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80077f2:	da50      	bge.n	8007896 <_strtod_l+0x76e>
 80077f4:	1b5b      	subs	r3, r3, r5
 80077f6:	2b1f      	cmp	r3, #31
 80077f8:	f04f 0101 	mov.w	r1, #1
 80077fc:	eba2 0203 	sub.w	r2, r2, r3
 8007800:	dc3d      	bgt.n	800787e <_strtod_l+0x756>
 8007802:	fa01 f303 	lsl.w	r3, r1, r3
 8007806:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007808:	2300      	movs	r3, #0
 800780a:	9310      	str	r3, [sp, #64]	@ 0x40
 800780c:	18bd      	adds	r5, r7, r2
 800780e:	9b08      	ldr	r3, [sp, #32]
 8007810:	42af      	cmp	r7, r5
 8007812:	4416      	add	r6, r2
 8007814:	441e      	add	r6, r3
 8007816:	463b      	mov	r3, r7
 8007818:	bfa8      	it	ge
 800781a:	462b      	movge	r3, r5
 800781c:	42b3      	cmp	r3, r6
 800781e:	bfa8      	it	ge
 8007820:	4633      	movge	r3, r6
 8007822:	2b00      	cmp	r3, #0
 8007824:	bfc2      	ittt	gt
 8007826:	1aed      	subgt	r5, r5, r3
 8007828:	1af6      	subgt	r6, r6, r3
 800782a:	1aff      	subgt	r7, r7, r3
 800782c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800782e:	2b00      	cmp	r3, #0
 8007830:	dd16      	ble.n	8007860 <_strtod_l+0x738>
 8007832:	4641      	mov	r1, r8
 8007834:	461a      	mov	r2, r3
 8007836:	9805      	ldr	r0, [sp, #20]
 8007838:	f7ff f9a8 	bl	8006b8c <__pow5mult>
 800783c:	4680      	mov	r8, r0
 800783e:	2800      	cmp	r0, #0
 8007840:	d0b7      	beq.n	80077b2 <_strtod_l+0x68a>
 8007842:	4601      	mov	r1, r0
 8007844:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007846:	9805      	ldr	r0, [sp, #20]
 8007848:	f7ff f8f8 	bl	8006a3c <__multiply>
 800784c:	900e      	str	r0, [sp, #56]	@ 0x38
 800784e:	2800      	cmp	r0, #0
 8007850:	f43f ae85 	beq.w	800755e <_strtod_l+0x436>
 8007854:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007856:	9805      	ldr	r0, [sp, #20]
 8007858:	f7fe ffdc 	bl	8006814 <_Bfree>
 800785c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800785e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007860:	2d00      	cmp	r5, #0
 8007862:	dc1d      	bgt.n	80078a0 <_strtod_l+0x778>
 8007864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007866:	2b00      	cmp	r3, #0
 8007868:	dd23      	ble.n	80078b2 <_strtod_l+0x78a>
 800786a:	4649      	mov	r1, r9
 800786c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800786e:	9805      	ldr	r0, [sp, #20]
 8007870:	f7ff f98c 	bl	8006b8c <__pow5mult>
 8007874:	4681      	mov	r9, r0
 8007876:	b9e0      	cbnz	r0, 80078b2 <_strtod_l+0x78a>
 8007878:	f04f 0900 	mov.w	r9, #0
 800787c:	e66f      	b.n	800755e <_strtod_l+0x436>
 800787e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007882:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007886:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800788a:	35e2      	adds	r5, #226	@ 0xe2
 800788c:	fa01 f305 	lsl.w	r3, r1, r5
 8007890:	9310      	str	r3, [sp, #64]	@ 0x40
 8007892:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007894:	e7ba      	b.n	800780c <_strtod_l+0x6e4>
 8007896:	2300      	movs	r3, #0
 8007898:	9310      	str	r3, [sp, #64]	@ 0x40
 800789a:	2301      	movs	r3, #1
 800789c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800789e:	e7b5      	b.n	800780c <_strtod_l+0x6e4>
 80078a0:	462a      	mov	r2, r5
 80078a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078a4:	9805      	ldr	r0, [sp, #20]
 80078a6:	f7ff f9cb 	bl	8006c40 <__lshift>
 80078aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d1d9      	bne.n	8007864 <_strtod_l+0x73c>
 80078b0:	e655      	b.n	800755e <_strtod_l+0x436>
 80078b2:	2e00      	cmp	r6, #0
 80078b4:	dd07      	ble.n	80078c6 <_strtod_l+0x79e>
 80078b6:	4649      	mov	r1, r9
 80078b8:	4632      	mov	r2, r6
 80078ba:	9805      	ldr	r0, [sp, #20]
 80078bc:	f7ff f9c0 	bl	8006c40 <__lshift>
 80078c0:	4681      	mov	r9, r0
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d0d8      	beq.n	8007878 <_strtod_l+0x750>
 80078c6:	2f00      	cmp	r7, #0
 80078c8:	dd08      	ble.n	80078dc <_strtod_l+0x7b4>
 80078ca:	4641      	mov	r1, r8
 80078cc:	463a      	mov	r2, r7
 80078ce:	9805      	ldr	r0, [sp, #20]
 80078d0:	f7ff f9b6 	bl	8006c40 <__lshift>
 80078d4:	4680      	mov	r8, r0
 80078d6:	2800      	cmp	r0, #0
 80078d8:	f43f ae41 	beq.w	800755e <_strtod_l+0x436>
 80078dc:	464a      	mov	r2, r9
 80078de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078e0:	9805      	ldr	r0, [sp, #20]
 80078e2:	f7ff fa35 	bl	8006d50 <__mdiff>
 80078e6:	4604      	mov	r4, r0
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f43f ae38 	beq.w	800755e <_strtod_l+0x436>
 80078ee:	68c3      	ldr	r3, [r0, #12]
 80078f0:	4641      	mov	r1, r8
 80078f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078f4:	2300      	movs	r3, #0
 80078f6:	60c3      	str	r3, [r0, #12]
 80078f8:	f7ff fa0e 	bl	8006d18 <__mcmp>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	da45      	bge.n	800798c <_strtod_l+0x864>
 8007900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007902:	ea53 030a 	orrs.w	r3, r3, sl
 8007906:	d16b      	bne.n	80079e0 <_strtod_l+0x8b8>
 8007908:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800790c:	2b00      	cmp	r3, #0
 800790e:	d167      	bne.n	80079e0 <_strtod_l+0x8b8>
 8007910:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007914:	0d1b      	lsrs	r3, r3, #20
 8007916:	051b      	lsls	r3, r3, #20
 8007918:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800791c:	d960      	bls.n	80079e0 <_strtod_l+0x8b8>
 800791e:	6963      	ldr	r3, [r4, #20]
 8007920:	b913      	cbnz	r3, 8007928 <_strtod_l+0x800>
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	2b01      	cmp	r3, #1
 8007926:	dd5b      	ble.n	80079e0 <_strtod_l+0x8b8>
 8007928:	4621      	mov	r1, r4
 800792a:	2201      	movs	r2, #1
 800792c:	9805      	ldr	r0, [sp, #20]
 800792e:	f7ff f987 	bl	8006c40 <__lshift>
 8007932:	4641      	mov	r1, r8
 8007934:	4604      	mov	r4, r0
 8007936:	f7ff f9ef 	bl	8006d18 <__mcmp>
 800793a:	2800      	cmp	r0, #0
 800793c:	dd50      	ble.n	80079e0 <_strtod_l+0x8b8>
 800793e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007942:	9a08      	ldr	r2, [sp, #32]
 8007944:	0d1b      	lsrs	r3, r3, #20
 8007946:	051b      	lsls	r3, r3, #20
 8007948:	2a00      	cmp	r2, #0
 800794a:	d06a      	beq.n	8007a22 <_strtod_l+0x8fa>
 800794c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007950:	d867      	bhi.n	8007a22 <_strtod_l+0x8fa>
 8007952:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007956:	f67f ae98 	bls.w	800768a <_strtod_l+0x562>
 800795a:	4650      	mov	r0, sl
 800795c:	4659      	mov	r1, fp
 800795e:	4b09      	ldr	r3, [pc, #36]	@ (8007984 <_strtod_l+0x85c>)
 8007960:	2200      	movs	r2, #0
 8007962:	f7f8 fdb9 	bl	80004d8 <__aeabi_dmul>
 8007966:	4b08      	ldr	r3, [pc, #32]	@ (8007988 <_strtod_l+0x860>)
 8007968:	4682      	mov	sl, r0
 800796a:	400b      	ands	r3, r1
 800796c:	468b      	mov	fp, r1
 800796e:	2b00      	cmp	r3, #0
 8007970:	f47f ae00 	bne.w	8007574 <_strtod_l+0x44c>
 8007974:	2322      	movs	r3, #34	@ 0x22
 8007976:	9a05      	ldr	r2, [sp, #20]
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	e5fb      	b.n	8007574 <_strtod_l+0x44c>
 800797c:	0800ae68 	.word	0x0800ae68
 8007980:	fffffc02 	.word	0xfffffc02
 8007984:	39500000 	.word	0x39500000
 8007988:	7ff00000 	.word	0x7ff00000
 800798c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007990:	d165      	bne.n	8007a5e <_strtod_l+0x936>
 8007992:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007998:	b35a      	cbz	r2, 80079f2 <_strtod_l+0x8ca>
 800799a:	4a99      	ldr	r2, [pc, #612]	@ (8007c00 <_strtod_l+0xad8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d12b      	bne.n	80079f8 <_strtod_l+0x8d0>
 80079a0:	9b08      	ldr	r3, [sp, #32]
 80079a2:	4651      	mov	r1, sl
 80079a4:	b303      	cbz	r3, 80079e8 <_strtod_l+0x8c0>
 80079a6:	465a      	mov	r2, fp
 80079a8:	4b96      	ldr	r3, [pc, #600]	@ (8007c04 <_strtod_l+0xadc>)
 80079aa:	4013      	ands	r3, r2
 80079ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80079b0:	f04f 32ff 	mov.w	r2, #4294967295
 80079b4:	d81b      	bhi.n	80079ee <_strtod_l+0x8c6>
 80079b6:	0d1b      	lsrs	r3, r3, #20
 80079b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80079bc:	fa02 f303 	lsl.w	r3, r2, r3
 80079c0:	4299      	cmp	r1, r3
 80079c2:	d119      	bne.n	80079f8 <_strtod_l+0x8d0>
 80079c4:	4b90      	ldr	r3, [pc, #576]	@ (8007c08 <_strtod_l+0xae0>)
 80079c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d102      	bne.n	80079d2 <_strtod_l+0x8aa>
 80079cc:	3101      	adds	r1, #1
 80079ce:	f43f adc6 	beq.w	800755e <_strtod_l+0x436>
 80079d2:	f04f 0a00 	mov.w	sl, #0
 80079d6:	4b8b      	ldr	r3, [pc, #556]	@ (8007c04 <_strtod_l+0xadc>)
 80079d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079da:	401a      	ands	r2, r3
 80079dc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80079e0:	9b08      	ldr	r3, [sp, #32]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1b9      	bne.n	800795a <_strtod_l+0x832>
 80079e6:	e5c5      	b.n	8007574 <_strtod_l+0x44c>
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ec:	e7e8      	b.n	80079c0 <_strtod_l+0x898>
 80079ee:	4613      	mov	r3, r2
 80079f0:	e7e6      	b.n	80079c0 <_strtod_l+0x898>
 80079f2:	ea53 030a 	orrs.w	r3, r3, sl
 80079f6:	d0a2      	beq.n	800793e <_strtod_l+0x816>
 80079f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079fa:	b1db      	cbz	r3, 8007a34 <_strtod_l+0x90c>
 80079fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079fe:	4213      	tst	r3, r2
 8007a00:	d0ee      	beq.n	80079e0 <_strtod_l+0x8b8>
 8007a02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a04:	4650      	mov	r0, sl
 8007a06:	4659      	mov	r1, fp
 8007a08:	9a08      	ldr	r2, [sp, #32]
 8007a0a:	b1bb      	cbz	r3, 8007a3c <_strtod_l+0x914>
 8007a0c:	f7ff fb68 	bl	80070e0 <sulp>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a18:	f7f8 fba8 	bl	800016c <__adddf3>
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	468b      	mov	fp, r1
 8007a20:	e7de      	b.n	80079e0 <_strtod_l+0x8b8>
 8007a22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007a26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a2a:	f04f 3aff 	mov.w	sl, #4294967295
 8007a2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a32:	e7d5      	b.n	80079e0 <_strtod_l+0x8b8>
 8007a34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a36:	ea13 0f0a 	tst.w	r3, sl
 8007a3a:	e7e1      	b.n	8007a00 <_strtod_l+0x8d8>
 8007a3c:	f7ff fb50 	bl	80070e0 <sulp>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a48:	f7f8 fb8e 	bl	8000168 <__aeabi_dsub>
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2300      	movs	r3, #0
 8007a50:	4682      	mov	sl, r0
 8007a52:	468b      	mov	fp, r1
 8007a54:	f7f8 ffa8 	bl	80009a8 <__aeabi_dcmpeq>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d0c1      	beq.n	80079e0 <_strtod_l+0x8b8>
 8007a5c:	e615      	b.n	800768a <_strtod_l+0x562>
 8007a5e:	4641      	mov	r1, r8
 8007a60:	4620      	mov	r0, r4
 8007a62:	f7ff fac9 	bl	8006ff8 <__ratio>
 8007a66:	2200      	movs	r2, #0
 8007a68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	460f      	mov	r7, r1
 8007a70:	f7f8 ffae 	bl	80009d0 <__aeabi_dcmple>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d06d      	beq.n	8007b54 <_strtod_l+0xa2c>
 8007a78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d178      	bne.n	8007b70 <_strtod_l+0xa48>
 8007a7e:	f1ba 0f00 	cmp.w	sl, #0
 8007a82:	d156      	bne.n	8007b32 <_strtod_l+0xa0a>
 8007a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d158      	bne.n	8007b40 <_strtod_l+0xa18>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	4b5d      	ldr	r3, [pc, #372]	@ (8007c0c <_strtod_l+0xae4>)
 8007a96:	f7f8 ff91 	bl	80009bc <__aeabi_dcmplt>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d157      	bne.n	8007b4e <_strtod_l+0xa26>
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8007c10 <_strtod_l+0xae8>)
 8007aa6:	f7f8 fd17 	bl	80004d8 <__aeabi_dmul>
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460f      	mov	r7, r1
 8007aae:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007ab2:	9606      	str	r6, [sp, #24]
 8007ab4:	9307      	str	r3, [sp, #28]
 8007ab6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007aba:	4d52      	ldr	r5, [pc, #328]	@ (8007c04 <_strtod_l+0xadc>)
 8007abc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ac0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ac2:	401d      	ands	r5, r3
 8007ac4:	4b53      	ldr	r3, [pc, #332]	@ (8007c14 <_strtod_l+0xaec>)
 8007ac6:	429d      	cmp	r5, r3
 8007ac8:	f040 80aa 	bne.w	8007c20 <_strtod_l+0xaf8>
 8007acc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ace:	4650      	mov	r0, sl
 8007ad0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007ad4:	4659      	mov	r1, fp
 8007ad6:	f7ff f9cf 	bl	8006e78 <__ulp>
 8007ada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ade:	f7f8 fcfb 	bl	80004d8 <__aeabi_dmul>
 8007ae2:	4652      	mov	r2, sl
 8007ae4:	465b      	mov	r3, fp
 8007ae6:	f7f8 fb41 	bl	800016c <__adddf3>
 8007aea:	460b      	mov	r3, r1
 8007aec:	4945      	ldr	r1, [pc, #276]	@ (8007c04 <_strtod_l+0xadc>)
 8007aee:	4a4a      	ldr	r2, [pc, #296]	@ (8007c18 <_strtod_l+0xaf0>)
 8007af0:	4019      	ands	r1, r3
 8007af2:	4291      	cmp	r1, r2
 8007af4:	4682      	mov	sl, r0
 8007af6:	d942      	bls.n	8007b7e <_strtod_l+0xa56>
 8007af8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007afa:	4b43      	ldr	r3, [pc, #268]	@ (8007c08 <_strtod_l+0xae0>)
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d103      	bne.n	8007b08 <_strtod_l+0x9e0>
 8007b00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b02:	3301      	adds	r3, #1
 8007b04:	f43f ad2b 	beq.w	800755e <_strtod_l+0x436>
 8007b08:	f04f 3aff 	mov.w	sl, #4294967295
 8007b0c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007c08 <_strtod_l+0xae0>
 8007b10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b12:	9805      	ldr	r0, [sp, #20]
 8007b14:	f7fe fe7e 	bl	8006814 <_Bfree>
 8007b18:	4649      	mov	r1, r9
 8007b1a:	9805      	ldr	r0, [sp, #20]
 8007b1c:	f7fe fe7a 	bl	8006814 <_Bfree>
 8007b20:	4641      	mov	r1, r8
 8007b22:	9805      	ldr	r0, [sp, #20]
 8007b24:	f7fe fe76 	bl	8006814 <_Bfree>
 8007b28:	4621      	mov	r1, r4
 8007b2a:	9805      	ldr	r0, [sp, #20]
 8007b2c:	f7fe fe72 	bl	8006814 <_Bfree>
 8007b30:	e618      	b.n	8007764 <_strtod_l+0x63c>
 8007b32:	f1ba 0f01 	cmp.w	sl, #1
 8007b36:	d103      	bne.n	8007b40 <_strtod_l+0xa18>
 8007b38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f43f ada5 	beq.w	800768a <_strtod_l+0x562>
 8007b40:	2200      	movs	r2, #0
 8007b42:	4b36      	ldr	r3, [pc, #216]	@ (8007c1c <_strtod_l+0xaf4>)
 8007b44:	2600      	movs	r6, #0
 8007b46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b4a:	4f30      	ldr	r7, [pc, #192]	@ (8007c0c <_strtod_l+0xae4>)
 8007b4c:	e7b3      	b.n	8007ab6 <_strtod_l+0x98e>
 8007b4e:	2600      	movs	r6, #0
 8007b50:	4f2f      	ldr	r7, [pc, #188]	@ (8007c10 <_strtod_l+0xae8>)
 8007b52:	e7ac      	b.n	8007aae <_strtod_l+0x986>
 8007b54:	4630      	mov	r0, r6
 8007b56:	4639      	mov	r1, r7
 8007b58:	4b2d      	ldr	r3, [pc, #180]	@ (8007c10 <_strtod_l+0xae8>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f7f8 fcbc 	bl	80004d8 <__aeabi_dmul>
 8007b60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b62:	4606      	mov	r6, r0
 8007b64:	460f      	mov	r7, r1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0a1      	beq.n	8007aae <_strtod_l+0x986>
 8007b6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007b6e:	e7a2      	b.n	8007ab6 <_strtod_l+0x98e>
 8007b70:	2200      	movs	r2, #0
 8007b72:	4b26      	ldr	r3, [pc, #152]	@ (8007c0c <_strtod_l+0xae4>)
 8007b74:	4616      	mov	r6, r2
 8007b76:	461f      	mov	r7, r3
 8007b78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b7c:	e79b      	b.n	8007ab6 <_strtod_l+0x98e>
 8007b7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1c1      	bne.n	8007b10 <_strtod_l+0x9e8>
 8007b8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b90:	0d1b      	lsrs	r3, r3, #20
 8007b92:	051b      	lsls	r3, r3, #20
 8007b94:	429d      	cmp	r5, r3
 8007b96:	d1bb      	bne.n	8007b10 <_strtod_l+0x9e8>
 8007b98:	4630      	mov	r0, r6
 8007b9a:	4639      	mov	r1, r7
 8007b9c:	f7f9 faee 	bl	800117c <__aeabi_d2lz>
 8007ba0:	f7f8 fc6c 	bl	800047c <__aeabi_l2d>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4630      	mov	r0, r6
 8007baa:	4639      	mov	r1, r7
 8007bac:	f7f8 fadc 	bl	8000168 <__aeabi_dsub>
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007bb8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007bbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bbe:	ea46 060a 	orr.w	r6, r6, sl
 8007bc2:	431e      	orrs	r6, r3
 8007bc4:	d069      	beq.n	8007c9a <_strtod_l+0xb72>
 8007bc6:	a30a      	add	r3, pc, #40	@ (adr r3, 8007bf0 <_strtod_l+0xac8>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fef6 	bl	80009bc <__aeabi_dcmplt>
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	f47f accf 	bne.w	8007574 <_strtod_l+0x44c>
 8007bd6:	a308      	add	r3, pc, #32	@ (adr r3, 8007bf8 <_strtod_l+0xad0>)
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007be0:	f7f8 ff0a 	bl	80009f8 <__aeabi_dcmpgt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d093      	beq.n	8007b10 <_strtod_l+0x9e8>
 8007be8:	e4c4      	b.n	8007574 <_strtod_l+0x44c>
 8007bea:	bf00      	nop
 8007bec:	f3af 8000 	nop.w
 8007bf0:	94a03595 	.word	0x94a03595
 8007bf4:	3fdfffff 	.word	0x3fdfffff
 8007bf8:	35afe535 	.word	0x35afe535
 8007bfc:	3fe00000 	.word	0x3fe00000
 8007c00:	000fffff 	.word	0x000fffff
 8007c04:	7ff00000 	.word	0x7ff00000
 8007c08:	7fefffff 	.word	0x7fefffff
 8007c0c:	3ff00000 	.word	0x3ff00000
 8007c10:	3fe00000 	.word	0x3fe00000
 8007c14:	7fe00000 	.word	0x7fe00000
 8007c18:	7c9fffff 	.word	0x7c9fffff
 8007c1c:	bff00000 	.word	0xbff00000
 8007c20:	9b08      	ldr	r3, [sp, #32]
 8007c22:	b323      	cbz	r3, 8007c6e <_strtod_l+0xb46>
 8007c24:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007c28:	d821      	bhi.n	8007c6e <_strtod_l+0xb46>
 8007c2a:	a327      	add	r3, pc, #156	@ (adr r3, 8007cc8 <_strtod_l+0xba0>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	4630      	mov	r0, r6
 8007c32:	4639      	mov	r1, r7
 8007c34:	f7f8 fecc 	bl	80009d0 <__aeabi_dcmple>
 8007c38:	b1a0      	cbz	r0, 8007c64 <_strtod_l+0xb3c>
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7f8 ff23 	bl	8000a88 <__aeabi_d2uiz>
 8007c42:	2801      	cmp	r0, #1
 8007c44:	bf38      	it	cc
 8007c46:	2001      	movcc	r0, #1
 8007c48:	f7f8 fbcc 	bl	80003e4 <__aeabi_ui2d>
 8007c4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c4e:	4606      	mov	r6, r0
 8007c50:	460f      	mov	r7, r1
 8007c52:	b9fb      	cbnz	r3, 8007c94 <_strtod_l+0xb6c>
 8007c54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007c58:	9014      	str	r0, [sp, #80]	@ 0x50
 8007c5a:	9315      	str	r3, [sp, #84]	@ 0x54
 8007c5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007c60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007c64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c66:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007c6a:	1b5b      	subs	r3, r3, r5
 8007c6c:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c72:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007c76:	f7ff f8ff 	bl	8006e78 <__ulp>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4650      	mov	r0, sl
 8007c80:	4659      	mov	r1, fp
 8007c82:	f7f8 fc29 	bl	80004d8 <__aeabi_dmul>
 8007c86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007c8a:	f7f8 fa6f 	bl	800016c <__adddf3>
 8007c8e:	4682      	mov	sl, r0
 8007c90:	468b      	mov	fp, r1
 8007c92:	e776      	b.n	8007b82 <_strtod_l+0xa5a>
 8007c94:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007c98:	e7e0      	b.n	8007c5c <_strtod_l+0xb34>
 8007c9a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007cd0 <_strtod_l+0xba8>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f7f8 fe8c 	bl	80009bc <__aeabi_dcmplt>
 8007ca4:	e79e      	b.n	8007be4 <_strtod_l+0xabc>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007caa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cac:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007cae:	6013      	str	r3, [r2, #0]
 8007cb0:	f7ff ba77 	b.w	80071a2 <_strtod_l+0x7a>
 8007cb4:	2a65      	cmp	r2, #101	@ 0x65
 8007cb6:	f43f ab6e 	beq.w	8007396 <_strtod_l+0x26e>
 8007cba:	2a45      	cmp	r2, #69	@ 0x45
 8007cbc:	f43f ab6b 	beq.w	8007396 <_strtod_l+0x26e>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f7ff bba6 	b.w	8007412 <_strtod_l+0x2ea>
 8007cc6:	bf00      	nop
 8007cc8:	ffc00000 	.word	0xffc00000
 8007ccc:	41dfffff 	.word	0x41dfffff
 8007cd0:	94a03595 	.word	0x94a03595
 8007cd4:	3fcfffff 	.word	0x3fcfffff

08007cd8 <_strtod_r>:
 8007cd8:	4b01      	ldr	r3, [pc, #4]	@ (8007ce0 <_strtod_r+0x8>)
 8007cda:	f7ff ba25 	b.w	8007128 <_strtod_l>
 8007cde:	bf00      	nop
 8007ce0:	2000008c 	.word	0x2000008c

08007ce4 <_strtol_l.constprop.0>:
 8007ce4:	2b24      	cmp	r3, #36	@ 0x24
 8007ce6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cea:	4686      	mov	lr, r0
 8007cec:	4690      	mov	r8, r2
 8007cee:	d801      	bhi.n	8007cf4 <_strtol_l.constprop.0+0x10>
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d106      	bne.n	8007d02 <_strtol_l.constprop.0+0x1e>
 8007cf4:	f7fd fdb2 	bl	800585c <__errno>
 8007cf8:	2316      	movs	r3, #22
 8007cfa:	6003      	str	r3, [r0, #0]
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d02:	460d      	mov	r5, r1
 8007d04:	4833      	ldr	r0, [pc, #204]	@ (8007dd4 <_strtol_l.constprop.0+0xf0>)
 8007d06:	462a      	mov	r2, r5
 8007d08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d0c:	5d06      	ldrb	r6, [r0, r4]
 8007d0e:	f016 0608 	ands.w	r6, r6, #8
 8007d12:	d1f8      	bne.n	8007d06 <_strtol_l.constprop.0+0x22>
 8007d14:	2c2d      	cmp	r4, #45	@ 0x2d
 8007d16:	d12d      	bne.n	8007d74 <_strtol_l.constprop.0+0x90>
 8007d18:	2601      	movs	r6, #1
 8007d1a:	782c      	ldrb	r4, [r5, #0]
 8007d1c:	1c95      	adds	r5, r2, #2
 8007d1e:	f033 0210 	bics.w	r2, r3, #16
 8007d22:	d109      	bne.n	8007d38 <_strtol_l.constprop.0+0x54>
 8007d24:	2c30      	cmp	r4, #48	@ 0x30
 8007d26:	d12a      	bne.n	8007d7e <_strtol_l.constprop.0+0x9a>
 8007d28:	782a      	ldrb	r2, [r5, #0]
 8007d2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007d2e:	2a58      	cmp	r2, #88	@ 0x58
 8007d30:	d125      	bne.n	8007d7e <_strtol_l.constprop.0+0x9a>
 8007d32:	2310      	movs	r3, #16
 8007d34:	786c      	ldrb	r4, [r5, #1]
 8007d36:	3502      	adds	r5, #2
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007d3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d42:	fbbc f9f3 	udiv	r9, ip, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	fb03 ca19 	mls	sl, r3, r9, ip
 8007d4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007d50:	2f09      	cmp	r7, #9
 8007d52:	d81b      	bhi.n	8007d8c <_strtol_l.constprop.0+0xa8>
 8007d54:	463c      	mov	r4, r7
 8007d56:	42a3      	cmp	r3, r4
 8007d58:	dd27      	ble.n	8007daa <_strtol_l.constprop.0+0xc6>
 8007d5a:	1c57      	adds	r7, r2, #1
 8007d5c:	d007      	beq.n	8007d6e <_strtol_l.constprop.0+0x8a>
 8007d5e:	4581      	cmp	r9, r0
 8007d60:	d320      	bcc.n	8007da4 <_strtol_l.constprop.0+0xc0>
 8007d62:	d101      	bne.n	8007d68 <_strtol_l.constprop.0+0x84>
 8007d64:	45a2      	cmp	sl, r4
 8007d66:	db1d      	blt.n	8007da4 <_strtol_l.constprop.0+0xc0>
 8007d68:	2201      	movs	r2, #1
 8007d6a:	fb00 4003 	mla	r0, r0, r3, r4
 8007d6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d72:	e7eb      	b.n	8007d4c <_strtol_l.constprop.0+0x68>
 8007d74:	2c2b      	cmp	r4, #43	@ 0x2b
 8007d76:	bf04      	itt	eq
 8007d78:	782c      	ldrbeq	r4, [r5, #0]
 8007d7a:	1c95      	addeq	r5, r2, #2
 8007d7c:	e7cf      	b.n	8007d1e <_strtol_l.constprop.0+0x3a>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1da      	bne.n	8007d38 <_strtol_l.constprop.0+0x54>
 8007d82:	2c30      	cmp	r4, #48	@ 0x30
 8007d84:	bf0c      	ite	eq
 8007d86:	2308      	moveq	r3, #8
 8007d88:	230a      	movne	r3, #10
 8007d8a:	e7d5      	b.n	8007d38 <_strtol_l.constprop.0+0x54>
 8007d8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007d90:	2f19      	cmp	r7, #25
 8007d92:	d801      	bhi.n	8007d98 <_strtol_l.constprop.0+0xb4>
 8007d94:	3c37      	subs	r4, #55	@ 0x37
 8007d96:	e7de      	b.n	8007d56 <_strtol_l.constprop.0+0x72>
 8007d98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007d9c:	2f19      	cmp	r7, #25
 8007d9e:	d804      	bhi.n	8007daa <_strtol_l.constprop.0+0xc6>
 8007da0:	3c57      	subs	r4, #87	@ 0x57
 8007da2:	e7d8      	b.n	8007d56 <_strtol_l.constprop.0+0x72>
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295
 8007da8:	e7e1      	b.n	8007d6e <_strtol_l.constprop.0+0x8a>
 8007daa:	1c53      	adds	r3, r2, #1
 8007dac:	d108      	bne.n	8007dc0 <_strtol_l.constprop.0+0xdc>
 8007dae:	2322      	movs	r3, #34	@ 0x22
 8007db0:	4660      	mov	r0, ip
 8007db2:	f8ce 3000 	str.w	r3, [lr]
 8007db6:	f1b8 0f00 	cmp.w	r8, #0
 8007dba:	d0a0      	beq.n	8007cfe <_strtol_l.constprop.0+0x1a>
 8007dbc:	1e69      	subs	r1, r5, #1
 8007dbe:	e006      	b.n	8007dce <_strtol_l.constprop.0+0xea>
 8007dc0:	b106      	cbz	r6, 8007dc4 <_strtol_l.constprop.0+0xe0>
 8007dc2:	4240      	negs	r0, r0
 8007dc4:	f1b8 0f00 	cmp.w	r8, #0
 8007dc8:	d099      	beq.n	8007cfe <_strtol_l.constprop.0+0x1a>
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	d1f6      	bne.n	8007dbc <_strtol_l.constprop.0+0xd8>
 8007dce:	f8c8 1000 	str.w	r1, [r8]
 8007dd2:	e794      	b.n	8007cfe <_strtol_l.constprop.0+0x1a>
 8007dd4:	0800ae91 	.word	0x0800ae91

08007dd8 <_strtol_r>:
 8007dd8:	f7ff bf84 	b.w	8007ce4 <_strtol_l.constprop.0>

08007ddc <__ssputs_r>:
 8007ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de0:	461f      	mov	r7, r3
 8007de2:	688e      	ldr	r6, [r1, #8]
 8007de4:	4682      	mov	sl, r0
 8007de6:	42be      	cmp	r6, r7
 8007de8:	460c      	mov	r4, r1
 8007dea:	4690      	mov	r8, r2
 8007dec:	680b      	ldr	r3, [r1, #0]
 8007dee:	d82d      	bhi.n	8007e4c <__ssputs_r+0x70>
 8007df0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007df4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007df8:	d026      	beq.n	8007e48 <__ssputs_r+0x6c>
 8007dfa:	6965      	ldr	r5, [r4, #20]
 8007dfc:	6909      	ldr	r1, [r1, #16]
 8007dfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e02:	eba3 0901 	sub.w	r9, r3, r1
 8007e06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e0a:	1c7b      	adds	r3, r7, #1
 8007e0c:	444b      	add	r3, r9
 8007e0e:	106d      	asrs	r5, r5, #1
 8007e10:	429d      	cmp	r5, r3
 8007e12:	bf38      	it	cc
 8007e14:	461d      	movcc	r5, r3
 8007e16:	0553      	lsls	r3, r2, #21
 8007e18:	d527      	bpl.n	8007e6a <__ssputs_r+0x8e>
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	f7fe fc2e 	bl	800667c <_malloc_r>
 8007e20:	4606      	mov	r6, r0
 8007e22:	b360      	cbz	r0, 8007e7e <__ssputs_r+0xa2>
 8007e24:	464a      	mov	r2, r9
 8007e26:	6921      	ldr	r1, [r4, #16]
 8007e28:	f7fd fd53 	bl	80058d2 <memcpy>
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e36:	81a3      	strh	r3, [r4, #12]
 8007e38:	6126      	str	r6, [r4, #16]
 8007e3a:	444e      	add	r6, r9
 8007e3c:	6026      	str	r6, [r4, #0]
 8007e3e:	463e      	mov	r6, r7
 8007e40:	6165      	str	r5, [r4, #20]
 8007e42:	eba5 0509 	sub.w	r5, r5, r9
 8007e46:	60a5      	str	r5, [r4, #8]
 8007e48:	42be      	cmp	r6, r7
 8007e4a:	d900      	bls.n	8007e4e <__ssputs_r+0x72>
 8007e4c:	463e      	mov	r6, r7
 8007e4e:	4632      	mov	r2, r6
 8007e50:	4641      	mov	r1, r8
 8007e52:	6820      	ldr	r0, [r4, #0]
 8007e54:	f000 fb63 	bl	800851e <memmove>
 8007e58:	2000      	movs	r0, #0
 8007e5a:	68a3      	ldr	r3, [r4, #8]
 8007e5c:	1b9b      	subs	r3, r3, r6
 8007e5e:	60a3      	str	r3, [r4, #8]
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	4433      	add	r3, r6
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e6a:	462a      	mov	r2, r5
 8007e6c:	f000 ff39 	bl	8008ce2 <_realloc_r>
 8007e70:	4606      	mov	r6, r0
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d1e0      	bne.n	8007e38 <__ssputs_r+0x5c>
 8007e76:	4650      	mov	r0, sl
 8007e78:	6921      	ldr	r1, [r4, #16]
 8007e7a:	f7fe fb8d 	bl	8006598 <_free_r>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	f8ca 3000 	str.w	r3, [sl]
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e8e:	81a3      	strh	r3, [r4, #12]
 8007e90:	e7e9      	b.n	8007e66 <__ssputs_r+0x8a>
	...

08007e94 <_svfiprintf_r>:
 8007e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	4698      	mov	r8, r3
 8007e9a:	898b      	ldrh	r3, [r1, #12]
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	061b      	lsls	r3, r3, #24
 8007ea0:	460d      	mov	r5, r1
 8007ea2:	4614      	mov	r4, r2
 8007ea4:	b09d      	sub	sp, #116	@ 0x74
 8007ea6:	d510      	bpl.n	8007eca <_svfiprintf_r+0x36>
 8007ea8:	690b      	ldr	r3, [r1, #16]
 8007eaa:	b973      	cbnz	r3, 8007eca <_svfiprintf_r+0x36>
 8007eac:	2140      	movs	r1, #64	@ 0x40
 8007eae:	f7fe fbe5 	bl	800667c <_malloc_r>
 8007eb2:	6028      	str	r0, [r5, #0]
 8007eb4:	6128      	str	r0, [r5, #16]
 8007eb6:	b930      	cbnz	r0, 8007ec6 <_svfiprintf_r+0x32>
 8007eb8:	230c      	movs	r3, #12
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	b01d      	add	sp, #116	@ 0x74
 8007ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec6:	2340      	movs	r3, #64	@ 0x40
 8007ec8:	616b      	str	r3, [r5, #20]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ece:	2320      	movs	r3, #32
 8007ed0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ed4:	2330      	movs	r3, #48	@ 0x30
 8007ed6:	f04f 0901 	mov.w	r9, #1
 8007eda:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ede:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008078 <_svfiprintf_r+0x1e4>
 8007ee2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ee6:	4623      	mov	r3, r4
 8007ee8:	469a      	mov	sl, r3
 8007eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eee:	b10a      	cbz	r2, 8007ef4 <_svfiprintf_r+0x60>
 8007ef0:	2a25      	cmp	r2, #37	@ 0x25
 8007ef2:	d1f9      	bne.n	8007ee8 <_svfiprintf_r+0x54>
 8007ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ef8:	d00b      	beq.n	8007f12 <_svfiprintf_r+0x7e>
 8007efa:	465b      	mov	r3, fp
 8007efc:	4622      	mov	r2, r4
 8007efe:	4629      	mov	r1, r5
 8007f00:	4638      	mov	r0, r7
 8007f02:	f7ff ff6b 	bl	8007ddc <__ssputs_r>
 8007f06:	3001      	adds	r0, #1
 8007f08:	f000 80a7 	beq.w	800805a <_svfiprintf_r+0x1c6>
 8007f0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f0e:	445a      	add	r2, fp
 8007f10:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f12:	f89a 3000 	ldrb.w	r3, [sl]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 809f 	beq.w	800805a <_svfiprintf_r+0x1c6>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f26:	f10a 0a01 	add.w	sl, sl, #1
 8007f2a:	9304      	str	r3, [sp, #16]
 8007f2c:	9307      	str	r3, [sp, #28]
 8007f2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f32:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f34:	4654      	mov	r4, sl
 8007f36:	2205      	movs	r2, #5
 8007f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f3c:	484e      	ldr	r0, [pc, #312]	@ (8008078 <_svfiprintf_r+0x1e4>)
 8007f3e:	f7fd fcba 	bl	80058b6 <memchr>
 8007f42:	9a04      	ldr	r2, [sp, #16]
 8007f44:	b9d8      	cbnz	r0, 8007f7e <_svfiprintf_r+0xea>
 8007f46:	06d0      	lsls	r0, r2, #27
 8007f48:	bf44      	itt	mi
 8007f4a:	2320      	movmi	r3, #32
 8007f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f50:	0711      	lsls	r1, r2, #28
 8007f52:	bf44      	itt	mi
 8007f54:	232b      	movmi	r3, #43	@ 0x2b
 8007f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f60:	d015      	beq.n	8007f8e <_svfiprintf_r+0xfa>
 8007f62:	4654      	mov	r4, sl
 8007f64:	2000      	movs	r0, #0
 8007f66:	f04f 0c0a 	mov.w	ip, #10
 8007f6a:	9a07      	ldr	r2, [sp, #28]
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f72:	3b30      	subs	r3, #48	@ 0x30
 8007f74:	2b09      	cmp	r3, #9
 8007f76:	d94b      	bls.n	8008010 <_svfiprintf_r+0x17c>
 8007f78:	b1b0      	cbz	r0, 8007fa8 <_svfiprintf_r+0x114>
 8007f7a:	9207      	str	r2, [sp, #28]
 8007f7c:	e014      	b.n	8007fa8 <_svfiprintf_r+0x114>
 8007f7e:	eba0 0308 	sub.w	r3, r0, r8
 8007f82:	fa09 f303 	lsl.w	r3, r9, r3
 8007f86:	4313      	orrs	r3, r2
 8007f88:	46a2      	mov	sl, r4
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	e7d2      	b.n	8007f34 <_svfiprintf_r+0xa0>
 8007f8e:	9b03      	ldr	r3, [sp, #12]
 8007f90:	1d19      	adds	r1, r3, #4
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	9103      	str	r1, [sp, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bfbb      	ittet	lt
 8007f9a:	425b      	neglt	r3, r3
 8007f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007fa0:	9307      	strge	r3, [sp, #28]
 8007fa2:	9307      	strlt	r3, [sp, #28]
 8007fa4:	bfb8      	it	lt
 8007fa6:	9204      	strlt	r2, [sp, #16]
 8007fa8:	7823      	ldrb	r3, [r4, #0]
 8007faa:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fac:	d10a      	bne.n	8007fc4 <_svfiprintf_r+0x130>
 8007fae:	7863      	ldrb	r3, [r4, #1]
 8007fb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fb2:	d132      	bne.n	800801a <_svfiprintf_r+0x186>
 8007fb4:	9b03      	ldr	r3, [sp, #12]
 8007fb6:	3402      	adds	r4, #2
 8007fb8:	1d1a      	adds	r2, r3, #4
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	9203      	str	r2, [sp, #12]
 8007fbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fc2:	9305      	str	r3, [sp, #20]
 8007fc4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800807c <_svfiprintf_r+0x1e8>
 8007fc8:	2203      	movs	r2, #3
 8007fca:	4650      	mov	r0, sl
 8007fcc:	7821      	ldrb	r1, [r4, #0]
 8007fce:	f7fd fc72 	bl	80058b6 <memchr>
 8007fd2:	b138      	cbz	r0, 8007fe4 <_svfiprintf_r+0x150>
 8007fd4:	2240      	movs	r2, #64	@ 0x40
 8007fd6:	9b04      	ldr	r3, [sp, #16]
 8007fd8:	eba0 000a 	sub.w	r0, r0, sl
 8007fdc:	4082      	lsls	r2, r0
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	3401      	adds	r4, #1
 8007fe2:	9304      	str	r3, [sp, #16]
 8007fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fe8:	2206      	movs	r2, #6
 8007fea:	4825      	ldr	r0, [pc, #148]	@ (8008080 <_svfiprintf_r+0x1ec>)
 8007fec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ff0:	f7fd fc61 	bl	80058b6 <memchr>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d036      	beq.n	8008066 <_svfiprintf_r+0x1d2>
 8007ff8:	4b22      	ldr	r3, [pc, #136]	@ (8008084 <_svfiprintf_r+0x1f0>)
 8007ffa:	bb1b      	cbnz	r3, 8008044 <_svfiprintf_r+0x1b0>
 8007ffc:	9b03      	ldr	r3, [sp, #12]
 8007ffe:	3307      	adds	r3, #7
 8008000:	f023 0307 	bic.w	r3, r3, #7
 8008004:	3308      	adds	r3, #8
 8008006:	9303      	str	r3, [sp, #12]
 8008008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800800a:	4433      	add	r3, r6
 800800c:	9309      	str	r3, [sp, #36]	@ 0x24
 800800e:	e76a      	b.n	8007ee6 <_svfiprintf_r+0x52>
 8008010:	460c      	mov	r4, r1
 8008012:	2001      	movs	r0, #1
 8008014:	fb0c 3202 	mla	r2, ip, r2, r3
 8008018:	e7a8      	b.n	8007f6c <_svfiprintf_r+0xd8>
 800801a:	2300      	movs	r3, #0
 800801c:	f04f 0c0a 	mov.w	ip, #10
 8008020:	4619      	mov	r1, r3
 8008022:	3401      	adds	r4, #1
 8008024:	9305      	str	r3, [sp, #20]
 8008026:	4620      	mov	r0, r4
 8008028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800802c:	3a30      	subs	r2, #48	@ 0x30
 800802e:	2a09      	cmp	r2, #9
 8008030:	d903      	bls.n	800803a <_svfiprintf_r+0x1a6>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0c6      	beq.n	8007fc4 <_svfiprintf_r+0x130>
 8008036:	9105      	str	r1, [sp, #20]
 8008038:	e7c4      	b.n	8007fc4 <_svfiprintf_r+0x130>
 800803a:	4604      	mov	r4, r0
 800803c:	2301      	movs	r3, #1
 800803e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008042:	e7f0      	b.n	8008026 <_svfiprintf_r+0x192>
 8008044:	ab03      	add	r3, sp, #12
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	462a      	mov	r2, r5
 800804a:	4638      	mov	r0, r7
 800804c:	4b0e      	ldr	r3, [pc, #56]	@ (8008088 <_svfiprintf_r+0x1f4>)
 800804e:	a904      	add	r1, sp, #16
 8008050:	f7fc fbba 	bl	80047c8 <_printf_float>
 8008054:	1c42      	adds	r2, r0, #1
 8008056:	4606      	mov	r6, r0
 8008058:	d1d6      	bne.n	8008008 <_svfiprintf_r+0x174>
 800805a:	89ab      	ldrh	r3, [r5, #12]
 800805c:	065b      	lsls	r3, r3, #25
 800805e:	f53f af2d 	bmi.w	8007ebc <_svfiprintf_r+0x28>
 8008062:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008064:	e72c      	b.n	8007ec0 <_svfiprintf_r+0x2c>
 8008066:	ab03      	add	r3, sp, #12
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	462a      	mov	r2, r5
 800806c:	4638      	mov	r0, r7
 800806e:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <_svfiprintf_r+0x1f4>)
 8008070:	a904      	add	r1, sp, #16
 8008072:	f7fc fe47 	bl	8004d04 <_printf_i>
 8008076:	e7ed      	b.n	8008054 <_svfiprintf_r+0x1c0>
 8008078:	0800af91 	.word	0x0800af91
 800807c:	0800af97 	.word	0x0800af97
 8008080:	0800af9b 	.word	0x0800af9b
 8008084:	080047c9 	.word	0x080047c9
 8008088:	08007ddd 	.word	0x08007ddd

0800808c <__sfputc_r>:
 800808c:	6893      	ldr	r3, [r2, #8]
 800808e:	b410      	push	{r4}
 8008090:	3b01      	subs	r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	6093      	str	r3, [r2, #8]
 8008096:	da07      	bge.n	80080a8 <__sfputc_r+0x1c>
 8008098:	6994      	ldr	r4, [r2, #24]
 800809a:	42a3      	cmp	r3, r4
 800809c:	db01      	blt.n	80080a2 <__sfputc_r+0x16>
 800809e:	290a      	cmp	r1, #10
 80080a0:	d102      	bne.n	80080a8 <__sfputc_r+0x1c>
 80080a2:	bc10      	pop	{r4}
 80080a4:	f7fd baf3 	b.w	800568e <__swbuf_r>
 80080a8:	6813      	ldr	r3, [r2, #0]
 80080aa:	1c58      	adds	r0, r3, #1
 80080ac:	6010      	str	r0, [r2, #0]
 80080ae:	7019      	strb	r1, [r3, #0]
 80080b0:	4608      	mov	r0, r1
 80080b2:	bc10      	pop	{r4}
 80080b4:	4770      	bx	lr

080080b6 <__sfputs_r>:
 80080b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b8:	4606      	mov	r6, r0
 80080ba:	460f      	mov	r7, r1
 80080bc:	4614      	mov	r4, r2
 80080be:	18d5      	adds	r5, r2, r3
 80080c0:	42ac      	cmp	r4, r5
 80080c2:	d101      	bne.n	80080c8 <__sfputs_r+0x12>
 80080c4:	2000      	movs	r0, #0
 80080c6:	e007      	b.n	80080d8 <__sfputs_r+0x22>
 80080c8:	463a      	mov	r2, r7
 80080ca:	4630      	mov	r0, r6
 80080cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d0:	f7ff ffdc 	bl	800808c <__sfputc_r>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d1f3      	bne.n	80080c0 <__sfputs_r+0xa>
 80080d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080dc <_vfiprintf_r>:
 80080dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e0:	460d      	mov	r5, r1
 80080e2:	4614      	mov	r4, r2
 80080e4:	4698      	mov	r8, r3
 80080e6:	4606      	mov	r6, r0
 80080e8:	b09d      	sub	sp, #116	@ 0x74
 80080ea:	b118      	cbz	r0, 80080f4 <_vfiprintf_r+0x18>
 80080ec:	6a03      	ldr	r3, [r0, #32]
 80080ee:	b90b      	cbnz	r3, 80080f4 <_vfiprintf_r+0x18>
 80080f0:	f7fd f9c4 	bl	800547c <__sinit>
 80080f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080f6:	07d9      	lsls	r1, r3, #31
 80080f8:	d405      	bmi.n	8008106 <_vfiprintf_r+0x2a>
 80080fa:	89ab      	ldrh	r3, [r5, #12]
 80080fc:	059a      	lsls	r2, r3, #22
 80080fe:	d402      	bmi.n	8008106 <_vfiprintf_r+0x2a>
 8008100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008102:	f7fd fbd6 	bl	80058b2 <__retarget_lock_acquire_recursive>
 8008106:	89ab      	ldrh	r3, [r5, #12]
 8008108:	071b      	lsls	r3, r3, #28
 800810a:	d501      	bpl.n	8008110 <_vfiprintf_r+0x34>
 800810c:	692b      	ldr	r3, [r5, #16]
 800810e:	b99b      	cbnz	r3, 8008138 <_vfiprintf_r+0x5c>
 8008110:	4629      	mov	r1, r5
 8008112:	4630      	mov	r0, r6
 8008114:	f7fd fafa 	bl	800570c <__swsetup_r>
 8008118:	b170      	cbz	r0, 8008138 <_vfiprintf_r+0x5c>
 800811a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800811c:	07dc      	lsls	r4, r3, #31
 800811e:	d504      	bpl.n	800812a <_vfiprintf_r+0x4e>
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
 8008124:	b01d      	add	sp, #116	@ 0x74
 8008126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812a:	89ab      	ldrh	r3, [r5, #12]
 800812c:	0598      	lsls	r0, r3, #22
 800812e:	d4f7      	bmi.n	8008120 <_vfiprintf_r+0x44>
 8008130:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008132:	f7fd fbbf 	bl	80058b4 <__retarget_lock_release_recursive>
 8008136:	e7f3      	b.n	8008120 <_vfiprintf_r+0x44>
 8008138:	2300      	movs	r3, #0
 800813a:	9309      	str	r3, [sp, #36]	@ 0x24
 800813c:	2320      	movs	r3, #32
 800813e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008142:	2330      	movs	r3, #48	@ 0x30
 8008144:	f04f 0901 	mov.w	r9, #1
 8008148:	f8cd 800c 	str.w	r8, [sp, #12]
 800814c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80082f8 <_vfiprintf_r+0x21c>
 8008150:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008154:	4623      	mov	r3, r4
 8008156:	469a      	mov	sl, r3
 8008158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800815c:	b10a      	cbz	r2, 8008162 <_vfiprintf_r+0x86>
 800815e:	2a25      	cmp	r2, #37	@ 0x25
 8008160:	d1f9      	bne.n	8008156 <_vfiprintf_r+0x7a>
 8008162:	ebba 0b04 	subs.w	fp, sl, r4
 8008166:	d00b      	beq.n	8008180 <_vfiprintf_r+0xa4>
 8008168:	465b      	mov	r3, fp
 800816a:	4622      	mov	r2, r4
 800816c:	4629      	mov	r1, r5
 800816e:	4630      	mov	r0, r6
 8008170:	f7ff ffa1 	bl	80080b6 <__sfputs_r>
 8008174:	3001      	adds	r0, #1
 8008176:	f000 80a7 	beq.w	80082c8 <_vfiprintf_r+0x1ec>
 800817a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800817c:	445a      	add	r2, fp
 800817e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008180:	f89a 3000 	ldrb.w	r3, [sl]
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 809f 	beq.w	80082c8 <_vfiprintf_r+0x1ec>
 800818a:	2300      	movs	r3, #0
 800818c:	f04f 32ff 	mov.w	r2, #4294967295
 8008190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008194:	f10a 0a01 	add.w	sl, sl, #1
 8008198:	9304      	str	r3, [sp, #16]
 800819a:	9307      	str	r3, [sp, #28]
 800819c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80081a2:	4654      	mov	r4, sl
 80081a4:	2205      	movs	r2, #5
 80081a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081aa:	4853      	ldr	r0, [pc, #332]	@ (80082f8 <_vfiprintf_r+0x21c>)
 80081ac:	f7fd fb83 	bl	80058b6 <memchr>
 80081b0:	9a04      	ldr	r2, [sp, #16]
 80081b2:	b9d8      	cbnz	r0, 80081ec <_vfiprintf_r+0x110>
 80081b4:	06d1      	lsls	r1, r2, #27
 80081b6:	bf44      	itt	mi
 80081b8:	2320      	movmi	r3, #32
 80081ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081be:	0713      	lsls	r3, r2, #28
 80081c0:	bf44      	itt	mi
 80081c2:	232b      	movmi	r3, #43	@ 0x2b
 80081c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081c8:	f89a 3000 	ldrb.w	r3, [sl]
 80081cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ce:	d015      	beq.n	80081fc <_vfiprintf_r+0x120>
 80081d0:	4654      	mov	r4, sl
 80081d2:	2000      	movs	r0, #0
 80081d4:	f04f 0c0a 	mov.w	ip, #10
 80081d8:	9a07      	ldr	r2, [sp, #28]
 80081da:	4621      	mov	r1, r4
 80081dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081e0:	3b30      	subs	r3, #48	@ 0x30
 80081e2:	2b09      	cmp	r3, #9
 80081e4:	d94b      	bls.n	800827e <_vfiprintf_r+0x1a2>
 80081e6:	b1b0      	cbz	r0, 8008216 <_vfiprintf_r+0x13a>
 80081e8:	9207      	str	r2, [sp, #28]
 80081ea:	e014      	b.n	8008216 <_vfiprintf_r+0x13a>
 80081ec:	eba0 0308 	sub.w	r3, r0, r8
 80081f0:	fa09 f303 	lsl.w	r3, r9, r3
 80081f4:	4313      	orrs	r3, r2
 80081f6:	46a2      	mov	sl, r4
 80081f8:	9304      	str	r3, [sp, #16]
 80081fa:	e7d2      	b.n	80081a2 <_vfiprintf_r+0xc6>
 80081fc:	9b03      	ldr	r3, [sp, #12]
 80081fe:	1d19      	adds	r1, r3, #4
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	9103      	str	r1, [sp, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	bfbb      	ittet	lt
 8008208:	425b      	neglt	r3, r3
 800820a:	f042 0202 	orrlt.w	r2, r2, #2
 800820e:	9307      	strge	r3, [sp, #28]
 8008210:	9307      	strlt	r3, [sp, #28]
 8008212:	bfb8      	it	lt
 8008214:	9204      	strlt	r2, [sp, #16]
 8008216:	7823      	ldrb	r3, [r4, #0]
 8008218:	2b2e      	cmp	r3, #46	@ 0x2e
 800821a:	d10a      	bne.n	8008232 <_vfiprintf_r+0x156>
 800821c:	7863      	ldrb	r3, [r4, #1]
 800821e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008220:	d132      	bne.n	8008288 <_vfiprintf_r+0x1ac>
 8008222:	9b03      	ldr	r3, [sp, #12]
 8008224:	3402      	adds	r4, #2
 8008226:	1d1a      	adds	r2, r3, #4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	9203      	str	r2, [sp, #12]
 800822c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008230:	9305      	str	r3, [sp, #20]
 8008232:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80082fc <_vfiprintf_r+0x220>
 8008236:	2203      	movs	r2, #3
 8008238:	4650      	mov	r0, sl
 800823a:	7821      	ldrb	r1, [r4, #0]
 800823c:	f7fd fb3b 	bl	80058b6 <memchr>
 8008240:	b138      	cbz	r0, 8008252 <_vfiprintf_r+0x176>
 8008242:	2240      	movs	r2, #64	@ 0x40
 8008244:	9b04      	ldr	r3, [sp, #16]
 8008246:	eba0 000a 	sub.w	r0, r0, sl
 800824a:	4082      	lsls	r2, r0
 800824c:	4313      	orrs	r3, r2
 800824e:	3401      	adds	r4, #1
 8008250:	9304      	str	r3, [sp, #16]
 8008252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008256:	2206      	movs	r2, #6
 8008258:	4829      	ldr	r0, [pc, #164]	@ (8008300 <_vfiprintf_r+0x224>)
 800825a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800825e:	f7fd fb2a 	bl	80058b6 <memchr>
 8008262:	2800      	cmp	r0, #0
 8008264:	d03f      	beq.n	80082e6 <_vfiprintf_r+0x20a>
 8008266:	4b27      	ldr	r3, [pc, #156]	@ (8008304 <_vfiprintf_r+0x228>)
 8008268:	bb1b      	cbnz	r3, 80082b2 <_vfiprintf_r+0x1d6>
 800826a:	9b03      	ldr	r3, [sp, #12]
 800826c:	3307      	adds	r3, #7
 800826e:	f023 0307 	bic.w	r3, r3, #7
 8008272:	3308      	adds	r3, #8
 8008274:	9303      	str	r3, [sp, #12]
 8008276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008278:	443b      	add	r3, r7
 800827a:	9309      	str	r3, [sp, #36]	@ 0x24
 800827c:	e76a      	b.n	8008154 <_vfiprintf_r+0x78>
 800827e:	460c      	mov	r4, r1
 8008280:	2001      	movs	r0, #1
 8008282:	fb0c 3202 	mla	r2, ip, r2, r3
 8008286:	e7a8      	b.n	80081da <_vfiprintf_r+0xfe>
 8008288:	2300      	movs	r3, #0
 800828a:	f04f 0c0a 	mov.w	ip, #10
 800828e:	4619      	mov	r1, r3
 8008290:	3401      	adds	r4, #1
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	4620      	mov	r0, r4
 8008296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800829a:	3a30      	subs	r2, #48	@ 0x30
 800829c:	2a09      	cmp	r2, #9
 800829e:	d903      	bls.n	80082a8 <_vfiprintf_r+0x1cc>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d0c6      	beq.n	8008232 <_vfiprintf_r+0x156>
 80082a4:	9105      	str	r1, [sp, #20]
 80082a6:	e7c4      	b.n	8008232 <_vfiprintf_r+0x156>
 80082a8:	4604      	mov	r4, r0
 80082aa:	2301      	movs	r3, #1
 80082ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80082b0:	e7f0      	b.n	8008294 <_vfiprintf_r+0x1b8>
 80082b2:	ab03      	add	r3, sp, #12
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	462a      	mov	r2, r5
 80082b8:	4630      	mov	r0, r6
 80082ba:	4b13      	ldr	r3, [pc, #76]	@ (8008308 <_vfiprintf_r+0x22c>)
 80082bc:	a904      	add	r1, sp, #16
 80082be:	f7fc fa83 	bl	80047c8 <_printf_float>
 80082c2:	4607      	mov	r7, r0
 80082c4:	1c78      	adds	r0, r7, #1
 80082c6:	d1d6      	bne.n	8008276 <_vfiprintf_r+0x19a>
 80082c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082ca:	07d9      	lsls	r1, r3, #31
 80082cc:	d405      	bmi.n	80082da <_vfiprintf_r+0x1fe>
 80082ce:	89ab      	ldrh	r3, [r5, #12]
 80082d0:	059a      	lsls	r2, r3, #22
 80082d2:	d402      	bmi.n	80082da <_vfiprintf_r+0x1fe>
 80082d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082d6:	f7fd faed 	bl	80058b4 <__retarget_lock_release_recursive>
 80082da:	89ab      	ldrh	r3, [r5, #12]
 80082dc:	065b      	lsls	r3, r3, #25
 80082de:	f53f af1f 	bmi.w	8008120 <_vfiprintf_r+0x44>
 80082e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082e4:	e71e      	b.n	8008124 <_vfiprintf_r+0x48>
 80082e6:	ab03      	add	r3, sp, #12
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	462a      	mov	r2, r5
 80082ec:	4630      	mov	r0, r6
 80082ee:	4b06      	ldr	r3, [pc, #24]	@ (8008308 <_vfiprintf_r+0x22c>)
 80082f0:	a904      	add	r1, sp, #16
 80082f2:	f7fc fd07 	bl	8004d04 <_printf_i>
 80082f6:	e7e4      	b.n	80082c2 <_vfiprintf_r+0x1e6>
 80082f8:	0800af91 	.word	0x0800af91
 80082fc:	0800af97 	.word	0x0800af97
 8008300:	0800af9b 	.word	0x0800af9b
 8008304:	080047c9 	.word	0x080047c9
 8008308:	080080b7 	.word	0x080080b7

0800830c <__sflush_r>:
 800830c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	0716      	lsls	r6, r2, #28
 8008314:	4605      	mov	r5, r0
 8008316:	460c      	mov	r4, r1
 8008318:	d454      	bmi.n	80083c4 <__sflush_r+0xb8>
 800831a:	684b      	ldr	r3, [r1, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	dc02      	bgt.n	8008326 <__sflush_r+0x1a>
 8008320:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008322:	2b00      	cmp	r3, #0
 8008324:	dd48      	ble.n	80083b8 <__sflush_r+0xac>
 8008326:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008328:	2e00      	cmp	r6, #0
 800832a:	d045      	beq.n	80083b8 <__sflush_r+0xac>
 800832c:	2300      	movs	r3, #0
 800832e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008332:	682f      	ldr	r7, [r5, #0]
 8008334:	6a21      	ldr	r1, [r4, #32]
 8008336:	602b      	str	r3, [r5, #0]
 8008338:	d030      	beq.n	800839c <__sflush_r+0x90>
 800833a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	0759      	lsls	r1, r3, #29
 8008340:	d505      	bpl.n	800834e <__sflush_r+0x42>
 8008342:	6863      	ldr	r3, [r4, #4]
 8008344:	1ad2      	subs	r2, r2, r3
 8008346:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008348:	b10b      	cbz	r3, 800834e <__sflush_r+0x42>
 800834a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800834c:	1ad2      	subs	r2, r2, r3
 800834e:	2300      	movs	r3, #0
 8008350:	4628      	mov	r0, r5
 8008352:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008354:	6a21      	ldr	r1, [r4, #32]
 8008356:	47b0      	blx	r6
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	d106      	bne.n	800836c <__sflush_r+0x60>
 800835e:	6829      	ldr	r1, [r5, #0]
 8008360:	291d      	cmp	r1, #29
 8008362:	d82b      	bhi.n	80083bc <__sflush_r+0xb0>
 8008364:	4a28      	ldr	r2, [pc, #160]	@ (8008408 <__sflush_r+0xfc>)
 8008366:	410a      	asrs	r2, r1
 8008368:	07d6      	lsls	r6, r2, #31
 800836a:	d427      	bmi.n	80083bc <__sflush_r+0xb0>
 800836c:	2200      	movs	r2, #0
 800836e:	6062      	str	r2, [r4, #4]
 8008370:	6922      	ldr	r2, [r4, #16]
 8008372:	04d9      	lsls	r1, r3, #19
 8008374:	6022      	str	r2, [r4, #0]
 8008376:	d504      	bpl.n	8008382 <__sflush_r+0x76>
 8008378:	1c42      	adds	r2, r0, #1
 800837a:	d101      	bne.n	8008380 <__sflush_r+0x74>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	b903      	cbnz	r3, 8008382 <__sflush_r+0x76>
 8008380:	6560      	str	r0, [r4, #84]	@ 0x54
 8008382:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008384:	602f      	str	r7, [r5, #0]
 8008386:	b1b9      	cbz	r1, 80083b8 <__sflush_r+0xac>
 8008388:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800838c:	4299      	cmp	r1, r3
 800838e:	d002      	beq.n	8008396 <__sflush_r+0x8a>
 8008390:	4628      	mov	r0, r5
 8008392:	f7fe f901 	bl	8006598 <_free_r>
 8008396:	2300      	movs	r3, #0
 8008398:	6363      	str	r3, [r4, #52]	@ 0x34
 800839a:	e00d      	b.n	80083b8 <__sflush_r+0xac>
 800839c:	2301      	movs	r3, #1
 800839e:	4628      	mov	r0, r5
 80083a0:	47b0      	blx	r6
 80083a2:	4602      	mov	r2, r0
 80083a4:	1c50      	adds	r0, r2, #1
 80083a6:	d1c9      	bne.n	800833c <__sflush_r+0x30>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0c6      	beq.n	800833c <__sflush_r+0x30>
 80083ae:	2b1d      	cmp	r3, #29
 80083b0:	d001      	beq.n	80083b6 <__sflush_r+0xaa>
 80083b2:	2b16      	cmp	r3, #22
 80083b4:	d11d      	bne.n	80083f2 <__sflush_r+0xe6>
 80083b6:	602f      	str	r7, [r5, #0]
 80083b8:	2000      	movs	r0, #0
 80083ba:	e021      	b.n	8008400 <__sflush_r+0xf4>
 80083bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083c0:	b21b      	sxth	r3, r3
 80083c2:	e01a      	b.n	80083fa <__sflush_r+0xee>
 80083c4:	690f      	ldr	r7, [r1, #16]
 80083c6:	2f00      	cmp	r7, #0
 80083c8:	d0f6      	beq.n	80083b8 <__sflush_r+0xac>
 80083ca:	0793      	lsls	r3, r2, #30
 80083cc:	bf18      	it	ne
 80083ce:	2300      	movne	r3, #0
 80083d0:	680e      	ldr	r6, [r1, #0]
 80083d2:	bf08      	it	eq
 80083d4:	694b      	ldreq	r3, [r1, #20]
 80083d6:	1bf6      	subs	r6, r6, r7
 80083d8:	600f      	str	r7, [r1, #0]
 80083da:	608b      	str	r3, [r1, #8]
 80083dc:	2e00      	cmp	r6, #0
 80083de:	ddeb      	ble.n	80083b8 <__sflush_r+0xac>
 80083e0:	4633      	mov	r3, r6
 80083e2:	463a      	mov	r2, r7
 80083e4:	4628      	mov	r0, r5
 80083e6:	6a21      	ldr	r1, [r4, #32]
 80083e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80083ec:	47e0      	blx	ip
 80083ee:	2800      	cmp	r0, #0
 80083f0:	dc07      	bgt.n	8008402 <__sflush_r+0xf6>
 80083f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083fa:	f04f 30ff 	mov.w	r0, #4294967295
 80083fe:	81a3      	strh	r3, [r4, #12]
 8008400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008402:	4407      	add	r7, r0
 8008404:	1a36      	subs	r6, r6, r0
 8008406:	e7e9      	b.n	80083dc <__sflush_r+0xd0>
 8008408:	dfbffffe 	.word	0xdfbffffe

0800840c <_fflush_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	690b      	ldr	r3, [r1, #16]
 8008410:	4605      	mov	r5, r0
 8008412:	460c      	mov	r4, r1
 8008414:	b913      	cbnz	r3, 800841c <_fflush_r+0x10>
 8008416:	2500      	movs	r5, #0
 8008418:	4628      	mov	r0, r5
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	b118      	cbz	r0, 8008426 <_fflush_r+0x1a>
 800841e:	6a03      	ldr	r3, [r0, #32]
 8008420:	b90b      	cbnz	r3, 8008426 <_fflush_r+0x1a>
 8008422:	f7fd f82b 	bl	800547c <__sinit>
 8008426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0f3      	beq.n	8008416 <_fflush_r+0xa>
 800842e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008430:	07d0      	lsls	r0, r2, #31
 8008432:	d404      	bmi.n	800843e <_fflush_r+0x32>
 8008434:	0599      	lsls	r1, r3, #22
 8008436:	d402      	bmi.n	800843e <_fflush_r+0x32>
 8008438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800843a:	f7fd fa3a 	bl	80058b2 <__retarget_lock_acquire_recursive>
 800843e:	4628      	mov	r0, r5
 8008440:	4621      	mov	r1, r4
 8008442:	f7ff ff63 	bl	800830c <__sflush_r>
 8008446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008448:	4605      	mov	r5, r0
 800844a:	07da      	lsls	r2, r3, #31
 800844c:	d4e4      	bmi.n	8008418 <_fflush_r+0xc>
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	059b      	lsls	r3, r3, #22
 8008452:	d4e1      	bmi.n	8008418 <_fflush_r+0xc>
 8008454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008456:	f7fd fa2d 	bl	80058b4 <__retarget_lock_release_recursive>
 800845a:	e7dd      	b.n	8008418 <_fflush_r+0xc>

0800845c <__swhatbuf_r>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	460c      	mov	r4, r1
 8008460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008464:	4615      	mov	r5, r2
 8008466:	2900      	cmp	r1, #0
 8008468:	461e      	mov	r6, r3
 800846a:	b096      	sub	sp, #88	@ 0x58
 800846c:	da0c      	bge.n	8008488 <__swhatbuf_r+0x2c>
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	2100      	movs	r1, #0
 8008472:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008476:	bf14      	ite	ne
 8008478:	2340      	movne	r3, #64	@ 0x40
 800847a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800847e:	2000      	movs	r0, #0
 8008480:	6031      	str	r1, [r6, #0]
 8008482:	602b      	str	r3, [r5, #0]
 8008484:	b016      	add	sp, #88	@ 0x58
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	466a      	mov	r2, sp
 800848a:	f000 f875 	bl	8008578 <_fstat_r>
 800848e:	2800      	cmp	r0, #0
 8008490:	dbed      	blt.n	800846e <__swhatbuf_r+0x12>
 8008492:	9901      	ldr	r1, [sp, #4]
 8008494:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008498:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800849c:	4259      	negs	r1, r3
 800849e:	4159      	adcs	r1, r3
 80084a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084a4:	e7eb      	b.n	800847e <__swhatbuf_r+0x22>

080084a6 <__smakebuf_r>:
 80084a6:	898b      	ldrh	r3, [r1, #12]
 80084a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084aa:	079d      	lsls	r5, r3, #30
 80084ac:	4606      	mov	r6, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	d507      	bpl.n	80084c2 <__smakebuf_r+0x1c>
 80084b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	2301      	movs	r3, #1
 80084bc:	6163      	str	r3, [r4, #20]
 80084be:	b003      	add	sp, #12
 80084c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084c2:	466a      	mov	r2, sp
 80084c4:	ab01      	add	r3, sp, #4
 80084c6:	f7ff ffc9 	bl	800845c <__swhatbuf_r>
 80084ca:	9f00      	ldr	r7, [sp, #0]
 80084cc:	4605      	mov	r5, r0
 80084ce:	4639      	mov	r1, r7
 80084d0:	4630      	mov	r0, r6
 80084d2:	f7fe f8d3 	bl	800667c <_malloc_r>
 80084d6:	b948      	cbnz	r0, 80084ec <__smakebuf_r+0x46>
 80084d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084dc:	059a      	lsls	r2, r3, #22
 80084de:	d4ee      	bmi.n	80084be <__smakebuf_r+0x18>
 80084e0:	f023 0303 	bic.w	r3, r3, #3
 80084e4:	f043 0302 	orr.w	r3, r3, #2
 80084e8:	81a3      	strh	r3, [r4, #12]
 80084ea:	e7e2      	b.n	80084b2 <__smakebuf_r+0xc>
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084f6:	81a3      	strh	r3, [r4, #12]
 80084f8:	9b01      	ldr	r3, [sp, #4]
 80084fa:	6020      	str	r0, [r4, #0]
 80084fc:	b15b      	cbz	r3, 8008516 <__smakebuf_r+0x70>
 80084fe:	4630      	mov	r0, r6
 8008500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008504:	f000 f84a 	bl	800859c <_isatty_r>
 8008508:	b128      	cbz	r0, 8008516 <__smakebuf_r+0x70>
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	f023 0303 	bic.w	r3, r3, #3
 8008510:	f043 0301 	orr.w	r3, r3, #1
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	431d      	orrs	r5, r3
 800851a:	81a5      	strh	r5, [r4, #12]
 800851c:	e7cf      	b.n	80084be <__smakebuf_r+0x18>

0800851e <memmove>:
 800851e:	4288      	cmp	r0, r1
 8008520:	b510      	push	{r4, lr}
 8008522:	eb01 0402 	add.w	r4, r1, r2
 8008526:	d902      	bls.n	800852e <memmove+0x10>
 8008528:	4284      	cmp	r4, r0
 800852a:	4623      	mov	r3, r4
 800852c:	d807      	bhi.n	800853e <memmove+0x20>
 800852e:	1e43      	subs	r3, r0, #1
 8008530:	42a1      	cmp	r1, r4
 8008532:	d008      	beq.n	8008546 <memmove+0x28>
 8008534:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008538:	f803 2f01 	strb.w	r2, [r3, #1]!
 800853c:	e7f8      	b.n	8008530 <memmove+0x12>
 800853e:	4601      	mov	r1, r0
 8008540:	4402      	add	r2, r0
 8008542:	428a      	cmp	r2, r1
 8008544:	d100      	bne.n	8008548 <memmove+0x2a>
 8008546:	bd10      	pop	{r4, pc}
 8008548:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800854c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008550:	e7f7      	b.n	8008542 <memmove+0x24>

08008552 <strncmp>:
 8008552:	b510      	push	{r4, lr}
 8008554:	b16a      	cbz	r2, 8008572 <strncmp+0x20>
 8008556:	3901      	subs	r1, #1
 8008558:	1884      	adds	r4, r0, r2
 800855a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800855e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008562:	429a      	cmp	r2, r3
 8008564:	d103      	bne.n	800856e <strncmp+0x1c>
 8008566:	42a0      	cmp	r0, r4
 8008568:	d001      	beq.n	800856e <strncmp+0x1c>
 800856a:	2a00      	cmp	r2, #0
 800856c:	d1f5      	bne.n	800855a <strncmp+0x8>
 800856e:	1ad0      	subs	r0, r2, r3
 8008570:	bd10      	pop	{r4, pc}
 8008572:	4610      	mov	r0, r2
 8008574:	e7fc      	b.n	8008570 <strncmp+0x1e>
	...

08008578 <_fstat_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	2300      	movs	r3, #0
 800857c:	4d06      	ldr	r5, [pc, #24]	@ (8008598 <_fstat_r+0x20>)
 800857e:	4604      	mov	r4, r0
 8008580:	4608      	mov	r0, r1
 8008582:	4611      	mov	r1, r2
 8008584:	602b      	str	r3, [r5, #0]
 8008586:	f7f9 f981 	bl	800188c <_fstat>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d102      	bne.n	8008594 <_fstat_r+0x1c>
 800858e:	682b      	ldr	r3, [r5, #0]
 8008590:	b103      	cbz	r3, 8008594 <_fstat_r+0x1c>
 8008592:	6023      	str	r3, [r4, #0]
 8008594:	bd38      	pop	{r3, r4, r5, pc}
 8008596:	bf00      	nop
 8008598:	20004284 	.word	0x20004284

0800859c <_isatty_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	2300      	movs	r3, #0
 80085a0:	4d05      	ldr	r5, [pc, #20]	@ (80085b8 <_isatty_r+0x1c>)
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	602b      	str	r3, [r5, #0]
 80085a8:	f7f9 f97f 	bl	80018aa <_isatty>
 80085ac:	1c43      	adds	r3, r0, #1
 80085ae:	d102      	bne.n	80085b6 <_isatty_r+0x1a>
 80085b0:	682b      	ldr	r3, [r5, #0]
 80085b2:	b103      	cbz	r3, 80085b6 <_isatty_r+0x1a>
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
 80085b8:	20004284 	.word	0x20004284

080085bc <_sbrk_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	2300      	movs	r3, #0
 80085c0:	4d05      	ldr	r5, [pc, #20]	@ (80085d8 <_sbrk_r+0x1c>)
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7f9 f986 	bl	80018d8 <_sbrk>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_sbrk_r+0x1a>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_sbrk_r+0x1a>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	20004284 	.word	0x20004284

080085dc <nan>:
 80085dc:	2000      	movs	r0, #0
 80085de:	4901      	ldr	r1, [pc, #4]	@ (80085e4 <nan+0x8>)
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	7ff80000 	.word	0x7ff80000

080085e8 <__assert_func>:
 80085e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085ea:	4614      	mov	r4, r2
 80085ec:	461a      	mov	r2, r3
 80085ee:	4b09      	ldr	r3, [pc, #36]	@ (8008614 <__assert_func+0x2c>)
 80085f0:	4605      	mov	r5, r0
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68d8      	ldr	r0, [r3, #12]
 80085f6:	b954      	cbnz	r4, 800860e <__assert_func+0x26>
 80085f8:	4b07      	ldr	r3, [pc, #28]	@ (8008618 <__assert_func+0x30>)
 80085fa:	461c      	mov	r4, r3
 80085fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008600:	9100      	str	r1, [sp, #0]
 8008602:	462b      	mov	r3, r5
 8008604:	4905      	ldr	r1, [pc, #20]	@ (800861c <__assert_func+0x34>)
 8008606:	f000 fba7 	bl	8008d58 <fiprintf>
 800860a:	f000 fbb7 	bl	8008d7c <abort>
 800860e:	4b04      	ldr	r3, [pc, #16]	@ (8008620 <__assert_func+0x38>)
 8008610:	e7f4      	b.n	80085fc <__assert_func+0x14>
 8008612:	bf00      	nop
 8008614:	2000003c 	.word	0x2000003c
 8008618:	0800afe5 	.word	0x0800afe5
 800861c:	0800afb7 	.word	0x0800afb7
 8008620:	0800afaa 	.word	0x0800afaa

08008624 <_calloc_r>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	fba1 5402 	umull	r5, r4, r1, r2
 800862a:	b93c      	cbnz	r4, 800863c <_calloc_r+0x18>
 800862c:	4629      	mov	r1, r5
 800862e:	f7fe f825 	bl	800667c <_malloc_r>
 8008632:	4606      	mov	r6, r0
 8008634:	b928      	cbnz	r0, 8008642 <_calloc_r+0x1e>
 8008636:	2600      	movs	r6, #0
 8008638:	4630      	mov	r0, r6
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	220c      	movs	r2, #12
 800863e:	6002      	str	r2, [r0, #0]
 8008640:	e7f9      	b.n	8008636 <_calloc_r+0x12>
 8008642:	462a      	mov	r2, r5
 8008644:	4621      	mov	r1, r4
 8008646:	f7fd f8b7 	bl	80057b8 <memset>
 800864a:	e7f5      	b.n	8008638 <_calloc_r+0x14>

0800864c <rshift>:
 800864c:	6903      	ldr	r3, [r0, #16]
 800864e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008652:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008656:	f100 0414 	add.w	r4, r0, #20
 800865a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800865e:	dd46      	ble.n	80086ee <rshift+0xa2>
 8008660:	f011 011f 	ands.w	r1, r1, #31
 8008664:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008668:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800866c:	d10c      	bne.n	8008688 <rshift+0x3c>
 800866e:	4629      	mov	r1, r5
 8008670:	f100 0710 	add.w	r7, r0, #16
 8008674:	42b1      	cmp	r1, r6
 8008676:	d335      	bcc.n	80086e4 <rshift+0x98>
 8008678:	1a9b      	subs	r3, r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	1eea      	subs	r2, r5, #3
 800867e:	4296      	cmp	r6, r2
 8008680:	bf38      	it	cc
 8008682:	2300      	movcc	r3, #0
 8008684:	4423      	add	r3, r4
 8008686:	e015      	b.n	80086b4 <rshift+0x68>
 8008688:	46a1      	mov	r9, r4
 800868a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800868e:	f1c1 0820 	rsb	r8, r1, #32
 8008692:	40cf      	lsrs	r7, r1
 8008694:	f105 0e04 	add.w	lr, r5, #4
 8008698:	4576      	cmp	r6, lr
 800869a:	46f4      	mov	ip, lr
 800869c:	d816      	bhi.n	80086cc <rshift+0x80>
 800869e:	1a9a      	subs	r2, r3, r2
 80086a0:	0092      	lsls	r2, r2, #2
 80086a2:	3a04      	subs	r2, #4
 80086a4:	3501      	adds	r5, #1
 80086a6:	42ae      	cmp	r6, r5
 80086a8:	bf38      	it	cc
 80086aa:	2200      	movcc	r2, #0
 80086ac:	18a3      	adds	r3, r4, r2
 80086ae:	50a7      	str	r7, [r4, r2]
 80086b0:	b107      	cbz	r7, 80086b4 <rshift+0x68>
 80086b2:	3304      	adds	r3, #4
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	eba3 0204 	sub.w	r2, r3, r4
 80086ba:	bf08      	it	eq
 80086bc:	2300      	moveq	r3, #0
 80086be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086c2:	6102      	str	r2, [r0, #16]
 80086c4:	bf08      	it	eq
 80086c6:	6143      	streq	r3, [r0, #20]
 80086c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086cc:	f8dc c000 	ldr.w	ip, [ip]
 80086d0:	fa0c fc08 	lsl.w	ip, ip, r8
 80086d4:	ea4c 0707 	orr.w	r7, ip, r7
 80086d8:	f849 7b04 	str.w	r7, [r9], #4
 80086dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086e0:	40cf      	lsrs	r7, r1
 80086e2:	e7d9      	b.n	8008698 <rshift+0x4c>
 80086e4:	f851 cb04 	ldr.w	ip, [r1], #4
 80086e8:	f847 cf04 	str.w	ip, [r7, #4]!
 80086ec:	e7c2      	b.n	8008674 <rshift+0x28>
 80086ee:	4623      	mov	r3, r4
 80086f0:	e7e0      	b.n	80086b4 <rshift+0x68>

080086f2 <__hexdig_fun>:
 80086f2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80086f6:	2b09      	cmp	r3, #9
 80086f8:	d802      	bhi.n	8008700 <__hexdig_fun+0xe>
 80086fa:	3820      	subs	r0, #32
 80086fc:	b2c0      	uxtb	r0, r0
 80086fe:	4770      	bx	lr
 8008700:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008704:	2b05      	cmp	r3, #5
 8008706:	d801      	bhi.n	800870c <__hexdig_fun+0x1a>
 8008708:	3847      	subs	r0, #71	@ 0x47
 800870a:	e7f7      	b.n	80086fc <__hexdig_fun+0xa>
 800870c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008710:	2b05      	cmp	r3, #5
 8008712:	d801      	bhi.n	8008718 <__hexdig_fun+0x26>
 8008714:	3827      	subs	r0, #39	@ 0x27
 8008716:	e7f1      	b.n	80086fc <__hexdig_fun+0xa>
 8008718:	2000      	movs	r0, #0
 800871a:	4770      	bx	lr

0800871c <__gethex>:
 800871c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	468a      	mov	sl, r1
 8008722:	4690      	mov	r8, r2
 8008724:	b085      	sub	sp, #20
 8008726:	9302      	str	r3, [sp, #8]
 8008728:	680b      	ldr	r3, [r1, #0]
 800872a:	9001      	str	r0, [sp, #4]
 800872c:	1c9c      	adds	r4, r3, #2
 800872e:	46a1      	mov	r9, r4
 8008730:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008734:	2830      	cmp	r0, #48	@ 0x30
 8008736:	d0fa      	beq.n	800872e <__gethex+0x12>
 8008738:	eba9 0303 	sub.w	r3, r9, r3
 800873c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008740:	f7ff ffd7 	bl	80086f2 <__hexdig_fun>
 8008744:	4605      	mov	r5, r0
 8008746:	2800      	cmp	r0, #0
 8008748:	d168      	bne.n	800881c <__gethex+0x100>
 800874a:	2201      	movs	r2, #1
 800874c:	4648      	mov	r0, r9
 800874e:	499f      	ldr	r1, [pc, #636]	@ (80089cc <__gethex+0x2b0>)
 8008750:	f7ff feff 	bl	8008552 <strncmp>
 8008754:	4607      	mov	r7, r0
 8008756:	2800      	cmp	r0, #0
 8008758:	d167      	bne.n	800882a <__gethex+0x10e>
 800875a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800875e:	4626      	mov	r6, r4
 8008760:	f7ff ffc7 	bl	80086f2 <__hexdig_fun>
 8008764:	2800      	cmp	r0, #0
 8008766:	d062      	beq.n	800882e <__gethex+0x112>
 8008768:	4623      	mov	r3, r4
 800876a:	7818      	ldrb	r0, [r3, #0]
 800876c:	4699      	mov	r9, r3
 800876e:	2830      	cmp	r0, #48	@ 0x30
 8008770:	f103 0301 	add.w	r3, r3, #1
 8008774:	d0f9      	beq.n	800876a <__gethex+0x4e>
 8008776:	f7ff ffbc 	bl	80086f2 <__hexdig_fun>
 800877a:	fab0 f580 	clz	r5, r0
 800877e:	f04f 0b01 	mov.w	fp, #1
 8008782:	096d      	lsrs	r5, r5, #5
 8008784:	464a      	mov	r2, r9
 8008786:	4616      	mov	r6, r2
 8008788:	7830      	ldrb	r0, [r6, #0]
 800878a:	3201      	adds	r2, #1
 800878c:	f7ff ffb1 	bl	80086f2 <__hexdig_fun>
 8008790:	2800      	cmp	r0, #0
 8008792:	d1f8      	bne.n	8008786 <__gethex+0x6a>
 8008794:	2201      	movs	r2, #1
 8008796:	4630      	mov	r0, r6
 8008798:	498c      	ldr	r1, [pc, #560]	@ (80089cc <__gethex+0x2b0>)
 800879a:	f7ff feda 	bl	8008552 <strncmp>
 800879e:	2800      	cmp	r0, #0
 80087a0:	d13f      	bne.n	8008822 <__gethex+0x106>
 80087a2:	b944      	cbnz	r4, 80087b6 <__gethex+0x9a>
 80087a4:	1c74      	adds	r4, r6, #1
 80087a6:	4622      	mov	r2, r4
 80087a8:	4616      	mov	r6, r2
 80087aa:	7830      	ldrb	r0, [r6, #0]
 80087ac:	3201      	adds	r2, #1
 80087ae:	f7ff ffa0 	bl	80086f2 <__hexdig_fun>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d1f8      	bne.n	80087a8 <__gethex+0x8c>
 80087b6:	1ba4      	subs	r4, r4, r6
 80087b8:	00a7      	lsls	r7, r4, #2
 80087ba:	7833      	ldrb	r3, [r6, #0]
 80087bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80087c0:	2b50      	cmp	r3, #80	@ 0x50
 80087c2:	d13e      	bne.n	8008842 <__gethex+0x126>
 80087c4:	7873      	ldrb	r3, [r6, #1]
 80087c6:	2b2b      	cmp	r3, #43	@ 0x2b
 80087c8:	d033      	beq.n	8008832 <__gethex+0x116>
 80087ca:	2b2d      	cmp	r3, #45	@ 0x2d
 80087cc:	d034      	beq.n	8008838 <__gethex+0x11c>
 80087ce:	2400      	movs	r4, #0
 80087d0:	1c71      	adds	r1, r6, #1
 80087d2:	7808      	ldrb	r0, [r1, #0]
 80087d4:	f7ff ff8d 	bl	80086f2 <__hexdig_fun>
 80087d8:	1e43      	subs	r3, r0, #1
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b18      	cmp	r3, #24
 80087de:	d830      	bhi.n	8008842 <__gethex+0x126>
 80087e0:	f1a0 0210 	sub.w	r2, r0, #16
 80087e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80087e8:	f7ff ff83 	bl	80086f2 <__hexdig_fun>
 80087ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80087f0:	fa5f fc8c 	uxtb.w	ip, ip
 80087f4:	f1bc 0f18 	cmp.w	ip, #24
 80087f8:	f04f 030a 	mov.w	r3, #10
 80087fc:	d91e      	bls.n	800883c <__gethex+0x120>
 80087fe:	b104      	cbz	r4, 8008802 <__gethex+0xe6>
 8008800:	4252      	negs	r2, r2
 8008802:	4417      	add	r7, r2
 8008804:	f8ca 1000 	str.w	r1, [sl]
 8008808:	b1ed      	cbz	r5, 8008846 <__gethex+0x12a>
 800880a:	f1bb 0f00 	cmp.w	fp, #0
 800880e:	bf0c      	ite	eq
 8008810:	2506      	moveq	r5, #6
 8008812:	2500      	movne	r5, #0
 8008814:	4628      	mov	r0, r5
 8008816:	b005      	add	sp, #20
 8008818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881c:	2500      	movs	r5, #0
 800881e:	462c      	mov	r4, r5
 8008820:	e7b0      	b.n	8008784 <__gethex+0x68>
 8008822:	2c00      	cmp	r4, #0
 8008824:	d1c7      	bne.n	80087b6 <__gethex+0x9a>
 8008826:	4627      	mov	r7, r4
 8008828:	e7c7      	b.n	80087ba <__gethex+0x9e>
 800882a:	464e      	mov	r6, r9
 800882c:	462f      	mov	r7, r5
 800882e:	2501      	movs	r5, #1
 8008830:	e7c3      	b.n	80087ba <__gethex+0x9e>
 8008832:	2400      	movs	r4, #0
 8008834:	1cb1      	adds	r1, r6, #2
 8008836:	e7cc      	b.n	80087d2 <__gethex+0xb6>
 8008838:	2401      	movs	r4, #1
 800883a:	e7fb      	b.n	8008834 <__gethex+0x118>
 800883c:	fb03 0002 	mla	r0, r3, r2, r0
 8008840:	e7ce      	b.n	80087e0 <__gethex+0xc4>
 8008842:	4631      	mov	r1, r6
 8008844:	e7de      	b.n	8008804 <__gethex+0xe8>
 8008846:	4629      	mov	r1, r5
 8008848:	eba6 0309 	sub.w	r3, r6, r9
 800884c:	3b01      	subs	r3, #1
 800884e:	2b07      	cmp	r3, #7
 8008850:	dc0a      	bgt.n	8008868 <__gethex+0x14c>
 8008852:	9801      	ldr	r0, [sp, #4]
 8008854:	f7fd ff9e 	bl	8006794 <_Balloc>
 8008858:	4604      	mov	r4, r0
 800885a:	b940      	cbnz	r0, 800886e <__gethex+0x152>
 800885c:	4602      	mov	r2, r0
 800885e:	21e4      	movs	r1, #228	@ 0xe4
 8008860:	4b5b      	ldr	r3, [pc, #364]	@ (80089d0 <__gethex+0x2b4>)
 8008862:	485c      	ldr	r0, [pc, #368]	@ (80089d4 <__gethex+0x2b8>)
 8008864:	f7ff fec0 	bl	80085e8 <__assert_func>
 8008868:	3101      	adds	r1, #1
 800886a:	105b      	asrs	r3, r3, #1
 800886c:	e7ef      	b.n	800884e <__gethex+0x132>
 800886e:	2300      	movs	r3, #0
 8008870:	f100 0a14 	add.w	sl, r0, #20
 8008874:	4655      	mov	r5, sl
 8008876:	469b      	mov	fp, r3
 8008878:	45b1      	cmp	r9, r6
 800887a:	d337      	bcc.n	80088ec <__gethex+0x1d0>
 800887c:	f845 bb04 	str.w	fp, [r5], #4
 8008880:	eba5 050a 	sub.w	r5, r5, sl
 8008884:	10ad      	asrs	r5, r5, #2
 8008886:	6125      	str	r5, [r4, #16]
 8008888:	4658      	mov	r0, fp
 800888a:	f7fe f875 	bl	8006978 <__hi0bits>
 800888e:	016d      	lsls	r5, r5, #5
 8008890:	f8d8 6000 	ldr.w	r6, [r8]
 8008894:	1a2d      	subs	r5, r5, r0
 8008896:	42b5      	cmp	r5, r6
 8008898:	dd54      	ble.n	8008944 <__gethex+0x228>
 800889a:	1bad      	subs	r5, r5, r6
 800889c:	4629      	mov	r1, r5
 800889e:	4620      	mov	r0, r4
 80088a0:	f7fe fbfd 	bl	800709e <__any_on>
 80088a4:	4681      	mov	r9, r0
 80088a6:	b178      	cbz	r0, 80088c8 <__gethex+0x1ac>
 80088a8:	f04f 0901 	mov.w	r9, #1
 80088ac:	1e6b      	subs	r3, r5, #1
 80088ae:	1159      	asrs	r1, r3, #5
 80088b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80088b4:	f003 021f 	and.w	r2, r3, #31
 80088b8:	fa09 f202 	lsl.w	r2, r9, r2
 80088bc:	420a      	tst	r2, r1
 80088be:	d003      	beq.n	80088c8 <__gethex+0x1ac>
 80088c0:	454b      	cmp	r3, r9
 80088c2:	dc36      	bgt.n	8008932 <__gethex+0x216>
 80088c4:	f04f 0902 	mov.w	r9, #2
 80088c8:	4629      	mov	r1, r5
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff febe 	bl	800864c <rshift>
 80088d0:	442f      	add	r7, r5
 80088d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088d6:	42bb      	cmp	r3, r7
 80088d8:	da42      	bge.n	8008960 <__gethex+0x244>
 80088da:	4621      	mov	r1, r4
 80088dc:	9801      	ldr	r0, [sp, #4]
 80088de:	f7fd ff99 	bl	8006814 <_Bfree>
 80088e2:	2300      	movs	r3, #0
 80088e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088e6:	25a3      	movs	r5, #163	@ 0xa3
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	e793      	b.n	8008814 <__gethex+0xf8>
 80088ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80088f0:	2a2e      	cmp	r2, #46	@ 0x2e
 80088f2:	d012      	beq.n	800891a <__gethex+0x1fe>
 80088f4:	2b20      	cmp	r3, #32
 80088f6:	d104      	bne.n	8008902 <__gethex+0x1e6>
 80088f8:	f845 bb04 	str.w	fp, [r5], #4
 80088fc:	f04f 0b00 	mov.w	fp, #0
 8008900:	465b      	mov	r3, fp
 8008902:	7830      	ldrb	r0, [r6, #0]
 8008904:	9303      	str	r3, [sp, #12]
 8008906:	f7ff fef4 	bl	80086f2 <__hexdig_fun>
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	f000 000f 	and.w	r0, r0, #15
 8008910:	4098      	lsls	r0, r3
 8008912:	ea4b 0b00 	orr.w	fp, fp, r0
 8008916:	3304      	adds	r3, #4
 8008918:	e7ae      	b.n	8008878 <__gethex+0x15c>
 800891a:	45b1      	cmp	r9, r6
 800891c:	d8ea      	bhi.n	80088f4 <__gethex+0x1d8>
 800891e:	2201      	movs	r2, #1
 8008920:	4630      	mov	r0, r6
 8008922:	492a      	ldr	r1, [pc, #168]	@ (80089cc <__gethex+0x2b0>)
 8008924:	9303      	str	r3, [sp, #12]
 8008926:	f7ff fe14 	bl	8008552 <strncmp>
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	2800      	cmp	r0, #0
 800892e:	d1e1      	bne.n	80088f4 <__gethex+0x1d8>
 8008930:	e7a2      	b.n	8008878 <__gethex+0x15c>
 8008932:	4620      	mov	r0, r4
 8008934:	1ea9      	subs	r1, r5, #2
 8008936:	f7fe fbb2 	bl	800709e <__any_on>
 800893a:	2800      	cmp	r0, #0
 800893c:	d0c2      	beq.n	80088c4 <__gethex+0x1a8>
 800893e:	f04f 0903 	mov.w	r9, #3
 8008942:	e7c1      	b.n	80088c8 <__gethex+0x1ac>
 8008944:	da09      	bge.n	800895a <__gethex+0x23e>
 8008946:	1b75      	subs	r5, r6, r5
 8008948:	4621      	mov	r1, r4
 800894a:	462a      	mov	r2, r5
 800894c:	9801      	ldr	r0, [sp, #4]
 800894e:	f7fe f977 	bl	8006c40 <__lshift>
 8008952:	4604      	mov	r4, r0
 8008954:	1b7f      	subs	r7, r7, r5
 8008956:	f100 0a14 	add.w	sl, r0, #20
 800895a:	f04f 0900 	mov.w	r9, #0
 800895e:	e7b8      	b.n	80088d2 <__gethex+0x1b6>
 8008960:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008964:	42bd      	cmp	r5, r7
 8008966:	dd6f      	ble.n	8008a48 <__gethex+0x32c>
 8008968:	1bed      	subs	r5, r5, r7
 800896a:	42ae      	cmp	r6, r5
 800896c:	dc34      	bgt.n	80089d8 <__gethex+0x2bc>
 800896e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d022      	beq.n	80089bc <__gethex+0x2a0>
 8008976:	2b03      	cmp	r3, #3
 8008978:	d024      	beq.n	80089c4 <__gethex+0x2a8>
 800897a:	2b01      	cmp	r3, #1
 800897c:	d115      	bne.n	80089aa <__gethex+0x28e>
 800897e:	42ae      	cmp	r6, r5
 8008980:	d113      	bne.n	80089aa <__gethex+0x28e>
 8008982:	2e01      	cmp	r6, #1
 8008984:	d10b      	bne.n	800899e <__gethex+0x282>
 8008986:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800898a:	9a02      	ldr	r2, [sp, #8]
 800898c:	2562      	movs	r5, #98	@ 0x62
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	2301      	movs	r3, #1
 8008992:	6123      	str	r3, [r4, #16]
 8008994:	f8ca 3000 	str.w	r3, [sl]
 8008998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800899a:	601c      	str	r4, [r3, #0]
 800899c:	e73a      	b.n	8008814 <__gethex+0xf8>
 800899e:	4620      	mov	r0, r4
 80089a0:	1e71      	subs	r1, r6, #1
 80089a2:	f7fe fb7c 	bl	800709e <__any_on>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d1ed      	bne.n	8008986 <__gethex+0x26a>
 80089aa:	4621      	mov	r1, r4
 80089ac:	9801      	ldr	r0, [sp, #4]
 80089ae:	f7fd ff31 	bl	8006814 <_Bfree>
 80089b2:	2300      	movs	r3, #0
 80089b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089b6:	2550      	movs	r5, #80	@ 0x50
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	e72b      	b.n	8008814 <__gethex+0xf8>
 80089bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1f3      	bne.n	80089aa <__gethex+0x28e>
 80089c2:	e7e0      	b.n	8008986 <__gethex+0x26a>
 80089c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1dd      	bne.n	8008986 <__gethex+0x26a>
 80089ca:	e7ee      	b.n	80089aa <__gethex+0x28e>
 80089cc:	0800ae38 	.word	0x0800ae38
 80089d0:	0800accb 	.word	0x0800accb
 80089d4:	0800afe6 	.word	0x0800afe6
 80089d8:	1e6f      	subs	r7, r5, #1
 80089da:	f1b9 0f00 	cmp.w	r9, #0
 80089de:	d130      	bne.n	8008a42 <__gethex+0x326>
 80089e0:	b127      	cbz	r7, 80089ec <__gethex+0x2d0>
 80089e2:	4639      	mov	r1, r7
 80089e4:	4620      	mov	r0, r4
 80089e6:	f7fe fb5a 	bl	800709e <__any_on>
 80089ea:	4681      	mov	r9, r0
 80089ec:	2301      	movs	r3, #1
 80089ee:	4629      	mov	r1, r5
 80089f0:	1b76      	subs	r6, r6, r5
 80089f2:	2502      	movs	r5, #2
 80089f4:	117a      	asrs	r2, r7, #5
 80089f6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80089fa:	f007 071f 	and.w	r7, r7, #31
 80089fe:	40bb      	lsls	r3, r7
 8008a00:	4213      	tst	r3, r2
 8008a02:	4620      	mov	r0, r4
 8008a04:	bf18      	it	ne
 8008a06:	f049 0902 	orrne.w	r9, r9, #2
 8008a0a:	f7ff fe1f 	bl	800864c <rshift>
 8008a0e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008a12:	f1b9 0f00 	cmp.w	r9, #0
 8008a16:	d047      	beq.n	8008aa8 <__gethex+0x38c>
 8008a18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d015      	beq.n	8008a4c <__gethex+0x330>
 8008a20:	2b03      	cmp	r3, #3
 8008a22:	d017      	beq.n	8008a54 <__gethex+0x338>
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d109      	bne.n	8008a3c <__gethex+0x320>
 8008a28:	f019 0f02 	tst.w	r9, #2
 8008a2c:	d006      	beq.n	8008a3c <__gethex+0x320>
 8008a2e:	f8da 3000 	ldr.w	r3, [sl]
 8008a32:	ea49 0903 	orr.w	r9, r9, r3
 8008a36:	f019 0f01 	tst.w	r9, #1
 8008a3a:	d10e      	bne.n	8008a5a <__gethex+0x33e>
 8008a3c:	f045 0510 	orr.w	r5, r5, #16
 8008a40:	e032      	b.n	8008aa8 <__gethex+0x38c>
 8008a42:	f04f 0901 	mov.w	r9, #1
 8008a46:	e7d1      	b.n	80089ec <__gethex+0x2d0>
 8008a48:	2501      	movs	r5, #1
 8008a4a:	e7e2      	b.n	8008a12 <__gethex+0x2f6>
 8008a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a4e:	f1c3 0301 	rsb	r3, r3, #1
 8008a52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d0f0      	beq.n	8008a3c <__gethex+0x320>
 8008a5a:	f04f 0c00 	mov.w	ip, #0
 8008a5e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a62:	f104 0314 	add.w	r3, r4, #20
 8008a66:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008a6a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a74:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a78:	d01b      	beq.n	8008ab2 <__gethex+0x396>
 8008a7a:	3201      	adds	r2, #1
 8008a7c:	6002      	str	r2, [r0, #0]
 8008a7e:	2d02      	cmp	r5, #2
 8008a80:	f104 0314 	add.w	r3, r4, #20
 8008a84:	d13c      	bne.n	8008b00 <__gethex+0x3e4>
 8008a86:	f8d8 2000 	ldr.w	r2, [r8]
 8008a8a:	3a01      	subs	r2, #1
 8008a8c:	42b2      	cmp	r2, r6
 8008a8e:	d109      	bne.n	8008aa4 <__gethex+0x388>
 8008a90:	2201      	movs	r2, #1
 8008a92:	1171      	asrs	r1, r6, #5
 8008a94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a98:	f006 061f 	and.w	r6, r6, #31
 8008a9c:	fa02 f606 	lsl.w	r6, r2, r6
 8008aa0:	421e      	tst	r6, r3
 8008aa2:	d13a      	bne.n	8008b1a <__gethex+0x3fe>
 8008aa4:	f045 0520 	orr.w	r5, r5, #32
 8008aa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aaa:	601c      	str	r4, [r3, #0]
 8008aac:	9b02      	ldr	r3, [sp, #8]
 8008aae:	601f      	str	r7, [r3, #0]
 8008ab0:	e6b0      	b.n	8008814 <__gethex+0xf8>
 8008ab2:	4299      	cmp	r1, r3
 8008ab4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ab8:	d8d9      	bhi.n	8008a6e <__gethex+0x352>
 8008aba:	68a3      	ldr	r3, [r4, #8]
 8008abc:	459b      	cmp	fp, r3
 8008abe:	db17      	blt.n	8008af0 <__gethex+0x3d4>
 8008ac0:	6861      	ldr	r1, [r4, #4]
 8008ac2:	9801      	ldr	r0, [sp, #4]
 8008ac4:	3101      	adds	r1, #1
 8008ac6:	f7fd fe65 	bl	8006794 <_Balloc>
 8008aca:	4681      	mov	r9, r0
 8008acc:	b918      	cbnz	r0, 8008ad6 <__gethex+0x3ba>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	2184      	movs	r1, #132	@ 0x84
 8008ad2:	4b19      	ldr	r3, [pc, #100]	@ (8008b38 <__gethex+0x41c>)
 8008ad4:	e6c5      	b.n	8008862 <__gethex+0x146>
 8008ad6:	6922      	ldr	r2, [r4, #16]
 8008ad8:	f104 010c 	add.w	r1, r4, #12
 8008adc:	3202      	adds	r2, #2
 8008ade:	0092      	lsls	r2, r2, #2
 8008ae0:	300c      	adds	r0, #12
 8008ae2:	f7fc fef6 	bl	80058d2 <memcpy>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	9801      	ldr	r0, [sp, #4]
 8008aea:	f7fd fe93 	bl	8006814 <_Bfree>
 8008aee:	464c      	mov	r4, r9
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	6122      	str	r2, [r4, #16]
 8008af6:	2201      	movs	r2, #1
 8008af8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008afc:	615a      	str	r2, [r3, #20]
 8008afe:	e7be      	b.n	8008a7e <__gethex+0x362>
 8008b00:	6922      	ldr	r2, [r4, #16]
 8008b02:	455a      	cmp	r2, fp
 8008b04:	dd0b      	ble.n	8008b1e <__gethex+0x402>
 8008b06:	2101      	movs	r1, #1
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f7ff fd9f 	bl	800864c <rshift>
 8008b0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b12:	3701      	adds	r7, #1
 8008b14:	42bb      	cmp	r3, r7
 8008b16:	f6ff aee0 	blt.w	80088da <__gethex+0x1be>
 8008b1a:	2501      	movs	r5, #1
 8008b1c:	e7c2      	b.n	8008aa4 <__gethex+0x388>
 8008b1e:	f016 061f 	ands.w	r6, r6, #31
 8008b22:	d0fa      	beq.n	8008b1a <__gethex+0x3fe>
 8008b24:	4453      	add	r3, sl
 8008b26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008b2a:	f7fd ff25 	bl	8006978 <__hi0bits>
 8008b2e:	f1c6 0620 	rsb	r6, r6, #32
 8008b32:	42b0      	cmp	r0, r6
 8008b34:	dbe7      	blt.n	8008b06 <__gethex+0x3ea>
 8008b36:	e7f0      	b.n	8008b1a <__gethex+0x3fe>
 8008b38:	0800accb 	.word	0x0800accb

08008b3c <L_shift>:
 8008b3c:	f1c2 0208 	rsb	r2, r2, #8
 8008b40:	0092      	lsls	r2, r2, #2
 8008b42:	b570      	push	{r4, r5, r6, lr}
 8008b44:	f1c2 0620 	rsb	r6, r2, #32
 8008b48:	6843      	ldr	r3, [r0, #4]
 8008b4a:	6804      	ldr	r4, [r0, #0]
 8008b4c:	fa03 f506 	lsl.w	r5, r3, r6
 8008b50:	432c      	orrs	r4, r5
 8008b52:	40d3      	lsrs	r3, r2
 8008b54:	6004      	str	r4, [r0, #0]
 8008b56:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b5a:	4288      	cmp	r0, r1
 8008b5c:	d3f4      	bcc.n	8008b48 <L_shift+0xc>
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}

08008b60 <__match>:
 8008b60:	b530      	push	{r4, r5, lr}
 8008b62:	6803      	ldr	r3, [r0, #0]
 8008b64:	3301      	adds	r3, #1
 8008b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b6a:	b914      	cbnz	r4, 8008b72 <__match+0x12>
 8008b6c:	6003      	str	r3, [r0, #0]
 8008b6e:	2001      	movs	r0, #1
 8008b70:	bd30      	pop	{r4, r5, pc}
 8008b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008b7a:	2d19      	cmp	r5, #25
 8008b7c:	bf98      	it	ls
 8008b7e:	3220      	addls	r2, #32
 8008b80:	42a2      	cmp	r2, r4
 8008b82:	d0f0      	beq.n	8008b66 <__match+0x6>
 8008b84:	2000      	movs	r0, #0
 8008b86:	e7f3      	b.n	8008b70 <__match+0x10>

08008b88 <__hexnan>:
 8008b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8c:	2500      	movs	r5, #0
 8008b8e:	680b      	ldr	r3, [r1, #0]
 8008b90:	4682      	mov	sl, r0
 8008b92:	115e      	asrs	r6, r3, #5
 8008b94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b98:	f013 031f 	ands.w	r3, r3, #31
 8008b9c:	bf18      	it	ne
 8008b9e:	3604      	addne	r6, #4
 8008ba0:	1f37      	subs	r7, r6, #4
 8008ba2:	4690      	mov	r8, r2
 8008ba4:	46b9      	mov	r9, r7
 8008ba6:	463c      	mov	r4, r7
 8008ba8:	46ab      	mov	fp, r5
 8008baa:	b087      	sub	sp, #28
 8008bac:	6801      	ldr	r1, [r0, #0]
 8008bae:	9301      	str	r3, [sp, #4]
 8008bb0:	f846 5c04 	str.w	r5, [r6, #-4]
 8008bb4:	9502      	str	r5, [sp, #8]
 8008bb6:	784a      	ldrb	r2, [r1, #1]
 8008bb8:	1c4b      	adds	r3, r1, #1
 8008bba:	9303      	str	r3, [sp, #12]
 8008bbc:	b342      	cbz	r2, 8008c10 <__hexnan+0x88>
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	9105      	str	r1, [sp, #20]
 8008bc2:	9204      	str	r2, [sp, #16]
 8008bc4:	f7ff fd95 	bl	80086f2 <__hexdig_fun>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d151      	bne.n	8008c70 <__hexnan+0xe8>
 8008bcc:	9a04      	ldr	r2, [sp, #16]
 8008bce:	9905      	ldr	r1, [sp, #20]
 8008bd0:	2a20      	cmp	r2, #32
 8008bd2:	d818      	bhi.n	8008c06 <__hexnan+0x7e>
 8008bd4:	9b02      	ldr	r3, [sp, #8]
 8008bd6:	459b      	cmp	fp, r3
 8008bd8:	dd13      	ble.n	8008c02 <__hexnan+0x7a>
 8008bda:	454c      	cmp	r4, r9
 8008bdc:	d206      	bcs.n	8008bec <__hexnan+0x64>
 8008bde:	2d07      	cmp	r5, #7
 8008be0:	dc04      	bgt.n	8008bec <__hexnan+0x64>
 8008be2:	462a      	mov	r2, r5
 8008be4:	4649      	mov	r1, r9
 8008be6:	4620      	mov	r0, r4
 8008be8:	f7ff ffa8 	bl	8008b3c <L_shift>
 8008bec:	4544      	cmp	r4, r8
 8008bee:	d952      	bls.n	8008c96 <__hexnan+0x10e>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f1a4 0904 	sub.w	r9, r4, #4
 8008bf6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bfa:	461d      	mov	r5, r3
 8008bfc:	464c      	mov	r4, r9
 8008bfe:	f8cd b008 	str.w	fp, [sp, #8]
 8008c02:	9903      	ldr	r1, [sp, #12]
 8008c04:	e7d7      	b.n	8008bb6 <__hexnan+0x2e>
 8008c06:	2a29      	cmp	r2, #41	@ 0x29
 8008c08:	d157      	bne.n	8008cba <__hexnan+0x132>
 8008c0a:	3102      	adds	r1, #2
 8008c0c:	f8ca 1000 	str.w	r1, [sl]
 8008c10:	f1bb 0f00 	cmp.w	fp, #0
 8008c14:	d051      	beq.n	8008cba <__hexnan+0x132>
 8008c16:	454c      	cmp	r4, r9
 8008c18:	d206      	bcs.n	8008c28 <__hexnan+0xa0>
 8008c1a:	2d07      	cmp	r5, #7
 8008c1c:	dc04      	bgt.n	8008c28 <__hexnan+0xa0>
 8008c1e:	462a      	mov	r2, r5
 8008c20:	4649      	mov	r1, r9
 8008c22:	4620      	mov	r0, r4
 8008c24:	f7ff ff8a 	bl	8008b3c <L_shift>
 8008c28:	4544      	cmp	r4, r8
 8008c2a:	d936      	bls.n	8008c9a <__hexnan+0x112>
 8008c2c:	4623      	mov	r3, r4
 8008c2e:	f1a8 0204 	sub.w	r2, r8, #4
 8008c32:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c36:	429f      	cmp	r7, r3
 8008c38:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c3c:	d2f9      	bcs.n	8008c32 <__hexnan+0xaa>
 8008c3e:	1b3b      	subs	r3, r7, r4
 8008c40:	f023 0303 	bic.w	r3, r3, #3
 8008c44:	3304      	adds	r3, #4
 8008c46:	3401      	adds	r4, #1
 8008c48:	3e03      	subs	r6, #3
 8008c4a:	42b4      	cmp	r4, r6
 8008c4c:	bf88      	it	hi
 8008c4e:	2304      	movhi	r3, #4
 8008c50:	2200      	movs	r2, #0
 8008c52:	4443      	add	r3, r8
 8008c54:	f843 2b04 	str.w	r2, [r3], #4
 8008c58:	429f      	cmp	r7, r3
 8008c5a:	d2fb      	bcs.n	8008c54 <__hexnan+0xcc>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	b91b      	cbnz	r3, 8008c68 <__hexnan+0xe0>
 8008c60:	4547      	cmp	r7, r8
 8008c62:	d128      	bne.n	8008cb6 <__hexnan+0x12e>
 8008c64:	2301      	movs	r3, #1
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	2005      	movs	r0, #5
 8008c6a:	b007      	add	sp, #28
 8008c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c70:	3501      	adds	r5, #1
 8008c72:	2d08      	cmp	r5, #8
 8008c74:	f10b 0b01 	add.w	fp, fp, #1
 8008c78:	dd06      	ble.n	8008c88 <__hexnan+0x100>
 8008c7a:	4544      	cmp	r4, r8
 8008c7c:	d9c1      	bls.n	8008c02 <__hexnan+0x7a>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2501      	movs	r5, #1
 8008c82:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c86:	3c04      	subs	r4, #4
 8008c88:	6822      	ldr	r2, [r4, #0]
 8008c8a:	f000 000f 	and.w	r0, r0, #15
 8008c8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008c92:	6020      	str	r0, [r4, #0]
 8008c94:	e7b5      	b.n	8008c02 <__hexnan+0x7a>
 8008c96:	2508      	movs	r5, #8
 8008c98:	e7b3      	b.n	8008c02 <__hexnan+0x7a>
 8008c9a:	9b01      	ldr	r3, [sp, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d0dd      	beq.n	8008c5c <__hexnan+0xd4>
 8008ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca4:	f1c3 0320 	rsb	r3, r3, #32
 8008ca8:	40da      	lsrs	r2, r3
 8008caa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	f846 3c04 	str.w	r3, [r6, #-4]
 8008cb4:	e7d2      	b.n	8008c5c <__hexnan+0xd4>
 8008cb6:	3f04      	subs	r7, #4
 8008cb8:	e7d0      	b.n	8008c5c <__hexnan+0xd4>
 8008cba:	2004      	movs	r0, #4
 8008cbc:	e7d5      	b.n	8008c6a <__hexnan+0xe2>

08008cbe <__ascii_mbtowc>:
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	b901      	cbnz	r1, 8008cc4 <__ascii_mbtowc+0x6>
 8008cc2:	a901      	add	r1, sp, #4
 8008cc4:	b142      	cbz	r2, 8008cd8 <__ascii_mbtowc+0x1a>
 8008cc6:	b14b      	cbz	r3, 8008cdc <__ascii_mbtowc+0x1e>
 8008cc8:	7813      	ldrb	r3, [r2, #0]
 8008cca:	600b      	str	r3, [r1, #0]
 8008ccc:	7812      	ldrb	r2, [r2, #0]
 8008cce:	1e10      	subs	r0, r2, #0
 8008cd0:	bf18      	it	ne
 8008cd2:	2001      	movne	r0, #1
 8008cd4:	b002      	add	sp, #8
 8008cd6:	4770      	bx	lr
 8008cd8:	4610      	mov	r0, r2
 8008cda:	e7fb      	b.n	8008cd4 <__ascii_mbtowc+0x16>
 8008cdc:	f06f 0001 	mvn.w	r0, #1
 8008ce0:	e7f8      	b.n	8008cd4 <__ascii_mbtowc+0x16>

08008ce2 <_realloc_r>:
 8008ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce6:	4680      	mov	r8, r0
 8008ce8:	4615      	mov	r5, r2
 8008cea:	460c      	mov	r4, r1
 8008cec:	b921      	cbnz	r1, 8008cf8 <_realloc_r+0x16>
 8008cee:	4611      	mov	r1, r2
 8008cf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf4:	f7fd bcc2 	b.w	800667c <_malloc_r>
 8008cf8:	b92a      	cbnz	r2, 8008d06 <_realloc_r+0x24>
 8008cfa:	f7fd fc4d 	bl	8006598 <_free_r>
 8008cfe:	2400      	movs	r4, #0
 8008d00:	4620      	mov	r0, r4
 8008d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d06:	f000 f840 	bl	8008d8a <_malloc_usable_size_r>
 8008d0a:	4285      	cmp	r5, r0
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	d802      	bhi.n	8008d16 <_realloc_r+0x34>
 8008d10:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d14:	d8f4      	bhi.n	8008d00 <_realloc_r+0x1e>
 8008d16:	4629      	mov	r1, r5
 8008d18:	4640      	mov	r0, r8
 8008d1a:	f7fd fcaf 	bl	800667c <_malloc_r>
 8008d1e:	4607      	mov	r7, r0
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d0ec      	beq.n	8008cfe <_realloc_r+0x1c>
 8008d24:	42b5      	cmp	r5, r6
 8008d26:	462a      	mov	r2, r5
 8008d28:	4621      	mov	r1, r4
 8008d2a:	bf28      	it	cs
 8008d2c:	4632      	movcs	r2, r6
 8008d2e:	f7fc fdd0 	bl	80058d2 <memcpy>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4640      	mov	r0, r8
 8008d36:	f7fd fc2f 	bl	8006598 <_free_r>
 8008d3a:	463c      	mov	r4, r7
 8008d3c:	e7e0      	b.n	8008d00 <_realloc_r+0x1e>

08008d3e <__ascii_wctomb>:
 8008d3e:	4603      	mov	r3, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	b141      	cbz	r1, 8008d56 <__ascii_wctomb+0x18>
 8008d44:	2aff      	cmp	r2, #255	@ 0xff
 8008d46:	d904      	bls.n	8008d52 <__ascii_wctomb+0x14>
 8008d48:	228a      	movs	r2, #138	@ 0x8a
 8008d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	4770      	bx	lr
 8008d52:	2001      	movs	r0, #1
 8008d54:	700a      	strb	r2, [r1, #0]
 8008d56:	4770      	bx	lr

08008d58 <fiprintf>:
 8008d58:	b40e      	push	{r1, r2, r3}
 8008d5a:	b503      	push	{r0, r1, lr}
 8008d5c:	4601      	mov	r1, r0
 8008d5e:	ab03      	add	r3, sp, #12
 8008d60:	4805      	ldr	r0, [pc, #20]	@ (8008d78 <fiprintf+0x20>)
 8008d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d66:	6800      	ldr	r0, [r0, #0]
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	f7ff f9b7 	bl	80080dc <_vfiprintf_r>
 8008d6e:	b002      	add	sp, #8
 8008d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d74:	b003      	add	sp, #12
 8008d76:	4770      	bx	lr
 8008d78:	2000003c 	.word	0x2000003c

08008d7c <abort>:
 8008d7c:	2006      	movs	r0, #6
 8008d7e:	b508      	push	{r3, lr}
 8008d80:	f000 f834 	bl	8008dec <raise>
 8008d84:	2001      	movs	r0, #1
 8008d86:	f7f8 fd4e 	bl	8001826 <_exit>

08008d8a <_malloc_usable_size_r>:
 8008d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d8e:	1f18      	subs	r0, r3, #4
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bfbc      	itt	lt
 8008d94:	580b      	ldrlt	r3, [r1, r0]
 8008d96:	18c0      	addlt	r0, r0, r3
 8008d98:	4770      	bx	lr

08008d9a <_raise_r>:
 8008d9a:	291f      	cmp	r1, #31
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4605      	mov	r5, r0
 8008da0:	460c      	mov	r4, r1
 8008da2:	d904      	bls.n	8008dae <_raise_r+0x14>
 8008da4:	2316      	movs	r3, #22
 8008da6:	6003      	str	r3, [r0, #0]
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	bd38      	pop	{r3, r4, r5, pc}
 8008dae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008db0:	b112      	cbz	r2, 8008db8 <_raise_r+0x1e>
 8008db2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008db6:	b94b      	cbnz	r3, 8008dcc <_raise_r+0x32>
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 f831 	bl	8008e20 <_getpid_r>
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dc8:	f000 b818 	b.w	8008dfc <_kill_r>
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d00a      	beq.n	8008de6 <_raise_r+0x4c>
 8008dd0:	1c59      	adds	r1, r3, #1
 8008dd2:	d103      	bne.n	8008ddc <_raise_r+0x42>
 8008dd4:	2316      	movs	r3, #22
 8008dd6:	6003      	str	r3, [r0, #0]
 8008dd8:	2001      	movs	r0, #1
 8008dda:	e7e7      	b.n	8008dac <_raise_r+0x12>
 8008ddc:	2100      	movs	r1, #0
 8008dde:	4620      	mov	r0, r4
 8008de0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008de4:	4798      	blx	r3
 8008de6:	2000      	movs	r0, #0
 8008de8:	e7e0      	b.n	8008dac <_raise_r+0x12>
	...

08008dec <raise>:
 8008dec:	4b02      	ldr	r3, [pc, #8]	@ (8008df8 <raise+0xc>)
 8008dee:	4601      	mov	r1, r0
 8008df0:	6818      	ldr	r0, [r3, #0]
 8008df2:	f7ff bfd2 	b.w	8008d9a <_raise_r>
 8008df6:	bf00      	nop
 8008df8:	2000003c 	.word	0x2000003c

08008dfc <_kill_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	2300      	movs	r3, #0
 8008e00:	4d06      	ldr	r5, [pc, #24]	@ (8008e1c <_kill_r+0x20>)
 8008e02:	4604      	mov	r4, r0
 8008e04:	4608      	mov	r0, r1
 8008e06:	4611      	mov	r1, r2
 8008e08:	602b      	str	r3, [r5, #0]
 8008e0a:	f7f8 fcfc 	bl	8001806 <_kill>
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	d102      	bne.n	8008e18 <_kill_r+0x1c>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	b103      	cbz	r3, 8008e18 <_kill_r+0x1c>
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	bd38      	pop	{r3, r4, r5, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20004284 	.word	0x20004284

08008e20 <_getpid_r>:
 8008e20:	f7f8 bcea 	b.w	80017f8 <_getpid>

08008e24 <log10f>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4604      	mov	r4, r0
 8008e28:	f000 f904 	bl	8009034 <__ieee754_log10f>
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4605      	mov	r5, r0
 8008e30:	4620      	mov	r0, r4
 8008e32:	f7f8 f96d 	bl	8001110 <__aeabi_fcmpun>
 8008e36:	b970      	cbnz	r0, 8008e56 <log10f+0x32>
 8008e38:	2100      	movs	r1, #0
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f7f8 f94a 	bl	80010d4 <__aeabi_fcmple>
 8008e40:	b148      	cbz	r0, 8008e56 <log10f+0x32>
 8008e42:	2100      	movs	r1, #0
 8008e44:	4620      	mov	r0, r4
 8008e46:	f7f8 f931 	bl	80010ac <__aeabi_fcmpeq>
 8008e4a:	b130      	cbz	r0, 8008e5a <log10f+0x36>
 8008e4c:	f7fc fd06 	bl	800585c <__errno>
 8008e50:	2322      	movs	r3, #34	@ 0x22
 8008e52:	4d06      	ldr	r5, [pc, #24]	@ (8008e6c <log10f+0x48>)
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	4628      	mov	r0, r5
 8008e58:	bd38      	pop	{r3, r4, r5, pc}
 8008e5a:	f7fc fcff 	bl	800585c <__errno>
 8008e5e:	2321      	movs	r3, #33	@ 0x21
 8008e60:	6003      	str	r3, [r0, #0]
 8008e62:	4803      	ldr	r0, [pc, #12]	@ (8008e70 <log10f+0x4c>)
 8008e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e68:	f7fc bd42 	b.w	80058f0 <nanf>
 8008e6c:	ff800000 	.word	0xff800000
 8008e70:	0800afe5 	.word	0x0800afe5

08008e74 <powf>:
 8008e74:	b570      	push	{r4, r5, r6, lr}
 8008e76:	460c      	mov	r4, r1
 8008e78:	4606      	mov	r6, r0
 8008e7a:	f000 f929 	bl	80090d0 <__ieee754_powf>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4605      	mov	r5, r0
 8008e82:	4620      	mov	r0, r4
 8008e84:	f7f8 f944 	bl	8001110 <__aeabi_fcmpun>
 8008e88:	bb68      	cbnz	r0, 8008ee6 <powf+0x72>
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f7f8 f90d 	bl	80010ac <__aeabi_fcmpeq>
 8008e92:	b190      	cbz	r0, 8008eba <powf+0x46>
 8008e94:	2100      	movs	r1, #0
 8008e96:	4620      	mov	r0, r4
 8008e98:	f7f8 f908 	bl	80010ac <__aeabi_fcmpeq>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d133      	bne.n	8008f08 <powf+0x94>
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 f84e 	bl	8008f42 <finitef>
 8008ea6:	b1f0      	cbz	r0, 8008ee6 <powf+0x72>
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7f8 f908 	bl	80010c0 <__aeabi_fcmplt>
 8008eb0:	b1c8      	cbz	r0, 8008ee6 <powf+0x72>
 8008eb2:	f7fc fcd3 	bl	800585c <__errno>
 8008eb6:	2322      	movs	r3, #34	@ 0x22
 8008eb8:	e014      	b.n	8008ee4 <powf+0x70>
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f000 f841 	bl	8008f42 <finitef>
 8008ec0:	b998      	cbnz	r0, 8008eea <powf+0x76>
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f000 f83d 	bl	8008f42 <finitef>
 8008ec8:	b178      	cbz	r0, 8008eea <powf+0x76>
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 f839 	bl	8008f42 <finitef>
 8008ed0:	b158      	cbz	r0, 8008eea <powf+0x76>
 8008ed2:	4629      	mov	r1, r5
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	f7f8 f91b 	bl	8001110 <__aeabi_fcmpun>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d0e9      	beq.n	8008eb2 <powf+0x3e>
 8008ede:	f7fc fcbd 	bl	800585c <__errno>
 8008ee2:	2321      	movs	r3, #33	@ 0x21
 8008ee4:	6003      	str	r3, [r0, #0]
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	bd70      	pop	{r4, r5, r6, pc}
 8008eea:	2100      	movs	r1, #0
 8008eec:	4628      	mov	r0, r5
 8008eee:	f7f8 f8dd 	bl	80010ac <__aeabi_fcmpeq>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d0f7      	beq.n	8008ee6 <powf+0x72>
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f000 f823 	bl	8008f42 <finitef>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d0f2      	beq.n	8008ee6 <powf+0x72>
 8008f00:	4620      	mov	r0, r4
 8008f02:	f000 f81e 	bl	8008f42 <finitef>
 8008f06:	e7d3      	b.n	8008eb0 <powf+0x3c>
 8008f08:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8008f0c:	e7eb      	b.n	8008ee6 <powf+0x72>

08008f0e <sqrtf>:
 8008f0e:	b538      	push	{r3, r4, r5, lr}
 8008f10:	4605      	mov	r5, r0
 8008f12:	f000 f81f 	bl	8008f54 <__ieee754_sqrtf>
 8008f16:	4629      	mov	r1, r5
 8008f18:	4604      	mov	r4, r0
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f7f8 f8f8 	bl	8001110 <__aeabi_fcmpun>
 8008f20:	b968      	cbnz	r0, 8008f3e <sqrtf+0x30>
 8008f22:	2100      	movs	r1, #0
 8008f24:	4628      	mov	r0, r5
 8008f26:	f7f8 f8cb 	bl	80010c0 <__aeabi_fcmplt>
 8008f2a:	b140      	cbz	r0, 8008f3e <sqrtf+0x30>
 8008f2c:	f7fc fc96 	bl	800585c <__errno>
 8008f30:	2321      	movs	r3, #33	@ 0x21
 8008f32:	2100      	movs	r1, #0
 8008f34:	6003      	str	r3, [r0, #0]
 8008f36:	4608      	mov	r0, r1
 8008f38:	f7f7 ffd8 	bl	8000eec <__aeabi_fdiv>
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	4620      	mov	r0, r4
 8008f40:	bd38      	pop	{r3, r4, r5, pc}

08008f42 <finitef>:
 8008f42:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008f46:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8008f4a:	bfac      	ite	ge
 8008f4c:	2000      	movge	r0, #0
 8008f4e:	2001      	movlt	r0, #1
 8008f50:	4770      	bx	lr
	...

08008f54 <__ieee754_sqrtf>:
 8008f54:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8008f58:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f60:	4603      	mov	r3, r0
 8008f62:	4604      	mov	r4, r0
 8008f64:	d30a      	bcc.n	8008f7c <__ieee754_sqrtf+0x28>
 8008f66:	4601      	mov	r1, r0
 8008f68:	f7f7 ff0c 	bl	8000d84 <__aeabi_fmul>
 8008f6c:	4601      	mov	r1, r0
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f7f7 fe00 	bl	8000b74 <__addsf3>
 8008f74:	4604      	mov	r4, r0
 8008f76:	4620      	mov	r0, r4
 8008f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7c:	2a00      	cmp	r2, #0
 8008f7e:	d0fa      	beq.n	8008f76 <__ieee754_sqrtf+0x22>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	da06      	bge.n	8008f92 <__ieee754_sqrtf+0x3e>
 8008f84:	4601      	mov	r1, r0
 8008f86:	f7f7 fdf3 	bl	8000b70 <__aeabi_fsub>
 8008f8a:	4601      	mov	r1, r0
 8008f8c:	f7f7 ffae 	bl	8000eec <__aeabi_fdiv>
 8008f90:	e7f0      	b.n	8008f74 <__ieee754_sqrtf+0x20>
 8008f92:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 8008f96:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008f9a:	d03e      	beq.n	800901a <__ieee754_sqrtf+0xc6>
 8008f9c:	2400      	movs	r4, #0
 8008f9e:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8008fa2:	07ca      	lsls	r2, r1, #31
 8008fa4:	f04f 0019 	mov.w	r0, #25
 8008fa8:	4626      	mov	r6, r4
 8008faa:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8008fae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008fb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008fb6:	bf58      	it	pl
 8008fb8:	005b      	lslpl	r3, r3, #1
 8008fba:	106d      	asrs	r5, r5, #1
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	1872      	adds	r2, r6, r1
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	bfcf      	iteee	gt
 8008fc4:	461a      	movgt	r2, r3
 8008fc6:	1856      	addle	r6, r2, r1
 8008fc8:	1864      	addle	r4, r4, r1
 8008fca:	1a9a      	suble	r2, r3, r2
 8008fcc:	3801      	subs	r0, #1
 8008fce:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8008fd2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008fd6:	d1f2      	bne.n	8008fbe <__ieee754_sqrtf+0x6a>
 8008fd8:	b1ba      	cbz	r2, 800900a <__ieee754_sqrtf+0xb6>
 8008fda:	4e14      	ldr	r6, [pc, #80]	@ (800902c <__ieee754_sqrtf+0xd8>)
 8008fdc:	4f14      	ldr	r7, [pc, #80]	@ (8009030 <__ieee754_sqrtf+0xdc>)
 8008fde:	6830      	ldr	r0, [r6, #0]
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	f7f7 fdc5 	bl	8000b70 <__aeabi_fsub>
 8008fe6:	f8d6 8000 	ldr.w	r8, [r6]
 8008fea:	4601      	mov	r1, r0
 8008fec:	4640      	mov	r0, r8
 8008fee:	f7f8 f871 	bl	80010d4 <__aeabi_fcmple>
 8008ff2:	b150      	cbz	r0, 800900a <__ieee754_sqrtf+0xb6>
 8008ff4:	6830      	ldr	r0, [r6, #0]
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	f7f7 fdbc 	bl	8000b74 <__addsf3>
 8008ffc:	6836      	ldr	r6, [r6, #0]
 8008ffe:	4601      	mov	r1, r0
 8009000:	4630      	mov	r0, r6
 8009002:	f7f8 f85d 	bl	80010c0 <__aeabi_fcmplt>
 8009006:	b168      	cbz	r0, 8009024 <__ieee754_sqrtf+0xd0>
 8009008:	3402      	adds	r4, #2
 800900a:	1064      	asrs	r4, r4, #1
 800900c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8009010:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8009014:	e7af      	b.n	8008f76 <__ieee754_sqrtf+0x22>
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	3201      	adds	r2, #1
 800901a:	0218      	lsls	r0, r3, #8
 800901c:	d5fb      	bpl.n	8009016 <__ieee754_sqrtf+0xc2>
 800901e:	3a01      	subs	r2, #1
 8009020:	1a89      	subs	r1, r1, r2
 8009022:	e7bb      	b.n	8008f9c <__ieee754_sqrtf+0x48>
 8009024:	3401      	adds	r4, #1
 8009026:	f024 0401 	bic.w	r4, r4, #1
 800902a:	e7ee      	b.n	800900a <__ieee754_sqrtf+0xb6>
 800902c:	200001fc 	.word	0x200001fc
 8009030:	200001f8 	.word	0x200001f8

08009034 <__ieee754_log10f>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	f030 4300 	bics.w	r3, r0, #2147483648	@ 0x80000000
 800903a:	4601      	mov	r1, r0
 800903c:	d105      	bne.n	800904a <__ieee754_log10f+0x16>
 800903e:	2100      	movs	r1, #0
 8009040:	f04f 404c 	mov.w	r0, #3422552064	@ 0xcc000000
 8009044:	f7f7 ff52 	bl	8000eec <__aeabi_fdiv>
 8009048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800904a:	2800      	cmp	r0, #0
 800904c:	4603      	mov	r3, r0
 800904e:	da03      	bge.n	8009058 <__ieee754_log10f+0x24>
 8009050:	f7f7 fd8e 	bl	8000b70 <__aeabi_fsub>
 8009054:	2100      	movs	r1, #0
 8009056:	e7f5      	b.n	8009044 <__ieee754_log10f+0x10>
 8009058:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800905c:	db02      	blt.n	8009064 <__ieee754_log10f+0x30>
 800905e:	f7f7 fd89 	bl	8000b74 <__addsf3>
 8009062:	e7f1      	b.n	8009048 <__ieee754_log10f+0x14>
 8009064:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8009068:	da29      	bge.n	80090be <__ieee754_log10f+0x8a>
 800906a:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800906e:	f7f7 fe89 	bl	8000d84 <__aeabi_fmul>
 8009072:	f06f 0218 	mvn.w	r2, #24
 8009076:	4603      	mov	r3, r0
 8009078:	15d8      	asrs	r0, r3, #23
 800907a:	387f      	subs	r0, #127	@ 0x7f
 800907c:	4410      	add	r0, r2
 800907e:	0fc7      	lsrs	r7, r0, #31
 8009080:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8009084:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8009088:	f7f7 fe28 	bl	8000cdc <__aeabi_i2f>
 800908c:	490d      	ldr	r1, [pc, #52]	@ (80090c4 <__ieee754_log10f+0x90>)
 800908e:	4605      	mov	r5, r0
 8009090:	f7f7 fe78 	bl	8000d84 <__aeabi_fmul>
 8009094:	4606      	mov	r6, r0
 8009096:	f1c7 007f 	rsb	r0, r7, #127	@ 0x7f
 800909a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800909e:	f000 fbe3 	bl	8009868 <__ieee754_logf>
 80090a2:	4909      	ldr	r1, [pc, #36]	@ (80090c8 <__ieee754_log10f+0x94>)
 80090a4:	f7f7 fe6e 	bl	8000d84 <__aeabi_fmul>
 80090a8:	4631      	mov	r1, r6
 80090aa:	f7f7 fd63 	bl	8000b74 <__addsf3>
 80090ae:	4907      	ldr	r1, [pc, #28]	@ (80090cc <__ieee754_log10f+0x98>)
 80090b0:	4604      	mov	r4, r0
 80090b2:	4628      	mov	r0, r5
 80090b4:	f7f7 fe66 	bl	8000d84 <__aeabi_fmul>
 80090b8:	4601      	mov	r1, r0
 80090ba:	4620      	mov	r0, r4
 80090bc:	e7cf      	b.n	800905e <__ieee754_log10f+0x2a>
 80090be:	2200      	movs	r2, #0
 80090c0:	e7da      	b.n	8009078 <__ieee754_log10f+0x44>
 80090c2:	bf00      	nop
 80090c4:	355427db 	.word	0x355427db
 80090c8:	3ede5bd9 	.word	0x3ede5bd9
 80090cc:	3e9a2080 	.word	0x3e9a2080

080090d0 <__ieee754_powf>:
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 80090d8:	4680      	mov	r8, r0
 80090da:	460f      	mov	r7, r1
 80090dc:	4606      	mov	r6, r0
 80090de:	460c      	mov	r4, r1
 80090e0:	b087      	sub	sp, #28
 80090e2:	d10c      	bne.n	80090fe <__ieee754_powf+0x2e>
 80090e4:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 80090e8:	0076      	lsls	r6, r6, #1
 80090ea:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80090ee:	f240 8336 	bls.w	800975e <__ieee754_powf+0x68e>
 80090f2:	4639      	mov	r1, r7
 80090f4:	4640      	mov	r0, r8
 80090f6:	f7f7 fd3d 	bl	8000b74 <__addsf3>
 80090fa:	4601      	mov	r1, r0
 80090fc:	e03e      	b.n	800917c <__ieee754_powf+0xac>
 80090fe:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 8009102:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009106:	d802      	bhi.n	800910e <__ieee754_powf+0x3e>
 8009108:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800910c:	d908      	bls.n	8009120 <__ieee754_powf+0x50>
 800910e:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8009112:	d1ee      	bne.n	80090f2 <__ieee754_powf+0x22>
 8009114:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009118:	0064      	lsls	r4, r4, #1
 800911a:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800911e:	e7e6      	b.n	80090ee <__ieee754_powf+0x1e>
 8009120:	2800      	cmp	r0, #0
 8009122:	da1e      	bge.n	8009162 <__ieee754_powf+0x92>
 8009124:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8009128:	d22c      	bcs.n	8009184 <__ieee754_powf+0xb4>
 800912a:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800912e:	d333      	bcc.n	8009198 <__ieee754_powf+0xc8>
 8009130:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8009134:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009138:	fa4b f503 	asr.w	r5, fp, r3
 800913c:	fa05 f303 	lsl.w	r3, r5, r3
 8009140:	455b      	cmp	r3, fp
 8009142:	d127      	bne.n	8009194 <__ieee754_powf+0xc4>
 8009144:	f005 0501 	and.w	r5, r5, #1
 8009148:	f1c5 0502 	rsb	r5, r5, #2
 800914c:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8009150:	d123      	bne.n	800919a <__ieee754_powf+0xca>
 8009152:	2c00      	cmp	r4, #0
 8009154:	4641      	mov	r1, r8
 8009156:	da11      	bge.n	800917c <__ieee754_powf+0xac>
 8009158:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800915c:	f7f7 fec6 	bl	8000eec <__aeabi_fdiv>
 8009160:	e7cb      	b.n	80090fa <__ieee754_powf+0x2a>
 8009162:	2500      	movs	r5, #0
 8009164:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8009168:	d1f0      	bne.n	800914c <__ieee754_powf+0x7c>
 800916a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800916e:	f000 82f6 	beq.w	800975e <__ieee754_powf+0x68e>
 8009172:	d909      	bls.n	8009188 <__ieee754_powf+0xb8>
 8009174:	2c00      	cmp	r4, #0
 8009176:	f2c0 82f5 	blt.w	8009764 <__ieee754_powf+0x694>
 800917a:	4639      	mov	r1, r7
 800917c:	4608      	mov	r0, r1
 800917e:	b007      	add	sp, #28
 8009180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009184:	2502      	movs	r5, #2
 8009186:	e7ed      	b.n	8009164 <__ieee754_powf+0x94>
 8009188:	2c00      	cmp	r4, #0
 800918a:	f280 82eb 	bge.w	8009764 <__ieee754_powf+0x694>
 800918e:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8009192:	e7f3      	b.n	800917c <__ieee754_powf+0xac>
 8009194:	2500      	movs	r5, #0
 8009196:	e7d9      	b.n	800914c <__ieee754_powf+0x7c>
 8009198:	2500      	movs	r5, #0
 800919a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800919e:	d104      	bne.n	80091aa <__ieee754_powf+0xda>
 80091a0:	4641      	mov	r1, r8
 80091a2:	4640      	mov	r0, r8
 80091a4:	f7f7 fdee 	bl	8000d84 <__aeabi_fmul>
 80091a8:	e7a7      	b.n	80090fa <__ieee754_powf+0x2a>
 80091aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80091ae:	d107      	bne.n	80091c0 <__ieee754_powf+0xf0>
 80091b0:	2e00      	cmp	r6, #0
 80091b2:	db05      	blt.n	80091c0 <__ieee754_powf+0xf0>
 80091b4:	4640      	mov	r0, r8
 80091b6:	b007      	add	sp, #28
 80091b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	f7ff beca 	b.w	8008f54 <__ieee754_sqrtf>
 80091c0:	4640      	mov	r0, r8
 80091c2:	f000 fae3 	bl	800978c <fabsf>
 80091c6:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80091ca:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80091ce:	46ca      	mov	sl, r9
 80091d0:	4601      	mov	r1, r0
 80091d2:	d002      	beq.n	80091da <__ieee754_powf+0x10a>
 80091d4:	f1b9 0f00 	cmp.w	r9, #0
 80091d8:	d117      	bne.n	800920a <__ieee754_powf+0x13a>
 80091da:	2c00      	cmp	r4, #0
 80091dc:	da04      	bge.n	80091e8 <__ieee754_powf+0x118>
 80091de:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80091e2:	f7f7 fe83 	bl	8000eec <__aeabi_fdiv>
 80091e6:	4601      	mov	r1, r0
 80091e8:	2e00      	cmp	r6, #0
 80091ea:	dac7      	bge.n	800917c <__ieee754_powf+0xac>
 80091ec:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 80091f0:	ea59 0905 	orrs.w	r9, r9, r5
 80091f4:	d104      	bne.n	8009200 <__ieee754_powf+0x130>
 80091f6:	4608      	mov	r0, r1
 80091f8:	f7f7 fcba 	bl	8000b70 <__aeabi_fsub>
 80091fc:	4601      	mov	r1, r0
 80091fe:	e7ad      	b.n	800915c <__ieee754_powf+0x8c>
 8009200:	2d01      	cmp	r5, #1
 8009202:	d1bb      	bne.n	800917c <__ieee754_powf+0xac>
 8009204:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8009208:	e777      	b.n	80090fa <__ieee754_powf+0x2a>
 800920a:	0ff3      	lsrs	r3, r6, #31
 800920c:	3b01      	subs	r3, #1
 800920e:	9303      	str	r3, [sp, #12]
 8009210:	432b      	orrs	r3, r5
 8009212:	d101      	bne.n	8009218 <__ieee754_powf+0x148>
 8009214:	4641      	mov	r1, r8
 8009216:	e7ee      	b.n	80091f6 <__ieee754_powf+0x126>
 8009218:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800921c:	f240 809e 	bls.w	800935c <__ieee754_powf+0x28c>
 8009220:	4b47      	ldr	r3, [pc, #284]	@ (8009340 <__ieee754_powf+0x270>)
 8009222:	4599      	cmp	r9, r3
 8009224:	d807      	bhi.n	8009236 <__ieee754_powf+0x166>
 8009226:	2c00      	cmp	r4, #0
 8009228:	da0a      	bge.n	8009240 <__ieee754_powf+0x170>
 800922a:	2000      	movs	r0, #0
 800922c:	b007      	add	sp, #28
 800922e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009232:	f000 bb14 	b.w	800985e <__math_oflowf>
 8009236:	4b43      	ldr	r3, [pc, #268]	@ (8009344 <__ieee754_powf+0x274>)
 8009238:	4599      	cmp	r9, r3
 800923a:	d907      	bls.n	800924c <__ieee754_powf+0x17c>
 800923c:	2c00      	cmp	r4, #0
 800923e:	dcf4      	bgt.n	800922a <__ieee754_powf+0x15a>
 8009240:	2000      	movs	r0, #0
 8009242:	b007      	add	sp, #28
 8009244:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009248:	f000 bb05 	b.w	8009856 <__math_uflowf>
 800924c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009250:	f7f7 fc8e 	bl	8000b70 <__aeabi_fsub>
 8009254:	493c      	ldr	r1, [pc, #240]	@ (8009348 <__ieee754_powf+0x278>)
 8009256:	4606      	mov	r6, r0
 8009258:	f7f7 fd94 	bl	8000d84 <__aeabi_fmul>
 800925c:	493b      	ldr	r1, [pc, #236]	@ (800934c <__ieee754_powf+0x27c>)
 800925e:	4680      	mov	r8, r0
 8009260:	4630      	mov	r0, r6
 8009262:	f7f7 fd8f 	bl	8000d84 <__aeabi_fmul>
 8009266:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800926a:	4681      	mov	r9, r0
 800926c:	4630      	mov	r0, r6
 800926e:	f7f7 fd89 	bl	8000d84 <__aeabi_fmul>
 8009272:	4601      	mov	r1, r0
 8009274:	4836      	ldr	r0, [pc, #216]	@ (8009350 <__ieee754_powf+0x280>)
 8009276:	f7f7 fc7b 	bl	8000b70 <__aeabi_fsub>
 800927a:	4631      	mov	r1, r6
 800927c:	f7f7 fd82 	bl	8000d84 <__aeabi_fmul>
 8009280:	4601      	mov	r1, r0
 8009282:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8009286:	f7f7 fc73 	bl	8000b70 <__aeabi_fsub>
 800928a:	4631      	mov	r1, r6
 800928c:	4682      	mov	sl, r0
 800928e:	4630      	mov	r0, r6
 8009290:	f7f7 fd78 	bl	8000d84 <__aeabi_fmul>
 8009294:	4601      	mov	r1, r0
 8009296:	4650      	mov	r0, sl
 8009298:	f7f7 fd74 	bl	8000d84 <__aeabi_fmul>
 800929c:	492d      	ldr	r1, [pc, #180]	@ (8009354 <__ieee754_powf+0x284>)
 800929e:	f7f7 fd71 	bl	8000d84 <__aeabi_fmul>
 80092a2:	4601      	mov	r1, r0
 80092a4:	4648      	mov	r0, r9
 80092a6:	f7f7 fc63 	bl	8000b70 <__aeabi_fsub>
 80092aa:	4601      	mov	r1, r0
 80092ac:	4606      	mov	r6, r0
 80092ae:	4640      	mov	r0, r8
 80092b0:	f7f7 fc60 	bl	8000b74 <__addsf3>
 80092b4:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80092b8:	f02b 0b0f 	bic.w	fp, fp, #15
 80092bc:	4641      	mov	r1, r8
 80092be:	4658      	mov	r0, fp
 80092c0:	f7f7 fc56 	bl	8000b70 <__aeabi_fsub>
 80092c4:	4601      	mov	r1, r0
 80092c6:	4630      	mov	r0, r6
 80092c8:	f7f7 fc52 	bl	8000b70 <__aeabi_fsub>
 80092cc:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80092d0:	9b03      	ldr	r3, [sp, #12]
 80092d2:	3d01      	subs	r5, #1
 80092d4:	f024 040f 	bic.w	r4, r4, #15
 80092d8:	431d      	orrs	r5, r3
 80092da:	4606      	mov	r6, r0
 80092dc:	4621      	mov	r1, r4
 80092de:	4638      	mov	r0, r7
 80092e0:	bf14      	ite	ne
 80092e2:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 80092e6:	4d1c      	ldreq	r5, [pc, #112]	@ (8009358 <__ieee754_powf+0x288>)
 80092e8:	f7f7 fc42 	bl	8000b70 <__aeabi_fsub>
 80092ec:	4659      	mov	r1, fp
 80092ee:	f7f7 fd49 	bl	8000d84 <__aeabi_fmul>
 80092f2:	4639      	mov	r1, r7
 80092f4:	4680      	mov	r8, r0
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7f7 fd44 	bl	8000d84 <__aeabi_fmul>
 80092fc:	4601      	mov	r1, r0
 80092fe:	4640      	mov	r0, r8
 8009300:	f7f7 fc38 	bl	8000b74 <__addsf3>
 8009304:	4621      	mov	r1, r4
 8009306:	4606      	mov	r6, r0
 8009308:	4658      	mov	r0, fp
 800930a:	f7f7 fd3b 	bl	8000d84 <__aeabi_fmul>
 800930e:	4601      	mov	r1, r0
 8009310:	4607      	mov	r7, r0
 8009312:	4630      	mov	r0, r6
 8009314:	f7f7 fc2e 	bl	8000b74 <__addsf3>
 8009318:	2800      	cmp	r0, #0
 800931a:	4604      	mov	r4, r0
 800931c:	4680      	mov	r8, r0
 800931e:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009322:	f340 8141 	ble.w	80095a8 <__ieee754_powf+0x4d8>
 8009326:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800932a:	f240 812a 	bls.w	8009582 <__ieee754_powf+0x4b2>
 800932e:	2100      	movs	r1, #0
 8009330:	4628      	mov	r0, r5
 8009332:	f7f7 fec5 	bl	80010c0 <__aeabi_fcmplt>
 8009336:	3800      	subs	r0, #0
 8009338:	bf18      	it	ne
 800933a:	2001      	movne	r0, #1
 800933c:	e776      	b.n	800922c <__ieee754_powf+0x15c>
 800933e:	bf00      	nop
 8009340:	3f7ffff3 	.word	0x3f7ffff3
 8009344:	3f800007 	.word	0x3f800007
 8009348:	3fb8aa00 	.word	0x3fb8aa00
 800934c:	36eca570 	.word	0x36eca570
 8009350:	3eaaaaab 	.word	0x3eaaaaab
 8009354:	3fb8aa3b 	.word	0x3fb8aa3b
 8009358:	bf800000 	.word	0xbf800000
 800935c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009360:	f040 810b 	bne.w	800957a <__ieee754_powf+0x4aa>
 8009364:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8009368:	f7f7 fd0c 	bl	8000d84 <__aeabi_fmul>
 800936c:	f06f 0217 	mvn.w	r2, #23
 8009370:	4682      	mov	sl, r0
 8009372:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8009376:	3b7f      	subs	r3, #127	@ 0x7f
 8009378:	441a      	add	r2, r3
 800937a:	4b96      	ldr	r3, [pc, #600]	@ (80095d4 <__ieee754_powf+0x504>)
 800937c:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8009380:	459a      	cmp	sl, r3
 8009382:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8009386:	dd06      	ble.n	8009396 <__ieee754_powf+0x2c6>
 8009388:	4b93      	ldr	r3, [pc, #588]	@ (80095d8 <__ieee754_powf+0x508>)
 800938a:	459a      	cmp	sl, r3
 800938c:	f340 80f7 	ble.w	800957e <__ieee754_powf+0x4ae>
 8009390:	3201      	adds	r2, #1
 8009392:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8009396:	2300      	movs	r3, #0
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	9205      	str	r2, [sp, #20]
 800939c:	4b8f      	ldr	r3, [pc, #572]	@ (80095dc <__ieee754_powf+0x50c>)
 800939e:	9a01      	ldr	r2, [sp, #4]
 80093a0:	4630      	mov	r0, r6
 80093a2:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80093a6:	46b2      	mov	sl, r6
 80093a8:	4659      	mov	r1, fp
 80093aa:	f7f7 fbe1 	bl	8000b70 <__aeabi_fsub>
 80093ae:	4631      	mov	r1, r6
 80093b0:	4681      	mov	r9, r0
 80093b2:	4658      	mov	r0, fp
 80093b4:	f7f7 fbde 	bl	8000b74 <__addsf3>
 80093b8:	4601      	mov	r1, r0
 80093ba:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80093be:	f7f7 fd95 	bl	8000eec <__aeabi_fdiv>
 80093c2:	4601      	mov	r1, r0
 80093c4:	9004      	str	r0, [sp, #16]
 80093c6:	4648      	mov	r0, r9
 80093c8:	f7f7 fcdc 	bl	8000d84 <__aeabi_fmul>
 80093cc:	9002      	str	r0, [sp, #8]
 80093ce:	9b02      	ldr	r3, [sp, #8]
 80093d0:	1076      	asrs	r6, r6, #1
 80093d2:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 80093d6:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 80093da:	9b01      	ldr	r3, [sp, #4]
 80093dc:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 80093e0:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80093e4:	f028 080f 	bic.w	r8, r8, #15
 80093e8:	4631      	mov	r1, r6
 80093ea:	4640      	mov	r0, r8
 80093ec:	f7f7 fcca 	bl	8000d84 <__aeabi_fmul>
 80093f0:	4601      	mov	r1, r0
 80093f2:	4648      	mov	r0, r9
 80093f4:	f7f7 fbbc 	bl	8000b70 <__aeabi_fsub>
 80093f8:	4659      	mov	r1, fp
 80093fa:	4681      	mov	r9, r0
 80093fc:	4630      	mov	r0, r6
 80093fe:	f7f7 fbb7 	bl	8000b70 <__aeabi_fsub>
 8009402:	4601      	mov	r1, r0
 8009404:	4650      	mov	r0, sl
 8009406:	f7f7 fbb3 	bl	8000b70 <__aeabi_fsub>
 800940a:	4641      	mov	r1, r8
 800940c:	f7f7 fcba 	bl	8000d84 <__aeabi_fmul>
 8009410:	4601      	mov	r1, r0
 8009412:	4648      	mov	r0, r9
 8009414:	f7f7 fbac 	bl	8000b70 <__aeabi_fsub>
 8009418:	9b04      	ldr	r3, [sp, #16]
 800941a:	4619      	mov	r1, r3
 800941c:	f7f7 fcb2 	bl	8000d84 <__aeabi_fmul>
 8009420:	9902      	ldr	r1, [sp, #8]
 8009422:	4683      	mov	fp, r0
 8009424:	4608      	mov	r0, r1
 8009426:	f7f7 fcad 	bl	8000d84 <__aeabi_fmul>
 800942a:	4606      	mov	r6, r0
 800942c:	496c      	ldr	r1, [pc, #432]	@ (80095e0 <__ieee754_powf+0x510>)
 800942e:	f7f7 fca9 	bl	8000d84 <__aeabi_fmul>
 8009432:	496c      	ldr	r1, [pc, #432]	@ (80095e4 <__ieee754_powf+0x514>)
 8009434:	f7f7 fb9e 	bl	8000b74 <__addsf3>
 8009438:	4631      	mov	r1, r6
 800943a:	f7f7 fca3 	bl	8000d84 <__aeabi_fmul>
 800943e:	496a      	ldr	r1, [pc, #424]	@ (80095e8 <__ieee754_powf+0x518>)
 8009440:	f7f7 fb98 	bl	8000b74 <__addsf3>
 8009444:	4631      	mov	r1, r6
 8009446:	f7f7 fc9d 	bl	8000d84 <__aeabi_fmul>
 800944a:	4968      	ldr	r1, [pc, #416]	@ (80095ec <__ieee754_powf+0x51c>)
 800944c:	f7f7 fb92 	bl	8000b74 <__addsf3>
 8009450:	4631      	mov	r1, r6
 8009452:	f7f7 fc97 	bl	8000d84 <__aeabi_fmul>
 8009456:	4966      	ldr	r1, [pc, #408]	@ (80095f0 <__ieee754_powf+0x520>)
 8009458:	f7f7 fb8c 	bl	8000b74 <__addsf3>
 800945c:	4631      	mov	r1, r6
 800945e:	f7f7 fc91 	bl	8000d84 <__aeabi_fmul>
 8009462:	4964      	ldr	r1, [pc, #400]	@ (80095f4 <__ieee754_powf+0x524>)
 8009464:	f7f7 fb86 	bl	8000b74 <__addsf3>
 8009468:	4631      	mov	r1, r6
 800946a:	4681      	mov	r9, r0
 800946c:	4630      	mov	r0, r6
 800946e:	f7f7 fc89 	bl	8000d84 <__aeabi_fmul>
 8009472:	4601      	mov	r1, r0
 8009474:	4648      	mov	r0, r9
 8009476:	f7f7 fc85 	bl	8000d84 <__aeabi_fmul>
 800947a:	4606      	mov	r6, r0
 800947c:	4641      	mov	r1, r8
 800947e:	9802      	ldr	r0, [sp, #8]
 8009480:	f7f7 fb78 	bl	8000b74 <__addsf3>
 8009484:	4659      	mov	r1, fp
 8009486:	f7f7 fc7d 	bl	8000d84 <__aeabi_fmul>
 800948a:	4631      	mov	r1, r6
 800948c:	f7f7 fb72 	bl	8000b74 <__addsf3>
 8009490:	4641      	mov	r1, r8
 8009492:	4681      	mov	r9, r0
 8009494:	4640      	mov	r0, r8
 8009496:	f7f7 fc75 	bl	8000d84 <__aeabi_fmul>
 800949a:	4957      	ldr	r1, [pc, #348]	@ (80095f8 <__ieee754_powf+0x528>)
 800949c:	4682      	mov	sl, r0
 800949e:	f7f7 fb69 	bl	8000b74 <__addsf3>
 80094a2:	4649      	mov	r1, r9
 80094a4:	f7f7 fb66 	bl	8000b74 <__addsf3>
 80094a8:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80094ac:	f026 060f 	bic.w	r6, r6, #15
 80094b0:	4631      	mov	r1, r6
 80094b2:	4640      	mov	r0, r8
 80094b4:	f7f7 fc66 	bl	8000d84 <__aeabi_fmul>
 80094b8:	494f      	ldr	r1, [pc, #316]	@ (80095f8 <__ieee754_powf+0x528>)
 80094ba:	4680      	mov	r8, r0
 80094bc:	4630      	mov	r0, r6
 80094be:	f7f7 fb57 	bl	8000b70 <__aeabi_fsub>
 80094c2:	4651      	mov	r1, sl
 80094c4:	f7f7 fb54 	bl	8000b70 <__aeabi_fsub>
 80094c8:	4601      	mov	r1, r0
 80094ca:	4648      	mov	r0, r9
 80094cc:	f7f7 fb50 	bl	8000b70 <__aeabi_fsub>
 80094d0:	9902      	ldr	r1, [sp, #8]
 80094d2:	f7f7 fc57 	bl	8000d84 <__aeabi_fmul>
 80094d6:	4631      	mov	r1, r6
 80094d8:	4681      	mov	r9, r0
 80094da:	4658      	mov	r0, fp
 80094dc:	f7f7 fc52 	bl	8000d84 <__aeabi_fmul>
 80094e0:	4601      	mov	r1, r0
 80094e2:	4648      	mov	r0, r9
 80094e4:	f7f7 fb46 	bl	8000b74 <__addsf3>
 80094e8:	4682      	mov	sl, r0
 80094ea:	4601      	mov	r1, r0
 80094ec:	4640      	mov	r0, r8
 80094ee:	f7f7 fb41 	bl	8000b74 <__addsf3>
 80094f2:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80094f6:	f026 060f 	bic.w	r6, r6, #15
 80094fa:	4630      	mov	r0, r6
 80094fc:	493f      	ldr	r1, [pc, #252]	@ (80095fc <__ieee754_powf+0x52c>)
 80094fe:	f7f7 fc41 	bl	8000d84 <__aeabi_fmul>
 8009502:	4641      	mov	r1, r8
 8009504:	4681      	mov	r9, r0
 8009506:	4630      	mov	r0, r6
 8009508:	f7f7 fb32 	bl	8000b70 <__aeabi_fsub>
 800950c:	4601      	mov	r1, r0
 800950e:	4650      	mov	r0, sl
 8009510:	f7f7 fb2e 	bl	8000b70 <__aeabi_fsub>
 8009514:	493a      	ldr	r1, [pc, #232]	@ (8009600 <__ieee754_powf+0x530>)
 8009516:	f7f7 fc35 	bl	8000d84 <__aeabi_fmul>
 800951a:	493a      	ldr	r1, [pc, #232]	@ (8009604 <__ieee754_powf+0x534>)
 800951c:	4680      	mov	r8, r0
 800951e:	4630      	mov	r0, r6
 8009520:	f7f7 fc30 	bl	8000d84 <__aeabi_fmul>
 8009524:	4601      	mov	r1, r0
 8009526:	4640      	mov	r0, r8
 8009528:	f7f7 fb24 	bl	8000b74 <__addsf3>
 800952c:	4b36      	ldr	r3, [pc, #216]	@ (8009608 <__ieee754_powf+0x538>)
 800952e:	9a01      	ldr	r2, [sp, #4]
 8009530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009534:	f7f7 fb1e 	bl	8000b74 <__addsf3>
 8009538:	9a05      	ldr	r2, [sp, #20]
 800953a:	4606      	mov	r6, r0
 800953c:	4610      	mov	r0, r2
 800953e:	f7f7 fbcd 	bl	8000cdc <__aeabi_i2f>
 8009542:	4680      	mov	r8, r0
 8009544:	4b31      	ldr	r3, [pc, #196]	@ (800960c <__ieee754_powf+0x53c>)
 8009546:	9a01      	ldr	r2, [sp, #4]
 8009548:	4631      	mov	r1, r6
 800954a:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800954e:	4648      	mov	r0, r9
 8009550:	f7f7 fb10 	bl	8000b74 <__addsf3>
 8009554:	4651      	mov	r1, sl
 8009556:	f7f7 fb0d 	bl	8000b74 <__addsf3>
 800955a:	4641      	mov	r1, r8
 800955c:	f7f7 fb0a 	bl	8000b74 <__addsf3>
 8009560:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8009564:	f02b 0b0f 	bic.w	fp, fp, #15
 8009568:	4641      	mov	r1, r8
 800956a:	4658      	mov	r0, fp
 800956c:	f7f7 fb00 	bl	8000b70 <__aeabi_fsub>
 8009570:	4651      	mov	r1, sl
 8009572:	f7f7 fafd 	bl	8000b70 <__aeabi_fsub>
 8009576:	4649      	mov	r1, r9
 8009578:	e6a2      	b.n	80092c0 <__ieee754_powf+0x1f0>
 800957a:	2200      	movs	r2, #0
 800957c:	e6f9      	b.n	8009372 <__ieee754_powf+0x2a2>
 800957e:	2301      	movs	r3, #1
 8009580:	e70a      	b.n	8009398 <__ieee754_powf+0x2c8>
 8009582:	d149      	bne.n	8009618 <__ieee754_powf+0x548>
 8009584:	4922      	ldr	r1, [pc, #136]	@ (8009610 <__ieee754_powf+0x540>)
 8009586:	4630      	mov	r0, r6
 8009588:	f7f7 faf4 	bl	8000b74 <__addsf3>
 800958c:	4639      	mov	r1, r7
 800958e:	4681      	mov	r9, r0
 8009590:	4620      	mov	r0, r4
 8009592:	f7f7 faed 	bl	8000b70 <__aeabi_fsub>
 8009596:	4601      	mov	r1, r0
 8009598:	4648      	mov	r0, r9
 800959a:	f7f7 fdaf 	bl	80010fc <__aeabi_fcmpgt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	f47f aec5 	bne.w	800932e <__ieee754_powf+0x25e>
 80095a4:	2386      	movs	r3, #134	@ 0x86
 80095a6:	e03c      	b.n	8009622 <__ieee754_powf+0x552>
 80095a8:	4a1a      	ldr	r2, [pc, #104]	@ (8009614 <__ieee754_powf+0x544>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d907      	bls.n	80095be <__ieee754_powf+0x4ee>
 80095ae:	2100      	movs	r1, #0
 80095b0:	4628      	mov	r0, r5
 80095b2:	f7f7 fd85 	bl	80010c0 <__aeabi_fcmplt>
 80095b6:	3800      	subs	r0, #0
 80095b8:	bf18      	it	ne
 80095ba:	2001      	movne	r0, #1
 80095bc:	e641      	b.n	8009242 <__ieee754_powf+0x172>
 80095be:	d12b      	bne.n	8009618 <__ieee754_powf+0x548>
 80095c0:	4639      	mov	r1, r7
 80095c2:	f7f7 fad5 	bl	8000b70 <__aeabi_fsub>
 80095c6:	4631      	mov	r1, r6
 80095c8:	f7f7 fd8e 	bl	80010e8 <__aeabi_fcmpge>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d0e9      	beq.n	80095a4 <__ieee754_powf+0x4d4>
 80095d0:	e7ed      	b.n	80095ae <__ieee754_powf+0x4de>
 80095d2:	bf00      	nop
 80095d4:	001cc471 	.word	0x001cc471
 80095d8:	005db3d6 	.word	0x005db3d6
 80095dc:	0800b058 	.word	0x0800b058
 80095e0:	3e53f142 	.word	0x3e53f142
 80095e4:	3e6c3255 	.word	0x3e6c3255
 80095e8:	3e8ba305 	.word	0x3e8ba305
 80095ec:	3eaaaaab 	.word	0x3eaaaaab
 80095f0:	3edb6db7 	.word	0x3edb6db7
 80095f4:	3f19999a 	.word	0x3f19999a
 80095f8:	40400000 	.word	0x40400000
 80095fc:	3f763800 	.word	0x3f763800
 8009600:	3f76384f 	.word	0x3f76384f
 8009604:	369dc3a0 	.word	0x369dc3a0
 8009608:	0800b048 	.word	0x0800b048
 800960c:	0800b050 	.word	0x0800b050
 8009610:	3338aa3c 	.word	0x3338aa3c
 8009614:	43160000 	.word	0x43160000
 8009618:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800961c:	f240 809b 	bls.w	8009756 <__ieee754_powf+0x686>
 8009620:	15db      	asrs	r3, r3, #23
 8009622:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8009626:	3b7e      	subs	r3, #126	@ 0x7e
 8009628:	411c      	asrs	r4, r3
 800962a:	4444      	add	r4, r8
 800962c:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8009630:	494d      	ldr	r1, [pc, #308]	@ (8009768 <__ieee754_powf+0x698>)
 8009632:	3b7f      	subs	r3, #127	@ 0x7f
 8009634:	4119      	asrs	r1, r3
 8009636:	4021      	ands	r1, r4
 8009638:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800963c:	f1c3 0317 	rsb	r3, r3, #23
 8009640:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8009644:	4638      	mov	r0, r7
 8009646:	411c      	asrs	r4, r3
 8009648:	f1b8 0f00 	cmp.w	r8, #0
 800964c:	bfb8      	it	lt
 800964e:	4264      	neglt	r4, r4
 8009650:	f7f7 fa8e 	bl	8000b70 <__aeabi_fsub>
 8009654:	4607      	mov	r7, r0
 8009656:	4631      	mov	r1, r6
 8009658:	4638      	mov	r0, r7
 800965a:	f7f7 fa8b 	bl	8000b74 <__addsf3>
 800965e:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8009662:	f028 080f 	bic.w	r8, r8, #15
 8009666:	4640      	mov	r0, r8
 8009668:	4940      	ldr	r1, [pc, #256]	@ (800976c <__ieee754_powf+0x69c>)
 800966a:	f7f7 fb8b 	bl	8000d84 <__aeabi_fmul>
 800966e:	4639      	mov	r1, r7
 8009670:	4681      	mov	r9, r0
 8009672:	4640      	mov	r0, r8
 8009674:	f7f7 fa7c 	bl	8000b70 <__aeabi_fsub>
 8009678:	4601      	mov	r1, r0
 800967a:	4630      	mov	r0, r6
 800967c:	f7f7 fa78 	bl	8000b70 <__aeabi_fsub>
 8009680:	493b      	ldr	r1, [pc, #236]	@ (8009770 <__ieee754_powf+0x6a0>)
 8009682:	f7f7 fb7f 	bl	8000d84 <__aeabi_fmul>
 8009686:	493b      	ldr	r1, [pc, #236]	@ (8009774 <__ieee754_powf+0x6a4>)
 8009688:	4606      	mov	r6, r0
 800968a:	4640      	mov	r0, r8
 800968c:	f7f7 fb7a 	bl	8000d84 <__aeabi_fmul>
 8009690:	4601      	mov	r1, r0
 8009692:	4630      	mov	r0, r6
 8009694:	f7f7 fa6e 	bl	8000b74 <__addsf3>
 8009698:	4607      	mov	r7, r0
 800969a:	4601      	mov	r1, r0
 800969c:	4648      	mov	r0, r9
 800969e:	f7f7 fa69 	bl	8000b74 <__addsf3>
 80096a2:	4649      	mov	r1, r9
 80096a4:	4606      	mov	r6, r0
 80096a6:	f7f7 fa63 	bl	8000b70 <__aeabi_fsub>
 80096aa:	4601      	mov	r1, r0
 80096ac:	4638      	mov	r0, r7
 80096ae:	f7f7 fa5f 	bl	8000b70 <__aeabi_fsub>
 80096b2:	4631      	mov	r1, r6
 80096b4:	4680      	mov	r8, r0
 80096b6:	4630      	mov	r0, r6
 80096b8:	f7f7 fb64 	bl	8000d84 <__aeabi_fmul>
 80096bc:	4607      	mov	r7, r0
 80096be:	492e      	ldr	r1, [pc, #184]	@ (8009778 <__ieee754_powf+0x6a8>)
 80096c0:	f7f7 fb60 	bl	8000d84 <__aeabi_fmul>
 80096c4:	492d      	ldr	r1, [pc, #180]	@ (800977c <__ieee754_powf+0x6ac>)
 80096c6:	f7f7 fa53 	bl	8000b70 <__aeabi_fsub>
 80096ca:	4639      	mov	r1, r7
 80096cc:	f7f7 fb5a 	bl	8000d84 <__aeabi_fmul>
 80096d0:	492b      	ldr	r1, [pc, #172]	@ (8009780 <__ieee754_powf+0x6b0>)
 80096d2:	f7f7 fa4f 	bl	8000b74 <__addsf3>
 80096d6:	4639      	mov	r1, r7
 80096d8:	f7f7 fb54 	bl	8000d84 <__aeabi_fmul>
 80096dc:	4929      	ldr	r1, [pc, #164]	@ (8009784 <__ieee754_powf+0x6b4>)
 80096de:	f7f7 fa47 	bl	8000b70 <__aeabi_fsub>
 80096e2:	4639      	mov	r1, r7
 80096e4:	f7f7 fb4e 	bl	8000d84 <__aeabi_fmul>
 80096e8:	4927      	ldr	r1, [pc, #156]	@ (8009788 <__ieee754_powf+0x6b8>)
 80096ea:	f7f7 fa43 	bl	8000b74 <__addsf3>
 80096ee:	4639      	mov	r1, r7
 80096f0:	f7f7 fb48 	bl	8000d84 <__aeabi_fmul>
 80096f4:	4601      	mov	r1, r0
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7f7 fa3a 	bl	8000b70 <__aeabi_fsub>
 80096fc:	4607      	mov	r7, r0
 80096fe:	4601      	mov	r1, r0
 8009700:	4630      	mov	r0, r6
 8009702:	f7f7 fb3f 	bl	8000d84 <__aeabi_fmul>
 8009706:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800970a:	4681      	mov	r9, r0
 800970c:	4638      	mov	r0, r7
 800970e:	f7f7 fa2f 	bl	8000b70 <__aeabi_fsub>
 8009712:	4601      	mov	r1, r0
 8009714:	4648      	mov	r0, r9
 8009716:	f7f7 fbe9 	bl	8000eec <__aeabi_fdiv>
 800971a:	4641      	mov	r1, r8
 800971c:	4607      	mov	r7, r0
 800971e:	4630      	mov	r0, r6
 8009720:	f7f7 fb30 	bl	8000d84 <__aeabi_fmul>
 8009724:	4641      	mov	r1, r8
 8009726:	f7f7 fa25 	bl	8000b74 <__addsf3>
 800972a:	4601      	mov	r1, r0
 800972c:	4638      	mov	r0, r7
 800972e:	f7f7 fa1f 	bl	8000b70 <__aeabi_fsub>
 8009732:	4631      	mov	r1, r6
 8009734:	f7f7 fa1c 	bl	8000b70 <__aeabi_fsub>
 8009738:	4601      	mov	r1, r0
 800973a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800973e:	f7f7 fa17 	bl	8000b70 <__aeabi_fsub>
 8009742:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8009746:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800974a:	da06      	bge.n	800975a <__ieee754_powf+0x68a>
 800974c:	4621      	mov	r1, r4
 800974e:	f000 f821 	bl	8009794 <scalbnf>
 8009752:	4629      	mov	r1, r5
 8009754:	e526      	b.n	80091a4 <__ieee754_powf+0xd4>
 8009756:	2400      	movs	r4, #0
 8009758:	e77d      	b.n	8009656 <__ieee754_powf+0x586>
 800975a:	4618      	mov	r0, r3
 800975c:	e7f9      	b.n	8009752 <__ieee754_powf+0x682>
 800975e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009762:	e50b      	b.n	800917c <__ieee754_powf+0xac>
 8009764:	2100      	movs	r1, #0
 8009766:	e509      	b.n	800917c <__ieee754_powf+0xac>
 8009768:	ff800000 	.word	0xff800000
 800976c:	3f317200 	.word	0x3f317200
 8009770:	3f317218 	.word	0x3f317218
 8009774:	35bfbe8c 	.word	0x35bfbe8c
 8009778:	3331bb4c 	.word	0x3331bb4c
 800977c:	35ddea0e 	.word	0x35ddea0e
 8009780:	388ab355 	.word	0x388ab355
 8009784:	3b360b61 	.word	0x3b360b61
 8009788:	3e2aaaab 	.word	0x3e2aaaab

0800978c <fabsf>:
 800978c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009790:	4770      	bx	lr
	...

08009794 <scalbnf>:
 8009794:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	4603      	mov	r3, r0
 800979c:	460d      	mov	r5, r1
 800979e:	4604      	mov	r4, r0
 80097a0:	d02e      	beq.n	8009800 <scalbnf+0x6c>
 80097a2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80097a6:	d304      	bcc.n	80097b2 <scalbnf+0x1e>
 80097a8:	4601      	mov	r1, r0
 80097aa:	f7f7 f9e3 	bl	8000b74 <__addsf3>
 80097ae:	4603      	mov	r3, r0
 80097b0:	e026      	b.n	8009800 <scalbnf+0x6c>
 80097b2:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 80097b6:	d118      	bne.n	80097ea <scalbnf+0x56>
 80097b8:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80097bc:	f7f7 fae2 	bl	8000d84 <__aeabi_fmul>
 80097c0:	4a17      	ldr	r2, [pc, #92]	@ (8009820 <scalbnf+0x8c>)
 80097c2:	4603      	mov	r3, r0
 80097c4:	4295      	cmp	r5, r2
 80097c6:	db0c      	blt.n	80097e2 <scalbnf+0x4e>
 80097c8:	4604      	mov	r4, r0
 80097ca:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80097ce:	3a19      	subs	r2, #25
 80097d0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80097d4:	428d      	cmp	r5, r1
 80097d6:	dd0a      	ble.n	80097ee <scalbnf+0x5a>
 80097d8:	4912      	ldr	r1, [pc, #72]	@ (8009824 <scalbnf+0x90>)
 80097da:	4618      	mov	r0, r3
 80097dc:	f361 001e 	bfi	r0, r1, #0, #31
 80097e0:	e000      	b.n	80097e4 <scalbnf+0x50>
 80097e2:	4911      	ldr	r1, [pc, #68]	@ (8009828 <scalbnf+0x94>)
 80097e4:	f7f7 face 	bl	8000d84 <__aeabi_fmul>
 80097e8:	e7e1      	b.n	80097ae <scalbnf+0x1a>
 80097ea:	0dd2      	lsrs	r2, r2, #23
 80097ec:	e7f0      	b.n	80097d0 <scalbnf+0x3c>
 80097ee:	1951      	adds	r1, r2, r5
 80097f0:	29fe      	cmp	r1, #254	@ 0xfe
 80097f2:	dcf1      	bgt.n	80097d8 <scalbnf+0x44>
 80097f4:	2900      	cmp	r1, #0
 80097f6:	dd05      	ble.n	8009804 <scalbnf+0x70>
 80097f8:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80097fc:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8009800:	4618      	mov	r0, r3
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	f111 0f16 	cmn.w	r1, #22
 8009808:	da01      	bge.n	800980e <scalbnf+0x7a>
 800980a:	4907      	ldr	r1, [pc, #28]	@ (8009828 <scalbnf+0x94>)
 800980c:	e7e5      	b.n	80097da <scalbnf+0x46>
 800980e:	f101 0019 	add.w	r0, r1, #25
 8009812:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8009816:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800981a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800981e:	e7e1      	b.n	80097e4 <scalbnf+0x50>
 8009820:	ffff3cb0 	.word	0xffff3cb0
 8009824:	7149f2ca 	.word	0x7149f2ca
 8009828:	0da24260 	.word	0x0da24260

0800982c <with_errnof>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4604      	mov	r4, r0
 8009830:	460d      	mov	r5, r1
 8009832:	f7fc f813 	bl	800585c <__errno>
 8009836:	6005      	str	r5, [r0, #0]
 8009838:	4620      	mov	r0, r4
 800983a:	bd38      	pop	{r3, r4, r5, pc}

0800983c <xflowf>:
 800983c:	b508      	push	{r3, lr}
 800983e:	b140      	cbz	r0, 8009852 <xflowf+0x16>
 8009840:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8009844:	f7f7 fa9e 	bl	8000d84 <__aeabi_fmul>
 8009848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800984c:	2122      	movs	r1, #34	@ 0x22
 800984e:	f7ff bfed 	b.w	800982c <with_errnof>
 8009852:	4608      	mov	r0, r1
 8009854:	e7f6      	b.n	8009844 <xflowf+0x8>

08009856 <__math_uflowf>:
 8009856:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800985a:	f7ff bfef 	b.w	800983c <xflowf>

0800985e <__math_oflowf>:
 800985e:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8009862:	f7ff bfeb 	b.w	800983c <xflowf>
	...

08009868 <__ieee754_logf>:
 8009868:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800986c:	4601      	mov	r1, r0
 800986e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009872:	d106      	bne.n	8009882 <__ieee754_logf+0x1a>
 8009874:	2100      	movs	r1, #0
 8009876:	f04f 404c 	mov.w	r0, #3422552064	@ 0xcc000000
 800987a:	f7f7 fb37 	bl	8000eec <__aeabi_fdiv>
 800987e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009882:	2800      	cmp	r0, #0
 8009884:	4604      	mov	r4, r0
 8009886:	da03      	bge.n	8009890 <__ieee754_logf+0x28>
 8009888:	f7f7 f972 	bl	8000b70 <__aeabi_fsub>
 800988c:	2100      	movs	r1, #0
 800988e:	e7f4      	b.n	800987a <__ieee754_logf+0x12>
 8009890:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009894:	db02      	blt.n	800989c <__ieee754_logf+0x34>
 8009896:	f7f7 f96d 	bl	8000b74 <__addsf3>
 800989a:	e7f0      	b.n	800987e <__ieee754_logf+0x16>
 800989c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80098a0:	da35      	bge.n	800990e <__ieee754_logf+0xa6>
 80098a2:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80098a6:	f7f7 fa6d 	bl	8000d84 <__aeabi_fmul>
 80098aa:	f06f 0318 	mvn.w	r3, #24
 80098ae:	4604      	mov	r4, r0
 80098b0:	15e7      	asrs	r7, r4, #23
 80098b2:	3f7f      	subs	r7, #127	@ 0x7f
 80098b4:	441f      	add	r7, r3
 80098b6:	4b76      	ldr	r3, [pc, #472]	@ (8009a90 <__ieee754_logf+0x228>)
 80098b8:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80098bc:	4423      	add	r3, r4
 80098be:	f403 0000 	and.w	r0, r3, #8388608	@ 0x800000
 80098c2:	f080 507e 	eor.w	r0, r0, #1065353216	@ 0x3f800000
 80098c6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80098ca:	4320      	orrs	r0, r4
 80098cc:	eb07 57d3 	add.w	r7, r7, r3, lsr #23
 80098d0:	f7f7 f94e 	bl	8000b70 <__aeabi_fsub>
 80098d4:	4b6f      	ldr	r3, [pc, #444]	@ (8009a94 <__ieee754_logf+0x22c>)
 80098d6:	f104 020f 	add.w	r2, r4, #15
 80098da:	4013      	ands	r3, r2
 80098dc:	4606      	mov	r6, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d143      	bne.n	800996a <__ieee754_logf+0x102>
 80098e2:	2100      	movs	r1, #0
 80098e4:	f7f7 fbe2 	bl	80010ac <__aeabi_fcmpeq>
 80098e8:	b198      	cbz	r0, 8009912 <__ieee754_logf+0xaa>
 80098ea:	2f00      	cmp	r7, #0
 80098ec:	f000 80cd 	beq.w	8009a8a <__ieee754_logf+0x222>
 80098f0:	4638      	mov	r0, r7
 80098f2:	f7f7 f9f3 	bl	8000cdc <__aeabi_i2f>
 80098f6:	4968      	ldr	r1, [pc, #416]	@ (8009a98 <__ieee754_logf+0x230>)
 80098f8:	4605      	mov	r5, r0
 80098fa:	f7f7 fa43 	bl	8000d84 <__aeabi_fmul>
 80098fe:	4967      	ldr	r1, [pc, #412]	@ (8009a9c <__ieee754_logf+0x234>)
 8009900:	4604      	mov	r4, r0
 8009902:	4628      	mov	r0, r5
 8009904:	f7f7 fa3e 	bl	8000d84 <__aeabi_fmul>
 8009908:	4601      	mov	r1, r0
 800990a:	4620      	mov	r0, r4
 800990c:	e7c3      	b.n	8009896 <__ieee754_logf+0x2e>
 800990e:	2300      	movs	r3, #0
 8009910:	e7ce      	b.n	80098b0 <__ieee754_logf+0x48>
 8009912:	4963      	ldr	r1, [pc, #396]	@ (8009aa0 <__ieee754_logf+0x238>)
 8009914:	4630      	mov	r0, r6
 8009916:	f7f7 fa35 	bl	8000d84 <__aeabi_fmul>
 800991a:	4601      	mov	r1, r0
 800991c:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8009920:	f7f7 f926 	bl	8000b70 <__aeabi_fsub>
 8009924:	4631      	mov	r1, r6
 8009926:	4604      	mov	r4, r0
 8009928:	4630      	mov	r0, r6
 800992a:	f7f7 fa2b 	bl	8000d84 <__aeabi_fmul>
 800992e:	4601      	mov	r1, r0
 8009930:	4620      	mov	r0, r4
 8009932:	f7f7 fa27 	bl	8000d84 <__aeabi_fmul>
 8009936:	4604      	mov	r4, r0
 8009938:	b90f      	cbnz	r7, 800993e <__ieee754_logf+0xd6>
 800993a:	4621      	mov	r1, r4
 800993c:	e078      	b.n	8009a30 <__ieee754_logf+0x1c8>
 800993e:	4638      	mov	r0, r7
 8009940:	f7f7 f9cc 	bl	8000cdc <__aeabi_i2f>
 8009944:	4954      	ldr	r1, [pc, #336]	@ (8009a98 <__ieee754_logf+0x230>)
 8009946:	4607      	mov	r7, r0
 8009948:	f7f7 fa1c 	bl	8000d84 <__aeabi_fmul>
 800994c:	4605      	mov	r5, r0
 800994e:	4638      	mov	r0, r7
 8009950:	4952      	ldr	r1, [pc, #328]	@ (8009a9c <__ieee754_logf+0x234>)
 8009952:	f7f7 fa17 	bl	8000d84 <__aeabi_fmul>
 8009956:	4601      	mov	r1, r0
 8009958:	4620      	mov	r0, r4
 800995a:	f7f7 f909 	bl	8000b70 <__aeabi_fsub>
 800995e:	4631      	mov	r1, r6
 8009960:	f7f7 f906 	bl	8000b70 <__aeabi_fsub>
 8009964:	4601      	mov	r1, r0
 8009966:	4628      	mov	r0, r5
 8009968:	e079      	b.n	8009a5e <__ieee754_logf+0x1f6>
 800996a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800996e:	f7f7 f901 	bl	8000b74 <__addsf3>
 8009972:	4601      	mov	r1, r0
 8009974:	4630      	mov	r0, r6
 8009976:	f7f7 fab9 	bl	8000eec <__aeabi_fdiv>
 800997a:	4681      	mov	r9, r0
 800997c:	4638      	mov	r0, r7
 800997e:	f7f7 f9ad 	bl	8000cdc <__aeabi_i2f>
 8009982:	4649      	mov	r1, r9
 8009984:	4680      	mov	r8, r0
 8009986:	4648      	mov	r0, r9
 8009988:	f7f7 f9fc 	bl	8000d84 <__aeabi_fmul>
 800998c:	4601      	mov	r1, r0
 800998e:	4682      	mov	sl, r0
 8009990:	f7f7 f9f8 	bl	8000d84 <__aeabi_fmul>
 8009994:	4605      	mov	r5, r0
 8009996:	4943      	ldr	r1, [pc, #268]	@ (8009aa4 <__ieee754_logf+0x23c>)
 8009998:	f7f7 f9f4 	bl	8000d84 <__aeabi_fmul>
 800999c:	4942      	ldr	r1, [pc, #264]	@ (8009aa8 <__ieee754_logf+0x240>)
 800999e:	f7f7 f8e9 	bl	8000b74 <__addsf3>
 80099a2:	4629      	mov	r1, r5
 80099a4:	f7f7 f9ee 	bl	8000d84 <__aeabi_fmul>
 80099a8:	4940      	ldr	r1, [pc, #256]	@ (8009aac <__ieee754_logf+0x244>)
 80099aa:	f7f7 f8e3 	bl	8000b74 <__addsf3>
 80099ae:	4629      	mov	r1, r5
 80099b0:	f7f7 f9e8 	bl	8000d84 <__aeabi_fmul>
 80099b4:	493e      	ldr	r1, [pc, #248]	@ (8009ab0 <__ieee754_logf+0x248>)
 80099b6:	f7f7 f8dd 	bl	8000b74 <__addsf3>
 80099ba:	4651      	mov	r1, sl
 80099bc:	f7f7 f9e2 	bl	8000d84 <__aeabi_fmul>
 80099c0:	493c      	ldr	r1, [pc, #240]	@ (8009ab4 <__ieee754_logf+0x24c>)
 80099c2:	4682      	mov	sl, r0
 80099c4:	4628      	mov	r0, r5
 80099c6:	f7f7 f9dd 	bl	8000d84 <__aeabi_fmul>
 80099ca:	493b      	ldr	r1, [pc, #236]	@ (8009ab8 <__ieee754_logf+0x250>)
 80099cc:	f7f7 f8d2 	bl	8000b74 <__addsf3>
 80099d0:	4629      	mov	r1, r5
 80099d2:	f7f7 f9d7 	bl	8000d84 <__aeabi_fmul>
 80099d6:	4939      	ldr	r1, [pc, #228]	@ (8009abc <__ieee754_logf+0x254>)
 80099d8:	f7f7 f8cc 	bl	8000b74 <__addsf3>
 80099dc:	4629      	mov	r1, r5
 80099de:	f7f7 f9d1 	bl	8000d84 <__aeabi_fmul>
 80099e2:	4601      	mov	r1, r0
 80099e4:	4650      	mov	r0, sl
 80099e6:	f7f7 f8c5 	bl	8000b74 <__addsf3>
 80099ea:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8009ac0 <__ieee754_logf+0x258>
 80099ee:	4605      	mov	r5, r0
 80099f0:	44a3      	add	fp, r4
 80099f2:	f5c4 1457 	rsb	r4, r4, #3522560	@ 0x35c000
 80099f6:	f504 7422 	add.w	r4, r4, #648	@ 0x288
 80099fa:	ea44 040b 	orr.w	r4, r4, fp
 80099fe:	2c00      	cmp	r4, #0
 8009a00:	dd30      	ble.n	8009a64 <__ieee754_logf+0x1fc>
 8009a02:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8009a06:	4630      	mov	r0, r6
 8009a08:	f7f7 f9bc 	bl	8000d84 <__aeabi_fmul>
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	f7f7 f9b9 	bl	8000d84 <__aeabi_fmul>
 8009a12:	4601      	mov	r1, r0
 8009a14:	4604      	mov	r4, r0
 8009a16:	4628      	mov	r0, r5
 8009a18:	f7f7 f8ac 	bl	8000b74 <__addsf3>
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	f7f7 f9b1 	bl	8000d84 <__aeabi_fmul>
 8009a22:	4605      	mov	r5, r0
 8009a24:	b937      	cbnz	r7, 8009a34 <__ieee754_logf+0x1cc>
 8009a26:	4601      	mov	r1, r0
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f7f7 f8a1 	bl	8000b70 <__aeabi_fsub>
 8009a2e:	4601      	mov	r1, r0
 8009a30:	4630      	mov	r0, r6
 8009a32:	e014      	b.n	8009a5e <__ieee754_logf+0x1f6>
 8009a34:	4918      	ldr	r1, [pc, #96]	@ (8009a98 <__ieee754_logf+0x230>)
 8009a36:	4640      	mov	r0, r8
 8009a38:	f7f7 f9a4 	bl	8000d84 <__aeabi_fmul>
 8009a3c:	4917      	ldr	r1, [pc, #92]	@ (8009a9c <__ieee754_logf+0x234>)
 8009a3e:	4607      	mov	r7, r0
 8009a40:	4640      	mov	r0, r8
 8009a42:	f7f7 f99f 	bl	8000d84 <__aeabi_fmul>
 8009a46:	4629      	mov	r1, r5
 8009a48:	f7f7 f894 	bl	8000b74 <__addsf3>
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f7f7 f88e 	bl	8000b70 <__aeabi_fsub>
 8009a54:	4631      	mov	r1, r6
 8009a56:	f7f7 f88b 	bl	8000b70 <__aeabi_fsub>
 8009a5a:	4601      	mov	r1, r0
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f7f7 f887 	bl	8000b70 <__aeabi_fsub>
 8009a62:	e70c      	b.n	800987e <__ieee754_logf+0x16>
 8009a64:	4601      	mov	r1, r0
 8009a66:	4630      	mov	r0, r6
 8009a68:	f7f7 f882 	bl	8000b70 <__aeabi_fsub>
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	f7f7 f989 	bl	8000d84 <__aeabi_fmul>
 8009a72:	4604      	mov	r4, r0
 8009a74:	2f00      	cmp	r7, #0
 8009a76:	f43f af60 	beq.w	800993a <__ieee754_logf+0xd2>
 8009a7a:	4907      	ldr	r1, [pc, #28]	@ (8009a98 <__ieee754_logf+0x230>)
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	f7f7 f981 	bl	8000d84 <__aeabi_fmul>
 8009a82:	4906      	ldr	r1, [pc, #24]	@ (8009a9c <__ieee754_logf+0x234>)
 8009a84:	4605      	mov	r5, r0
 8009a86:	4640      	mov	r0, r8
 8009a88:	e763      	b.n	8009952 <__ieee754_logf+0xea>
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	e6f7      	b.n	800987e <__ieee754_logf+0x16>
 8009a8e:	bf00      	nop
 8009a90:	004afb20 	.word	0x004afb20
 8009a94:	007ffff0 	.word	0x007ffff0
 8009a98:	3f317180 	.word	0x3f317180
 8009a9c:	3717f7d1 	.word	0x3717f7d1
 8009aa0:	3eaaaaab 	.word	0x3eaaaaab
 8009aa4:	3e178897 	.word	0x3e178897
 8009aa8:	3e3a3325 	.word	0x3e3a3325
 8009aac:	3e924925 	.word	0x3e924925
 8009ab0:	3f2aaaab 	.word	0x3f2aaaab
 8009ab4:	3e1cd04f 	.word	0x3e1cd04f
 8009ab8:	3e638e29 	.word	0x3e638e29
 8009abc:	3ecccccd 	.word	0x3ecccccd
 8009ac0:	ffcf5c30 	.word	0xffcf5c30

08009ac4 <_init>:
 8009ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac6:	bf00      	nop
 8009ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aca:	bc08      	pop	{r3}
 8009acc:	469e      	mov	lr, r3
 8009ace:	4770      	bx	lr

08009ad0 <_fini>:
 8009ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad2:	bf00      	nop
 8009ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad6:	bc08      	pop	{r3}
 8009ad8:	469e      	mov	lr, r3
 8009ada:	4770      	bx	lr
