
SmartPigFarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001580  080099b8  080099b8  0000a9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af38  0800af38  0000c200  2**0
                  CONTENTS
  4 .ARM          00000008  0800af38  0800af38  0000bf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af40  0800af40  0000c200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af40  0800af40  0000bf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af44  0800af44  0000bf44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800af48  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004094  20000200  0800b148  0000c200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004294  0800b148  0000c294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000613f  00000000  00000000  0000c229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf9  00000000  00000000  00012368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  00014068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f6  00000000  00000000  00014748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188f4  00000000  00000000  00014c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fa9  00000000  00000000  0002d532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082e5a  00000000  00000000  000374db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba335  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003218  00000000  00000000  000ba378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000bd590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800999c 	.word	0x0800999c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800999c 	.word	0x0800999c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2uiz>:
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	d20e      	bcs.n	800115e <__aeabi_f2uiz+0x22>
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30b      	bcc.n	800115e <__aeabi_f2uiz+0x22>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d409      	bmi.n	8001164 <__aeabi_f2uiz+0x28>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2uiz+0x32>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d102      	bne.n	8001174 <__aeabi_f2uiz+0x38>
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	4770      	bx	lr
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <__aeabi_d2lz>:
 800117c:	b538      	push	{r3, r4, r5, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	2300      	movs	r3, #0
 8001182:	4604      	mov	r4, r0
 8001184:	460d      	mov	r5, r1
 8001186:	f7ff fc19 	bl	80009bc <__aeabi_dcmplt>
 800118a:	b928      	cbnz	r0, 8001198 <__aeabi_d2lz+0x1c>
 800118c:	4620      	mov	r0, r4
 800118e:	4629      	mov	r1, r5
 8001190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001194:	f000 b80a 	b.w	80011ac <__aeabi_d2ulz>
 8001198:	4620      	mov	r0, r4
 800119a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800119e:	f000 f805 	bl	80011ac <__aeabi_d2ulz>
 80011a2:	4240      	negs	r0, r0
 80011a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a8:	bd38      	pop	{r3, r4, r5, pc}
 80011aa:	bf00      	nop

080011ac <__aeabi_d2ulz>:
 80011ac:	b5d0      	push	{r4, r6, r7, lr}
 80011ae:	2200      	movs	r2, #0
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <__aeabi_d2ulz+0x34>)
 80011b2:	4606      	mov	r6, r0
 80011b4:	460f      	mov	r7, r1
 80011b6:	f7ff f98f 	bl	80004d8 <__aeabi_dmul>
 80011ba:	f7ff fc65 	bl	8000a88 <__aeabi_d2uiz>
 80011be:	4604      	mov	r4, r0
 80011c0:	f7ff f910 	bl	80003e4 <__aeabi_ui2d>
 80011c4:	2200      	movs	r2, #0
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <__aeabi_d2ulz+0x38>)
 80011c8:	f7ff f986 	bl	80004d8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4630      	mov	r0, r6
 80011d2:	4639      	mov	r1, r7
 80011d4:	f7fe ffc8 	bl	8000168 <__aeabi_dsub>
 80011d8:	f7ff fc56 	bl	8000a88 <__aeabi_d2uiz>
 80011dc:	4621      	mov	r1, r4
 80011de:	bdd0      	pop	{r4, r6, r7, pc}
 80011e0:	3df00000 	.word	0x3df00000
 80011e4:	41f00000 	.word	0x41f00000

080011e8 <main>:
/**
 * @brief The application entry point.
 * @retval int
 */
int main(void)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b08e      	sub	sp, #56	@ 0x38
 80011ec:	af04      	add	r7, sp, #16
  // HAL Initialization
  HAL_Init();
 80011ee:	f000 fbd3 	bl	8001998 <HAL_Init>
  SystemClock_Config();
 80011f2:	f000 fa55 	bl	80016a0 <SystemClock_Config>
  USARTx_Init(USART1, PA9PA10, 115200);
 80011f6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011fa:	2100      	movs	r1, #0
 80011fc:	48b1      	ldr	r0, [pc, #708]	@ (80014c4 <main+0x2dc>)
 80011fe:	f001 fecf 	bl	8002fa0 <USARTx_Init>

  // Display welcome message
  printf("HE THONG GIAM SAT KHI NH3 & CO2\n");
 8001202:	48b1      	ldr	r0, [pc, #708]	@ (80014c8 <main+0x2e0>)
 8001204:	f004 fae8 	bl	80057d8 <puts>
  printf("CAM BIEN: MQ137 + MQ135 + RTC DS3231\r\n");
 8001208:	48b0      	ldr	r0, [pc, #704]	@ (80014cc <main+0x2e4>)
 800120a:	f004 fae5 	bl	80057d8 <puts>
 
  // =============================================================================
  // KHỞI TẠO RTC DS3231 - ĐơN GIẢN
  // =============================================================================
  printf("\r\nKHOI TAO RTC DS3231 \r\n");
 800120e:	48b0      	ldr	r0, [pc, #704]	@ (80014d0 <main+0x2e8>)
 8001210:	f004 fae2 	bl	80057d8 <puts>
  
  // Khởi tạo I2C cho DS3231
  I2Cx_Init(I2C1, Pin_PB6PB7, 100000);
 8001214:	4aaf      	ldr	r2, [pc, #700]	@ (80014d4 <main+0x2ec>)
 8001216:	2100      	movs	r1, #0
 8001218:	48af      	ldr	r0, [pc, #700]	@ (80014d8 <main+0x2f0>)
 800121a:	f001 fc19 	bl	8002a50 <I2Cx_Init>
  printf(" I2C1 da khoi tao cho DS3231\r\n");
 800121e:	48af      	ldr	r0, [pc, #700]	@ (80014dc <main+0x2f4>)
 8001220:	f004 fada 	bl	80057d8 <puts>
  
  // Thiết lập thời gian ban đầu (chỉ chạy 1 lần khi cần)
  // Uncomment dòng dưới để set thời gian:
   DS3231Set(0, 18, 0, 7, 12, 7, 25);  // 17:15:00, Thứ 6, 11/07/2025
 8001224:	2319      	movs	r3, #25
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	2307      	movs	r3, #7
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	230c      	movs	r3, #12
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2307      	movs	r3, #7
 8001232:	2200      	movs	r2, #0
 8001234:	2112      	movs	r1, #18
 8001236:	2000      	movs	r0, #0
 8001238:	f001 fe3c 	bl	8002eb4 <DS3231Set>
  
  // Test đọc thời gian với biến local
  uint8_t test_gio, test_phut, test_giay, test_thu, test_ngay, test_thang, test_nam;
  DS3231Read(&test_gio, &test_phut, &test_giay, &test_thu, &test_ngay, &test_thang, &test_nam);
 800123c:	f107 0411 	add.w	r4, r7, #17
 8001240:	f107 0212 	add.w	r2, r7, #18
 8001244:	f107 0113 	add.w	r1, r7, #19
 8001248:	f107 0014 	add.w	r0, r7, #20
 800124c:	f107 030e 	add.w	r3, r7, #14
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	f107 030f 	add.w	r3, r7, #15
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4623      	mov	r3, r4
 8001260:	f001 fdda 	bl	8002e18 <DS3231Read>
  printf("Thoi gian hien tai: %02d:%02d:%02d %02d/%02d/20%02d\r\n",
 8001264:	7d3b      	ldrb	r3, [r7, #20]
 8001266:	4618      	mov	r0, r3
 8001268:	7cfb      	ldrb	r3, [r7, #19]
 800126a:	461c      	mov	r4, r3
 800126c:	7cbb      	ldrb	r3, [r7, #18]
 800126e:	461d      	mov	r5, r3
 8001270:	7c3b      	ldrb	r3, [r7, #16]
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	7bb9      	ldrb	r1, [r7, #14]
 8001276:	9102      	str	r1, [sp, #8]
 8001278:	9201      	str	r2, [sp, #4]
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	462b      	mov	r3, r5
 800127e:	4622      	mov	r2, r4
 8001280:	4601      	mov	r1, r0
 8001282:	4897      	ldr	r0, [pc, #604]	@ (80014e0 <main+0x2f8>)
 8001284:	f004 fa40 	bl	8005708 <iprintf>
         test_gio, test_phut, test_giay, test_ngay, test_thang, test_nam);
  
  printf(" RTC da san sang\r\n");
 8001288:	4896      	ldr	r0, [pc, #600]	@ (80014e4 <main+0x2fc>)
 800128a:	f004 faa5 	bl	80057d8 <puts>
  // =============================================================================
  // KHỞI TẠO HỆ THỐNG CẢM BIẾN (GỮ NGUYÊN)
  // =============================================================================
  
  // Khởi tạo hệ thống cảm biến
  InitSensorSystem();
 800128e:	f002 fb99 	bl	80039c4 <InitSensorSystem>

  // Test hệ thống
  TestSensorSystem();
 8001292:	f002 fcd5 	bl	8003c40 <TestSensorSystem>

  // Hiệu chuẩn nếu cần (uncomment để chạy)
  //CalibrateSensors();
  SetManualR0(25000, 115000); // Set R0 cho MQ137 & MQ135
 8001296:	4994      	ldr	r1, [pc, #592]	@ (80014e8 <main+0x300>)
 8001298:	4894      	ldr	r0, [pc, #592]	@ (80014ec <main+0x304>)
 800129a:	f003 f9cf 	bl	800463c <SetManualR0>
  printf("\r\n BAT DAU GIAM SAT\r\n");
 800129e:	4894      	ldr	r0, [pc, #592]	@ (80014f0 <main+0x308>)
 80012a0:	f004 fa9a 	bl	80057d8 <puts>
  printf("Press any key to stop...\r\n");
 80012a4:	4893      	ldr	r0, [pc, #588]	@ (80014f4 <main+0x30c>)
 80012a6:	f004 fa97 	bl	80057d8 <puts>

  // =============================================================================
  // BIẾN ĐỂ QUẢN LÝ LOG THEO THỜI GIAN
  // =============================================================================
  uint32_t last_log_minute = 255; // Giá trị ban đầu không hợp lệ để force log lần đầu
 80012aa:	23ff      	movs	r3, #255	@ 0xff
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t display_counter = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  {
    // =============================================================================
    // ĐỌC THỜI GIAN RTC - SỬ DỤNG BIẾN LOCAL
    // =============================================================================
    uint8_t current_gio, current_phut, current_giay, current_thu, current_ngay, current_thang, current_nam;
    DS3231Read(&current_gio, &current_phut, &current_giay, &current_thu, &current_ngay, &current_thang, &current_nam);
 80012b4:	f107 040a 	add.w	r4, r7, #10
 80012b8:	f107 020b 	add.w	r2, r7, #11
 80012bc:	f107 010c 	add.w	r1, r7, #12
 80012c0:	f107 000d 	add.w	r0, r7, #13
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f107 0309 	add.w	r3, r7, #9
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4623      	mov	r3, r4
 80012d6:	f001 fd9f 	bl	8002e18 <DS3231Read>
    
    // =============================================================================
    // XỬ LÝ CẢM BIẾN VỚI TIMESTAMP
    // =============================================================================
    printf("\r\n[%02d:%02d:%02d] XU LY CAM BIEN \r\n", 
 80012da:	7b7b      	ldrb	r3, [r7, #13]
 80012dc:	4619      	mov	r1, r3
 80012de:	7b3b      	ldrb	r3, [r7, #12]
 80012e0:	461a      	mov	r2, r3
 80012e2:	7afb      	ldrb	r3, [r7, #11]
 80012e4:	4884      	ldr	r0, [pc, #528]	@ (80014f8 <main+0x310>)
 80012e6:	f004 fa0f 	bl	8005708 <iprintf>
           current_gio, current_phut, current_giay);
    
    // Xử lý tất cả cảm biến
    ProcessAllSensors();
 80012ea:	f002 fbfb 	bl	8003ae4 <ProcessAllSensors>

    // Hiển thị trạng thái chi tiết (mỗi 5 lần)
    if(++display_counter >= 5) {
 80012ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012f2:	3301      	adds	r3, #1
 80012f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80012f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d916      	bls.n	800132e <main+0x146>
        display_counter = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        printf("\r\n=== [%02d:%02d:%02d %02d/%02d/20%02d] TRANG THAI HE THONG ===\r\n",
 8001306:	7b7b      	ldrb	r3, [r7, #13]
 8001308:	4618      	mov	r0, r3
 800130a:	7b3b      	ldrb	r3, [r7, #12]
 800130c:	461c      	mov	r4, r3
 800130e:	7afb      	ldrb	r3, [r7, #11]
 8001310:	461d      	mov	r5, r3
 8001312:	7a7b      	ldrb	r3, [r7, #9]
 8001314:	7a3a      	ldrb	r2, [r7, #8]
 8001316:	79f9      	ldrb	r1, [r7, #7]
 8001318:	9102      	str	r1, [sp, #8]
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	462b      	mov	r3, r5
 8001320:	4622      	mov	r2, r4
 8001322:	4601      	mov	r1, r0
 8001324:	4875      	ldr	r0, [pc, #468]	@ (80014fc <main+0x314>)
 8001326:	f004 f9ef 	bl	8005708 <iprintf>
               current_gio, current_phut, current_giay, current_ngay, current_thang, current_nam);
        DisplaySystemStatus();
 800132a:	f002 fc1d 	bl	8003b68 <DisplaySystemStatus>
    }

    // Lấy giá trị để điều khiển
    float nh3_ppm = GetNH3_PPM();
 800132e:	f003 f9dd 	bl	80046ec <GetNH3_PPM>
 8001332:	61f8      	str	r0, [r7, #28]
    float co2_ppm = GetCO2_PPM();
 8001334:	f003 f9ec 	bl	8004710 <GetCO2_PPM>
 8001338:	61b8      	str	r0, [r7, #24]
    AlarmLevel_t nh3_alarm = GetNH3AlarmLevel();
 800133a:	f003 f9fd 	bl	8004738 <GetNH3AlarmLevel>
 800133e:	4603      	mov	r3, r0
 8001340:	75fb      	strb	r3, [r7, #23]
    AlarmLevel_t co2_alarm = GetCO2AlarmLevel();
 8001342:	f003 fa05 	bl	8004750 <GetCO2AlarmLevel>
 8001346:	4603      	mov	r3, r0
 8001348:	75bb      	strb	r3, [r7, #22]
    AlarmLevel_t system_alarm = GetSystemAlarmLevel();
 800134a:	f003 fa0d 	bl	8004768 <GetSystemAlarmLevel>
 800134e:	4603      	mov	r3, r0
 8001350:	757b      	strb	r3, [r7, #21]

    // =============================================================================
    // LOG DỮ LIỆU THEO THỜI GIAN (MỖI 5 PHÚT)
    // =============================================================================
    // Kiểm tra nếu phút chia hết cho 5 và khác với lần log trước
    if((current_phut % 5 == 0) && (current_phut != last_log_minute)) {
 8001352:	7b3a      	ldrb	r2, [r7, #12]
 8001354:	4b6a      	ldr	r3, [pc, #424]	@ (8001500 <main+0x318>)
 8001356:	fba3 1302 	umull	r1, r3, r3, r2
 800135a:	0899      	lsrs	r1, r3, #2
 800135c:	460b      	mov	r3, r1
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d142      	bne.n	80013f0 <main+0x208>
 800136a:	7b3b      	ldrb	r3, [r7, #12]
 800136c:	461a      	mov	r2, r3
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	4293      	cmp	r3, r2
 8001372:	d03d      	beq.n	80013f0 <main+0x208>
        last_log_minute = current_phut;
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
        
        printf("\r\n=== [%02d:%02d:%02d] LOG DU LIEU CAM BIEN ===\r\n",
 8001378:	7b7b      	ldrb	r3, [r7, #13]
 800137a:	4619      	mov	r1, r3
 800137c:	7b3b      	ldrb	r3, [r7, #12]
 800137e:	461a      	mov	r2, r3
 8001380:	7afb      	ldrb	r3, [r7, #11]
 8001382:	4860      	ldr	r0, [pc, #384]	@ (8001504 <main+0x31c>)
 8001384:	f004 f9c0 	bl	8005708 <iprintf>
               current_gio, current_phut, current_giay);
        printf("NH3: %.1f ppm (Alarm: %d)\r\n", nh3_ppm, nh3_alarm);
 8001388:	69f8      	ldr	r0, [r7, #28]
 800138a:	f7ff f84d 	bl	8000428 <__aeabi_f2d>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	7df9      	ldrb	r1, [r7, #23]
 8001394:	9100      	str	r1, [sp, #0]
 8001396:	485c      	ldr	r0, [pc, #368]	@ (8001508 <main+0x320>)
 8001398:	f004 f9b6 	bl	8005708 <iprintf>
        printf("CO2: %.1f ppm (Alarm: %d)\r\n", co2_ppm, co2_alarm);
 800139c:	69b8      	ldr	r0, [r7, #24]
 800139e:	f7ff f843 	bl	8000428 <__aeabi_f2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	7db9      	ldrb	r1, [r7, #22]
 80013a8:	9100      	str	r1, [sp, #0]
 80013aa:	4858      	ldr	r0, [pc, #352]	@ (800150c <main+0x324>)
 80013ac:	f004 f9ac 	bl	8005708 <iprintf>
        printf("System Status: %d | System Alarm: %d\r\n", GetSystemStatus(), system_alarm);
 80013b0:	f003 f9e6 	bl	8004780 <GetSystemStatus>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4619      	mov	r1, r3
 80013b8:	7d7b      	ldrb	r3, [r7, #21]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4854      	ldr	r0, [pc, #336]	@ (8001510 <main+0x328>)
 80013be:	f004 f9a3 	bl	8005708 <iprintf>
        printf("Uptime: %.1f phut\r\n", HAL_GetTick() / 60000.0f);
 80013c2:	f000 fb41 	bl	8001a48 <HAL_GetTick>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fc83 	bl	8000cd4 <__aeabi_ui2f>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4950      	ldr	r1, [pc, #320]	@ (8001514 <main+0x32c>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fd8a 	bl	8000eec <__aeabi_fdiv>
 80013d8:	4603      	mov	r3, r0
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f824 	bl	8000428 <__aeabi_f2d>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	484c      	ldr	r0, [pc, #304]	@ (8001518 <main+0x330>)
 80013e6:	f004 f98f 	bl	8005708 <iprintf>
        printf("==============================================\r\n");
 80013ea:	484c      	ldr	r0, [pc, #304]	@ (800151c <main+0x334>)
 80013ec:	f004 f9f4 	bl	80057d8 <puts>
    // =============================================================================
    // LOGIC ĐIỀU KHIỂN (GỮ NGUYÊN)
    // =============================================================================
    
    // Debug thong tin
    printf("DEBUG - NH3: %.1f ppm, Alarm Level: %d\r\n", nh3_ppm, nh3_alarm);
 80013f0:	69f8      	ldr	r0, [r7, #28]
 80013f2:	f7ff f819 	bl	8000428 <__aeabi_f2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	7df9      	ldrb	r1, [r7, #23]
 80013fc:	9100      	str	r1, [sp, #0]
 80013fe:	4848      	ldr	r0, [pc, #288]	@ (8001520 <main+0x338>)
 8001400:	f004 f982 	bl	8005708 <iprintf>
    printf("DEBUG - CO2: %.1f ppm, Alarm Level: %d\r\n", co2_ppm, co2_alarm);
 8001404:	69b8      	ldr	r0, [r7, #24]
 8001406:	f7ff f80f 	bl	8000428 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	7db9      	ldrb	r1, [r7, #22]
 8001410:	9100      	str	r1, [sp, #0]
 8001412:	4844      	ldr	r0, [pc, #272]	@ (8001524 <main+0x33c>)
 8001414:	f004 f978 	bl	8005708 <iprintf>
    
    // Logic dieu khien NH3 - day du tat ca truong hop
    printf("\r\nNH3 STATUS: ");
 8001418:	4843      	ldr	r0, [pc, #268]	@ (8001528 <main+0x340>)
 800141a:	f004 f975 	bl	8005708 <iprintf>
    if(nh3_alarm == ALARM_DANGER) {
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d108      	bne.n	8001436 <main+0x24e>
        printf("NH3 = %.1f ppm - NGUY HIEM! BAT QUAT MAX!\r\n", nh3_ppm);
 8001424:	69f8      	ldr	r0, [r7, #28]
 8001426:	f7fe ffff 	bl	8000428 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	483f      	ldr	r0, [pc, #252]	@ (800152c <main+0x344>)
 8001430:	f004 f96a 	bl	8005708 <iprintf>
 8001434:	e01f      	b.n	8001476 <main+0x28e>
        // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_SET);
    }
    else if(nh3_alarm == ALARM_HIGH) {
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d108      	bne.n	800144e <main+0x266>
        printf("NH3 = %.1f ppm - BAT QUAT THONG GIO!\r\n", nh3_ppm);
 800143c:	69f8      	ldr	r0, [r7, #28]
 800143e:	f7fe fff3 	bl	8000428 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	483a      	ldr	r0, [pc, #232]	@ (8001530 <main+0x348>)
 8001448:	f004 f95e 	bl	8005708 <iprintf>
 800144c:	e013      	b.n	8001476 <main+0x28e>
        // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_SET);
    }
    else if(nh3_alarm == ALARM_LOW) {
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d108      	bne.n	8001466 <main+0x27e>
        printf("NH3 = %.1f ppm - Canh bao thap\r\n", nh3_ppm);
 8001454:	69f8      	ldr	r0, [r7, #28]
 8001456:	f7fe ffe7 	bl	8000428 <__aeabi_f2d>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4835      	ldr	r0, [pc, #212]	@ (8001534 <main+0x34c>)
 8001460:	f004 f952 	bl	8005708 <iprintf>
 8001464:	e007      	b.n	8001476 <main+0x28e>
        // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_RESET);
    }
    else { // ALARM_NORMAL
        printf("NH3 = %.1f ppm - Binh thuong\r\n", nh3_ppm);
 8001466:	69f8      	ldr	r0, [r7, #28]
 8001468:	f7fe ffde 	bl	8000428 <__aeabi_f2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4831      	ldr	r0, [pc, #196]	@ (8001538 <main+0x350>)
 8001472:	f004 f949 	bl	8005708 <iprintf>
        // HAL_GPIO_WritePin(FAN_NH3_PORT, FAN_NH3_PIN, GPIO_PIN_RESET);
    }
    
    // Logic dieu khien CO2 - day du tat ca truong hop
    printf("CO2 STATUS: ");
 8001476:	4831      	ldr	r0, [pc, #196]	@ (800153c <main+0x354>)
 8001478:	f004 f946 	bl	8005708 <iprintf>
    if(co2_alarm == ALARM_DANGER) {
 800147c:	7dbb      	ldrb	r3, [r7, #22]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d108      	bne.n	8001494 <main+0x2ac>
        printf("CO2 = %.1f ppm - NGUY HIEM! CAN THONG GIO NGAY!\r\n", co2_ppm);
 8001482:	69b8      	ldr	r0, [r7, #24]
 8001484:	f7fe ffd0 	bl	8000428 <__aeabi_f2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	482c      	ldr	r0, [pc, #176]	@ (8001540 <main+0x358>)
 800148e:	f004 f93b 	bl	8005708 <iprintf>
 8001492:	e063      	b.n	800155c <main+0x374>
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_SET);
    }
    else if(co2_alarm == ALARM_HIGH) {
 8001494:	7dbb      	ldrb	r3, [r7, #22]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d108      	bne.n	80014ac <main+0x2c4>
        printf("CO2 = %.1f ppm - BAT QUAT THONG GIO!\r\n", co2_ppm);
 800149a:	69b8      	ldr	r0, [r7, #24]
 800149c:	f7fe ffc4 	bl	8000428 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4827      	ldr	r0, [pc, #156]	@ (8001544 <main+0x35c>)
 80014a6:	f004 f92f 	bl	8005708 <iprintf>
 80014aa:	e057      	b.n	800155c <main+0x374>
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_SET);
    }
    else if(co2_alarm == ALARM_LOW) {
 80014ac:	7dbb      	ldrb	r3, [r7, #22]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d14c      	bne.n	800154c <main+0x364>
        printf("CO2 = %.1f ppm - Canh bao thap\r\n", co2_ppm);
 80014b2:	69b8      	ldr	r0, [r7, #24]
 80014b4:	f7fe ffb8 	bl	8000428 <__aeabi_f2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4822      	ldr	r0, [pc, #136]	@ (8001548 <main+0x360>)
 80014be:	f004 f923 	bl	8005708 <iprintf>
 80014c2:	e04b      	b.n	800155c <main+0x374>
 80014c4:	40013800 	.word	0x40013800
 80014c8:	080099b8 	.word	0x080099b8
 80014cc:	080099d8 	.word	0x080099d8
 80014d0:	08009a00 	.word	0x08009a00
 80014d4:	000186a0 	.word	0x000186a0
 80014d8:	40005400 	.word	0x40005400
 80014dc:	08009a18 	.word	0x08009a18
 80014e0:	08009a38 	.word	0x08009a38
 80014e4:	08009a70 	.word	0x08009a70
 80014e8:	47e09c00 	.word	0x47e09c00
 80014ec:	46c35000 	.word	0x46c35000
 80014f0:	08009a84 	.word	0x08009a84
 80014f4:	08009a9c 	.word	0x08009a9c
 80014f8:	08009ab8 	.word	0x08009ab8
 80014fc:	08009ae0 	.word	0x08009ae0
 8001500:	cccccccd 	.word	0xcccccccd
 8001504:	08009b24 	.word	0x08009b24
 8001508:	08009b58 	.word	0x08009b58
 800150c:	08009b74 	.word	0x08009b74
 8001510:	08009b90 	.word	0x08009b90
 8001514:	476a6000 	.word	0x476a6000
 8001518:	08009bb8 	.word	0x08009bb8
 800151c:	08009bcc 	.word	0x08009bcc
 8001520:	08009bfc 	.word	0x08009bfc
 8001524:	08009c28 	.word	0x08009c28
 8001528:	08009c54 	.word	0x08009c54
 800152c:	08009c64 	.word	0x08009c64
 8001530:	08009c90 	.word	0x08009c90
 8001534:	08009cb8 	.word	0x08009cb8
 8001538:	08009cdc 	.word	0x08009cdc
 800153c:	08009cfc 	.word	0x08009cfc
 8001540:	08009d0c 	.word	0x08009d0c
 8001544:	08009d40 	.word	0x08009d40
 8001548:	08009d68 	.word	0x08009d68
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_RESET);
    }
    else { // ALARM_NORMAL
        printf("CO2 = %.1f ppm - Binh thuong\r\n", co2_ppm);
 800154c:	69b8      	ldr	r0, [r7, #24]
 800154e:	f7fe ff6b 	bl	8000428 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4844      	ldr	r0, [pc, #272]	@ (8001668 <main+0x480>)
 8001558:	f004 f8d6 	bl	8005708 <iprintf>
        // HAL_GPIO_WritePin(FAN_CO2_PORT, FAN_CO2_PIN, GPIO_PIN_RESET);
    }

    // Cảnh báo tổng thể
    switch (system_alarm)
 800155c:	7d7b      	ldrb	r3, [r7, #21]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d006      	beq.n	8001570 <main+0x388>
 8001562:	2b03      	cmp	r3, #3
 8001564:	dc10      	bgt.n	8001588 <main+0x3a0>
 8001566:	2b01      	cmp	r3, #1
 8001568:	d00a      	beq.n	8001580 <main+0x398>
 800156a:	2b02      	cmp	r3, #2
 800156c:	d004      	beq.n	8001578 <main+0x390>
 800156e:	e00b      	b.n	8001588 <main+0x3a0>
    {
    case ALARM_DANGER:
      printf("NGUY HIEM - KIEM TRA NGAY LAP TUC\r\n");
 8001570:	483e      	ldr	r0, [pc, #248]	@ (800166c <main+0x484>)
 8001572:	f004 f931 	bl	80057d8 <puts>
      // HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_SET);
      break;
 8001576:	e00b      	b.n	8001590 <main+0x3a8>
    case ALARM_HIGH:
      printf("CANH BAO CAO - CHU Y NGAY\r\n");
 8001578:	483d      	ldr	r0, [pc, #244]	@ (8001670 <main+0x488>)
 800157a:	f004 f92d 	bl	80057d8 <puts>
      break;
 800157e:	e007      	b.n	8001590 <main+0x3a8>
    case ALARM_LOW:
      printf("CANH BAO THAP - TIEP TUC THEO DOI\r\n");
 8001580:	483c      	ldr	r0, [pc, #240]	@ (8001674 <main+0x48c>)
 8001582:	f004 f929 	bl	80057d8 <puts>
      break;
 8001586:	e003      	b.n	8001590 <main+0x3a8>
    default:
      printf("HE THONG HOAT DONG BINH THUONG\r\n");
 8001588:	483b      	ldr	r0, [pc, #236]	@ (8001678 <main+0x490>)
 800158a:	f004 f925 	bl	80057d8 <puts>
      // HAL_GPIO_WritePin(BUZZER_PORT, BUZZER_PIN, GPIO_PIN_RESET);
      break;
 800158e:	bf00      	nop
    // =============================================================================
    // KIỂM TRA TÁC VỤ THEO LỊCH - ĐƠN GIẢN
    // =============================================================================
    
    // Tự động hiệu chuẩn vào 3:00 AM
    if(current_gio == 3 && current_phut == 0 && current_giay < 5) {
 8001590:	7b7b      	ldrb	r3, [r7, #13]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d10f      	bne.n	80015b6 <main+0x3ce>
 8001596:	7b3b      	ldrb	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10c      	bne.n	80015b6 <main+0x3ce>
 800159c:	7afb      	ldrb	r3, [r7, #11]
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d809      	bhi.n	80015b6 <main+0x3ce>
        printf("\r\n🕒 [%02d:%02d:%02d] THOI GIAN HIEU CHUAN TU DONG!\r\n", 
 80015a2:	7b7b      	ldrb	r3, [r7, #13]
 80015a4:	4619      	mov	r1, r3
 80015a6:	7b3b      	ldrb	r3, [r7, #12]
 80015a8:	461a      	mov	r2, r3
 80015aa:	7afb      	ldrb	r3, [r7, #11]
 80015ac:	4833      	ldr	r0, [pc, #204]	@ (800167c <main+0x494>)
 80015ae:	f004 f8ab 	bl	8005708 <iprintf>
               current_gio, current_phut, current_giay);
        CalibrateSensors();
 80015b2:	f002 fba1 	bl	8003cf8 <CalibrateSensors>
    }
    
    // Báo cáo hàng ngày vào 23:59
    if(current_gio == 23 && current_phut == 59 && current_giay < 5) {
 80015b6:	7b7b      	ldrb	r3, [r7, #13]
 80015b8:	2b17      	cmp	r3, #23
 80015ba:	d133      	bne.n	8001624 <main+0x43c>
 80015bc:	7b3b      	ldrb	r3, [r7, #12]
 80015be:	2b3b      	cmp	r3, #59	@ 0x3b
 80015c0:	d130      	bne.n	8001624 <main+0x43c>
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d82d      	bhi.n	8001624 <main+0x43c>
        printf("\r\n📊 [%02d:%02d:%02d] BAO CAO HANG NGAY\r\n", 
 80015c8:	7b7b      	ldrb	r3, [r7, #13]
 80015ca:	4619      	mov	r1, r3
 80015cc:	7b3b      	ldrb	r3, [r7, #12]
 80015ce:	461a      	mov	r2, r3
 80015d0:	7afb      	ldrb	r3, [r7, #11]
 80015d2:	482b      	ldr	r0, [pc, #172]	@ (8001680 <main+0x498>)
 80015d4:	f004 f898 	bl	8005708 <iprintf>
               current_gio, current_phut, current_giay);
        printf("Ngay: %02d/%02d/20%02d\r\n", current_ngay, current_thang, current_nam);
 80015d8:	7a7b      	ldrb	r3, [r7, #9]
 80015da:	4619      	mov	r1, r3
 80015dc:	7a3b      	ldrb	r3, [r7, #8]
 80015de:	461a      	mov	r2, r3
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4828      	ldr	r0, [pc, #160]	@ (8001684 <main+0x49c>)
 80015e4:	f004 f890 	bl	8005708 <iprintf>
        printf("Uptime: %.1f gio\r\n", HAL_GetTick() / 3600000.0f);
 80015e8:	f000 fa2e 	bl	8001a48 <HAL_GetTick>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fb70 	bl	8000cd4 <__aeabi_ui2f>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4924      	ldr	r1, [pc, #144]	@ (8001688 <main+0x4a0>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fc77 	bl	8000eec <__aeabi_fdiv>
 80015fe:	4603      	mov	r3, r0
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff11 	bl	8000428 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4820      	ldr	r0, [pc, #128]	@ (800168c <main+0x4a4>)
 800160c:	f004 f87c 	bl	8005708 <iprintf>
        printf("Tong doc: %lu | Loi: %lu\r\n", g_sensor_system.total_readings, g_sensor_system.error_count);
 8001610:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <main+0x4a8>)
 8001612:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8001616:	4a1e      	ldr	r2, [pc, #120]	@ (8001690 <main+0x4a8>)
 8001618:	f8d2 20fc 	ldr.w	r2, [r2, #252]	@ 0xfc
 800161c:	4619      	mov	r1, r3
 800161e:	481d      	ldr	r0, [pc, #116]	@ (8001694 <main+0x4ac>)
 8001620:	f004 f872 	bl	8005708 <iprintf>
    }
    
    // Chào buổi sáng
    if(current_gio == 6 && current_phut == 0 && current_giay < 5) {
 8001624:	7b7b      	ldrb	r3, [r7, #13]
 8001626:	2b06      	cmp	r3, #6
 8001628:	d10d      	bne.n	8001646 <main+0x45e>
 800162a:	7b3b      	ldrb	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10a      	bne.n	8001646 <main+0x45e>
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	2b04      	cmp	r3, #4
 8001634:	d807      	bhi.n	8001646 <main+0x45e>
        printf("\r\n🌅 [%02d:%02d:%02d] CHAO BUOI SANG!\r\n", 
 8001636:	7b7b      	ldrb	r3, [r7, #13]
 8001638:	4619      	mov	r1, r3
 800163a:	7b3b      	ldrb	r3, [r7, #12]
 800163c:	461a      	mov	r2, r3
 800163e:	7afb      	ldrb	r3, [r7, #11]
 8001640:	4815      	ldr	r0, [pc, #84]	@ (8001698 <main+0x4b0>)
 8001642:	f004 f861 	bl	8005708 <iprintf>
    // SendDataToServerWithTime(nh3_ppm, co2_ppm, system_alarm, current_gio, current_phut, current_giay);

    // - Hiển thị trên LCD với thời gian
    // UpdateLCDDisplayWithTime(nh3_ppm, co2_ppm, system_alarm, current_gio, current_phut, current_giay);

    printf("\r\n[%02d:%02d:%02d] CHO %d GIAY DE DO TIEP\r\n", 
 8001646:	7b7b      	ldrb	r3, [r7, #13]
 8001648:	4619      	mov	r1, r3
 800164a:	7b3b      	ldrb	r3, [r7, #12]
 800164c:	461a      	mov	r2, r3
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	4618      	mov	r0, r3
 8001652:	2314      	movs	r3, #20
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	4603      	mov	r3, r0
 8001658:	4810      	ldr	r0, [pc, #64]	@ (800169c <main+0x4b4>)
 800165a:	f004 f855 	bl	8005708 <iprintf>
           current_gio, current_phut, current_giay, MAIN_LOOP_DELAY/1000);
    
    HAL_Delay(MAIN_LOOP_DELAY); // Chờ 1 phút
 800165e:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001662:	f000 f9fb 	bl	8001a5c <HAL_Delay>
  {
 8001666:	e625      	b.n	80012b4 <main+0xcc>
 8001668:	08009d8c 	.word	0x08009d8c
 800166c:	08009dac 	.word	0x08009dac
 8001670:	08009dd0 	.word	0x08009dd0
 8001674:	08009dec 	.word	0x08009dec
 8001678:	08009e10 	.word	0x08009e10
 800167c:	08009e30 	.word	0x08009e30
 8001680:	08009e68 	.word	0x08009e68
 8001684:	08009e94 	.word	0x08009e94
 8001688:	4a5bba00 	.word	0x4a5bba00
 800168c:	08009eb0 	.word	0x08009eb0
 8001690:	20000350 	.word	0x20000350
 8001694:	08009ec4 	.word	0x08009ec4
 8001698:	08009ee0 	.word	0x08009ee0
 800169c:	08009f0c 	.word	0x08009f0c

080016a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b090      	sub	sp, #64	@ 0x40
 80016a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a6:	f107 0318 	add.w	r3, r7, #24
 80016aa:	2228      	movs	r2, #40	@ 0x28
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 f992 	bl	80059d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d0:	2301      	movs	r3, #1
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d4:	2302      	movs	r3, #2
 80016d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016de:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80016e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fabf 	bl	8001c6c <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016f4:	f000 f819 	bl	800172a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016f8:	230f      	movs	r3, #15
 80016fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fc:	2302      	movs	r3, #2
 80016fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2102      	movs	r1, #2
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fd2c 	bl	8002170 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800171e:	f000 f804 	bl	800172a <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3740      	adds	r7, #64	@ 0x40
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172e:	b672      	cpsid	i
}
 8001730:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001732:	bf00      	nop
 8001734:	e7fd      	b.n	8001732 <Error_Handler+0x8>
	...

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <HAL_MspInit+0x5c>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <HAL_MspInit+0x5c>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6193      	str	r3, [r2, #24]
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_MspInit+0x5c>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_MspInit+0x5c>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <HAL_MspInit+0x5c>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	61d3      	str	r3, [r2, #28]
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_MspInit+0x5c>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <HAL_MspInit+0x60>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <HAL_MspInit+0x60>)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	40021000 	.word	0x40021000
 8001798:	40010000 	.word	0x40010000

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <NMI_Handler+0x4>

080017a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <MemManage_Handler+0x4>

080017b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 f91a 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return 1;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <_kill>:

int _kill(int pid, int sig)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800180c:	f004 f936 	bl	8005a7c <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	2216      	movs	r2, #22
 8001814:	601a      	str	r2, [r3, #0]
  return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_exit>:

void _exit (int status)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800182a:	f04f 31ff 	mov.w	r1, #4294967295
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffe7 	bl	8001802 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <_exit+0x12>

08001838 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e00a      	b.n	8001860 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184a:	f3af 8000 	nop.w
 800184e:	4601      	mov	r1, r0
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	60ba      	str	r2, [r7, #8]
 8001856:	b2ca      	uxtb	r2, r1
 8001858:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	dbf0      	blt.n	800184a <_read+0x12>
  }

  return len;
 8001868:	687b      	ldr	r3, [r7, #4]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001898:	605a      	str	r2, [r3, #4]
  return 0;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <_isatty>:

int _isatty(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
	...

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	@ (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	@ (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f004 f8ba 	bl	8005a7c <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20005000 	.word	0x20005000
 8001934:	00000400 	.word	0x00000400
 8001938:	2000021c 	.word	0x2000021c
 800193c:	20004298 	.word	0x20004298

08001940 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800194c:	f7ff fff8 	bl	8001940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001950:	480b      	ldr	r0, [pc, #44]	@ (8001980 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001952:	490c      	ldr	r1, [pc, #48]	@ (8001984 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001954:	4a0c      	ldr	r2, [pc, #48]	@ (8001988 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a09      	ldr	r2, [pc, #36]	@ (800198c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001968:	4c09      	ldr	r4, [pc, #36]	@ (8001990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001976:	f004 f887 	bl	8005a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800197a:	f7ff fc35 	bl	80011e8 <main>
  bx lr
 800197e:	4770      	bx	lr
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001988:	0800af48 	.word	0x0800af48
  ldr r2, =_sbss
 800198c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001990:	20004294 	.word	0x20004294

08001994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC1_2_IRQHandler>
	...

08001998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <HAL_Init+0x28>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	@ (80019c0 <HAL_Init+0x28>)
 80019a2:	f043 0310 	orr.w	r3, r3, #16
 80019a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 f92b 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	200f      	movs	r0, #15
 80019b0:	f000 f808 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b4:	f7ff fec0 	bl	8001738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40022000 	.word	0x40022000

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_InitTick+0x54>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_InitTick+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019da:	fbb3 f3f1 	udiv	r3, r3, r1
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f935 	bl	8001c52 <HAL_SYSTICK_Config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00e      	b.n	8001a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d80a      	bhi.n	8001a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f000 f90b 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4a06      	ldr	r2, [pc, #24]	@ (8001a20 <HAL_InitTick+0x5c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <HAL_IncTick+0x1c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_IncTick+0x20>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a03      	ldr	r2, [pc, #12]	@ (8001a44 <HAL_IncTick+0x20>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	20000008 	.word	0x20000008
 8001a44:	20000220 	.word	0x20000220

08001a48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	@ (8001a58 <HAL_GetTick+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	20000220 	.word	0x20000220

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff fff0 	bl	8001a48 <HAL_GetTick>
 8001a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d005      	beq.n	8001a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_Delay+0x44>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a82:	bf00      	nop
 8001a84:	f7ff ffe0 	bl	8001a48 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f7      	bhi.n	8001a84 <HAL_Delay+0x28>
  {
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000008 	.word	0x20000008

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad6:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	60d3      	str	r3, [r2, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	@ (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	@ (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	@ 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff90 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff49 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff5e 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff90 	bl	8001b5c <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5f 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffb0 	bl	8001bc0 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e272      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8087 	beq.w	8001d9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c8c:	4b92      	ldr	r3, [pc, #584]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d00c      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c98:	4b8f      	ldr	r3, [pc, #572]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b08      	cmp	r3, #8
 8001ca2:	d112      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb0:	d10b      	bne.n	8001cca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb2:	4b89      	ldr	r3, [pc, #548]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d06c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x12c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d168      	bne.n	8001d98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e24c      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x76>
 8001cd4:	4b80      	ldr	r3, [pc, #512]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e02e      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x98>
 8001cea:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7a      	ldr	r2, [pc, #488]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b78      	ldr	r3, [pc, #480]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a77      	ldr	r2, [pc, #476]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e01d      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0xbc>
 8001d0e:	4b72      	ldr	r3, [pc, #456]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a71      	ldr	r2, [pc, #452]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0xd4>
 8001d28:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b68      	ldr	r3, [pc, #416]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a67      	ldr	r2, [pc, #412]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fe7e 	bl	8001a48 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff fe7a 	bl	8001a48 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	@ 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e200      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0xe4>
 8001d6e:	e014      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7ff fe6a 	bl	8001a48 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d78:	f7ff fe66 	bl	8001a48 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	@ 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e1ec      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x10c>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d063      	beq.n	8001e6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001da6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001db2:	4b49      	ldr	r3, [pc, #292]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d11c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
 8001dbe:	4b46      	ldr	r3, [pc, #280]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d116      	bne.n	8001df8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e1c0      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4939      	ldr	r1, [pc, #228]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	e03a      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e00:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fe1f 	bl	8001a48 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fe1b 	bl	8001a48 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e1a1      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4927      	ldr	r1, [pc, #156]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e015      	b.n	8001e6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	4b26      	ldr	r3, [pc, #152]	@ (8001edc <HAL_RCC_OscConfig+0x270>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fdfe 	bl	8001a48 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff fdfa 	bl	8001a48 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e180      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d03a      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d019      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e82:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7ff fdde 	bl	8001a48 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff fdda 	bl	8001a48 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e160      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f000 faa6 	bl	8002400 <RCC_Delay>
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fdc4 	bl	8001a48 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec2:	e00f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fdc0 	bl	8001a48 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d908      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e146      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	42420000 	.word	0x42420000
 8001ee0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee4:	4b92      	ldr	r3, [pc, #584]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1e9      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a6 	beq.w	800204a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f02:	4b8b      	ldr	r3, [pc, #556]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10d      	bne.n	8001f2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	4b88      	ldr	r3, [pc, #544]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a87      	ldr	r2, [pc, #540]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]
 8001f1a:	4b85      	ldr	r3, [pc, #532]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f26:	2301      	movs	r3, #1
 8001f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b82      	ldr	r3, [pc, #520]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d118      	bne.n	8001f68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f36:	4b7f      	ldr	r3, [pc, #508]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f42:	f7ff fd81 	bl	8001a48 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4a:	f7ff fd7d 	bl	8001a48 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b64      	cmp	r3, #100	@ 0x64
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e103      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4b75      	ldr	r3, [pc, #468]	@ (8002134 <HAL_RCC_OscConfig+0x4c8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <HAL_RCC_OscConfig+0x312>
 8001f70:	4b6f      	ldr	r3, [pc, #444]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a6e      	ldr	r2, [pc, #440]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	e02d      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x334>
 8001f86:	4b6a      	ldr	r3, [pc, #424]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a69      	ldr	r2, [pc, #420]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	4b67      	ldr	r3, [pc, #412]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	4a66      	ldr	r2, [pc, #408]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	6213      	str	r3, [r2, #32]
 8001f9e:	e01c      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d10c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x356>
 8001fa8:	4b61      	ldr	r3, [pc, #388]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a60      	ldr	r2, [pc, #384]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e00b      	b.n	8001fda <HAL_RCC_OscConfig+0x36e>
 8001fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a5a      	ldr	r2, [pc, #360]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	6213      	str	r3, [r2, #32]
 8001fce:	4b58      	ldr	r3, [pc, #352]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a57      	ldr	r2, [pc, #348]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	f023 0304 	bic.w	r3, r3, #4
 8001fd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d015      	beq.n	800200e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fd31 	bl	8001a48 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff fd2d 	bl	8001a48 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0b1      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	4b4b      	ldr	r3, [pc, #300]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ee      	beq.n	8001fea <HAL_RCC_OscConfig+0x37e>
 800200c:	e014      	b.n	8002038 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff fd1b 	bl	8001a48 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff fd17 	bl	8001a48 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e09b      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	4b40      	ldr	r3, [pc, #256]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1ee      	bne.n	8002016 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d105      	bne.n	800204a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b3c      	ldr	r3, [pc, #240]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a3b      	ldr	r2, [pc, #236]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8087 	beq.w	8002162 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002054:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d061      	beq.n	8002124 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d146      	bne.n	80020f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	4b33      	ldr	r3, [pc, #204]	@ (8002138 <HAL_RCC_OscConfig+0x4cc>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff fceb 	bl	8001a48 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002076:	f7ff fce7 	bl	8001a48 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e06d      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800209e:	4b24      	ldr	r3, [pc, #144]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4921      	ldr	r1, [pc, #132]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a19      	ldr	r1, [r3, #32]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c0:	430b      	orrs	r3, r1
 80020c2:	491b      	ldr	r1, [pc, #108]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff fcbb 	bl	8001a48 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff fcb7 	bl	8001a48 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e03d      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x46a>
 80020f4:	e035      	b.n	8002162 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_RCC_OscConfig+0x4cc>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fca4 	bl	8001a48 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7ff fca0 	bl	8001a48 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e026      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x498>
 8002122:	e01e      	b.n	8002162 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d107      	bne.n	800213c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e019      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
 8002130:	40021000 	.word	0x40021000
 8002134:	40007000 	.word	0x40007000
 8002138:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_OscConfig+0x500>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	429a      	cmp	r2, r3
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0d0      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b6a      	ldr	r3, [pc, #424]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b67      	ldr	r3, [pc, #412]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	4965      	ldr	r1, [pc, #404]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b63      	ldr	r3, [pc, #396]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b8      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a58      	ldr	r2, [pc, #352]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a52      	ldr	r2, [pc, #328]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b50      	ldr	r3, [pc, #320]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	494d      	ldr	r1, [pc, #308]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d040      	beq.n	8002290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d107      	bne.n	800223e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222e:	4b41      	ldr	r3, [pc, #260]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e073      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e06b      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224e:	4b39      	ldr	r3, [pc, #228]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f023 0203 	bic.w	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4936      	ldr	r1, [pc, #216]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	4313      	orrs	r3, r2
 800225e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002260:	f7ff fbf2 	bl	8001a48 <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	e00a      	b.n	800227e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002268:	f7ff fbee 	bl	8001a48 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e053      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 020c 	and.w	r2, r3, #12
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	429a      	cmp	r2, r3
 800228e:	d1eb      	bne.n	8002268 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002290:	4b27      	ldr	r3, [pc, #156]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d210      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	4922      	ldr	r1, [pc, #136]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e032      	b.n	8002326 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4916      	ldr	r1, [pc, #88]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ea:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	490e      	ldr	r1, [pc, #56]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fe:	f000 f821 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8002302:	4602      	mov	r2, r0
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	490a      	ldr	r1, [pc, #40]	@ (8002338 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	5ccb      	ldrb	r3, [r1, r3]
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	4a09      	ldr	r2, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x1cc>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_RCC_ClockConfig+0x1d0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fb50 	bl	80019c4 <HAL_InitTick>

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40022000 	.word	0x40022000
 8002334:	40021000 	.word	0x40021000
 8002338:	0800aac4 	.word	0x0800aac4
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800235e:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b04      	cmp	r3, #4
 800236c:	d002      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x30>
 800236e:	2b08      	cmp	r3, #8
 8002370:	d003      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x36>
 8002372:	e027      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002374:	4b19      	ldr	r3, [pc, #100]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002376:	613b      	str	r3, [r7, #16]
      break;
 8002378:	e027      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	0c9b      	lsrs	r3, r3, #18
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	4a17      	ldr	r2, [pc, #92]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002384:	5cd3      	ldrb	r3, [r2, r3]
 8002386:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d010      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002392:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0c5b      	lsrs	r3, r3, #17
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	4a11      	ldr	r2, [pc, #68]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800239e:	5cd3      	ldrb	r3, [r2, r3]
 80023a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x98>)
 80023a6:	fb03 f202 	mul.w	r2, r3, r2
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e004      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	613b      	str	r3, [r7, #16]
      break;
 80023c2:	e002      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x98>)
 80023c6:	613b      	str	r3, [r7, #16]
      break;
 80023c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ca:	693b      	ldr	r3, [r7, #16]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	371c      	adds	r7, #28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	007a1200 	.word	0x007a1200
 80023e0:	0800aadc 	.word	0x0800aadc
 80023e4:	0800aaec 	.word	0x0800aaec
 80023e8:	003d0900 	.word	0x003d0900

080023ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f0:	4b02      	ldr	r3, [pc, #8]	@ (80023fc <HAL_RCC_GetHCLKFreq+0x10>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	20000000 	.word	0x20000000

08002400 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <RCC_Delay+0x34>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <RCC_Delay+0x38>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	0a5b      	lsrs	r3, r3, #9
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800241c:	bf00      	nop
  }
  while (Delay --);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1e5a      	subs	r2, r3, #1
 8002422:	60fa      	str	r2, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f9      	bne.n	800241c <RCC_Delay+0x1c>
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	20000000 	.word	0x20000000
 8002438:	10624dd3 	.word	0x10624dd3

0800243c <ADCx_Init>:
#include "adc.h"

void ADCx_Init(ADC_TypeDef *ADCx, uint8_t Channel) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af02      	add	r7, sp, #8
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
    // Enable ADC clock
    if(ADCx == ADC1) RCC->APB2ENR |= 1<<9;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a84      	ldr	r2, [pc, #528]	@ (800265c <ADCx_Init+0x220>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d105      	bne.n	800245c <ADCx_Init+0x20>
 8002450:	4b83      	ldr	r3, [pc, #524]	@ (8002660 <ADCx_Init+0x224>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	4a82      	ldr	r2, [pc, #520]	@ (8002660 <ADCx_Init+0x224>)
 8002456:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800245a:	6193      	str	r3, [r2, #24]
    if(ADCx == ADC2) RCC->APB2ENR |= 1<<10;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a81      	ldr	r2, [pc, #516]	@ (8002664 <ADCx_Init+0x228>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d105      	bne.n	8002470 <ADCx_Init+0x34>
 8002464:	4b7e      	ldr	r3, [pc, #504]	@ (8002660 <ADCx_Init+0x224>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a7d      	ldr	r2, [pc, #500]	@ (8002660 <ADCx_Init+0x224>)
 800246a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800246e:	6193      	str	r3, [r2, #24]
    
    // Configure GPIO pins for analog input
    if(Channel == ADC_Channel_0) GPIOx_Init(GPIOA, 0, INPUT_ANALOG, NOPULL, 0);
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d107      	bne.n	8002486 <ADCx_Init+0x4a>
 8002476:	2300      	movs	r3, #0
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	4879      	ldr	r0, [pc, #484]	@ (8002668 <ADCx_Init+0x22c>)
 8002482:	f000 fa2f 	bl	80028e4 <GPIOx_Init>
    if(Channel == ADC_Channel_1) GPIOx_Init(GPIOA, 1, INPUT_ANALOG, NOPULL, 0);
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <ADCx_Init+0x60>
 800248c:	2300      	movs	r3, #0
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2300      	movs	r3, #0
 8002492:	2200      	movs	r2, #0
 8002494:	2101      	movs	r1, #1
 8002496:	4874      	ldr	r0, [pc, #464]	@ (8002668 <ADCx_Init+0x22c>)
 8002498:	f000 fa24 	bl	80028e4 <GPIOx_Init>
    if(Channel == ADC_Channel_2) GPIOx_Init(GPIOA, 2, INPUT_ANALOG, NOPULL, 0);
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d107      	bne.n	80024b2 <ADCx_Init+0x76>
 80024a2:	2300      	movs	r3, #0
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2300      	movs	r3, #0
 80024a8:	2200      	movs	r2, #0
 80024aa:	2102      	movs	r1, #2
 80024ac:	486e      	ldr	r0, [pc, #440]	@ (8002668 <ADCx_Init+0x22c>)
 80024ae:	f000 fa19 	bl	80028e4 <GPIOx_Init>
    if(Channel == ADC_Channel_3) GPIOx_Init(GPIOA, 3, INPUT_ANALOG, NOPULL, 0);
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d107      	bne.n	80024c8 <ADCx_Init+0x8c>
 80024b8:	2300      	movs	r3, #0
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	2200      	movs	r2, #0
 80024c0:	2103      	movs	r1, #3
 80024c2:	4869      	ldr	r0, [pc, #420]	@ (8002668 <ADCx_Init+0x22c>)
 80024c4:	f000 fa0e 	bl	80028e4 <GPIOx_Init>
    if(Channel == ADC_Channel_4) GPIOx_Init(GPIOA, 4, INPUT_ANALOG, NOPULL, 0);
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d107      	bne.n	80024de <ADCx_Init+0xa2>
 80024ce:	2300      	movs	r3, #0
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2300      	movs	r3, #0
 80024d4:	2200      	movs	r2, #0
 80024d6:	2104      	movs	r1, #4
 80024d8:	4863      	ldr	r0, [pc, #396]	@ (8002668 <ADCx_Init+0x22c>)
 80024da:	f000 fa03 	bl	80028e4 <GPIOx_Init>
    if(Channel == ADC_Channel_5) GPIOx_Init(GPIOA, 5, INPUT_ANALOG, NOPULL, 0);
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d107      	bne.n	80024f4 <ADCx_Init+0xb8>
 80024e4:	2300      	movs	r3, #0
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2300      	movs	r3, #0
 80024ea:	2200      	movs	r2, #0
 80024ec:	2105      	movs	r1, #5
 80024ee:	485e      	ldr	r0, [pc, #376]	@ (8002668 <ADCx_Init+0x22c>)
 80024f0:	f000 f9f8 	bl	80028e4 <GPIOx_Init>
    if(Channel == ADC_Channel_6) GPIOx_Init(GPIOA, 6, INPUT_ANALOG, NOPULL, 0);
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d107      	bne.n	800250a <ADCx_Init+0xce>
 80024fa:	2300      	movs	r3, #0
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2300      	movs	r3, #0
 8002500:	2200      	movs	r2, #0
 8002502:	2106      	movs	r1, #6
 8002504:	4858      	ldr	r0, [pc, #352]	@ (8002668 <ADCx_Init+0x22c>)
 8002506:	f000 f9ed 	bl	80028e4 <GPIOx_Init>
    if(Channel == ADC_Channel_7) GPIOx_Init(GPIOA, 7, INPUT_ANALOG, NOPULL, 0);
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	2b07      	cmp	r3, #7
 800250e:	d107      	bne.n	8002520 <ADCx_Init+0xe4>
 8002510:	2300      	movs	r3, #0
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2300      	movs	r3, #0
 8002516:	2200      	movs	r2, #0
 8002518:	2107      	movs	r1, #7
 800251a:	4853      	ldr	r0, [pc, #332]	@ (8002668 <ADCx_Init+0x22c>)
 800251c:	f000 f9e2 	bl	80028e4 <GPIOx_Init>
    
    // ADC Configuration
    ADCx->CR1 |= 1<<8;              // SCAN MODE enable
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	605a      	str	r2, [r3, #4]
    ADCx->CR2 |= (1<<1) | (1<<0);   // CONT=1, ADON=1 (Continuous mode)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f043 0203 	orr.w	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= 1<<20;             // EXTEN[1:0] = 00 (External trigger disabled)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	609a      	str	r2, [r3, #8]
    ADCx->CR2 &= ~(1<<11);          // ALIGN=0 (Right alignment)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	609a      	str	r2, [r3, #8]
    ADCx->CR2 &= ~(0x7<<17);        // Clear EXTSEL bits
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 2260 	bic.w	r2, r3, #917504	@ 0xe0000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= (0x7<<17);         // EXTSEL = 111 (SWSTART)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f443 2260 	orr.w	r2, r3, #917504	@ 0xe0000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
    
    // Set sequence length to 1 conversion
    ADCx->SQR1 &= ~(0xF<<20);       // Clear L[3:0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADCx->SQR1 |= (0x0<<20);        // L=0 (1 conversion)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    // Set sampling time (longest for better accuracy)
    if(Channel > 9) {
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	2b09      	cmp	r3, #9
 8002580:	d91f      	bls.n	80025c2 <ADCx_Init+0x186>
        ADCx->SMPR1 &= ~(7<<((Channel-10)*3)); 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68d9      	ldr	r1, [r3, #12]
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	f1a3 020a 	sub.w	r2, r3, #10
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	2207      	movs	r2, #7
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	ea01 0203 	and.w	r2, r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	60da      	str	r2, [r3, #12]
        ADCx->SMPR1 |= (7<<((Channel-10)*3));   // 480 cycles
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68d9      	ldr	r1, [r3, #12]
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f1a3 020a 	sub.w	r2, r3, #10
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	2207      	movs	r2, #7
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	ea41 0203 	orr.w	r2, r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	60da      	str	r2, [r3, #12]
 80025c0:	e01a      	b.n	80025f8 <ADCx_Init+0x1bc>
    } else {
        ADCx->SMPR2 &= ~(7<<(Channel*3));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6919      	ldr	r1, [r3, #16]
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	2207      	movs	r2, #7
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	ea01 0203 	and.w	r2, r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	611a      	str	r2, [r3, #16]
        ADCx->SMPR2 |= (7<<(Channel*3));        // 480 cycles
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6919      	ldr	r1, [r3, #16]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	2207      	movs	r2, #7
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	ea41 0203 	orr.w	r2, r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	611a      	str	r2, [r3, #16]
    }
    
    // Set first conversion in regular sequence
    ADCx->SQR3 &= 0xFFFFFFE0;       // Clear SQ1[4:0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025fc:	f023 021f 	bic.w	r2, r3, #31
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	635a      	str	r2, [r3, #52]	@ 0x34
    ADCx->SQR3 |= Channel;          // Set channel for SQ1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // ADC Calibration
    ADCx->CR2 |= 1<<3;              // RSTCAL=1 (Reset calibration)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f043 0208 	orr.w	r2, r3, #8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
    while(ADCx->CR2 & (1<<3));      // Wait for reset calibration to complete
 800261c:	bf00      	nop
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f9      	bne.n	800261e <ADCx_Init+0x1e2>
    
    ADCx->CR2 |= 1<<2;              // CAL=1 (Start calibration)  
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f043 0204 	orr.w	r2, r3, #4
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	609a      	str	r2, [r3, #8]
    while(ADCx->CR2 & (1<<2));      // Wait for calibration to complete
 8002636:	bf00      	nop
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f9      	bne.n	8002638 <ADCx_Init+0x1fc>
        
    // Enable ADC
    ADCx->CR2 |= (1<<22) | (1<<0);  // SWSTART=1, ADON=1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6093      	str	r3, [r2, #8]
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40012400 	.word	0x40012400
 8002660:	40021000 	.word	0x40021000
 8002664:	40012800 	.word	0x40012800
 8002668:	40010800 	.word	0x40010800

0800266c <ADCx_Read>:

uint16_t ADCx_Read(ADC_TypeDef *ADCx, uint8_t Channel) {
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
    // Set sampling time for the channel
    if(Channel > 9) {
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	2b09      	cmp	r3, #9
 800267c:	d91f      	bls.n	80026be <ADCx_Read+0x52>
        ADCx->SMPR1 &= ~(7<<((Channel-10)*3)); 
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68d9      	ldr	r1, [r3, #12]
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f1a3 020a 	sub.w	r2, r3, #10
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	2207      	movs	r2, #7
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	ea01 0203 	and.w	r2, r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	60da      	str	r2, [r3, #12]
        ADCx->SMPR1 |= (7<<((Channel-10)*3));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68d9      	ldr	r1, [r3, #12]
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	f1a3 020a 	sub.w	r2, r3, #10
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	2207      	movs	r2, #7
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	ea41 0203 	orr.w	r2, r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	e01a      	b.n	80026f4 <ADCx_Read+0x88>
    } else {
        ADCx->SMPR2 &= ~(7<<(Channel*3));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	2207      	movs	r2, #7
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	ea01 0203 	and.w	r2, r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	611a      	str	r2, [r3, #16]
        ADCx->SMPR2 |= (7<<(Channel*3));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6919      	ldr	r1, [r3, #16]
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	2207      	movs	r2, #7
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	ea41 0203 	orr.w	r2, r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	611a      	str	r2, [r3, #16]
    }
    
    // Set channel in regular sequence
    ADCx->SQR3 &= 0xFFFFFFE0;       
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f8:	f023 021f 	bic.w	r2, r3, #31
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	635a      	str	r2, [r3, #52]	@ 0x34
    ADCx->SQR3 |= Channel;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Start conversion
    ADCx->CR2 |= (1<<22) | (1<<0);  // SWSTART=1, ADON=1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6093      	str	r3, [r2, #8]
    
    // Wait for conversion to complete
    while((ADCx->SR & (1<<1)) == 0);
 800271c:	bf00      	nop
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f9      	beq.n	800271e <ADCx_Read+0xb2>
    
    // Clear EOC flag by reading DR
    return ADCx->DR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272e:	b29b      	uxth	r3, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <ADCx_Read_TB>:

// ✅ Sửa lỗi overflow và kiểu dữ liệu
uint16_t ADCx_Read_TB(ADC_TypeDef *ADCx, uint8_t Channel, uint8_t n) {
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	70fb      	strb	r3, [r7, #3]
 8002746:	4613      	mov	r3, r2
 8002748:	70bb      	strb	r3, [r7, #2]
    if(n == 0) return 0;            // Validation
 800274a:	78bb      	ldrb	r3, [r7, #2]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <ADCx_Read_TB+0x1a>
 8002750:	2300      	movs	r3, #0
 8002752:	e01a      	b.n	800278a <ADCx_Read_TB+0x50>
    
    uint32_t sum = 0;               // ✅ Dùng uint32_t thay vì uint8_t
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
    
    for(int i = 0; i < n; i++) {
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	e00c      	b.n	8002778 <ADCx_Read_TB+0x3e>
        sum += ADCx_Read(ADCx, Channel);
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	4619      	mov	r1, r3
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ff82 	bl	800266c <ADCx_Read>
 8002768:	4603      	mov	r3, r0
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < n; i++) {
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	3301      	adds	r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	78bb      	ldrb	r3, [r7, #2]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	429a      	cmp	r2, r3
 800277e:	dbee      	blt.n	800275e <ADCx_Read_TB+0x24>
        // Có thể thêm delay nhỏ giữa các lần đọc nếu cần
        // for(volatile int d = 0; d < 1000; d++);
    }
    
    return (uint16_t)(sum / n);     // Ép kiểu an toàn
 8002780:	78bb      	ldrb	r3, [r7, #2]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	b29b      	uxth	r3, r3
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <__NVIC_GetPriorityGrouping>:
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002798:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <__NVIC_GetPriorityGrouping+0x18>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 0307 	and.w	r3, r3, #7
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_EnableIRQ>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	db0b      	blt.n	80027da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	f003 021f 	and.w	r2, r3, #31
 80027c8:	4906      	ldr	r1, [pc, #24]	@ (80027e4 <__NVIC_EnableIRQ+0x34>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2001      	movs	r0, #1
 80027d2:	fa00 f202 	lsl.w	r2, r0, r2
 80027d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	e000e100 	.word	0xe000e100

080027e8 <__NVIC_SetPriority>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	6039      	str	r1, [r7, #0]
 80027f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	db0a      	blt.n	8002812 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	490c      	ldr	r1, [pc, #48]	@ (8002834 <__NVIC_SetPriority+0x4c>)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	0112      	lsls	r2, r2, #4
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	440b      	add	r3, r1
 800280c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002810:	e00a      	b.n	8002828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4908      	ldr	r1, [pc, #32]	@ (8002838 <__NVIC_SetPriority+0x50>)
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	3b04      	subs	r3, #4
 8002820:	0112      	lsls	r2, r2, #4
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	440b      	add	r3, r1
 8002826:	761a      	strb	r2, [r3, #24]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000e100 	.word	0xe000e100
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <NVIC_EncodePriority>:
{
 800283c:	b480      	push	{r7}
 800283e:	b089      	sub	sp, #36	@ 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f1c3 0307 	rsb	r3, r3, #7
 8002856:	2b04      	cmp	r3, #4
 8002858:	bf28      	it	cs
 800285a:	2304      	movcs	r3, #4
 800285c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3304      	adds	r3, #4
 8002862:	2b06      	cmp	r3, #6
 8002864:	d902      	bls.n	800286c <NVIC_EncodePriority+0x30>
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3b03      	subs	r3, #3
 800286a:	e000      	b.n	800286e <NVIC_EncodePriority+0x32>
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	f04f 32ff 	mov.w	r2, #4294967295
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43da      	mvns	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	401a      	ands	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002884:	f04f 31ff 	mov.w	r1, #4294967295
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	43d9      	mvns	r1, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002894:	4313      	orrs	r3, r2
}
 8002896:	4618      	mov	r0, r3
 8002898:	3724      	adds	r7, #36	@ 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <NVICx_Init>:
#include "gpio.h"


void NVICx_Init(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b2:	f7ff ff6f 	bl	8002794 <__NVIC_GetPriorityGrouping>
 80028b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	6978      	ldr	r0, [r7, #20]
 80028be:	f7ff ffbd 	bl	800283c <NVIC_EncodePriority>
 80028c2:	4602      	mov	r2, r0
 80028c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff8c 	bl	80027e8 <__NVIC_SetPriority>
	
	 /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff6b 	bl	80027b0 <__NVIC_EnableIRQ>
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <GPIOx_Init>:
void GPIOx_Init(GPIO_TypeDef *GPIOx ,uint8_t Pin ,uint8_t Mode ,uint8_t Pull,uint8_t Speed)
{ 
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	70fb      	strb	r3, [r7, #3]
 80028f6:	460b      	mov	r3, r1
 80028f8:	70bb      	strb	r3, [r7, #2]
 80028fa:	4613      	mov	r3, r2
 80028fc:	707b      	strb	r3, [r7, #1]
if(GPIOx == GPIOA ) RCC ->APB2ENR |= 1<<2 ;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a41      	ldr	r2, [pc, #260]	@ (8002a08 <GPIOx_Init+0x124>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d105      	bne.n	8002912 <GPIOx_Init+0x2e>
 8002906:	4b41      	ldr	r3, [pc, #260]	@ (8002a0c <GPIOx_Init+0x128>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	4a40      	ldr	r2, [pc, #256]	@ (8002a0c <GPIOx_Init+0x128>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOB ) RCC ->APB2ENR |= 1<<3 ;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a3e      	ldr	r2, [pc, #248]	@ (8002a10 <GPIOx_Init+0x12c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d105      	bne.n	8002926 <GPIOx_Init+0x42>
 800291a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a0c <GPIOx_Init+0x128>)
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a0c <GPIOx_Init+0x128>)
 8002920:	f043 0308 	orr.w	r3, r3, #8
 8002924:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOC ) RCC ->APB2ENR |= 1<<4 ;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a3a      	ldr	r2, [pc, #232]	@ (8002a14 <GPIOx_Init+0x130>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d105      	bne.n	800293a <GPIOx_Init+0x56>
 800292e:	4b37      	ldr	r3, [pc, #220]	@ (8002a0c <GPIOx_Init+0x128>)
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	4a36      	ldr	r2, [pc, #216]	@ (8002a0c <GPIOx_Init+0x128>)
 8002934:	f043 0310 	orr.w	r3, r3, #16
 8002938:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOD ) RCC ->APB2ENR |= 1<<5 ;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a36      	ldr	r2, [pc, #216]	@ (8002a18 <GPIOx_Init+0x134>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d105      	bne.n	800294e <GPIOx_Init+0x6a>
 8002942:	4b32      	ldr	r3, [pc, #200]	@ (8002a0c <GPIOx_Init+0x128>)
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	4a31      	ldr	r2, [pc, #196]	@ (8002a0c <GPIOx_Init+0x128>)
 8002948:	f043 0320 	orr.w	r3, r3, #32
 800294c:	6193      	str	r3, [r2, #24]
if(GPIOx == GPIOE ) RCC ->APB2ENR |= 1<<6 ;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a32      	ldr	r2, [pc, #200]	@ (8002a1c <GPIOx_Init+0x138>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d105      	bne.n	8002962 <GPIOx_Init+0x7e>
 8002956:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <GPIOx_Init+0x128>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	4a2c      	ldr	r2, [pc, #176]	@ (8002a0c <GPIOx_Init+0x128>)
 800295c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002960:	6193      	str	r3, [r2, #24]
	if(Pin<8){
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	2b07      	cmp	r3, #7
 8002966:	d818      	bhi.n	800299a <GPIOx_Init+0xb6>
	GPIOx->CRL &=~(0xF<<(Pin*4)) ;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	210f      	movs	r1, #15
 8002972:	fa01 f202 	lsl.w	r2, r1, r2
 8002976:	43d2      	mvns	r2, r2
 8002978:	401a      	ands	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	601a      	str	r2, [r3, #0]
	GPIOx->CRL |=(((Mode<<2)+ Speed) <<(Pin*4)) ; 
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	78ba      	ldrb	r2, [r7, #2]
 8002984:	0091      	lsls	r1, r2, #2
 8002986:	7c3a      	ldrb	r2, [r7, #16]
 8002988:	4411      	add	r1, r2
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	0092      	lsls	r2, r2, #2
 800298e:	fa01 f202 	lsl.w	r2, r1, r2
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	e019      	b.n	80029ce <GPIOx_Init+0xea>
	}
	else{
	GPIOx->CRH &=~(0xF<<((Pin-8)*4)) ;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	3a08      	subs	r2, #8
 80029a2:	0092      	lsls	r2, r2, #2
 80029a4:	210f      	movs	r1, #15
 80029a6:	fa01 f202 	lsl.w	r2, r1, r2
 80029aa:	43d2      	mvns	r2, r2
 80029ac:	401a      	ands	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	605a      	str	r2, [r3, #4]
	GPIOx->CRH |=(((Mode<<2)+ Speed) <<((Pin-8)*4)) ;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	78ba      	ldrb	r2, [r7, #2]
 80029b8:	0091      	lsls	r1, r2, #2
 80029ba:	7c3a      	ldrb	r2, [r7, #16]
 80029bc:	4411      	add	r1, r2
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	3a08      	subs	r2, #8
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	605a      	str	r2, [r3, #4]
	}
	if(Pull ==PU)
 80029ce:	787b      	ldrb	r3, [r7, #1]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d109      	bne.n	80029e8 <GPIOx_Init+0x104>
  GPIOx->ODR |= 1<<Pin ;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60da      	str	r2, [r3, #12]
  else GPIOx->ODR &= ~(1<<Pin); 	
}
 80029e6:	e009      	b.n	80029fc <GPIOx_Init+0x118>
  else GPIOx->ODR &= ~(1<<Pin); 	
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	43d2      	mvns	r2, r2
 80029f6:	401a      	ands	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40010800 	.word	0x40010800
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010c00 	.word	0x40010c00
 8002a14:	40011000 	.word	0x40011000
 8002a18:	40011400 	.word	0x40011400
 8002a1c:	40011800 	.word	0x40011800

08002a20 <GPIOx_ReadPin>:
{
	if (bit==1) GPIOx->BSRR |= 1 << Pin ;
	else GPIOx->BSRR |= 1 << (Pin + 16);
}
uint8_t GPIOx_ReadPin(GPIO_TypeDef *GPIOx ,uint8_t Pin )
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	70fb      	strb	r3, [r7, #3]
	return ((GPIOx->IDR)&(1<<Pin))==0 ? 0:1 ; 
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	2101      	movs	r1, #1
 8002a34:	fa01 f202 	lsl.w	r2, r1, r2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
	...

08002a50 <I2Cx_Init>:
#include "i2c.h"
/* I2C1 init function */
void I2Cx_Init(I2C_TypeDef * I2Cx, I2C_Pin Pins, uint32_t Speed)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	72fb      	strb	r3, [r7, #11]
	uint32_t PCLKx=(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a5e:	4b40      	ldr	r3, [pc, #256]	@ (8002b60 <I2Cx_Init+0x110>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a40      	ldr	r2, [pc, #256]	@ (8002b64 <I2Cx_Init+0x114>)
 8002a64:	6852      	ldr	r2, [r2, #4]
 8002a66:	0a12      	lsrs	r2, r2, #8
 8002a68:	f002 0207 	and.w	r2, r2, #7
 8002a6c:	493e      	ldr	r1, [pc, #248]	@ (8002b68 <I2Cx_Init+0x118>)
 8002a6e:	5c8a      	ldrb	r2, [r1, r2]
 8002a70:	40d3      	lsrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
	
  /* I2C clock enable */
		if (I2Cx == I2C1) {
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4a3d      	ldr	r2, [pc, #244]	@ (8002b6c <I2Cx_Init+0x11c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d106      	bne.n	8002a8a <I2Cx_Init+0x3a>
				RCC->APB1ENR |= (1 << 21); // B?t clock cho I2C1
 8002a7c:	4b39      	ldr	r3, [pc, #228]	@ (8002b64 <I2Cx_Init+0x114>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	4a38      	ldr	r2, [pc, #224]	@ (8002b64 <I2Cx_Init+0x114>)
 8002a82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a86:	61d3      	str	r3, [r2, #28]
 8002a88:	e009      	b.n	8002a9e <I2Cx_Init+0x4e>
		} else if (I2Cx == I2C2) {
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4a38      	ldr	r2, [pc, #224]	@ (8002b70 <I2Cx_Init+0x120>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d105      	bne.n	8002a9e <I2Cx_Init+0x4e>
				RCC->APB1ENR |= (1 << 22); // B?t clock cho I2C2
 8002a92:	4b34      	ldr	r3, [pc, #208]	@ (8002b64 <I2Cx_Init+0x114>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4a33      	ldr	r2, [pc, #204]	@ (8002b64 <I2Cx_Init+0x114>)
 8002a98:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a9c:	61d3      	str	r3, [r2, #28]
		}
	

		if(Pins==Pin_PB6PB7){		////I2C1
 8002a9e:	7afb      	ldrb	r3, [r7, #11]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d110      	bne.n	8002ac6 <I2Cx_Init+0x76>
			GPIOx_Init(GPIOB, 6,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2203      	movs	r2, #3
 8002aac:	2106      	movs	r1, #6
 8002aae:	4831      	ldr	r0, [pc, #196]	@ (8002b74 <I2Cx_Init+0x124>)
 8002ab0:	f7ff ff18 	bl	80028e4 <GPIOx_Init>
			GPIOx_Init(GPIOB, 7,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2203      	movs	r2, #3
 8002abc:	2107      	movs	r1, #7
 8002abe:	482d      	ldr	r0, [pc, #180]	@ (8002b74 <I2Cx_Init+0x124>)
 8002ac0:	f7ff ff10 	bl	80028e4 <GPIOx_Init>
 8002ac4:	e02c      	b.n	8002b20 <I2Cx_Init+0xd0>
		}
		else if(Pins==Pin_PB8PB9){//I2C1
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d116      	bne.n	8002afa <I2Cx_Init+0xaa>
			AFIO->MAPR |= 1<<1;// REMAP
 8002acc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b78 <I2Cx_Init+0x128>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a29      	ldr	r2, [pc, #164]	@ (8002b78 <I2Cx_Init+0x128>)
 8002ad2:	f043 0302 	orr.w	r3, r3, #2
 8002ad6:	6053      	str	r3, [r2, #4]
			GPIOx_Init(GPIOB, 8,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002ad8:	2303      	movs	r3, #3
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2300      	movs	r3, #0
 8002ade:	2203      	movs	r2, #3
 8002ae0:	2108      	movs	r1, #8
 8002ae2:	4824      	ldr	r0, [pc, #144]	@ (8002b74 <I2Cx_Init+0x124>)
 8002ae4:	f7ff fefe 	bl	80028e4 <GPIOx_Init>
			GPIOx_Init(GPIOB, 9,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002ae8:	2303      	movs	r3, #3
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2300      	movs	r3, #0
 8002aee:	2203      	movs	r2, #3
 8002af0:	2109      	movs	r1, #9
 8002af2:	4820      	ldr	r0, [pc, #128]	@ (8002b74 <I2Cx_Init+0x124>)
 8002af4:	f7ff fef6 	bl	80028e4 <GPIOx_Init>
 8002af8:	e012      	b.n	8002b20 <I2Cx_Init+0xd0>
		}
		
		
		else if(Pins==Pin_PB10PB11){//I2C2
 8002afa:	7afb      	ldrb	r3, [r7, #11]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d10f      	bne.n	8002b20 <I2Cx_Init+0xd0>
			GPIOx_Init(GPIOB, 10,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002b00:	2303      	movs	r3, #3
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2300      	movs	r3, #0
 8002b06:	2203      	movs	r2, #3
 8002b08:	210a      	movs	r1, #10
 8002b0a:	481a      	ldr	r0, [pc, #104]	@ (8002b74 <I2Cx_Init+0x124>)
 8002b0c:	f7ff feea 	bl	80028e4 <GPIOx_Init>
			GPIOx_Init(GPIOB, 11,OUTPUT_AF_OD,NOPULL,MODE_OUTPUT_50MHZ);
 8002b10:	2303      	movs	r3, #3
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2300      	movs	r3, #0
 8002b16:	2203      	movs	r2, #3
 8002b18:	210b      	movs	r1, #11
 8002b1a:	4816      	ldr	r0, [pc, #88]	@ (8002b74 <I2Cx_Init+0x124>)
 8002b1c:	f7ff fee2 	bl	80028e4 <GPIOx_Init>
		}
		
		I2Cx->CR2 =  PCLKx/1000000;// Peripheral clock frequency = 36M
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <I2Cx_Init+0x12c>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	0c9a      	lsrs	r2, r3, #18
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	605a      	str	r2, [r3, #4]
		I2Cx->CCR =  PCLKx/(Speed*2); 
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	61da      	str	r2, [r3, #28]
		I2Cx->TRISE = (PCLKx/1000000)+1;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b7c <I2Cx_Init+0x12c>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	0c9b      	lsrs	r3, r3, #18
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	621a      	str	r2, [r3, #32]
		I2Cx->CR1 |=(0<<1)|(1<<0) ; //en 
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	601a      	str	r2, [r3, #0]
	}
 8002b58:	bf00      	nop
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000000 	.word	0x20000000
 8002b64:	40021000 	.word	0x40021000
 8002b68:	0800aad4 	.word	0x0800aad4
 8002b6c:	40005400 	.word	0x40005400
 8002b70:	40005800 	.word	0x40005800
 8002b74:	40010c00 	.word	0x40010c00
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	431bde83 	.word	0x431bde83

08002b80 <I2Cx_ReadMulti>:

	void I2Cx_ReadMulti(I2C_TypeDef *I2Cx, uint8_t DevAddress, uint8_t add, uint8_t * data, uint8_t size){
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	72fb      	strb	r3, [r7, #11]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	72bb      	strb	r3, [r7, #10]
		I2Cx->CR1 |= (1<<8) |(1<<10);// Start generation + ACK
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	601a      	str	r2, [r3, #0]
		while(!(I2Cx->SR1&(1<<0)));
 8002b9e:	bf00      	nop
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f9      	beq.n	8002ba0 <I2Cx_ReadMulti+0x20>
		
		I2Cx->DR = (DevAddress<<1)|0;
 8002bac:	7afb      	ldrb	r3, [r7, #11]
 8002bae:	005a      	lsls	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
		while(!(I2Cx->SR1&(1<<1))  |  !(I2Cx->SR2&(1<<1)));
 8002bb4:	bf00      	nop
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1e9      	bne.n	8002bb6 <I2Cx_ReadMulti+0x36>
		
		I2Cx->DR = add;
 8002be2:	7aba      	ldrb	r2, [r7, #10]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	611a      	str	r2, [r3, #16]
		while(!(I2Cx->SR1&(1<<7)));
 8002be8:	bf00      	nop
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f9      	beq.n	8002bea <I2Cx_ReadMulti+0x6a>
		
		I2Cx->CR1 |= (1<<8) ;// reStart generation 
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	601a      	str	r2, [r3, #0]
		while(!(I2Cx->SR1&(1<<0)));
 8002c02:	bf00      	nop
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f9      	beq.n	8002c04 <I2Cx_ReadMulti+0x84>
		
		I2Cx->DR = (DevAddress<<1)|1;
 8002c10:	7afb      	ldrb	r3, [r7, #11]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	611a      	str	r2, [r3, #16]
		while(!(I2Cx->SR1&(1<<1))  |  !(I2Cx->SR2&(1<<1)));
 8002c1e:	bf00      	nop
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2301      	moveq	r3, #1
 8002c40:	2300      	movne	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4313      	orrs	r3, r2
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e9      	bne.n	8002c20 <I2Cx_ReadMulti+0xa0>
		
		for(int i=0; i<size; i++){
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e010      	b.n	8002c74 <I2Cx_ReadMulti+0xf4>
		while(!(I2Cx->SR1&(1<<6)));// RXE
 8002c52:	bf00      	nop
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f9      	beq.n	8002c54 <I2Cx_ReadMulti+0xd4>
		data[i] = I2Cx->DR;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6919      	ldr	r1, [r3, #16]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	b2ca      	uxtb	r2, r1
 8002c6c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<size; i++){
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	dbe9      	blt.n	8002c52 <I2Cx_ReadMulti+0xd2>
		}
		
		I2Cx->CR1 &= ~(1<<10);// nACK
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	601a      	str	r2, [r3, #0]
		I2Cx->CR1 |= (1<<9) ;// Stop 
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	601a      	str	r2, [r3, #0]
		
	}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <I2Cx_WriteMulti>:
	void I2Cx_WriteMulti(I2C_TypeDef *I2Cx, uint8_t DevAddress, uint8_t add, uint8_t * data, uint8_t size){
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	72fb      	strb	r3, [r7, #11]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	72bb      	strb	r3, [r7, #10]

	I2Cx->CR1 |= (1<<8) |(1<<10);// Start generation + ACK
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	601a      	str	r2, [r3, #0]
	while(!(I2Cx->SR1&(1<<0)));
 8002cbe:	bf00      	nop
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f9      	beq.n	8002cc0 <I2Cx_WriteMulti+0x20>
	
	I2Cx->DR = (DevAddress<<1)|0;
 8002ccc:	7afb      	ldrb	r3, [r7, #11]
 8002cce:	005a      	lsls	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
	while(!(I2Cx->SR1&(1<<1))  |  !(I2Cx->SR2&(1<<1)));
 8002cd4:	bf00      	nop
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e9      	bne.n	8002cd6 <I2Cx_WriteMulti+0x36>
	
	I2Cx->DR = add;
 8002d02:	7aba      	ldrb	r2, [r7, #10]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	611a      	str	r2, [r3, #16]
	while(!(I2Cx->SR1&(1<<7)));// TXE
 8002d08:	bf00      	nop
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f9      	beq.n	8002d0a <I2Cx_WriteMulti+0x6a>
	
	for(int i=0; i<size; i++){
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e010      	b.n	8002d3e <I2Cx_WriteMulti+0x9e>
	I2Cx->DR = data[i];
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	611a      	str	r2, [r3, #16]
	while(!(I2Cx->SR1&(1<<7)));// TXE
 8002d2a:	bf00      	nop
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f9      	beq.n	8002d2c <I2Cx_WriteMulti+0x8c>
	for(int i=0; i<size; i++){
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	dbe9      	blt.n	8002d1c <I2Cx_WriteMulti+0x7c>
	}
	
	I2Cx->CR1 &= ~(1<<10);// nACK
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]
	I2Cx->CR1 |= (1<<9) ;// Stop 
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	601a      	str	r2, [r3, #0]
}
 8002d60:	bf00      	nop
 8002d62:	371c      	adds	r7, #28
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <BCDtoBIN>:
uint8_t BCDtoBIN(uint8_t bcd){
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	71fb      	strb	r3, [r7, #7]
return 10*(bcd>>4) + (bcd&0x0f);
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	0092      	lsls	r2, r2, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	b2db      	uxtb	r3, r3

}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
	...

08002d9c <BINtoBCD>:

uint8_t BINtoBCD(uint8_t bin){
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
return ((bin/10)<<4) + (bin%10);
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	4a0c      	ldr	r2, [pc, #48]	@ (8002ddc <BINtoBCD+0x40>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	08db      	lsrs	r3, r3, #3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	b2d8      	uxtb	r0, r3
 8002db6:	79fa      	ldrb	r2, [r7, #7]
 8002db8:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <BINtoBCD+0x40>)
 8002dba:	fba3 1302 	umull	r1, r3, r3, r2
 8002dbe:	08d9      	lsrs	r1, r3, #3
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	4403      	add	r3, r0
 8002dce:	b2db      	uxtb	r3, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	cccccccd 	.word	0xcccccccd

08002de0 <RTC_CheckMinMax>:


uint8_t RTC_CheckMinMax(uint8_t val, uint8_t min, uint8_t max) {
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
 8002dea:	460b      	mov	r3, r1
 8002dec:	71bb      	strb	r3, [r7, #6]
 8002dee:	4613      	mov	r3, r2
 8002df0:	717b      	strb	r3, [r7, #5]
	if (val < min) {
 8002df2:	79fa      	ldrb	r2, [r7, #7]
 8002df4:	79bb      	ldrb	r3, [r7, #6]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d201      	bcs.n	8002dfe <RTC_CheckMinMax+0x1e>
		return min;
 8002dfa:	79bb      	ldrb	r3, [r7, #6]
 8002dfc:	e006      	b.n	8002e0c <RTC_CheckMinMax+0x2c>
	} else if (val > max) {
 8002dfe:	79fa      	ldrb	r2, [r7, #7]
 8002e00:	797b      	ldrb	r3, [r7, #5]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d901      	bls.n	8002e0a <RTC_CheckMinMax+0x2a>
		return max;
 8002e06:	797b      	ldrb	r3, [r7, #5]
 8002e08:	e000      	b.n	8002e0c <RTC_CheckMinMax+0x2c>
	}
	return val;
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
	...

08002e18 <DS3231Read>:

void DS3231Read(uint8_t *HH, uint8_t *MM, uint8_t *SS,uint8_t *Date ,uint8_t *D,uint8_t *M,uint8_t *Y){
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
uint8_t data[7];
	
I2Cx_ReadMulti(I2C1, 0x68, 0x00, data, 7);
 8002e26:	f107 0310 	add.w	r3, r7, #16
 8002e2a:	2207      	movs	r2, #7
 8002e2c:	9200      	str	r2, [sp, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2168      	movs	r1, #104	@ 0x68
 8002e32:	481f      	ldr	r0, [pc, #124]	@ (8002eb0 <DS3231Read+0x98>)
 8002e34:	f7ff fea4 	bl	8002b80 <I2Cx_ReadMulti>
	
	*HH=BCDtoBIN(data[2]); *MM=BCDtoBIN(data[1]); *SS=BCDtoBIN(data[0]); *Date =BCDtoBIN(data[3]);*D=BCDtoBIN(data[4]);*M=BCDtoBIN(data[5]);*Y=BCDtoBIN(data[6]);
 8002e38:	7cbb      	ldrb	r3, [r7, #18]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff95 	bl	8002d6a <BCDtoBIN>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	7c7b      	ldrb	r3, [r7, #17]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ff8d 	bl	8002d6a <BCDtoBIN>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	7c3b      	ldrb	r3, [r7, #16]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ff85 	bl	8002d6a <BCDtoBIN>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	7cfb      	ldrb	r3, [r7, #19]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff7d 	bl	8002d6a <BCDtoBIN>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461a      	mov	r2, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	7d3b      	ldrb	r3, [r7, #20]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ff75 	bl	8002d6a <BCDtoBIN>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	701a      	strb	r2, [r3, #0]
 8002e88:	7d7b      	ldrb	r3, [r7, #21]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff6d 	bl	8002d6a <BCDtoBIN>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	7dbb      	ldrb	r3, [r7, #22]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff ff65 	bl	8002d6a <BCDtoBIN>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea6:	701a      	strb	r2, [r3, #0]
	
}
 8002ea8:	bf00      	nop
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40005400 	.word	0x40005400

08002eb4 <DS3231Set>:
void DS3231Set(uint8_t HH, uint8_t MM, uint8_t SS,uint8_t Date ,uint8_t D,uint8_t M,uint8_t Y){
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	4604      	mov	r4, r0
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	71fb      	strb	r3, [r7, #7]
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71bb      	strb	r3, [r7, #6]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	717b      	strb	r3, [r7, #5]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	713b      	strb	r3, [r7, #4]

	uint8_t data[7];
	
	data[0] = BINtoBCD(RTC_CheckMinMax(SS, 0, 59)); 
 8002ed2:	797b      	ldrb	r3, [r7, #5]
 8002ed4:	223b      	movs	r2, #59	@ 0x3b
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff81 	bl	8002de0 <RTC_CheckMinMax>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff5b 	bl	8002d9c <BINtoBCD>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	723b      	strb	r3, [r7, #8]
	data[1] = BINtoBCD(RTC_CheckMinMax(MM, 0, 59));
 8002eea:	79bb      	ldrb	r3, [r7, #6]
 8002eec:	223b      	movs	r2, #59	@ 0x3b
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff75 	bl	8002de0 <RTC_CheckMinMax>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff4f 	bl	8002d9c <BINtoBCD>
 8002efe:	4603      	mov	r3, r0
 8002f00:	727b      	strb	r3, [r7, #9]
	data[2] = BINtoBCD(RTC_CheckMinMax(HH, 0, 23));
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2217      	movs	r2, #23
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff69 	bl	8002de0 <RTC_CheckMinMax>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff43 	bl	8002d9c <BINtoBCD>
 8002f16:	4603      	mov	r3, r0
 8002f18:	72bb      	strb	r3, [r7, #10]
	data[3] = BINtoBCD(RTC_CheckMinMax(Date, 1, 7));
 8002f1a:	793b      	ldrb	r3, [r7, #4]
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	2101      	movs	r1, #1
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff5d 	bl	8002de0 <RTC_CheckMinMax>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff37 	bl	8002d9c <BINtoBCD>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	72fb      	strb	r3, [r7, #11]
	data[4] = BINtoBCD(RTC_CheckMinMax(D, 1, 31));
 8002f32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f36:	221f      	movs	r2, #31
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff ff50 	bl	8002de0 <RTC_CheckMinMax>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff ff2a 	bl	8002d9c <BINtoBCD>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	733b      	strb	r3, [r7, #12]
	data[5] = BINtoBCD(RTC_CheckMinMax(M, 1, 12));
 8002f4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f50:	220c      	movs	r2, #12
 8002f52:	2101      	movs	r1, #1
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff43 	bl	8002de0 <RTC_CheckMinMax>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff1d 	bl	8002d9c <BINtoBCD>
 8002f62:	4603      	mov	r3, r0
 8002f64:	737b      	strb	r3, [r7, #13]
	data[6] = BINtoBCD(RTC_CheckMinMax(Y, 0, 99));
 8002f66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f6a:	2263      	movs	r2, #99	@ 0x63
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff36 	bl	8002de0 <RTC_CheckMinMax>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ff10 	bl	8002d9c <BINtoBCD>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	73bb      	strb	r3, [r7, #14]
	
	I2Cx_WriteMulti(I2C1, 0x68, 0x00, data,7);
 8002f80:	f107 0308 	add.w	r3, r7, #8
 8002f84:	2207      	movs	r2, #7
 8002f86:	9200      	str	r2, [sp, #0]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2168      	movs	r1, #104	@ 0x68
 8002f8c:	4803      	ldr	r0, [pc, #12]	@ (8002f9c <DS3231Set+0xe8>)
 8002f8e:	f7ff fe87 	bl	8002ca0 <I2Cx_WriteMulti>
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd90      	pop	{r4, r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40005400 	.word	0x40005400

08002fa0 <USARTx_Init>:
 *      Author: FPTSHOP
 */

#include "uart.h"
void USARTx_Init(USART_TypeDef * USARTx,USART_Pin Pin,uint32_t baud)
{
 8002fa0:	b5b0      	push	{r4, r5, r7, lr}
 8002fa2:	b08a      	sub	sp, #40	@ 0x28
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	72fb      	strb	r3, [r7, #11]
	  IRQn_Type IRQn  ; 
	  uint8_t u = 0 ; 
 8002fae:	2300      	movs	r3, #0
 8002fb0:	77bb      	strb	r3, [r7, #30]
	  uint32_t PCLKx = 0 ; 
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
	  RCC->APB2ENR |=1<<0 ; 
 8002fb6:	4b87      	ldr	r3, [pc, #540]	@ (80031d4 <USARTx_Init+0x234>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	4a86      	ldr	r2, [pc, #536]	@ (80031d4 <USARTx_Init+0x234>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6193      	str	r3, [r2, #24]
    float USARTDIV = 0.0 ;
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
    uint16_t mantisa = 0 ,fraction= 0 ;  
 8002fc8:	2300      	movs	r3, #0
 8002fca:	827b      	strh	r3, [r7, #18]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	823b      	strh	r3, [r7, #16]
	
		if(USARTx == USART1 ){PCLKx =(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE1_Pos]); RCC->APB2ENR|=1<<14;IRQn = USART1_IRQn ; u=1;}
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4a81      	ldr	r2, [pc, #516]	@ (80031d8 <USARTx_Init+0x238>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d116      	bne.n	8003006 <USARTx_Init+0x66>
 8002fd8:	f7ff fa08 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b7d      	ldr	r3, [pc, #500]	@ (80031d4 <USARTx_Init+0x234>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fe8:	497c      	ldr	r1, [pc, #496]	@ (80031dc <USARTx_Init+0x23c>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	fa42 f303 	asr.w	r3, r2, r3
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	4b78      	ldr	r3, [pc, #480]	@ (80031d4 <USARTx_Init+0x234>)
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	4a77      	ldr	r2, [pc, #476]	@ (80031d4 <USARTx_Init+0x234>)
 8002ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ffc:	6193      	str	r3, [r2, #24]
 8002ffe:	2325      	movs	r3, #37	@ 0x25
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	2301      	movs	r3, #1
 8003004:	77bb      	strb	r3, [r7, #30]
		if(USARTx == USART2 ){PCLKx =(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]); RCC->APB1ENR|=1<<17;IRQn = USART2_IRQn ; u=2;} 
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4a75      	ldr	r2, [pc, #468]	@ (80031e0 <USARTx_Init+0x240>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d116      	bne.n	800303c <USARTx_Init+0x9c>
 800300e:	f7ff f9ed 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8003012:	4602      	mov	r2, r0
 8003014:	4b6f      	ldr	r3, [pc, #444]	@ (80031d4 <USARTx_Init+0x234>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	496f      	ldr	r1, [pc, #444]	@ (80031dc <USARTx_Init+0x23c>)
 8003020:	5ccb      	ldrb	r3, [r1, r3]
 8003022:	fa42 f303 	asr.w	r3, r2, r3
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	4b6a      	ldr	r3, [pc, #424]	@ (80031d4 <USARTx_Init+0x234>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	4a69      	ldr	r2, [pc, #420]	@ (80031d4 <USARTx_Init+0x234>)
 800302e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003032:	61d3      	str	r3, [r2, #28]
 8003034:	2326      	movs	r3, #38	@ 0x26
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	2302      	movs	r3, #2
 800303a:	77bb      	strb	r3, [r7, #30]
		if(USARTx == USART3 ){PCLKx =(HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]); RCC->APB1ENR|=1<<18;IRQn = USART3_IRQn ; u=3;}
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a69      	ldr	r2, [pc, #420]	@ (80031e4 <USARTx_Init+0x244>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d116      	bne.n	8003072 <USARTx_Init+0xd2>
 8003044:	f7ff f9d2 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b62      	ldr	r3, [pc, #392]	@ (80031d4 <USARTx_Init+0x234>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4961      	ldr	r1, [pc, #388]	@ (80031dc <USARTx_Init+0x23c>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa42 f303 	asr.w	r3, r2, r3
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	4b5d      	ldr	r3, [pc, #372]	@ (80031d4 <USARTx_Init+0x234>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4a5c      	ldr	r2, [pc, #368]	@ (80031d4 <USARTx_Init+0x234>)
 8003064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003068:	61d3      	str	r3, [r2, #28]
 800306a:	2327      	movs	r3, #39	@ 0x27
 800306c:	77fb      	strb	r3, [r7, #31]
 800306e:	2303      	movs	r3, #3
 8003070:	77bb      	strb	r3, [r7, #30]
	if(Pin==PA9PA10){//usart1
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10f      	bne.n	8003098 <USARTx_Init+0xf8>
			GPIOx_Init(GPIOA,9, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 8003078:	2303      	movs	r3, #3
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2300      	movs	r3, #0
 800307e:	2202      	movs	r2, #2
 8003080:	2109      	movs	r1, #9
 8003082:	4859      	ldr	r0, [pc, #356]	@ (80031e8 <USARTx_Init+0x248>)
 8003084:	f7ff fc2e 	bl	80028e4 <GPIOx_Init>
			GPIOx_Init(GPIOA,10, INPUT_FLOATING,NOPULL, 0);//rx
 8003088:	2300      	movs	r3, #0
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2300      	movs	r3, #0
 800308e:	2201      	movs	r2, #1
 8003090:	210a      	movs	r1, #10
 8003092:	4855      	ldr	r0, [pc, #340]	@ (80031e8 <USARTx_Init+0x248>)
 8003094:	f7ff fc26 	bl	80028e4 <GPIOx_Init>
		 }
	if(Pin==PB6PB7){//usart1
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d115      	bne.n	80030ca <USARTx_Init+0x12a>
			AFIO->MAPR|=1<<2;
 800309e:	4b53      	ldr	r3, [pc, #332]	@ (80031ec <USARTx_Init+0x24c>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4a52      	ldr	r2, [pc, #328]	@ (80031ec <USARTx_Init+0x24c>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	6053      	str	r3, [r2, #4]
			GPIOx_Init(GPIOB,6, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 80030aa:	2303      	movs	r3, #3
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2300      	movs	r3, #0
 80030b0:	2202      	movs	r2, #2
 80030b2:	2106      	movs	r1, #6
 80030b4:	484e      	ldr	r0, [pc, #312]	@ (80031f0 <USARTx_Init+0x250>)
 80030b6:	f7ff fc15 	bl	80028e4 <GPIOx_Init>
			GPIOx_Init(GPIOB,7, INPUT_FLOATING,NOPULL, 0);//rx
 80030ba:	2300      	movs	r3, #0
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2300      	movs	r3, #0
 80030c0:	2201      	movs	r2, #1
 80030c2:	2107      	movs	r1, #7
 80030c4:	484a      	ldr	r0, [pc, #296]	@ (80031f0 <USARTx_Init+0x250>)
 80030c6:	f7ff fc0d 	bl	80028e4 <GPIOx_Init>
		 }

		if(Pin==PA2PA3){//usart2
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d10f      	bne.n	80030f0 <USARTx_Init+0x150>
		GPIOx_Init(GPIOA,2, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 80030d0:	2303      	movs	r3, #3
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	2300      	movs	r3, #0
 80030d6:	2202      	movs	r2, #2
 80030d8:	2102      	movs	r1, #2
 80030da:	4843      	ldr	r0, [pc, #268]	@ (80031e8 <USARTx_Init+0x248>)
 80030dc:	f7ff fc02 	bl	80028e4 <GPIOx_Init>
		GPIOx_Init(GPIOA,3, INPUT_FLOATING,NOPULL, 0);//rx
 80030e0:	2300      	movs	r3, #0
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2300      	movs	r3, #0
 80030e6:	2201      	movs	r2, #1
 80030e8:	2103      	movs	r1, #3
 80030ea:	483f      	ldr	r0, [pc, #252]	@ (80031e8 <USARTx_Init+0x248>)
 80030ec:	f7ff fbfa 	bl	80028e4 <GPIOx_Init>
	 }
		if(Pin==PB10PB11){//usart3
 80030f0:	7afb      	ldrb	r3, [r7, #11]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d10f      	bne.n	8003116 <USARTx_Init+0x176>
		GPIOx_Init(GPIOB,10, OUTPUT_AF_PP,NOPULL, MODE_OUTPUT_50MHZ);//tx
 80030f6:	2303      	movs	r3, #3
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2300      	movs	r3, #0
 80030fc:	2202      	movs	r2, #2
 80030fe:	210a      	movs	r1, #10
 8003100:	483b      	ldr	r0, [pc, #236]	@ (80031f0 <USARTx_Init+0x250>)
 8003102:	f7ff fbef 	bl	80028e4 <GPIOx_Init>
		GPIOx_Init(GPIOB,11, INPUT_FLOATING,NOPULL, 0);//rx
 8003106:	2300      	movs	r3, #0
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	2201      	movs	r2, #1
 800310e:	210b      	movs	r1, #11
 8003110:	4837      	ldr	r0, [pc, #220]	@ (80031f0 <USARTx_Init+0x250>)
 8003112:	f7ff fbe7 	bl	80028e4 <GPIOx_Init>
	 }
		USARTDIV = (float)(PCLKx/(16.0*baud)) ;
 8003116:	69b8      	ldr	r0, [r7, #24]
 8003118:	f7fd f964 	bl	80003e4 <__aeabi_ui2d>
 800311c:	4604      	mov	r4, r0
 800311e:	460d      	mov	r5, r1
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fd f95f 	bl	80003e4 <__aeabi_ui2d>
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	4b32      	ldr	r3, [pc, #200]	@ (80031f4 <USARTx_Init+0x254>)
 800312c:	f7fd f9d4 	bl	80004d8 <__aeabi_dmul>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4620      	mov	r0, r4
 8003136:	4629      	mov	r1, r5
 8003138:	f7fd faf8 	bl	800072c <__aeabi_ddiv>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	f7fd fcc0 	bl	8000ac8 <__aeabi_d2f>
 8003148:	4603      	mov	r3, r0
 800314a:	617b      	str	r3, [r7, #20]
	    mantisa  = (uint16_t)USARTDIV ; 
 800314c:	6978      	ldr	r0, [r7, #20]
 800314e:	f7fd fff5 	bl	800113c <__aeabi_f2uiz>
 8003152:	4603      	mov	r3, r0
 8003154:	827b      	strh	r3, [r7, #18]
        fraction = (USARTDIV - mantisa)*16 ; 	
 8003156:	8a7b      	ldrh	r3, [r7, #18]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd fdbf 	bl	8000cdc <__aeabi_i2f>
 800315e:	4603      	mov	r3, r0
 8003160:	4619      	mov	r1, r3
 8003162:	6978      	ldr	r0, [r7, #20]
 8003164:	f7fd fd04 	bl	8000b70 <__aeabi_fsub>
 8003168:	4603      	mov	r3, r0
 800316a:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fe08 	bl	8000d84 <__aeabi_fmul>
 8003174:	4603      	mov	r3, r0
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd ffe0 	bl	800113c <__aeabi_f2uiz>
 800317c:	4603      	mov	r3, r0
 800317e:	823b      	strh	r3, [r7, #16]
		USARTx->BRR = (mantisa <<4)+fraction ; 
 8003180:	8a7b      	ldrh	r3, [r7, #18]
 8003182:	011a      	lsls	r2, r3, #4
 8003184:	8a3b      	ldrh	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	461a      	mov	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	609a      	str	r2, [r3, #8]
      USARTx->CR1 |=1<<2;//tx
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f043 0204 	orr.w	r2, r3, #4
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	60da      	str	r2, [r3, #12]
	  USARTx->CR1 |=1<<3;//rx
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f043 0208 	orr.w	r2, r3, #8
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	60da      	str	r2, [r3, #12]
	  USARTx->CR1 |=1<<13 ; //enable usart
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	60da      	str	r2, [r3, #12]
    USARTx->CR1 |=1<<5; //it
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	60da      	str	r2, [r3, #12]
    NVICx_Init(IRQn, 1, u);
 80031be:	7fba      	ldrb	r2, [r7, #30]
 80031c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031c4:	2101      	movs	r1, #1
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fb6a 	bl	80028a0 <NVICx_Init>
}
 80031cc:	bf00      	nop
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bdb0      	pop	{r4, r5, r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40013800 	.word	0x40013800
 80031dc:	0800aad4 	.word	0x0800aad4
 80031e0:	40004400 	.word	0x40004400
 80031e4:	40004800 	.word	0x40004800
 80031e8:	40010800 	.word	0x40010800
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40010c00 	.word	0x40010c00
 80031f4:	40300000 	.word	0x40300000

080031f8 <USARTtoBUFF>:
char USART3_BUFFER[USART3_BUFFER_SIZE];

USART_ST USART1_ST  ={USART1_BUFFER,USART1_BUFFER_SIZE , 0, 0, 0} ;
USART_ST USART2_ST  ={USART2_BUFFER,USART2_BUFFER_SIZE , 0, 0, 0} ;
USART_ST USART3_ST  ={USART3_BUFFER,USART3_BUFFER_SIZE , 0, 0, 0} ;
void USARTtoBUFF(USART_ST *u , char c){
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	70fb      	strb	r3, [r7, #3]
	if(u->in<u->size){
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	88da      	ldrh	r2, [r3, #6]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	889b      	ldrh	r3, [r3, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d21b      	bcs.n	8003248 <USARTtoBUFF+0x50>
		 u->buffer[u->in] = c;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	88d2      	ldrh	r2, [r2, #6]
 8003218:	4413      	add	r3, r2
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	701a      	strb	r2, [r3, #0]
		 u->in++;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	88db      	ldrh	r3, [r3, #6]
 8003222:	3301      	adds	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	80da      	strh	r2, [r3, #6]
		 u->num++;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	895b      	ldrh	r3, [r3, #10]
 800322e:	3301      	adds	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	815a      	strh	r2, [r3, #10]
		if(u->in==u->size) u->in = 0 ;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	88da      	ldrh	r2, [r3, #6]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	889b      	ldrh	r3, [r3, #4]
 800323e:	429a      	cmp	r2, r3
 8003240:	d102      	bne.n	8003248 <USARTtoBUFF+0x50>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	80da      	strh	r2, [r3, #6]
	}
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <USART_PutC>:
    // Thêm null terminator
    if(i < len) str[i] = '\0';
    
    return i; 
}
void USART_PutC(USART_TypeDef * USARTx, char c) {
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	70fb      	strb	r3, [r7, #3]
    while(!(USARTx->SR & (1<<7)));  // Ð?i d?n khi TXE = 1
 800325e:	bf00      	nop
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f9      	beq.n	8003260 <USART_PutC+0xe>
    USARTx->DR = c;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	605a      	str	r2, [r3, #4]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <USART1_IRQHandler>:

 while(*str) USART_PutC(USARTx ,*str ++) ;

}
void USART1_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
    if(USART1->SR & (1<<5)) {           // ? USART1 check USART1
 8003282:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <USART1_IRQHandler+0x2c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <USART1_IRQHandler+0x22>
        char data = USART1->DR;                // ? Ð?c t? USART1
 800328e:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <USART1_IRQHandler+0x2c>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART1_ST, data);         // ? Luu vào buffer USART1
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	4619      	mov	r1, r3
 8003298:	4804      	ldr	r0, [pc, #16]	@ (80032ac <USART1_IRQHandler+0x30>)
 800329a:	f7ff ffad 	bl	80031f8 <USARTtoBUFF>
    }
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40013800 	.word	0x40013800
 80032ac:	2000000c 	.word	0x2000000c

080032b0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
    if(USART2->SR & (1<<5)) {           // ? USART2 check USART2  
 80032b6:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <USART2_IRQHandler+0x2c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <USART2_IRQHandler+0x22>
        char data = USART2->DR;                // ? Ð?c t? USART2
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <USART2_IRQHandler+0x2c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART2_ST, data);         // ? Luu vào buffer USART2
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4804      	ldr	r0, [pc, #16]	@ (80032e0 <USART2_IRQHandler+0x30>)
 80032ce:	f7ff ff93 	bl	80031f8 <USARTtoBUFF>
    }
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40004400 	.word	0x40004400
 80032e0:	20000018 	.word	0x20000018

080032e4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
    if(USART3->SR & (1<<5)) {           // ? USART3 dã dúng
 80032ea:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <USART3_IRQHandler+0x2c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <USART3_IRQHandler+0x22>
        char data = USART3->DR;                // ? Ð?c t? USART3
 80032f6:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <USART3_IRQHandler+0x2c>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	71fb      	strb	r3, [r7, #7]
        USARTtoBUFF(&USART3_ST, data);         // ? Luu vào buffer USART3
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	4619      	mov	r1, r3
 8003300:	4804      	ldr	r0, [pc, #16]	@ (8003314 <USART3_IRQHandler+0x30>)
 8003302:	f7ff ff79 	bl	80031f8 <USARTtoBUFF>
    }
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40004800 	.word	0x40004800
 8003314:	20000024 	.word	0x20000024

08003318 <_write>:

// =============================================================================
// PRINTF UART REDIRECT
// =============================================================================
#ifdef __GNUC__
int _write(int file, char *ptr, int len) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e00a      	b.n	8003340 <_write+0x28>
        USART_PutC(USART1, ptr[i]);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	4413      	add	r3, r2
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	4619      	mov	r1, r3
 8003334:	4807      	ldr	r0, [pc, #28]	@ (8003354 <_write+0x3c>)
 8003336:	f7ff ff8c 	bl	8003252 <USART_PutC>
    for (int i = 0; i < len; i++) {
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	3301      	adds	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	dbf0      	blt.n	800332a <_write+0x12>
    }
    return len;
 8003348:	687b      	ldr	r3, [r7, #4]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40013800 	.word	0x40013800

08003358 <InitMQ137Sensor>:
 *
 *  Created on: Jun 30, 2025
 *      Author: FPTSHOP
 */
#include "gas_sensor.h"
void InitMQ137Sensor(GasSensor_t* sensor) {
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    // Cấu hình base sensor
    sensor->base.sensor_id = 0;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
    sensor->base.sensor_type = SENSOR_TYPE_MQ137;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	705a      	strb	r2, [r3, #1]
    strcpy(sensor->base.sensor_name, "MQ137");
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3302      	adds	r3, #2
 8003370:	4a20      	ldr	r2, [pc, #128]	@ (80033f4 <InitMQ137Sensor+0x9c>)
 8003372:	6810      	ldr	r0, [r2, #0]
 8003374:	6018      	str	r0, [r3, #0]
 8003376:	8892      	ldrh	r2, [r2, #4]
 8003378:	809a      	strh	r2, [r3, #4]
    sensor->base.is_enabled = 1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	749a      	strb	r2, [r3, #18]
    sensor->base.adc_channel = MQ137_ADC_CHANNEL;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	615a      	str	r2, [r3, #20]
    sensor->base.digital_port = MQ137_DIGITAL_PORT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1b      	ldr	r2, [pc, #108]	@ (80033f8 <InitMQ137Sensor+0xa0>)
 800338a:	619a      	str	r2, [r3, #24]
    sensor->base.digital_pin = MQ137_DIGITAL_PIN;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2208      	movs	r2, #8
 8003390:	839a      	strh	r2, [r3, #28]
    sensor->base.r0_value = 10000.0f; // Giá trị mặc định, cần hiệu chuẩn
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a19      	ldr	r2, [pc, #100]	@ (80033fc <InitMQ137Sensor+0xa4>)
 8003396:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Cấu hình gas sensor
    sensor->gas_type = GAS_TYPE_NH3;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    strcpy(sensor->gas_name, "NH3");
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3339      	adds	r3, #57	@ 0x39
 80033a4:	4a16      	ldr	r2, [pc, #88]	@ (8003400 <InitMQ137Sensor+0xa8>)
 80033a6:	6810      	ldr	r0, [r2, #0]
 80033a8:	6018      	str	r0, [r3, #0]
    strcpy(sensor->unit, "ppm");
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3341      	adds	r3, #65	@ 0x41
 80033ae:	4a15      	ldr	r2, [pc, #84]	@ (8003404 <InitMQ137Sensor+0xac>)
 80033b0:	6810      	ldr	r0, [r2, #0]
 80033b2:	6018      	str	r0, [r3, #0]
    
    // Ngưỡng cảnh báo NH3
    sensor->threshold_low = 15.0f;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a14      	ldr	r2, [pc, #80]	@ (8003408 <InitMQ137Sensor+0xb0>)
 80033b8:	659a      	str	r2, [r3, #88]	@ 0x58
    sensor->threshold_high = 25.0f;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a13      	ldr	r2, [pc, #76]	@ (800340c <InitMQ137Sensor+0xb4>)
 80033be:	65da      	str	r2, [r3, #92]	@ 0x5c
    sensor->threshold_danger = 50.0f;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a13      	ldr	r2, [pc, #76]	@ (8003410 <InitMQ137Sensor+0xb8>)
 80033c4:	661a      	str	r2, [r3, #96]	@ 0x60
    
    // Thông số đặc tuyến MQ137 cho NH3
    sensor->curve_a = 102.2f;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a12      	ldr	r2, [pc, #72]	@ (8003414 <InitMQ137Sensor+0xbc>)
 80033ca:	669a      	str	r2, [r3, #104]	@ 0x68
    sensor->curve_b = -2.473f;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a12      	ldr	r2, [pc, #72]	@ (8003418 <InitMQ137Sensor+0xc0>)
 80033d0:	66da      	str	r2, [r3, #108]	@ 0x6c
    sensor->min_ppm = 0.0f;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	671a      	str	r2, [r3, #112]	@ 0x70
    sensor->max_ppm = 500.0f;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a0f      	ldr	r2, [pc, #60]	@ (800341c <InitMQ137Sensor+0xc4>)
 80033de:	675a      	str	r2, [r3, #116]	@ 0x74
    
    // Khởi tạo giá trị
    sensor->alarm_level = ALARM_NORMAL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	08009f38 	.word	0x08009f38
 80033f8:	40010800 	.word	0x40010800
 80033fc:	461c4000 	.word	0x461c4000
 8003400:	08009f40 	.word	0x08009f40
 8003404:	08009f44 	.word	0x08009f44
 8003408:	41700000 	.word	0x41700000
 800340c:	41c80000 	.word	0x41c80000
 8003410:	42480000 	.word	0x42480000
 8003414:	42cc6666 	.word	0x42cc6666
 8003418:	c01e45a2 	.word	0xc01e45a2
 800341c:	43fa0000 	.word	0x43fa0000

08003420 <InitMQ135Sensor>:

/**
 * @brief Khởi tạo cảm biến MQ135 (CO2)
 */
void InitMQ135Sensor(GasSensor_t* sensor) {
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
    // Cấu hình base sensor
    sensor->base.sensor_id = 1;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	701a      	strb	r2, [r3, #0]
    sensor->base.sensor_type = SENSOR_TYPE_MQ135;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	705a      	strb	r2, [r3, #1]
    strcpy(sensor->base.sensor_name, "MQ135");
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3302      	adds	r3, #2
 8003438:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <InitMQ135Sensor+0x98>)
 800343a:	6810      	ldr	r0, [r2, #0]
 800343c:	6018      	str	r0, [r3, #0]
 800343e:	8892      	ldrh	r2, [r2, #4]
 8003440:	809a      	strh	r2, [r3, #4]
    sensor->base.is_enabled = 1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	749a      	strb	r2, [r3, #18]
    sensor->base.adc_channel = MQ135_ADC_CHANNEL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	615a      	str	r2, [r3, #20]
    sensor->base.digital_port = MQ135_DIGITAL_PORT;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a1a      	ldr	r2, [pc, #104]	@ (80034bc <InitMQ135Sensor+0x9c>)
 8003452:	619a      	str	r2, [r3, #24]
    sensor->base.digital_pin = MQ135_DIGITAL_PIN;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2210      	movs	r2, #16
 8003458:	839a      	strh	r2, [r3, #28]
    sensor->base.r0_value = 10000.0f; // Giá trị mặc định, cần hiệu chuẩn
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a18      	ldr	r2, [pc, #96]	@ (80034c0 <InitMQ135Sensor+0xa0>)
 800345e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // Cấu hình gas sensor
    sensor->gas_type = GAS_TYPE_CO2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    strcpy(sensor->gas_name, "CO2");
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3339      	adds	r3, #57	@ 0x39
 800346c:	4a15      	ldr	r2, [pc, #84]	@ (80034c4 <InitMQ135Sensor+0xa4>)
 800346e:	6810      	ldr	r0, [r2, #0]
 8003470:	6018      	str	r0, [r3, #0]
    strcpy(sensor->unit, "ppm");
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3341      	adds	r3, #65	@ 0x41
 8003476:	4a14      	ldr	r2, [pc, #80]	@ (80034c8 <InitMQ135Sensor+0xa8>)
 8003478:	6810      	ldr	r0, [r2, #0]
 800347a:	6018      	str	r0, [r3, #0]
    
    // Ngưỡng cảnh báo CO2
    sensor->threshold_low = 800.0f;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a13      	ldr	r2, [pc, #76]	@ (80034cc <InitMQ135Sensor+0xac>)
 8003480:	659a      	str	r2, [r3, #88]	@ 0x58
    sensor->threshold_high = 1200.0f;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a12      	ldr	r2, [pc, #72]	@ (80034d0 <InitMQ135Sensor+0xb0>)
 8003486:	65da      	str	r2, [r3, #92]	@ 0x5c
    sensor->threshold_danger = 2000.0f;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a12      	ldr	r2, [pc, #72]	@ (80034d4 <InitMQ135Sensor+0xb4>)
 800348c:	661a      	str	r2, [r3, #96]	@ 0x60
    
    // Thông số đặc tuyến MQ135 cho CO2
    sensor->curve_a = 116.6f;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a11      	ldr	r2, [pc, #68]	@ (80034d8 <InitMQ135Sensor+0xb8>)
 8003492:	669a      	str	r2, [r3, #104]	@ 0x68
    sensor->curve_b = -2.769f;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a11      	ldr	r2, [pc, #68]	@ (80034dc <InitMQ135Sensor+0xbc>)
 8003498:	66da      	str	r2, [r3, #108]	@ 0x6c
    sensor->min_ppm = 300.0f;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a10      	ldr	r2, [pc, #64]	@ (80034e0 <InitMQ135Sensor+0xc0>)
 800349e:	671a      	str	r2, [r3, #112]	@ 0x70
    sensor->max_ppm = 5000.0f;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a10      	ldr	r2, [pc, #64]	@ (80034e4 <InitMQ135Sensor+0xc4>)
 80034a4:	675a      	str	r2, [r3, #116]	@ 0x74
    
    // Khởi tạo giá trị
    sensor->alarm_level = ALARM_NORMAL;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	08009f48 	.word	0x08009f48
 80034bc:	40010800 	.word	0x40010800
 80034c0:	461c4000 	.word	0x461c4000
 80034c4:	08009f50 	.word	0x08009f50
 80034c8:	08009f44 	.word	0x08009f44
 80034cc:	44480000 	.word	0x44480000
 80034d0:	44960000 	.word	0x44960000
 80034d4:	44fa0000 	.word	0x44fa0000
 80034d8:	42e93333 	.word	0x42e93333
 80034dc:	c031374c 	.word	0xc031374c
 80034e0:	43960000 	.word	0x43960000
 80034e4:	459c4000 	.word	0x459c4000

080034e8 <ProcessGasSensor>:
void ProcessGasSensor(GasSensor_t* sensor) {
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

    sensor->base.raw_voltage = ReadADC_Voltage(sensor->base.adc_channel);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f9b5 	bl	8003864 <ReadADC_Voltage>
 80034fa:	4602      	mov	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	621a      	str	r2, [r3, #32]
    sensor->base.digital_state = ReadDigitalState(sensor->base.digital_port, sensor->base.digital_pin);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8b9b      	ldrh	r3, [r3, #28]
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f000 f9da 	bl	80038c4 <ReadDigitalState>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    sensor->base.timestamp = HAL_GetTick();
 800351a:	f7fe fa95 	bl	8001a48 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	631a      	str	r2, [r3, #48]	@ 0x30

    // Tính toán điện trở và tỷ lệ Rs/R0
    if(sensor->base.raw_voltage > 0.2f) { // Ngưỡng thấp hơn cho ADC 3.3V
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	493f      	ldr	r1, [pc, #252]	@ (8003628 <ProcessGasSensor+0x140>)
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fde6 	bl	80010fc <__aeabi_fcmpgt>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d059      	beq.n	80035ea <ProcessGasSensor+0x102>
        sensor->base.resistance = CalculateResistance(sensor->base.raw_voltage);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f9d4 	bl	80038e8 <CalculateResistance>
 8003540:	4602      	mov	r2, r0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	625a      	str	r2, [r3, #36]	@ 0x24
        sensor->base.rs_r0_ratio = sensor->base.resistance / sensor->base.r0_value;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354e:	4619      	mov	r1, r3
 8003550:	4610      	mov	r0, r2
 8003552:	f7fd fccb 	bl	8000eec <__aeabi_fdiv>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	629a      	str	r2, [r3, #40]	@ 0x28

        // Tính nồng độ khí
        sensor->gas_ppm = CalculateGasPPM(sensor->base.rs_r0_ratio, sensor->curve_a, sensor->curve_b);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800356a:	461a      	mov	r2, r3
 800356c:	f000 f9e4 	bl	8003938 <CalculateGasPPM>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	64da      	str	r2, [r3, #76]	@ 0x4c

        // Giới hạn giá trị trong khoảng hợp lệ
        if(sensor->gas_ppm < sensor->min_ppm) sensor->gas_ppm = sensor->min_ppm;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	4619      	mov	r1, r3
 8003580:	4610      	mov	r0, r2
 8003582:	f7fd fd9d 	bl	80010c0 <__aeabi_fcmplt>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <ProcessGasSensor+0xac>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	64da      	str	r2, [r3, #76]	@ 0x4c
        if(sensor->gas_ppm > sensor->max_ppm) sensor->gas_ppm = sensor->max_ppm;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f7fd fdac 	bl	80010fc <__aeabi_fcmpgt>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <ProcessGasSensor+0xca>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	64da      	str	r2, [r3, #76]	@ 0x4c

        // Lọc nhiễu đơn giản (moving average)
        sensor->filtered_ppm = 0.8f * sensor->filtered_ppm + 0.2f * sensor->gas_ppm;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b6:	491d      	ldr	r1, [pc, #116]	@ (800362c <ProcessGasSensor+0x144>)
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fd fbe3 	bl	8000d84 <__aeabi_fmul>
 80035be:	4603      	mov	r3, r0
 80035c0:	461c      	mov	r4, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c6:	4918      	ldr	r1, [pc, #96]	@ (8003628 <ProcessGasSensor+0x140>)
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fd fbdb 	bl	8000d84 <__aeabi_fmul>
 80035ce:	4603      	mov	r3, r0
 80035d0:	4619      	mov	r1, r3
 80035d2:	4620      	mov	r0, r4
 80035d4:	f7fd face 	bl	8000b74 <__addsf3>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	651a      	str	r2, [r3, #80]	@ 0x50
        sensor->average_ppm = sensor->filtered_ppm;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80035e8:	e00f      	b.n	800360a <ProcessGasSensor+0x122>

    } else {
        sensor->base.resistance = 0.0f;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	625a      	str	r2, [r3, #36]	@ 0x24
        sensor->base.rs_r0_ratio = 0.0f;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	629a      	str	r2, [r3, #40]	@ 0x28
        sensor->gas_ppm = sensor->min_ppm;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	64da      	str	r2, [r3, #76]	@ 0x4c
        sensor->filtered_ppm = sensor->min_ppm;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    // Validate dữ liệu
    sensor->base.is_valid = ValidateGasSensor(sensor);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f810 	bl	8003630 <ValidateGasSensor>
 8003610:	4603      	mov	r3, r0
 8003612:	461a      	mov	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	74da      	strb	r2, [r3, #19]

    // Cập nhật mức cảnh báo
    UpdateAlarmLevel(sensor);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f85b 	bl	80036d4 <UpdateAlarmLevel>
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	bf00      	nop
 8003628:	3e4ccccd 	.word	0x3e4ccccd
 800362c:	3f4ccccd 	.word	0x3f4ccccd

08003630 <ValidateGasSensor>:

/**
 * @brief Validate dữ liệu cảm biến (cập nhật cho điện áp 3.3V)
 */
uint8_t ValidateGasSensor(GasSensor_t* sensor) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
    // Kiểm tra điện áp trong khoảng hợp lệ (0.1V - 4.8V cho cảm biến 5V)
    // Sau khi qua mạch chia áp, tín hiệu sẽ từ 0.066V - 3.168V tại ADC
    if(sensor->base.raw_voltage < 0.2f || sensor->base.raw_voltage > 4.8f) {
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4921      	ldr	r1, [pc, #132]	@ (80036c4 <ValidateGasSensor+0x94>)
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fd3e 	bl	80010c0 <__aeabi_fcmplt>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <ValidateGasSensor+0x2c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	491e      	ldr	r1, [pc, #120]	@ (80036c8 <ValidateGasSensor+0x98>)
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd fd53 	bl	80010fc <__aeabi_fcmpgt>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <ValidateGasSensor+0x30>
        return 0;
 800365c:	2300      	movs	r3, #0
 800365e:	e02c      	b.n	80036ba <ValidateGasSensor+0x8a>
    }
    
    // Kiểm tra điện trở trong khoảng hợp lệ
    if(sensor->base.resistance < 1000.0f || sensor->base.resistance > 200000.0f) {
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	4919      	ldr	r1, [pc, #100]	@ (80036cc <ValidateGasSensor+0x9c>)
 8003666:	4618      	mov	r0, r3
 8003668:	f7fd fd2a 	bl	80010c0 <__aeabi_fcmplt>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <ValidateGasSensor+0x54>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	4916      	ldr	r1, [pc, #88]	@ (80036d0 <ValidateGasSensor+0xa0>)
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd fd3f 	bl	80010fc <__aeabi_fcmpgt>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <ValidateGasSensor+0x58>
        return 0;
 8003684:	2300      	movs	r3, #0
 8003686:	e018      	b.n	80036ba <ValidateGasSensor+0x8a>
    }
    
    // Kiểm tra nồng độ khí trong khoảng hợp lệ
    if(sensor->gas_ppm < sensor->min_ppm || sensor->gas_ppm > sensor->max_ppm) {
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f7fd fd14 	bl	80010c0 <__aeabi_fcmplt>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <ValidateGasSensor+0x84>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	f7fd fd27 	bl	80010fc <__aeabi_fcmpgt>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <ValidateGasSensor+0x88>
        return 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e000      	b.n	80036ba <ValidateGasSensor+0x8a>
    }
    
    return 1; // Dữ liệu hợp lệ
 80036b8:	2301      	movs	r3, #1
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	3e4ccccd 	.word	0x3e4ccccd
 80036c8:	4099999a 	.word	0x4099999a
 80036cc:	447a0000 	.word	0x447a0000
 80036d0:	48435000 	.word	0x48435000

080036d4 <UpdateAlarmLevel>:

/**
 * @brief Cập nhật mức cảnh báo cho cảm biến
 */
void UpdateAlarmLevel(GasSensor_t* sensor) {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
    sensor->alarm_level = DetermineAlarmLevel(sensor->filtered_ppm, 
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ec:	f000 f943 	bl	8003976 <DetermineAlarmLevel>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
                                            sensor->threshold_low,
                                            sensor->threshold_high, 
                                            sensor->threshold_danger);
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <PrintSensorDetails>:
void PrintSensorDetails(GasSensor_t* sensor) {
 8003704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003708:	b08b      	sub	sp, #44	@ 0x2c
 800370a:	af04      	add	r7, sp, #16
 800370c:	6078      	str	r0, [r7, #4]
    printf("\r\n--- %s (%s) ---\r\n", sensor->base.sensor_name, sensor->gas_name);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	1c99      	adds	r1, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3339      	adds	r3, #57	@ 0x39
 8003716:	461a      	mov	r2, r3
 8003718:	4845      	ldr	r0, [pc, #276]	@ (8003830 <PrintSensorDetails+0x12c>)
 800371a:	f001 fff5 	bl	8005708 <iprintf>
    printf("ID: %d | TRANG THAI: %s\r\n", 
           sensor->base.sensor_id, 
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	781b      	ldrb	r3, [r3, #0]
    printf("ID: %d | TRANG THAI: %s\r\n", 
 8003722:	4619      	mov	r1, r3
           sensor->base.is_enabled ? (sensor->base.is_valid ? "HOAT DONG" : "LOI") : "OFF");
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	7c9b      	ldrb	r3, [r3, #18]
    printf("ID: %d | TRANG THAI: %s\r\n", 
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <PrintSensorDetails+0x38>
           sensor->base.is_enabled ? (sensor->base.is_valid ? "HOAT DONG" : "LOI") : "OFF");
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7cdb      	ldrb	r3, [r3, #19]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <PrintSensorDetails+0x34>
 8003734:	4b3f      	ldr	r3, [pc, #252]	@ (8003834 <PrintSensorDetails+0x130>)
 8003736:	e002      	b.n	800373e <PrintSensorDetails+0x3a>
 8003738:	4b3f      	ldr	r3, [pc, #252]	@ (8003838 <PrintSensorDetails+0x134>)
 800373a:	e000      	b.n	800373e <PrintSensorDetails+0x3a>
    printf("ID: %d | TRANG THAI: %s\r\n", 
 800373c:	4b3f      	ldr	r3, [pc, #252]	@ (800383c <PrintSensorDetails+0x138>)
 800373e:	461a      	mov	r2, r3
 8003740:	483f      	ldr	r0, [pc, #252]	@ (8003840 <PrintSensorDetails+0x13c>)
 8003742:	f001 ffe1 	bl	8005708 <iprintf>
    printf("DIEN AP: %.3f V | DIEN TRO: %.1f Ω\r\n", 
           sensor->base.raw_voltage, sensor->base.resistance);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
    printf("DIEN AP: %.3f V | DIEN TRO: %.1f Ω\r\n", 
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc fe6c 	bl	8000428 <__aeabi_f2d>
 8003750:	4604      	mov	r4, r0
 8003752:	460d      	mov	r5, r1
           sensor->base.raw_voltage, sensor->base.resistance);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    printf("DIEN AP: %.3f V | DIEN TRO: %.1f Ω\r\n", 
 8003758:	4618      	mov	r0, r3
 800375a:	f7fc fe65 	bl	8000428 <__aeabi_f2d>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	e9cd 2300 	strd	r2, r3, [sp]
 8003766:	4622      	mov	r2, r4
 8003768:	462b      	mov	r3, r5
 800376a:	4836      	ldr	r0, [pc, #216]	@ (8003844 <PrintSensorDetails+0x140>)
 800376c:	f001 ffcc 	bl	8005708 <iprintf>
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
           sensor->base.rs_r0_ratio, sensor->base.r0_value);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
 8003774:	4618      	mov	r0, r3
 8003776:	f7fc fe57 	bl	8000428 <__aeabi_f2d>
 800377a:	4604      	mov	r4, r0
 800377c:	460d      	mov	r5, r1
           sensor->base.rs_r0_ratio, sensor->base.r0_value);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    printf("Rs/R0: %.3f | R0: %.1f Ω\r\n", 
 8003782:	4618      	mov	r0, r3
 8003784:	f7fc fe50 	bl	8000428 <__aeabi_f2d>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	e9cd 2300 	strd	r2, r3, [sp]
 8003790:	4622      	mov	r2, r4
 8003792:	462b      	mov	r3, r5
 8003794:	482c      	ldr	r0, [pc, #176]	@ (8003848 <PrintSensorDetails+0x144>)
 8003796:	f001 ffb7 	bl	8005708 <iprintf>
    printf("NONG DO: %.1f %s \r\n", 
           sensor->gas_ppm, sensor->unit);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    printf("NONG DO: %.1f %s \r\n", 
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fc fe42 	bl	8000428 <__aeabi_f2d>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
           sensor->gas_ppm, sensor->unit);
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	3141      	adds	r1, #65	@ 0x41
    printf("NONG DO: %.1f %s \r\n", 
 80037ac:	9100      	str	r1, [sp, #0]
 80037ae:	4827      	ldr	r0, [pc, #156]	@ (800384c <PrintSensorDetails+0x148>)
 80037b0:	f001 ffaa 	bl	8005708 <iprintf>
    printf("Digital: %s\r\n", sensor->base.digital_state ? "HIGH" : "LOW");
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <PrintSensorDetails+0xbe>
 80037be:	4b24      	ldr	r3, [pc, #144]	@ (8003850 <PrintSensorDetails+0x14c>)
 80037c0:	e000      	b.n	80037c4 <PrintSensorDetails+0xc0>
 80037c2:	4b24      	ldr	r3, [pc, #144]	@ (8003854 <PrintSensorDetails+0x150>)
 80037c4:	4619      	mov	r1, r3
 80037c6:	4824      	ldr	r0, [pc, #144]	@ (8003858 <PrintSensorDetails+0x154>)
 80037c8:	f001 ff9e 	bl	8005708 <iprintf>
    
    const char* alarm_text[] = {"BINH THUONG", "THAP", "CAO", "NGUY HIEM"};
 80037cc:	4b23      	ldr	r3, [pc, #140]	@ (800385c <PrintSensorDetails+0x158>)
 80037ce:	f107 0408 	add.w	r4, r7, #8
 80037d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
           alarm_text[sensor->alarm_level],
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	3318      	adds	r3, #24
 80037e2:	443b      	add	r3, r7
 80037e4:	f853 6c10 	ldr.w	r6, [r3, #-16]
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fc fe1b 	bl	8000428 <__aeabi_f2d>
 80037f2:	4680      	mov	r8, r0
 80037f4:	4689      	mov	r9, r1
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fc fe14 	bl	8000428 <__aeabi_f2d>
 8003800:	4604      	mov	r4, r0
 8003802:	460d      	mov	r5, r1
           sensor->threshold_low, sensor->threshold_high, sensor->threshold_danger);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    printf("CANH BAO: %s (%.1f/%.1f/%.1f)\r\n", 
 8003808:	4618      	mov	r0, r3
 800380a:	f7fc fe0d 	bl	8000428 <__aeabi_f2d>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003816:	e9cd 4500 	strd	r4, r5, [sp]
 800381a:	4642      	mov	r2, r8
 800381c:	464b      	mov	r3, r9
 800381e:	4631      	mov	r1, r6
 8003820:	480f      	ldr	r0, [pc, #60]	@ (8003860 <PrintSensorDetails+0x15c>)
 8003822:	f001 ff71 	bl	8005708 <iprintf>
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003830:	08009f54 	.word	0x08009f54
 8003834:	08009f68 	.word	0x08009f68
 8003838:	08009f74 	.word	0x08009f74
 800383c:	08009f78 	.word	0x08009f78
 8003840:	08009f7c 	.word	0x08009f7c
 8003844:	08009f98 	.word	0x08009f98
 8003848:	08009fc0 	.word	0x08009fc0
 800384c:	08009fdc 	.word	0x08009fdc
 8003850:	08009ff0 	.word	0x08009ff0
 8003854:	08009ff8 	.word	0x08009ff8
 8003858:	08009ffc 	.word	0x08009ffc
 800385c:	0800a050 	.word	0x0800a050
 8003860:	0800a00c 	.word	0x0800a00c

08003864 <ReadADC_Voltage>:
 *
 *  Created on: Jun 30, 2025
 *      Author: FPTSHOP
 */
#include "sensor_hardware.h"
float ReadADC_Voltage(uint32_t channel) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
    // Đọc giá trị ADC trung bình
    float adc_avg = ADCx_Read_TB(ADC1, channel, 10);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	220a      	movs	r2, #10
 8003872:	4619      	mov	r1, r3
 8003874:	480f      	ldr	r0, [pc, #60]	@ (80038b4 <ReadADC_Voltage+0x50>)
 8003876:	f7fe ff60 	bl	800273a <ADCx_Read_TB>
 800387a:	4603      	mov	r3, r0
 800387c:	4618      	mov	r0, r3
 800387e:	f7fd fa29 	bl	8000cd4 <__aeabi_ui2f>
 8003882:	4603      	mov	r3, r0
 8003884:	617b      	str	r3, [r7, #20]
    
    // Chuyển đổi giá trị ADC sang điện áp tại chân ADC
    float adc_voltage = adc_avg * ADC_VREF / ADC_RESOLUTION;
 8003886:	490c      	ldr	r1, [pc, #48]	@ (80038b8 <ReadADC_Voltage+0x54>)
 8003888:	6978      	ldr	r0, [r7, #20]
 800388a:	f7fd fa7b 	bl	8000d84 <__aeabi_fmul>
 800388e:	4603      	mov	r3, r0
 8003890:	490a      	ldr	r1, [pc, #40]	@ (80038bc <ReadADC_Voltage+0x58>)
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd fb2a 	bl	8000eec <__aeabi_fdiv>
 8003898:	4603      	mov	r3, r0
 800389a:	613b      	str	r3, [r7, #16]
    
    // Hiệu chỉnh cho mạch chia áp để có điện áp thực của cảm biến
    float sensor_voltage = adc_voltage / VOLTAGE_DIVIDER_RATIO;
 800389c:	4908      	ldr	r1, [pc, #32]	@ (80038c0 <ReadADC_Voltage+0x5c>)
 800389e:	6938      	ldr	r0, [r7, #16]
 80038a0:	f7fd fb24 	bl	8000eec <__aeabi_fdiv>
 80038a4:	4603      	mov	r3, r0
 80038a6:	60fb      	str	r3, [r7, #12]
    
    return sensor_voltage;
 80038a8:	68fb      	ldr	r3, [r7, #12]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40012400 	.word	0x40012400
 80038b8:	40533333 	.word	0x40533333
 80038bc:	457ff000 	.word	0x457ff000
 80038c0:	3f28f5c3 	.word	0x3f28f5c3

080038c4 <ReadDigitalState>:
/**
 * @brief Đọc trạng thái digital
 */
uint8_t ReadDigitalState(GPIO_TypeDef* port, uint16_t pin) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
    return GPIOx_ReadPin(port , pin );
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff f8a2 	bl	8002a20 <GPIOx_ReadPin>
 80038dc:	4603      	mov	r3, r0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <CalculateResistance>:

/**
 * @brief Tính điện trở cảm biến (hiệu chỉnh cho nguồn 5V)
 */
float CalculateResistance(float voltage) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
    if(voltage <= 0.1f) return 0.0f;
 80038f0:	490e      	ldr	r1, [pc, #56]	@ (800392c <CalculateResistance+0x44>)
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd fbee 	bl	80010d4 <__aeabi_fcmple>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <CalculateResistance+0x1c>
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e00e      	b.n	8003922 <CalculateResistance+0x3a>
    
    // Công thức tính điện trở cảm biến với nguồn cấp 5V
    // Rs = (Vcc - Vs) / Vs * RL
    // Trong đó: Vcc = 5V, Vs = điện áp đo được, RL = điện trở tải
    return ((SENSOR_VCC - voltage) / voltage) * LOAD_RESISTANCE;
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	480a      	ldr	r0, [pc, #40]	@ (8003930 <CalculateResistance+0x48>)
 8003908:	f7fd f932 	bl	8000b70 <__aeabi_fsub>
 800390c:	4603      	mov	r3, r0
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fd faeb 	bl	8000eec <__aeabi_fdiv>
 8003916:	4603      	mov	r3, r0
 8003918:	4906      	ldr	r1, [pc, #24]	@ (8003934 <CalculateResistance+0x4c>)
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd fa32 	bl	8000d84 <__aeabi_fmul>
 8003920:	4603      	mov	r3, r0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	3dcccccd 	.word	0x3dcccccd
 8003930:	40a00000 	.word	0x40a00000
 8003934:	461c4000 	.word	0x461c4000

08003938 <CalculateGasPPM>:

/**
 * @brief Tính nồng độ khí từ tỷ lệ Rs/R0
 */
float CalculateGasPPM(float rs_r0_ratio, float curve_a, float curve_b) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
    if(rs_r0_ratio <= 0) return 0.0f;
 8003944:	f04f 0100 	mov.w	r1, #0
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7fd fbc3 	bl	80010d4 <__aeabi_fcmple>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <CalculateGasPPM+0x22>
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	e009      	b.n	800396e <CalculateGasPPM+0x36>
    return curve_a * powf(rs_r0_ratio, curve_b);
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f005 fb71 	bl	8009044 <powf>
 8003962:	4603      	mov	r3, r0
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fd fa0c 	bl	8000d84 <__aeabi_fmul>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <DetermineAlarmLevel>:

/**
 * @brief Xác định mức cảnh báo
 */
AlarmLevel_t DetermineAlarmLevel(float ppm, float low, float high, float danger) {
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	603b      	str	r3, [r7, #0]
    if(ppm >= danger) return ALARM_DANGER;
 8003984:	6839      	ldr	r1, [r7, #0]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f7fd fbae 	bl	80010e8 <__aeabi_fcmpge>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <DetermineAlarmLevel+0x20>
 8003992:	2303      	movs	r3, #3
 8003994:	e012      	b.n	80039bc <DetermineAlarmLevel+0x46>
    if(ppm >= high) return ALARM_HIGH;
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7fd fba5 	bl	80010e8 <__aeabi_fcmpge>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <DetermineAlarmLevel+0x32>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e009      	b.n	80039bc <DetermineAlarmLevel+0x46>
    if(ppm >= low) return ALARM_LOW;
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7fd fb9c 	bl	80010e8 <__aeabi_fcmpge>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <DetermineAlarmLevel+0x44>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <DetermineAlarmLevel+0x46>
    return ALARM_NORMAL;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <InitSensorSystem>:
static SensorSystem_t history_buffer[HISTORY_BUFFER_SIZE];
static uint8_t history_index = 0;

// Các define khác cần thiết
#define MAIN_LOOP_DELAY 60000  // 1 phút = 60000ms
void InitSensorSystem(void) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af02      	add	r7, sp, #8
    printf("\r\nKHOI TAO HE THONG\r\n");
 80039ca:	4838      	ldr	r0, [pc, #224]	@ (8003aac <InitSensorSystem+0xe8>)
 80039cc:	f001 ff04 	bl	80057d8 <puts>
    
    // Reset toàn bộ hệ thống
    memset(&g_sensor_system, 0, sizeof(SensorSystem_t));
 80039d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039d4:	2100      	movs	r1, #0
 80039d6:	4836      	ldr	r0, [pc, #216]	@ (8003ab0 <InitSensorSystem+0xec>)
 80039d8:	f001 fffe 	bl	80059d8 <memset>
    memset(history_buffer, 0, sizeof(history_buffer));
 80039dc:	f643 42f0 	movw	r2, #15600	@ 0x3cf0
 80039e0:	2100      	movs	r1, #0
 80039e2:	4834      	ldr	r0, [pc, #208]	@ (8003ab4 <InitSensorSystem+0xf0>)
 80039e4:	f001 fff8 	bl	80059d8 <memset>
    
    // Khởi tạo từng cảm biến
    InitMQ137Sensor(&g_sensor_system.mq137);
 80039e8:	4831      	ldr	r0, [pc, #196]	@ (8003ab0 <InitSensorSystem+0xec>)
 80039ea:	f7ff fcb5 	bl	8003358 <InitMQ137Sensor>
    InitMQ135Sensor(&g_sensor_system.mq135);
 80039ee:	4832      	ldr	r0, [pc, #200]	@ (8003ab8 <InitSensorSystem+0xf4>)
 80039f0:	f7ff fd16 	bl	8003420 <InitMQ135Sensor>
    
    // MQ137 Digital Pin
    GPIOx_Init(MQ137_DIGITAL_PORT ,MQ137_DIGITAL_PIN ,MODE_INPUT ,PU,0)  ; 
 80039f4:	2300      	movs	r3, #0
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2301      	movs	r3, #1
 80039fa:	2200      	movs	r2, #0
 80039fc:	2108      	movs	r1, #8
 80039fe:	482f      	ldr	r0, [pc, #188]	@ (8003abc <InitSensorSystem+0xf8>)
 8003a00:	f7fe ff70 	bl	80028e4 <GPIOx_Init>
    // MQ135 Digital Pin
    GPIOx_Init(MQ135_DIGITAL_PORT ,MQ135_DIGITAL_PIN ,MODE_INPUT ,PU,0)  ;
 8003a04:	2300      	movs	r3, #0
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	2301      	movs	r3, #1
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2110      	movs	r1, #16
 8003a0e:	482b      	ldr	r0, [pc, #172]	@ (8003abc <InitSensorSystem+0xf8>)
 8003a10:	f7fe ff68 	bl	80028e4 <GPIOx_Init>
    ADCx_Init(ADC1,MQ137_ADC_CHANNEL); // Khởi tạo ADC cho MQ137
 8003a14:	2100      	movs	r1, #0
 8003a16:	482a      	ldr	r0, [pc, #168]	@ (8003ac0 <InitSensorSystem+0xfc>)
 8003a18:	f7fe fd10 	bl	800243c <ADCx_Init>
    ADCx_Init(ADC1,MQ135_ADC_CHANNEL); // Khởi tạo ADC cho MQ135
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4828      	ldr	r0, [pc, #160]	@ (8003ac0 <InitSensorSystem+0xfc>)
 8003a20:	f7fe fd0c 	bl	800243c <ADCx_Init>
    
    
    // Cập nhật trạng thái hệ thống
    g_sensor_system.active_sensor_count = 2;
 8003a24:	4b22      	ldr	r3, [pc, #136]	@ (8003ab0 <InitSensorSystem+0xec>)
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    g_sensor_system.last_update = HAL_GetTick();
 8003a2c:	f7fe f80c 	bl	8001a48 <HAL_GetTick>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab0 <InitSensorSystem+0xec>)
 8003a34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    
    printf("KHOI TAO MQ137 (NH3): %s\r\n", g_sensor_system.mq137.base.is_enabled ? "OK" : "FAIL");
 8003a38:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab0 <InitSensorSystem+0xec>)
 8003a3a:	7c9b      	ldrb	r3, [r3, #18]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <InitSensorSystem+0x80>
 8003a40:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <InitSensorSystem+0x100>)
 8003a42:	e000      	b.n	8003a46 <InitSensorSystem+0x82>
 8003a44:	4b20      	ldr	r3, [pc, #128]	@ (8003ac8 <InitSensorSystem+0x104>)
 8003a46:	4619      	mov	r1, r3
 8003a48:	4820      	ldr	r0, [pc, #128]	@ (8003acc <InitSensorSystem+0x108>)
 8003a4a:	f001 fe5d 	bl	8005708 <iprintf>
    printf("KHOI TAO MQ135 (CO2): %s\r\n", g_sensor_system.mq135.base.is_enabled ? "OK" : "FAIL");
 8003a4e:	4b18      	ldr	r3, [pc, #96]	@ (8003ab0 <InitSensorSystem+0xec>)
 8003a50:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <InitSensorSystem+0x98>
 8003a58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <InitSensorSystem+0x100>)
 8003a5a:	e000      	b.n	8003a5e <InitSensorSystem+0x9a>
 8003a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac8 <InitSensorSystem+0x104>)
 8003a5e:	4619      	mov	r1, r3
 8003a60:	481b      	ldr	r0, [pc, #108]	@ (8003ad0 <InitSensorSystem+0x10c>)
 8003a62:	f001 fe51 	bl	8005708 <iprintf>
    printf("CAM BIEN HOAT DONG: %d/2\r\n", g_sensor_system.active_sensor_count);
 8003a66:	4b12      	ldr	r3, [pc, #72]	@ (8003ab0 <InitSensorSystem+0xec>)
 8003a68:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4819      	ldr	r0, [pc, #100]	@ (8003ad4 <InitSensorSystem+0x110>)
 8003a70:	f001 fe4a 	bl	8005708 <iprintf>
    
    // Thời gian ổn định
    printf("DANG ON DINH CAM BIEN...\r\n");
 8003a74:	4818      	ldr	r0, [pc, #96]	@ (8003ad8 <InitSensorSystem+0x114>)
 8003a76:	f001 feaf 	bl	80057d8 <puts>
    for(int i = 30; i > 0; i--) {
 8003a7a:	231e      	movs	r3, #30
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	e00a      	b.n	8003a96 <InitSensorSystem+0xd2>
        printf("ON DINH: %d GIAY\r", i);
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4816      	ldr	r0, [pc, #88]	@ (8003adc <InitSensorSystem+0x118>)
 8003a84:	f001 fe40 	bl	8005708 <iprintf>
        HAL_Delay(1000);
 8003a88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a8c:	f7fd ffe6 	bl	8001a5c <HAL_Delay>
    for(int i = 30; i > 0; i--) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	dcf1      	bgt.n	8003a80 <InitSensorSystem+0xbc>
    }
    printf("\r\nHE THONG SAN SANG\r\n");
 8003a9c:	4810      	ldr	r0, [pc, #64]	@ (8003ae0 <InitSensorSystem+0x11c>)
 8003a9e:	f001 fe9b 	bl	80057d8 <puts>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	0800a060 	.word	0x0800a060
 8003ab0:	20000350 	.word	0x20000350
 8003ab4:	20000454 	.word	0x20000454
 8003ab8:	200003c8 	.word	0x200003c8
 8003abc:	40010800 	.word	0x40010800
 8003ac0:	40012400 	.word	0x40012400
 8003ac4:	0800a078 	.word	0x0800a078
 8003ac8:	0800a07c 	.word	0x0800a07c
 8003acc:	0800a084 	.word	0x0800a084
 8003ad0:	0800a0a0 	.word	0x0800a0a0
 8003ad4:	0800a0bc 	.word	0x0800a0bc
 8003ad8:	0800a0d8 	.word	0x0800a0d8
 8003adc:	0800a0f4 	.word	0x0800a0f4
 8003ae0:	0800a108 	.word	0x0800a108

08003ae4 <ProcessAllSensors>:
void ProcessAllSensors(void) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8003aea:	f7fd ffad 	bl	8001a48 <HAL_GetTick>
 8003aee:	6078      	str	r0, [r7, #4]
    printf  ("\r\nXU LY CAM BIEN TAI %lu ms \r\n", current_time);
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4819      	ldr	r0, [pc, #100]	@ (8003b58 <ProcessAllSensors+0x74>)
 8003af4:	f001 fe08 	bl	8005708 <iprintf>
    // Xử lý từng cảm biến
    if(g_sensor_system.mq137.base.is_enabled) {
 8003af8:	4b18      	ldr	r3, [pc, #96]	@ (8003b5c <ProcessAllSensors+0x78>)
 8003afa:	7c9b      	ldrb	r3, [r3, #18]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <ProcessAllSensors+0x22>
        ProcessGasSensor(&g_sensor_system.mq137);
 8003b00:	4816      	ldr	r0, [pc, #88]	@ (8003b5c <ProcessAllSensors+0x78>)
 8003b02:	f7ff fcf1 	bl	80034e8 <ProcessGasSensor>

    }
        

    if(g_sensor_system.mq135.base.is_enabled) {
 8003b06:	4b15      	ldr	r3, [pc, #84]	@ (8003b5c <ProcessAllSensors+0x78>)
 8003b08:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <ProcessAllSensors+0x32>
        ProcessGasSensor(&g_sensor_system.mq135);
 8003b10:	4813      	ldr	r0, [pc, #76]	@ (8003b60 <ProcessAllSensors+0x7c>)
 8003b12:	f7ff fce9 	bl	80034e8 <ProcessGasSensor>
    }
    // Cập nhật trạng thái hệ thống
    UpdateSystemStatus();
 8003b16:	f000 fe6f 	bl	80047f8 <UpdateSystemStatus>
    
    // Lưu lịch sử
    SaveToHistory();
 8003b1a:	f000 fe3d 	bl	8004798 <SaveToHistory>
    
    // Cập nhật thống kê
    g_sensor_system.total_readings++;
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <ProcessAllSensors+0x78>)
 8003b20:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a0d      	ldr	r2, [pc, #52]	@ (8003b5c <ProcessAllSensors+0x78>)
 8003b28:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
    g_sensor_system.last_update = current_time;
 8003b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b5c <ProcessAllSensors+0x78>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    g_sensor_system.uptime_minutes = current_time / 60000.0f;
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fd f8cd 	bl	8000cd4 <__aeabi_ui2f>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4909      	ldr	r1, [pc, #36]	@ (8003b64 <ProcessAllSensors+0x80>)
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd f9d4 	bl	8000eec <__aeabi_fdiv>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461a      	mov	r2, r3
 8003b48:	4b04      	ldr	r3, [pc, #16]	@ (8003b5c <ProcessAllSensors+0x78>)
 8003b4a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	0800a120 	.word	0x0800a120
 8003b5c:	20000350 	.word	0x20000350
 8003b60:	200003c8 	.word	0x200003c8
 8003b64:	476a6000 	.word	0x476a6000

08003b68 <DisplaySystemStatus>:
/**
 * @brief Hiển thị trạng thái hệ thống
 */
void DisplaySystemStatus(void) {
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b089      	sub	sp, #36	@ 0x24
 8003b6c:	af00      	add	r7, sp, #0
    printf("\r\n=== TRANG THAI HE THONG CAM BIEN ===\r\n");
 8003b6e:	4829      	ldr	r0, [pc, #164]	@ (8003c14 <DisplaySystemStatus+0xac>)
 8003b70:	f001 fe32 	bl	80057d8 <puts>
    printf("TIME: %lu ms | Uptime: %.1f PHUT\r\n", 
 8003b74:	f7fd ff68 	bl	8001a48 <HAL_GetTick>
 8003b78:	4604      	mov	r4, r0
           HAL_GetTick(), g_sensor_system.uptime_minutes);
 8003b7a:	4b27      	ldr	r3, [pc, #156]	@ (8003c18 <DisplaySystemStatus+0xb0>)
 8003b7c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
    printf("TIME: %lu ms | Uptime: %.1f PHUT\r\n", 
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fc fc51 	bl	8000428 <__aeabi_f2d>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	4823      	ldr	r0, [pc, #140]	@ (8003c1c <DisplaySystemStatus+0xb4>)
 8003b8e:	f001 fdbb 	bl	8005708 <iprintf>
    
    // Hiển thị MQ137
    PrintSensorDetails(&g_sensor_system.mq137);
 8003b92:	4821      	ldr	r0, [pc, #132]	@ (8003c18 <DisplaySystemStatus+0xb0>)
 8003b94:	f7ff fdb6 	bl	8003704 <PrintSensorDetails>
    
    // Hiển thị MQ135
    PrintSensorDetails(&g_sensor_system.mq135);
 8003b98:	4821      	ldr	r0, [pc, #132]	@ (8003c20 <DisplaySystemStatus+0xb8>)
 8003b9a:	f7ff fdb3 	bl	8003704 <PrintSensorDetails>
    
    // Trạng thái tổng thể
    printf("\r\n--- HE THONG ---\r\n");
 8003b9e:	4821      	ldr	r0, [pc, #132]	@ (8003c24 <DisplaySystemStatus+0xbc>)
 8003ba0:	f001 fe1a 	bl	80057d8 <puts>
    const char* status_text[] = {"LOI", "CO BAN", "TOT", "TOI UU"};
 8003ba4:	4b20      	ldr	r3, [pc, #128]	@ (8003c28 <DisplaySystemStatus+0xc0>)
 8003ba6:	f107 0410 	add.w	r4, r7, #16
 8003baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const char* alarm_text[] = {"BINH THUONG", "THAP", "CAO", "NGUY HIEM"};
 8003bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c2c <DisplaySystemStatus+0xc4>)
 8003bb2:	463c      	mov	r4, r7
 8003bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    printf("TRANG THAI: %s (%d/2 CAM BIEN HOAT DONG)\r\n", 
           status_text[g_sensor_system.system_status], g_sensor_system.active_sensor_count);
 8003bba:	4b17      	ldr	r3, [pc, #92]	@ (8003c18 <DisplaySystemStatus+0xb0>)
 8003bbc:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
    printf("TRANG THAI: %s (%d/2 CAM BIEN HOAT DONG)\r\n", 
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	3320      	adds	r3, #32
 8003bc4:	443b      	add	r3, r7
 8003bc6:	f853 3c10 	ldr.w	r3, [r3, #-16]
           status_text[g_sensor_system.system_status], g_sensor_system.active_sensor_count);
 8003bca:	4a13      	ldr	r2, [pc, #76]	@ (8003c18 <DisplaySystemStatus+0xb0>)
 8003bcc:	f892 20f0 	ldrb.w	r2, [r2, #240]	@ 0xf0
    printf("TRANG THAI: %s (%d/2 CAM BIEN HOAT DONG)\r\n", 
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4817      	ldr	r0, [pc, #92]	@ (8003c30 <DisplaySystemStatus+0xc8>)
 8003bd4:	f001 fd98 	bl	8005708 <iprintf>
    printf("CANH BAO TONG THE %s\r\n", alarm_text[g_sensor_system.system_alarm]);
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <DisplaySystemStatus+0xb0>)
 8003bda:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	3320      	adds	r3, #32
 8003be2:	443b      	add	r3, r7
 8003be4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003be8:	4619      	mov	r1, r3
 8003bea:	4812      	ldr	r0, [pc, #72]	@ (8003c34 <DisplaySystemStatus+0xcc>)
 8003bec:	f001 fd8c 	bl	8005708 <iprintf>
    printf("TONG SO DO: %lu | LOI: %lu\r\n", 
 8003bf0:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <DisplaySystemStatus+0xb0>)
 8003bf2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003bf6:	4a08      	ldr	r2, [pc, #32]	@ (8003c18 <DisplaySystemStatus+0xb0>)
 8003bf8:	f8d2 20fc 	ldr.w	r2, [r2, #252]	@ 0xfc
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	480e      	ldr	r0, [pc, #56]	@ (8003c38 <DisplaySystemStatus+0xd0>)
 8003c00:	f001 fd82 	bl	8005708 <iprintf>
           g_sensor_system.total_readings, g_sensor_system.error_count);
    
    printf("=====================================\r\n");
 8003c04:	480d      	ldr	r0, [pc, #52]	@ (8003c3c <DisplaySystemStatus+0xd4>)
 8003c06:	f001 fde7 	bl	80057d8 <puts>
}
 8003c0a:	bf00      	nop
 8003c0c:	3724      	adds	r7, #36	@ 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd90      	pop	{r4, r7, pc}
 8003c12:	bf00      	nop
 8003c14:	0800a140 	.word	0x0800a140
 8003c18:	20000350 	.word	0x20000350
 8003c1c:	0800a168 	.word	0x0800a168
 8003c20:	200003c8 	.word	0x200003c8
 8003c24:	0800a18c 	.word	0x0800a18c
 8003c28:	0800a244 	.word	0x0800a244
 8003c2c:	0800a278 	.word	0x0800a278
 8003c30:	0800a1a0 	.word	0x0800a1a0
 8003c34:	0800a1cc 	.word	0x0800a1cc
 8003c38:	0800a1e4 	.word	0x0800a1e4
 8003c3c:	0800a204 	.word	0x0800a204

08003c40 <TestSensorSystem>:

/**
 * @brief Test hệ thống
 */
void TestSensorSystem(void) {
 8003c40:	b5b0      	push	{r4, r5, r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af02      	add	r7, sp, #8
    printf("\r\nTEST HE THONG CAM BIEN\r\n");
 8003c46:	4826      	ldr	r0, [pc, #152]	@ (8003ce0 <TestSensorSystem+0xa0>)
 8003c48:	f001 fdc6 	bl	80057d8 <puts>
    
    for(int i = 0; i < 10; i++) {
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	e03c      	b.n	8003ccc <TestSensorSystem+0x8c>
        printf("TEST LAN  %d:\r\n", i + 1);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3301      	adds	r3, #1
 8003c56:	4619      	mov	r1, r3
 8003c58:	4822      	ldr	r0, [pc, #136]	@ (8003ce4 <TestSensorSystem+0xa4>)
 8003c5a:	f001 fd55 	bl	8005708 <iprintf>
        
        ProcessAllSensors();
 8003c5e:	f7ff ff41 	bl	8003ae4 <ProcessAllSensors>
        
        printf("  MQ137: %.1f ppm NH3 (Alarm: %d)\r\n", 
               GetNH3_PPM(), GetNH3AlarmLevel());
 8003c62:	f000 fd43 	bl	80046ec <GetNH3_PPM>
 8003c66:	4603      	mov	r3, r0
        printf("  MQ137: %.1f ppm NH3 (Alarm: %d)\r\n", 
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc fbdd 	bl	8000428 <__aeabi_f2d>
 8003c6e:	4604      	mov	r4, r0
 8003c70:	460d      	mov	r5, r1
               GetNH3_PPM(), GetNH3AlarmLevel());
 8003c72:	f000 fd61 	bl	8004738 <GetNH3AlarmLevel>
 8003c76:	4603      	mov	r3, r0
        printf("  MQ137: %.1f ppm NH3 (Alarm: %d)\r\n", 
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	4622      	mov	r2, r4
 8003c7c:	462b      	mov	r3, r5
 8003c7e:	481a      	ldr	r0, [pc, #104]	@ (8003ce8 <TestSensorSystem+0xa8>)
 8003c80:	f001 fd42 	bl	8005708 <iprintf>
        printf("  MQ135: %.1f ppm CO2 (Alarm: %d)\r\n", 
               GetCO2_PPM(), GetCO2AlarmLevel());
 8003c84:	f000 fd44 	bl	8004710 <GetCO2_PPM>
 8003c88:	4603      	mov	r3, r0
        printf("  MQ135: %.1f ppm CO2 (Alarm: %d)\r\n", 
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fc fbcc 	bl	8000428 <__aeabi_f2d>
 8003c90:	4604      	mov	r4, r0
 8003c92:	460d      	mov	r5, r1
               GetCO2_PPM(), GetCO2AlarmLevel());
 8003c94:	f000 fd5c 	bl	8004750 <GetCO2AlarmLevel>
 8003c98:	4603      	mov	r3, r0
        printf("  MQ135: %.1f ppm CO2 (Alarm: %d)\r\n", 
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	462b      	mov	r3, r5
 8003ca0:	4812      	ldr	r0, [pc, #72]	@ (8003cec <TestSensorSystem+0xac>)
 8003ca2:	f001 fd31 	bl	8005708 <iprintf>
        printf("  HE THONG: Status=%d, Alarm=%d\r\n\r\n", 
               GetSystemStatus(), GetSystemAlarmLevel());
 8003ca6:	f000 fd6b 	bl	8004780 <GetSystemStatus>
 8003caa:	4603      	mov	r3, r0
        printf("  HE THONG: Status=%d, Alarm=%d\r\n\r\n", 
 8003cac:	461c      	mov	r4, r3
               GetSystemStatus(), GetSystemAlarmLevel());
 8003cae:	f000 fd5b 	bl	8004768 <GetSystemAlarmLevel>
 8003cb2:	4603      	mov	r3, r0
        printf("  HE THONG: Status=%d, Alarm=%d\r\n\r\n", 
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	480d      	ldr	r0, [pc, #52]	@ (8003cf0 <TestSensorSystem+0xb0>)
 8003cba:	f001 fd25 	bl	8005708 <iprintf>
        
        HAL_Delay(3000);
 8003cbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003cc2:	f7fd fecb 	bl	8001a5c <HAL_Delay>
    for(int i = 0; i < 10; i++) {
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b09      	cmp	r3, #9
 8003cd0:	ddbf      	ble.n	8003c52 <TestSensorSystem+0x12>
    }
    
    printf("TEST HOAN TAT\r\n");
 8003cd2:	4808      	ldr	r0, [pc, #32]	@ (8003cf4 <TestSensorSystem+0xb4>)
 8003cd4:	f001 fd80 	bl	80057d8 <puts>
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce0:	0800a288 	.word	0x0800a288
 8003ce4:	0800a2a4 	.word	0x0800a2a4
 8003ce8:	0800a2b4 	.word	0x0800a2b4
 8003cec:	0800a2d8 	.word	0x0800a2d8
 8003cf0:	0800a2fc 	.word	0x0800a2fc
 8003cf4:	0800a320 	.word	0x0800a320

08003cf8 <CalibrateSensors>:
 */
// =============================================================================
// HIỆU CHUẨN CẢM BIẾN ĐƯỢC CẢI TIẾN - MQ137 & MQ135
// =============================================================================

void CalibrateSensors(void) {
 8003cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003cfc:	b09d      	sub	sp, #116	@ 0x74
 8003cfe:	af08      	add	r7, sp, #32
    printf("\r\n=== HIEU CHUAN CAM BIEN CAI TIEN ===\r\n");
 8003d00:	4884      	ldr	r0, [pc, #528]	@ (8003f14 <CalibrateSensors+0x21c>)
 8003d02:	f001 fd69 	bl	80057d8 <puts>
    printf("QUAN TRONG: Dam bao cam bien da chay 24h+ va o moi truong sach!\r\n");
 8003d06:	4884      	ldr	r0, [pc, #528]	@ (8003f18 <CalibrateSensors+0x220>)
 8003d08:	f001 fd66 	bl	80057d8 <puts>
    
    // Kiểm tra điều kiện trước khi hiệu chuẩn
    if(!CheckCalibrationConditions()) {
 8003d0c:	f000 fa38 	bl	8004180 <CheckCalibrationConditions>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <CalibrateSensors+0x26>
        printf("❌ DIEU KIEN KHONG DAP UNG - Huy hieu chuan!\r\n");
 8003d16:	4881      	ldr	r0, [pc, #516]	@ (8003f1c <CalibrateSensors+0x224>)
 8003d18:	f001 fd5e 	bl	80057d8 <puts>
        return;
 8003d1c:	e204      	b.n	8004128 <CalibrateSensors+0x430>
    }
    
    printf("✅ Dieu kien OK - Bat dau hieu chuan...\r\n");
 8003d1e:	4880      	ldr	r0, [pc, #512]	@ (8003f20 <CalibrateSensors+0x228>)
 8003d20:	f001 fd5a 	bl	80057d8 <puts>
    printf("Thoi gian: 5 phut (300 mau)\r\n");
 8003d24:	487f      	ldr	r0, [pc, #508]	@ (8003f24 <CalibrateSensors+0x22c>)
 8003d26:	f001 fd57 	bl	80057d8 <puts>
    
    float mq137_r0_sum = 0, mq137_min = 999999, mq137_max = 0;
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d30:	4b7d      	ldr	r3, [pc, #500]	@ (8003f28 <CalibrateSensors+0x230>)
 8003d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	647b      	str	r3, [r7, #68]	@ 0x44
    float mq135_r0_sum = 0, mq135_min = 999999, mq135_max = 0;
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d40:	4b79      	ldr	r3, [pc, #484]	@ (8003f28 <CalibrateSensors+0x230>)
 8003d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	63bb      	str	r3, [r7, #56]	@ 0x38
    int valid_samples = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	637b      	str	r3, [r7, #52]	@ 0x34
    int total_samples = 300;  // 5 phút
 8003d4e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
    for(int i = 0; i < total_samples; i++) {
 8003d54:	2300      	movs	r3, #0
 8003d56:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d58:	e098      	b.n	8003e8c <CalibrateSensors+0x194>
        ProcessAllSensors();
 8003d5a:	f7ff fec3 	bl	8003ae4 <ProcessAllSensors>
        
        float mq137_resistance = g_sensor_system.mq137.base.resistance;
 8003d5e:	4b73      	ldr	r3, [pc, #460]	@ (8003f2c <CalibrateSensors+0x234>)
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	60fb      	str	r3, [r7, #12]
        float mq135_resistance = g_sensor_system.mq135.base.resistance;
 8003d64:	4b71      	ldr	r3, [pc, #452]	@ (8003f2c <CalibrateSensors+0x234>)
 8003d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d6a:	60bb      	str	r3, [r7, #8]
        
        // Validate samples với điều kiện chặt chẽ hơn
        uint8_t mq137_valid = ValidateCalibrationSample(mq137_resistance, 
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f2c <CalibrateSensors+0x234>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	4619      	mov	r1, r3
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 faf0 	bl	8004358 <ValidateCalibrationSample>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	71fb      	strb	r3, [r7, #7]
                                                       g_sensor_system.mq137.base.raw_voltage);
        uint8_t mq135_valid = ValidateCalibrationSample(mq135_resistance, 
 8003d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8003f2c <CalibrateSensors+0x234>)
 8003d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d82:	4619      	mov	r1, r3
 8003d84:	68b8      	ldr	r0, [r7, #8]
 8003d86:	f000 fae7 	bl	8004358 <ValidateCalibrationSample>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	71bb      	strb	r3, [r7, #6]
                                                       g_sensor_system.mq135.base.raw_voltage);
        
        if(mq137_valid && mq135_valid) {
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d035      	beq.n	8003e00 <CalibrateSensors+0x108>
 8003d94:	79bb      	ldrb	r3, [r7, #6]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d032      	beq.n	8003e00 <CalibrateSensors+0x108>
            // MQ137 statistics
            mq137_r0_sum += mq137_resistance;
 8003d9a:	68f9      	ldr	r1, [r7, #12]
 8003d9c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003d9e:	f7fc fee9 	bl	8000b74 <__addsf3>
 8003da2:	4603      	mov	r3, r0
 8003da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if(mq137_resistance < mq137_min) mq137_min = mq137_resistance;
 8003da6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7fd f989 	bl	80010c0 <__aeabi_fcmplt>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <CalibrateSensors+0xc0>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	64bb      	str	r3, [r7, #72]	@ 0x48
            if(mq137_resistance > mq137_max) mq137_max = mq137_resistance;
 8003db8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7fd f99e 	bl	80010fc <__aeabi_fcmpgt>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <CalibrateSensors+0xd2>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	647b      	str	r3, [r7, #68]	@ 0x44
            
            // MQ135 statistics
            mq135_r0_sum += mq135_resistance;
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003dce:	f7fc fed1 	bl	8000b74 <__addsf3>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	643b      	str	r3, [r7, #64]	@ 0x40
            if(mq135_resistance < mq135_min) mq135_min = mq135_resistance;
 8003dd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dd8:	68b8      	ldr	r0, [r7, #8]
 8003dda:	f7fd f971 	bl	80010c0 <__aeabi_fcmplt>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <CalibrateSensors+0xf0>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if(mq135_resistance > mq135_max) mq135_max = mq135_resistance;
 8003de8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dea:	68b8      	ldr	r0, [r7, #8]
 8003dec:	f7fd f986 	bl	80010fc <__aeabi_fcmpgt>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <CalibrateSensors+0x102>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	63bb      	str	r3, [r7, #56]	@ 0x38
            
            valid_samples++;
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        
        // Progress report mỗi 30 giây
        if(i % 30 == 0) {
 8003e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e02:	4b4b      	ldr	r3, [pc, #300]	@ (8003f30 <CalibrateSensors+0x238>)
 8003e04:	fb83 1302 	smull	r1, r3, r3, r2
 8003e08:	4413      	add	r3, r2
 8003e0a:	1119      	asrs	r1, r3, #4
 8003e0c:	17d3      	asrs	r3, r2, #31
 8003e0e:	1ac9      	subs	r1, r1, r3
 8003e10:	460b      	mov	r3, r1
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a5b      	subs	r3, r3, r1
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	1ad1      	subs	r1, r2, r3
 8003e1a:	2900      	cmp	r1, #0
 8003e1c:	d12f      	bne.n	8003e7e <CalibrateSensors+0x186>
            float progress = (float)i / total_samples * 100.0f;
 8003e1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e20:	f7fc ff5c 	bl	8000cdc <__aeabi_i2f>
 8003e24:	4604      	mov	r4, r0
 8003e26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e28:	f7fc ff58 	bl	8000cdc <__aeabi_i2f>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4620      	mov	r0, r4
 8003e32:	f7fd f85b 	bl	8000eec <__aeabi_fdiv>
 8003e36:	4603      	mov	r3, r0
 8003e38:	493e      	ldr	r1, [pc, #248]	@ (8003f34 <CalibrateSensors+0x23c>)
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc ffa2 	bl	8000d84 <__aeabi_fmul>
 8003e40:	4603      	mov	r3, r0
 8003e42:	603b      	str	r3, [r7, #0]
            printf("Tien do: %.1f%% | Mau %d: MQ137=%.1fΩ, MQ135=%.1fΩ | Valid: %d\r\n", 
 8003e44:	6838      	ldr	r0, [r7, #0]
 8003e46:	f7fc faef 	bl	8000428 <__aeabi_f2d>
 8003e4a:	4680      	mov	r8, r0
 8003e4c:	4689      	mov	r9, r1
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	1c5e      	adds	r6, r3, #1
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f7fc fae8 	bl	8000428 <__aeabi_f2d>
 8003e58:	4604      	mov	r4, r0
 8003e5a:	460d      	mov	r5, r1
 8003e5c:	68b8      	ldr	r0, [r7, #8]
 8003e5e:	f7fc fae3 	bl	8000428 <__aeabi_f2d>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e68:	9106      	str	r1, [sp, #24]
 8003e6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e6e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003e72:	9600      	str	r6, [sp, #0]
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	482f      	ldr	r0, [pc, #188]	@ (8003f38 <CalibrateSensors+0x240>)
 8003e7a:	f001 fc45 	bl	8005708 <iprintf>
                   progress, i+1, mq137_resistance, mq135_resistance, valid_samples);
        }
        
        HAL_Delay(1000);  // 1 giây mỗi sample
 8003e7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e82:	f7fd fdeb 	bl	8001a5c <HAL_Delay>
    for(int i = 0; i < total_samples; i++) {
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	3301      	adds	r3, #1
 8003e8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e90:	429a      	cmp	r2, r3
 8003e92:	f6ff af62 	blt.w	8003d5a <CalibrateSensors+0x62>
    }
    
    // Phân tích kết quả
    if(valid_samples < (total_samples * 0.8f)) {  // Cần ít nhất 80% sample hợp lệ
 8003e96:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e98:	f7fc ff20 	bl	8000cdc <__aeabi_i2f>
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ea0:	f7fc ff1c 	bl	8000cdc <__aeabi_i2f>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4925      	ldr	r1, [pc, #148]	@ (8003f3c <CalibrateSensors+0x244>)
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fc ff6b 	bl	8000d84 <__aeabi_fmul>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f7fd f904 	bl	80010c0 <__aeabi_fcmplt>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d04a      	beq.n	8003f54 <CalibrateSensors+0x25c>
        printf("❌ KHONG DU SAMPLE HOP LE (%d/%d = %.1f%%)\r\n", 
               valid_samples, total_samples, (float)valid_samples/total_samples*100);
 8003ebe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ec0:	f7fc ff0c 	bl	8000cdc <__aeabi_i2f>
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ec8:	f7fc ff08 	bl	8000cdc <__aeabi_i2f>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f7fd f80b 	bl	8000eec <__aeabi_fdiv>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4916      	ldr	r1, [pc, #88]	@ (8003f34 <CalibrateSensors+0x23c>)
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc ff52 	bl	8000d84 <__aeabi_fmul>
 8003ee0:	4603      	mov	r3, r0
        printf("❌ KHONG DU SAMPLE HOP LE (%d/%d = %.1f%%)\r\n", 
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc faa0 	bl	8000428 <__aeabi_f2d>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	e9cd 2300 	strd	r2, r3, [sp]
 8003ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ef4:	4812      	ldr	r0, [pc, #72]	@ (8003f40 <CalibrateSensors+0x248>)
 8003ef6:	f001 fc07 	bl	8005708 <iprintf>
        printf("Hay kiem tra:\r\n");
 8003efa:	4812      	ldr	r0, [pc, #72]	@ (8003f44 <CalibrateSensors+0x24c>)
 8003efc:	f001 fc6c 	bl	80057d8 <puts>
        printf("- Cam bien da preheat 24h+?\r\n");
 8003f00:	4811      	ldr	r0, [pc, #68]	@ (8003f48 <CalibrateSensors+0x250>)
 8003f02:	f001 fc69 	bl	80057d8 <puts>
        printf("- Moi truong thuc su sach?\r\n");
 8003f06:	4811      	ldr	r0, [pc, #68]	@ (8003f4c <CalibrateSensors+0x254>)
 8003f08:	f001 fc66 	bl	80057d8 <puts>
        printf("- Hardware ket noi dung?\r\n");
 8003f0c:	4810      	ldr	r0, [pc, #64]	@ (8003f50 <CalibrateSensors+0x258>)
 8003f0e:	f001 fc63 	bl	80057d8 <puts>
        return;
 8003f12:	e109      	b.n	8004128 <CalibrateSensors+0x430>
 8003f14:	0800a330 	.word	0x0800a330
 8003f18:	0800a358 	.word	0x0800a358
 8003f1c:	0800a39c 	.word	0x0800a39c
 8003f20:	0800a3cc 	.word	0x0800a3cc
 8003f24:	0800a3f8 	.word	0x0800a3f8
 8003f28:	497423f0 	.word	0x497423f0
 8003f2c:	20000350 	.word	0x20000350
 8003f30:	88888889 	.word	0x88888889
 8003f34:	42c80000 	.word	0x42c80000
 8003f38:	0800a418 	.word	0x0800a418
 8003f3c:	3f4ccccd 	.word	0x3f4ccccd
 8003f40:	0800a45c 	.word	0x0800a45c
 8003f44:	0800a48c 	.word	0x0800a48c
 8003f48:	0800a49c 	.word	0x0800a49c
 8003f4c:	0800a4bc 	.word	0x0800a4bc
 8003f50:	0800a4d8 	.word	0x0800a4d8
    }
    
    // Tính giá trị trung bình
    float mq137_r0_avg = mq137_r0_sum / valid_samples;
 8003f54:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f56:	f7fc fec1 	bl	8000cdc <__aeabi_i2f>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003f60:	f7fc ffc4 	bl	8000eec <__aeabi_fdiv>
 8003f64:	4603      	mov	r3, r0
 8003f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    float mq135_r0_avg = mq135_r0_sum / valid_samples;
 8003f68:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003f6a:	f7fc feb7 	bl	8000cdc <__aeabi_i2f>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4619      	mov	r1, r3
 8003f72:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003f74:	f7fc ffba 	bl	8000eec <__aeabi_fdiv>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    
    // Tính độ ổn định
    float mq137_range = mq137_max - mq137_min;
 8003f7c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003f7e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003f80:	f7fc fdf6 	bl	8000b70 <__aeabi_fsub>
 8003f84:	4603      	mov	r3, r0
 8003f86:	623b      	str	r3, [r7, #32]
    float mq135_range = mq135_max - mq135_min;
 8003f88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f8c:	f7fc fdf0 	bl	8000b70 <__aeabi_fsub>
 8003f90:	4603      	mov	r3, r0
 8003f92:	61fb      	str	r3, [r7, #28]
    float mq137_stability = (mq137_range / mq137_r0_avg) * 100.0f;
 8003f94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f96:	6a38      	ldr	r0, [r7, #32]
 8003f98:	f7fc ffa8 	bl	8000eec <__aeabi_fdiv>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4964      	ldr	r1, [pc, #400]	@ (8004130 <CalibrateSensors+0x438>)
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fc feef 	bl	8000d84 <__aeabi_fmul>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	61bb      	str	r3, [r7, #24]
    float mq135_stability = (mq135_range / mq135_r0_avg) * 100.0f;
 8003faa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fac:	69f8      	ldr	r0, [r7, #28]
 8003fae:	f7fc ff9d 	bl	8000eec <__aeabi_fdiv>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	495e      	ldr	r1, [pc, #376]	@ (8004130 <CalibrateSensors+0x438>)
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc fee4 	bl	8000d84 <__aeabi_fmul>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	617b      	str	r3, [r7, #20]
    
    printf("\r\n=== KET QUA HIEU CHUAN ===\r\n");
 8003fc0:	485c      	ldr	r0, [pc, #368]	@ (8004134 <CalibrateSensors+0x43c>)
 8003fc2:	f001 fc09 	bl	80057d8 <puts>
    printf("Thoi gian: 5 phut | Sample hop le: %d/%d (%.1f%%)\r\n", 
           valid_samples, total_samples, (float)valid_samples/total_samples*100);
 8003fc6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003fc8:	f7fc fe88 	bl	8000cdc <__aeabi_i2f>
 8003fcc:	4604      	mov	r4, r0
 8003fce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fd0:	f7fc fe84 	bl	8000cdc <__aeabi_i2f>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f7fc ff87 	bl	8000eec <__aeabi_fdiv>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4953      	ldr	r1, [pc, #332]	@ (8004130 <CalibrateSensors+0x438>)
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fece 	bl	8000d84 <__aeabi_fmul>
 8003fe8:	4603      	mov	r3, r0
    printf("Thoi gian: 5 phut | Sample hop le: %d/%d (%.1f%%)\r\n", 
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fa1c 	bl	8000428 <__aeabi_f2d>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	e9cd 2300 	strd	r2, r3, [sp]
 8003ff8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ffa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ffc:	484e      	ldr	r0, [pc, #312]	@ (8004138 <CalibrateSensors+0x440>)
 8003ffe:	f001 fb83 	bl	8005708 <iprintf>
    
    // MQ137 results
    printf("\r\n--- MQ137 (NH3) ---\r\n");
 8004002:	484e      	ldr	r0, [pc, #312]	@ (800413c <CalibrateSensors+0x444>)
 8004004:	f001 fbe8 	bl	80057d8 <puts>
    printf("R0 trung binh: %.1f Ω\r\n", mq137_r0_avg);
 8004008:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800400a:	f7fc fa0d 	bl	8000428 <__aeabi_f2d>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	484b      	ldr	r0, [pc, #300]	@ (8004140 <CalibrateSensors+0x448>)
 8004014:	f001 fb78 	bl	8005708 <iprintf>
    printf("Khoang bien thien: %.1f - %.1f Ω\r\n", mq137_min, mq137_max);
 8004018:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800401a:	f7fc fa05 	bl	8000428 <__aeabi_f2d>
 800401e:	4604      	mov	r4, r0
 8004020:	460d      	mov	r5, r1
 8004022:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004024:	f7fc fa00 	bl	8000428 <__aeabi_f2d>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	e9cd 2300 	strd	r2, r3, [sp]
 8004030:	4622      	mov	r2, r4
 8004032:	462b      	mov	r3, r5
 8004034:	4843      	ldr	r0, [pc, #268]	@ (8004144 <CalibrateSensors+0x44c>)
 8004036:	f001 fb67 	bl	8005708 <iprintf>
    printf("Do on dinh: %.1f%%\r\n", mq137_stability);
 800403a:	69b8      	ldr	r0, [r7, #24]
 800403c:	f7fc f9f4 	bl	8000428 <__aeabi_f2d>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4840      	ldr	r0, [pc, #256]	@ (8004148 <CalibrateSensors+0x450>)
 8004046:	f001 fb5f 	bl	8005708 <iprintf>
    
    // MQ135 results  
    printf("\r\n--- MQ135 (CO2) ---\r\n");
 800404a:	4840      	ldr	r0, [pc, #256]	@ (800414c <CalibrateSensors+0x454>)
 800404c:	f001 fbc4 	bl	80057d8 <puts>
    printf("R0 trung binh: %.1f Ω\r\n", mq135_r0_avg);
 8004050:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004052:	f7fc f9e9 	bl	8000428 <__aeabi_f2d>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4839      	ldr	r0, [pc, #228]	@ (8004140 <CalibrateSensors+0x448>)
 800405c:	f001 fb54 	bl	8005708 <iprintf>
    printf("Khoang bien thien: %.1f - %.1f Ω\r\n", mq135_min, mq135_max);
 8004060:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004062:	f7fc f9e1 	bl	8000428 <__aeabi_f2d>
 8004066:	4604      	mov	r4, r0
 8004068:	460d      	mov	r5, r1
 800406a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800406c:	f7fc f9dc 	bl	8000428 <__aeabi_f2d>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	e9cd 2300 	strd	r2, r3, [sp]
 8004078:	4622      	mov	r2, r4
 800407a:	462b      	mov	r3, r5
 800407c:	4831      	ldr	r0, [pc, #196]	@ (8004144 <CalibrateSensors+0x44c>)
 800407e:	f001 fb43 	bl	8005708 <iprintf>
    printf("Do on dinh: %.1f%%\r\n", mq135_stability);
 8004082:	6978      	ldr	r0, [r7, #20]
 8004084:	f7fc f9d0 	bl	8000428 <__aeabi_f2d>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	482e      	ldr	r0, [pc, #184]	@ (8004148 <CalibrateSensors+0x450>)
 800408e:	f001 fb3b 	bl	8005708 <iprintf>
    
    // Validate và apply R0 values
    uint8_t mq137_r0_valid = ValidateR0Value(mq137_r0_avg, mq137_stability, "MQ137");
 8004092:	4a2f      	ldr	r2, [pc, #188]	@ (8004150 <CalibrateSensors+0x458>)
 8004094:	69b9      	ldr	r1, [r7, #24]
 8004096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004098:	f000 f990 	bl	80043bc <ValidateR0Value>
 800409c:	4603      	mov	r3, r0
 800409e:	74fb      	strb	r3, [r7, #19]
    uint8_t mq135_r0_valid = ValidateR0Value(mq135_r0_avg, mq135_stability, "MQ135");
 80040a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004154 <CalibrateSensors+0x45c>)
 80040a2:	6979      	ldr	r1, [r7, #20]
 80040a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040a6:	f000 f989 	bl	80043bc <ValidateR0Value>
 80040aa:	4603      	mov	r3, r0
 80040ac:	74bb      	strb	r3, [r7, #18]
    
    if(mq137_r0_valid && mq135_r0_valid) {
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d029      	beq.n	8004108 <CalibrateSensors+0x410>
 80040b4:	7cbb      	ldrb	r3, [r7, #18]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d026      	beq.n	8004108 <CalibrateSensors+0x410>
        // Cập nhật giá trị R0
        g_sensor_system.mq137.base.r0_value = mq137_r0_avg;
 80040ba:	4a27      	ldr	r2, [pc, #156]	@ (8004158 <CalibrateSensors+0x460>)
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	6353      	str	r3, [r2, #52]	@ 0x34
        g_sensor_system.mq135.base.r0_value = mq135_r0_avg;
 80040c0:	4a25      	ldr	r2, [pc, #148]	@ (8004158 <CalibrateSensors+0x460>)
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
        
        printf("\r\n✅ HIEU CHUAN THANH CONG!\r\n");
 80040c8:	4824      	ldr	r0, [pc, #144]	@ (800415c <CalibrateSensors+0x464>)
 80040ca:	f001 fb85 	bl	80057d8 <puts>
        printf("R0 da duoc cap nhat:\r\n");
 80040ce:	4824      	ldr	r0, [pc, #144]	@ (8004160 <CalibrateSensors+0x468>)
 80040d0:	f001 fb82 	bl	80057d8 <puts>
        printf("- MQ137: %.1f Ω\r\n", mq137_r0_avg);
 80040d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040d6:	f7fc f9a7 	bl	8000428 <__aeabi_f2d>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4821      	ldr	r0, [pc, #132]	@ (8004164 <CalibrateSensors+0x46c>)
 80040e0:	f001 fb12 	bl	8005708 <iprintf>
        printf("- MQ135: %.1f Ω\r\n", mq135_r0_avg);
 80040e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040e6:	f7fc f99f 	bl	8000428 <__aeabi_f2d>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	481e      	ldr	r0, [pc, #120]	@ (8004168 <CalibrateSensors+0x470>)
 80040f0:	f001 fb0a 	bl	8005708 <iprintf>
        
        // Lưu vào Flash (optional)
        SaveCalibrationToFlash(mq137_r0_avg, mq135_r0_avg);
 80040f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040f8:	f000 fa84 	bl	8004604 <SaveCalibrationToFlash>
        
        // Test ngay với R0 mới
        printf("\r\n🧪 TEST VOI R0 MOI:\r\n");
 80040fc:	481b      	ldr	r0, [pc, #108]	@ (800416c <CalibrateSensors+0x474>)
 80040fe:	f001 fb6b 	bl	80057d8 <puts>
        TestCalibrationResult();
 8004102:	f000 fa47 	bl	8004594 <TestCalibrationResult>
 8004106:	e00c      	b.n	8004122 <CalibrateSensors+0x42a>
        
    } else {
        printf("\r\n❌ HIEU CHUAN THAT BAI!\r\n");
 8004108:	4819      	ldr	r0, [pc, #100]	@ (8004170 <CalibrateSensors+0x478>)
 800410a:	f001 fb65 	bl	80057d8 <puts>
        printf("Su dung gia tri R0 mac dinh\r\n");
 800410e:	4819      	ldr	r0, [pc, #100]	@ (8004174 <CalibrateSensors+0x47c>)
 8004110:	f001 fb62 	bl	80057d8 <puts>
        g_sensor_system.mq137.base.r0_value = 10000.0f;
 8004114:	4b10      	ldr	r3, [pc, #64]	@ (8004158 <CalibrateSensors+0x460>)
 8004116:	4a18      	ldr	r2, [pc, #96]	@ (8004178 <CalibrateSensors+0x480>)
 8004118:	635a      	str	r2, [r3, #52]	@ 0x34
        g_sensor_system.mq135.base.r0_value = 10000.0f;
 800411a:	4b0f      	ldr	r3, [pc, #60]	@ (8004158 <CalibrateSensors+0x460>)
 800411c:	4a16      	ldr	r2, [pc, #88]	@ (8004178 <CalibrateSensors+0x480>)
 800411e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }
    
    printf("===============================\r\n");
 8004122:	4816      	ldr	r0, [pc, #88]	@ (800417c <CalibrateSensors+0x484>)
 8004124:	f001 fb58 	bl	80057d8 <puts>
}
 8004128:	3754      	adds	r7, #84	@ 0x54
 800412a:	46bd      	mov	sp, r7
 800412c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004130:	42c80000 	.word	0x42c80000
 8004134:	0800a4f4 	.word	0x0800a4f4
 8004138:	0800a514 	.word	0x0800a514
 800413c:	0800a548 	.word	0x0800a548
 8004140:	0800a560 	.word	0x0800a560
 8004144:	0800a57c 	.word	0x0800a57c
 8004148:	0800a5a0 	.word	0x0800a5a0
 800414c:	0800a5b8 	.word	0x0800a5b8
 8004150:	0800a5d0 	.word	0x0800a5d0
 8004154:	0800a5d8 	.word	0x0800a5d8
 8004158:	20000350 	.word	0x20000350
 800415c:	0800a5e0 	.word	0x0800a5e0
 8004160:	0800a600 	.word	0x0800a600
 8004164:	0800a618 	.word	0x0800a618
 8004168:	0800a62c 	.word	0x0800a62c
 800416c:	0800a640 	.word	0x0800a640
 8004170:	0800a65c 	.word	0x0800a65c
 8004174:	0800a678 	.word	0x0800a678
 8004178:	461c4000 	.word	0x461c4000
 800417c:	0800a698 	.word	0x0800a698

08004180 <CheckCalibrationConditions>:

// =============================================================================
// CÁC HÀM HỖ TRỢ
// =============================================================================

uint8_t CheckCalibrationConditions(void) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b09a      	sub	sp, #104	@ 0x68
 8004184:	af00      	add	r7, sp, #0
    printf("Kiem tra dieu kien hieu chuan...\r\n");
 8004186:	4865      	ldr	r0, [pc, #404]	@ (800431c <CheckCalibrationConditions+0x19c>)
 8004188:	f001 fb26 	bl	80057d8 <puts>
    
    // Kiểm tra 10 sample để đánh giá ổn định
    float mq137_readings[10], mq135_readings[10];
    
    for(int i = 0; i < 10; i++) {
 800418c:	2300      	movs	r3, #0
 800418e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004190:	e019      	b.n	80041c6 <CheckCalibrationConditions+0x46>
        ProcessAllSensors();
 8004192:	f7ff fca7 	bl	8003ae4 <ProcessAllSensors>
        mq137_readings[i] = g_sensor_system.mq137.base.resistance;
 8004196:	4b62      	ldr	r3, [pc, #392]	@ (8004320 <CheckCalibrationConditions+0x1a0>)
 8004198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800419a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	3368      	adds	r3, #104	@ 0x68
 80041a0:	443b      	add	r3, r7
 80041a2:	f843 2c3c 	str.w	r2, [r3, #-60]
        mq135_readings[i] = g_sensor_system.mq135.base.resistance;
 80041a6:	4b5e      	ldr	r3, [pc, #376]	@ (8004320 <CheckCalibrationConditions+0x1a0>)
 80041a8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80041ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	3368      	adds	r3, #104	@ 0x68
 80041b2:	443b      	add	r3, r7
 80041b4:	f843 2c64 	str.w	r2, [r3, #-100]
        HAL_Delay(2000);  // 2 giây mỗi sample
 80041b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80041bc:	f7fd fc4e 	bl	8001a5c <HAL_Delay>
    for(int i = 0; i < 10; i++) {
 80041c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041c2:	3301      	adds	r3, #1
 80041c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80041c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	dde2      	ble.n	8004192 <CheckCalibrationConditions+0x12>
    }
    
    // Tính coefficient of variation
    float mq137_cv = CalculateCV(mq137_readings, 10);
 80041cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041d0:	210a      	movs	r1, #10
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f94c 	bl	8004470 <CalculateCV>
 80041d8:	6638      	str	r0, [r7, #96]	@ 0x60
    float mq135_cv = CalculateCV(mq135_readings, 10);
 80041da:	1d3b      	adds	r3, r7, #4
 80041dc:	210a      	movs	r1, #10
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f946 	bl	8004470 <CalculateCV>
 80041e4:	65f8      	str	r0, [r7, #92]	@ 0x5c
    
    printf("Do on dinh MQ137: %.1f%% (can <10%%)\r\n", mq137_cv);
 80041e6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80041e8:	f7fc f91e 	bl	8000428 <__aeabi_f2d>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	484c      	ldr	r0, [pc, #304]	@ (8004324 <CheckCalibrationConditions+0x1a4>)
 80041f2:	f001 fa89 	bl	8005708 <iprintf>
    printf("Do on dinh MQ135: %.1f%% (can <10%%)\r\n", mq135_cv);
 80041f6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80041f8:	f7fc f916 	bl	8000428 <__aeabi_f2d>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4849      	ldr	r0, [pc, #292]	@ (8004328 <CheckCalibrationConditions+0x1a8>)
 8004202:	f001 fa81 	bl	8005708 <iprintf>
    
    // Kiểm tra range hợp lý
    float mq137_avg = CalculateAverage(mq137_readings, 10);
 8004206:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800420a:	210a      	movs	r1, #10
 800420c:	4618      	mov	r0, r3
 800420e:	f000 f997 	bl	8004540 <CalculateAverage>
 8004212:	65b8      	str	r0, [r7, #88]	@ 0x58
    float mq135_avg = CalculateAverage(mq135_readings, 10);
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	210a      	movs	r1, #10
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f991 	bl	8004540 <CalculateAverage>
 800421e:	6578      	str	r0, [r7, #84]	@ 0x54
    
    printf("Dien tro trung binh MQ137: %.1f Ω\r\n", mq137_avg);
 8004220:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004222:	f7fc f901 	bl	8000428 <__aeabi_f2d>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4840      	ldr	r0, [pc, #256]	@ (800432c <CheckCalibrationConditions+0x1ac>)
 800422c:	f001 fa6c 	bl	8005708 <iprintf>
    printf("Dien tro trung binh MQ135: %.1f Ω\r\n", mq135_avg);
 8004230:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004232:	f7fc f8f9 	bl	8000428 <__aeabi_f2d>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	483d      	ldr	r0, [pc, #244]	@ (8004330 <CheckCalibrationConditions+0x1b0>)
 800423c:	f001 fa64 	bl	8005708 <iprintf>
    
    // Điều kiện pass
    if(mq137_cv < 10.0f && mq135_cv < 10.0f && 
 8004240:	493c      	ldr	r1, [pc, #240]	@ (8004334 <CheckCalibrationConditions+0x1b4>)
 8004242:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004244:	f7fc ff3c 	bl	80010c0 <__aeabi_fcmplt>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d027      	beq.n	800429e <CheckCalibrationConditions+0x11e>
 800424e:	4939      	ldr	r1, [pc, #228]	@ (8004334 <CheckCalibrationConditions+0x1b4>)
 8004250:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8004252:	f7fc ff35 	bl	80010c0 <__aeabi_fcmplt>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <CheckCalibrationConditions+0x11e>
 800425c:	4936      	ldr	r1, [pc, #216]	@ (8004338 <CheckCalibrationConditions+0x1b8>)
 800425e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004260:	f7fc ff4c 	bl	80010fc <__aeabi_fcmpgt>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d019      	beq.n	800429e <CheckCalibrationConditions+0x11e>
       mq137_avg > 10000.0f && mq137_avg < 200000.0f &&
 800426a:	4934      	ldr	r1, [pc, #208]	@ (800433c <CheckCalibrationConditions+0x1bc>)
 800426c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800426e:	f7fc ff27 	bl	80010c0 <__aeabi_fcmplt>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d012      	beq.n	800429e <CheckCalibrationConditions+0x11e>
 8004278:	492f      	ldr	r1, [pc, #188]	@ (8004338 <CheckCalibrationConditions+0x1b8>)
 800427a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800427c:	f7fc ff3e 	bl	80010fc <__aeabi_fcmpgt>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <CheckCalibrationConditions+0x11e>
       mq135_avg > 10000.0f && mq135_avg < 200000.0f) {
 8004286:	492d      	ldr	r1, [pc, #180]	@ (800433c <CheckCalibrationConditions+0x1bc>)
 8004288:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800428a:	f7fc ff19 	bl	80010c0 <__aeabi_fcmplt>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <CheckCalibrationConditions+0x11e>
        printf("✅ Dieu kien dat yeu cau\r\n");
 8004294:	482a      	ldr	r0, [pc, #168]	@ (8004340 <CheckCalibrationConditions+0x1c0>)
 8004296:	f001 fa9f 	bl	80057d8 <puts>
        return 1;
 800429a:	2301      	movs	r3, #1
 800429c:	e039      	b.n	8004312 <CheckCalibrationConditions+0x192>
    } else {
        printf("❌ Dieu kien chua dat yeu cau\r\n");
 800429e:	4829      	ldr	r0, [pc, #164]	@ (8004344 <CheckCalibrationConditions+0x1c4>)
 80042a0:	f001 fa9a 	bl	80057d8 <puts>
        if(mq137_cv >= 10.0f) printf("- MQ137 chua on dinh\r\n");
 80042a4:	4923      	ldr	r1, [pc, #140]	@ (8004334 <CheckCalibrationConditions+0x1b4>)
 80042a6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80042a8:	f7fc ff1e 	bl	80010e8 <__aeabi_fcmpge>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <CheckCalibrationConditions+0x138>
 80042b2:	4825      	ldr	r0, [pc, #148]	@ (8004348 <CheckCalibrationConditions+0x1c8>)
 80042b4:	f001 fa90 	bl	80057d8 <puts>
        if(mq135_cv >= 10.0f) printf("- MQ135 chua on dinh\r\n");
 80042b8:	491e      	ldr	r1, [pc, #120]	@ (8004334 <CheckCalibrationConditions+0x1b4>)
 80042ba:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80042bc:	f7fc ff14 	bl	80010e8 <__aeabi_fcmpge>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <CheckCalibrationConditions+0x14c>
 80042c6:	4821      	ldr	r0, [pc, #132]	@ (800434c <CheckCalibrationConditions+0x1cc>)
 80042c8:	f001 fa86 	bl	80057d8 <puts>
        if(mq137_avg <= 10000.0f || mq137_avg >= 200000.0f) {
 80042cc:	491a      	ldr	r1, [pc, #104]	@ (8004338 <CheckCalibrationConditions+0x1b8>)
 80042ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80042d0:	f7fc ff00 	bl	80010d4 <__aeabi_fcmple>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <CheckCalibrationConditions+0x168>
 80042da:	4918      	ldr	r1, [pc, #96]	@ (800433c <CheckCalibrationConditions+0x1bc>)
 80042dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80042de:	f7fc ff03 	bl	80010e8 <__aeabi_fcmpge>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <CheckCalibrationConditions+0x16e>
            printf("- MQ137 dien tro bat thuong\r\n");
 80042e8:	4819      	ldr	r0, [pc, #100]	@ (8004350 <CheckCalibrationConditions+0x1d0>)
 80042ea:	f001 fa75 	bl	80057d8 <puts>
        }
        if(mq135_avg <= 10000.0f || mq135_avg >= 200000.0f) {
 80042ee:	4912      	ldr	r1, [pc, #72]	@ (8004338 <CheckCalibrationConditions+0x1b8>)
 80042f0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80042f2:	f7fc feef 	bl	80010d4 <__aeabi_fcmple>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d106      	bne.n	800430a <CheckCalibrationConditions+0x18a>
 80042fc:	490f      	ldr	r1, [pc, #60]	@ (800433c <CheckCalibrationConditions+0x1bc>)
 80042fe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004300:	f7fc fef2 	bl	80010e8 <__aeabi_fcmpge>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <CheckCalibrationConditions+0x190>
            printf("- MQ135 dien tro bat thuong\r\n");
 800430a:	4812      	ldr	r0, [pc, #72]	@ (8004354 <CheckCalibrationConditions+0x1d4>)
 800430c:	f001 fa64 	bl	80057d8 <puts>
        }
        return 0;
 8004310:	2300      	movs	r3, #0
    }
}
 8004312:	4618      	mov	r0, r3
 8004314:	3768      	adds	r7, #104	@ 0x68
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	0800a6bc 	.word	0x0800a6bc
 8004320:	20000350 	.word	0x20000350
 8004324:	0800a6e0 	.word	0x0800a6e0
 8004328:	0800a708 	.word	0x0800a708
 800432c:	0800a730 	.word	0x0800a730
 8004330:	0800a758 	.word	0x0800a758
 8004334:	41200000 	.word	0x41200000
 8004338:	461c4000 	.word	0x461c4000
 800433c:	48435000 	.word	0x48435000
 8004340:	0800a780 	.word	0x0800a780
 8004344:	0800a79c 	.word	0x0800a79c
 8004348:	0800a7bc 	.word	0x0800a7bc
 800434c:	0800a7d4 	.word	0x0800a7d4
 8004350:	0800a7ec 	.word	0x0800a7ec
 8004354:	0800a80c 	.word	0x0800a80c

08004358 <ValidateCalibrationSample>:

uint8_t ValidateCalibrationSample(float resistance, float voltage) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
    // Kiểm tra điện áp hợp lệ
    if(voltage < 0.2f || voltage > 4.8f) return 0;
 8004362:	4912      	ldr	r1, [pc, #72]	@ (80043ac <ValidateCalibrationSample+0x54>)
 8004364:	6838      	ldr	r0, [r7, #0]
 8004366:	f7fc feab 	bl	80010c0 <__aeabi_fcmplt>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d106      	bne.n	800437e <ValidateCalibrationSample+0x26>
 8004370:	490f      	ldr	r1, [pc, #60]	@ (80043b0 <ValidateCalibrationSample+0x58>)
 8004372:	6838      	ldr	r0, [r7, #0]
 8004374:	f7fc fec2 	bl	80010fc <__aeabi_fcmpgt>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <ValidateCalibrationSample+0x2a>
 800437e:	2300      	movs	r3, #0
 8004380:	e010      	b.n	80043a4 <ValidateCalibrationSample+0x4c>
    
    // Kiểm tra điện trở trong khoảng cho clean air
    if(resistance < 8000.0f || resistance > 300000.0f) return 0;
 8004382:	490c      	ldr	r1, [pc, #48]	@ (80043b4 <ValidateCalibrationSample+0x5c>)
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7fc fe9b 	bl	80010c0 <__aeabi_fcmplt>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d106      	bne.n	800439e <ValidateCalibrationSample+0x46>
 8004390:	4909      	ldr	r1, [pc, #36]	@ (80043b8 <ValidateCalibrationSample+0x60>)
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc feb2 	bl	80010fc <__aeabi_fcmpgt>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <ValidateCalibrationSample+0x4a>
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <ValidateCalibrationSample+0x4c>
    
    return 1;
 80043a2:	2301      	movs	r3, #1
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	3e4ccccd 	.word	0x3e4ccccd
 80043b0:	4099999a 	.word	0x4099999a
 80043b4:	45fa0000 	.word	0x45fa0000
 80043b8:	48927c00 	.word	0x48927c00

080043bc <ValidateR0Value>:

uint8_t ValidateR0Value(float r0_value, float stability, const char* sensor_name) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
    printf("\r\nValidate %s R0...\r\n", sensor_name);
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4821      	ldr	r0, [pc, #132]	@ (8004450 <ValidateR0Value+0x94>)
 80043cc:	f001 f99c 	bl	8005708 <iprintf>
    
    // Kiểm tra range
    if(r0_value < 8000.0f) {
 80043d0:	4920      	ldr	r1, [pc, #128]	@ (8004454 <ValidateR0Value+0x98>)
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7fc fe74 	bl	80010c0 <__aeabi_fcmplt>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <ValidateR0Value+0x38>
        printf("❌ %s R0 qua thap (%.1f < 8kΩ)\r\n", sensor_name, r0_value);
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7fc f822 	bl	8000428 <__aeabi_f2d>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	481b      	ldr	r0, [pc, #108]	@ (8004458 <ValidateR0Value+0x9c>)
 80043ec:	f001 f98c 	bl	8005708 <iprintf>
        return 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e028      	b.n	8004446 <ValidateR0Value+0x8a>
    }
    if(r0_value > 200000.0f) {
 80043f4:	4919      	ldr	r1, [pc, #100]	@ (800445c <ValidateR0Value+0xa0>)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7fc fe80 	bl	80010fc <__aeabi_fcmpgt>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <ValidateR0Value+0x5c>
        printf("❌ %s R0 qua cao (%.1f > 200kΩ)\r\n", sensor_name, r0_value);
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7fc f810 	bl	8000428 <__aeabi_f2d>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4814      	ldr	r0, [pc, #80]	@ (8004460 <ValidateR0Value+0xa4>)
 8004410:	f001 f97a 	bl	8005708 <iprintf>
        return 0;
 8004414:	2300      	movs	r3, #0
 8004416:	e016      	b.n	8004446 <ValidateR0Value+0x8a>
    }
    
    // Kiểm tra stability
    if(stability > 15.0f) {
 8004418:	4912      	ldr	r1, [pc, #72]	@ (8004464 <ValidateR0Value+0xa8>)
 800441a:	68b8      	ldr	r0, [r7, #8]
 800441c:	f7fc fe6e 	bl	80010fc <__aeabi_fcmpgt>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <ValidateR0Value+0x80>
        printf("❌ %s chua on dinh (%.1f%% > 15%%)\r\n", sensor_name, stability);
 8004426:	68b8      	ldr	r0, [r7, #8]
 8004428:	f7fb fffe 	bl	8000428 <__aeabi_f2d>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	480d      	ldr	r0, [pc, #52]	@ (8004468 <ValidateR0Value+0xac>)
 8004434:	f001 f968 	bl	8005708 <iprintf>
        return 0;
 8004438:	2300      	movs	r3, #0
 800443a:	e004      	b.n	8004446 <ValidateR0Value+0x8a>
    }
    
    printf("✅ %s R0 hop le\r\n", sensor_name);
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	480b      	ldr	r0, [pc, #44]	@ (800446c <ValidateR0Value+0xb0>)
 8004440:	f001 f962 	bl	8005708 <iprintf>
    return 1;
 8004444:	2301      	movs	r3, #1
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	0800a82c 	.word	0x0800a82c
 8004454:	45fa0000 	.word	0x45fa0000
 8004458:	0800a844 	.word	0x0800a844
 800445c:	48435000 	.word	0x48435000
 8004460:	0800a868 	.word	0x0800a868
 8004464:	41700000 	.word	0x41700000
 8004468:	0800a88c 	.word	0x0800a88c
 800446c:	0800a8b4 	.word	0x0800a8b4

08004470 <CalculateCV>:

float CalculateCV(float* data, int count) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
    float sum = 0, avg, variance = 0;
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
    
    // Tính trung bình
    for(int i = 0; i < count; i++) {
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e00d      	b.n	80044a8 <CalculateCV+0x38>
        sum += data[i];
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4619      	mov	r1, r3
 8004498:	69f8      	ldr	r0, [r7, #28]
 800449a:	f7fc fb6b 	bl	8000b74 <__addsf3>
 800449e:	4603      	mov	r3, r0
 80044a0:	61fb      	str	r3, [r7, #28]
    for(int i = 0; i < count; i++) {
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	3301      	adds	r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	dbed      	blt.n	800448c <CalculateCV+0x1c>
    }
    avg = sum / count;
 80044b0:	6838      	ldr	r0, [r7, #0]
 80044b2:	f7fc fc13 	bl	8000cdc <__aeabi_i2f>
 80044b6:	4603      	mov	r3, r0
 80044b8:	4619      	mov	r1, r3
 80044ba:	69f8      	ldr	r0, [r7, #28]
 80044bc:	f7fc fd16 	bl	8000eec <__aeabi_fdiv>
 80044c0:	4603      	mov	r3, r0
 80044c2:	60fb      	str	r3, [r7, #12]
    
    // Tính variance
    for(int i = 0; i < count; i++) {
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	e018      	b.n	80044fc <CalculateCV+0x8c>
        variance += powf(data[i] - avg, 2);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc fb4a 	bl	8000b70 <__aeabi_fsub>
 80044dc:	4603      	mov	r3, r0
 80044de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80044e2:	4618      	mov	r0, r3
 80044e4:	f004 fdae 	bl	8009044 <powf>
 80044e8:	4603      	mov	r3, r0
 80044ea:	4619      	mov	r1, r3
 80044ec:	69b8      	ldr	r0, [r7, #24]
 80044ee:	f7fc fb41 	bl	8000b74 <__addsf3>
 80044f2:	4603      	mov	r3, r0
 80044f4:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < count; i++) {
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	3301      	adds	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	dbe2      	blt.n	80044ca <CalculateCV+0x5a>
    }
    variance /= count;
 8004504:	6838      	ldr	r0, [r7, #0]
 8004506:	f7fc fbe9 	bl	8000cdc <__aeabi_i2f>
 800450a:	4603      	mov	r3, r0
 800450c:	4619      	mov	r1, r3
 800450e:	69b8      	ldr	r0, [r7, #24]
 8004510:	f7fc fcec 	bl	8000eec <__aeabi_fdiv>
 8004514:	4603      	mov	r3, r0
 8004516:	61bb      	str	r3, [r7, #24]
    
    // Coefficient of variation = (std_dev / mean) * 100%
    float std_dev = sqrtf(variance);
 8004518:	69b8      	ldr	r0, [r7, #24]
 800451a:	f004 fde0 	bl	80090de <sqrtf>
 800451e:	60b8      	str	r0, [r7, #8]
    return (std_dev / avg) * 100.0f;
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	68b8      	ldr	r0, [r7, #8]
 8004524:	f7fc fce2 	bl	8000eec <__aeabi_fdiv>
 8004528:	4603      	mov	r3, r0
 800452a:	4904      	ldr	r1, [pc, #16]	@ (800453c <CalculateCV+0xcc>)
 800452c:	4618      	mov	r0, r3
 800452e:	f7fc fc29 	bl	8000d84 <__aeabi_fmul>
 8004532:	4603      	mov	r3, r0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	42c80000 	.word	0x42c80000

08004540 <CalculateAverage>:

float CalculateAverage(float* data, int count) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
    float sum = 0;
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < count; i++) {
 8004550:	2300      	movs	r3, #0
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	e00d      	b.n	8004572 <CalculateAverage+0x32>
        sum += data[i];
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7fc fb06 	bl	8000b74 <__addsf3>
 8004568:	4603      	mov	r3, r0
 800456a:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < count; i++) {
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	3301      	adds	r3, #1
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	dbed      	blt.n	8004556 <CalculateAverage+0x16>
    }
    return sum / count;
 800457a:	6838      	ldr	r0, [r7, #0]
 800457c:	f7fc fbae 	bl	8000cdc <__aeabi_i2f>
 8004580:	4603      	mov	r3, r0
 8004582:	4619      	mov	r1, r3
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7fc fcb1 	bl	8000eec <__aeabi_fdiv>
 800458a:	4603      	mov	r3, r0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <TestCalibrationResult>:

void TestCalibrationResult(void) {
 8004594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004596:	b087      	sub	sp, #28
 8004598:	af02      	add	r7, sp, #8
    printf("Test 5 lan voi R0 moi...\r\n");
 800459a:	4818      	ldr	r0, [pc, #96]	@ (80045fc <TestCalibrationResult+0x68>)
 800459c:	f001 f91c 	bl	80057d8 <puts>
    
    for(int i = 0; i < 5; i++) {
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	e022      	b.n	80045ec <TestCalibrationResult+0x58>
        ProcessAllSensors();
 80045a6:	f7ff fa9d 	bl	8003ae4 <ProcessAllSensors>
        
        float nh3_ppm = GetNH3_PPM();
 80045aa:	f000 f89f 	bl	80046ec <GetNH3_PPM>
 80045ae:	60b8      	str	r0, [r7, #8]
        float co2_ppm = GetCO2_PPM();
 80045b0:	f000 f8ae 	bl	8004710 <GetCO2_PPM>
 80045b4:	6078      	str	r0, [r7, #4]
        
        printf("Test %d: NH3=%.1f ppm, CO2=%.1f ppm\r\n", i+1, nh3_ppm, co2_ppm);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1c5e      	adds	r6, r3, #1
 80045ba:	68b8      	ldr	r0, [r7, #8]
 80045bc:	f7fb ff34 	bl	8000428 <__aeabi_f2d>
 80045c0:	4604      	mov	r4, r0
 80045c2:	460d      	mov	r5, r1
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7fb ff2f 	bl	8000428 <__aeabi_f2d>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	e9cd 2300 	strd	r2, r3, [sp]
 80045d2:	4622      	mov	r2, r4
 80045d4:	462b      	mov	r3, r5
 80045d6:	4631      	mov	r1, r6
 80045d8:	4809      	ldr	r0, [pc, #36]	@ (8004600 <TestCalibrationResult+0x6c>)
 80045da:	f001 f895 	bl	8005708 <iprintf>
        
        HAL_Delay(3000);
 80045de:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80045e2:	f7fd fa3b 	bl	8001a5c <HAL_Delay>
    for(int i = 0; i < 5; i++) {
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3301      	adds	r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	ddd9      	ble.n	80045a6 <TestCalibrationResult+0x12>
    }
}
 80045f2:	bf00      	nop
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fc:	0800a8c8 	.word	0x0800a8c8
 8004600:	0800a8e4 	.word	0x0800a8e4

08004604 <SaveCalibrationToFlash>:

void SaveCalibrationToFlash(float mq137_r0, float mq135_r0) {
 8004604:	b5b0      	push	{r4, r5, r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af02      	add	r7, sp, #8
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
    // TODO: Implement Flash save
    printf("💾 Luu R0 vao Flash: MQ137=%.1f, MQ135=%.1f\r\n", mq137_r0, mq135_r0);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fb ff0a 	bl	8000428 <__aeabi_f2d>
 8004614:	4604      	mov	r4, r0
 8004616:	460d      	mov	r5, r1
 8004618:	6838      	ldr	r0, [r7, #0]
 800461a:	f7fb ff05 	bl	8000428 <__aeabi_f2d>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	e9cd 2300 	strd	r2, r3, [sp]
 8004626:	4622      	mov	r2, r4
 8004628:	462b      	mov	r3, r5
 800462a:	4803      	ldr	r0, [pc, #12]	@ (8004638 <SaveCalibrationToFlash+0x34>)
 800462c:	f001 f86c 	bl	8005708 <iprintf>
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bdb0      	pop	{r4, r5, r7, pc}
 8004638:	0800a90c 	.word	0x0800a90c

0800463c <SetManualR0>:

// =============================================================================
// MANUAL R0 SETTING
// =============================================================================

void SetManualR0(float mq137_r0, float mq135_r0) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
    printf("\r\nTHIET LAP R0 THU CONG:\r\n");
 8004646:	4821      	ldr	r0, [pc, #132]	@ (80046cc <SetManualR0+0x90>)
 8004648:	f001 f8c6 	bl	80057d8 <puts>
    
    if(mq137_r0 > 5000.0f && mq137_r0 < 300000.0f) {
 800464c:	4920      	ldr	r1, [pc, #128]	@ (80046d0 <SetManualR0+0x94>)
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fc fd54 	bl	80010fc <__aeabi_fcmpgt>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d012      	beq.n	8004680 <SetManualR0+0x44>
 800465a:	491e      	ldr	r1, [pc, #120]	@ (80046d4 <SetManualR0+0x98>)
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fc fd2f 	bl	80010c0 <__aeabi_fcmplt>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <SetManualR0+0x44>
        g_sensor_system.mq137.base.r0_value = mq137_r0;
 8004668:	4a1b      	ldr	r2, [pc, #108]	@ (80046d8 <SetManualR0+0x9c>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6353      	str	r3, [r2, #52]	@ 0x34
        printf("✅ MQ137 R0 = %.1f Ω\r\n", mq137_r0);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fb feda 	bl	8000428 <__aeabi_f2d>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4818      	ldr	r0, [pc, #96]	@ (80046dc <SetManualR0+0xa0>)
 800467a:	f001 f845 	bl	8005708 <iprintf>
 800467e:	e002      	b.n	8004686 <SetManualR0+0x4a>
    } else {
        printf("❌ MQ137 R0 khong hop le\r\n");
 8004680:	4817      	ldr	r0, [pc, #92]	@ (80046e0 <SetManualR0+0xa4>)
 8004682:	f001 f8a9 	bl	80057d8 <puts>
    }
    
    if(mq135_r0 > 5000.0f && mq135_r0 < 300000.0f) {
 8004686:	4912      	ldr	r1, [pc, #72]	@ (80046d0 <SetManualR0+0x94>)
 8004688:	6838      	ldr	r0, [r7, #0]
 800468a:	f7fc fd37 	bl	80010fc <__aeabi_fcmpgt>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d013      	beq.n	80046bc <SetManualR0+0x80>
 8004694:	490f      	ldr	r1, [pc, #60]	@ (80046d4 <SetManualR0+0x98>)
 8004696:	6838      	ldr	r0, [r7, #0]
 8004698:	f7fc fd12 	bl	80010c0 <__aeabi_fcmplt>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00c      	beq.n	80046bc <SetManualR0+0x80>
        g_sensor_system.mq135.base.r0_value = mq135_r0;
 80046a2:	4a0d      	ldr	r2, [pc, #52]	@ (80046d8 <SetManualR0+0x9c>)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac
        printf("✅ MQ135 R0 = %.1f Ω\r\n", mq135_r0);
 80046aa:	6838      	ldr	r0, [r7, #0]
 80046ac:	f7fb febc 	bl	8000428 <__aeabi_f2d>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	480b      	ldr	r0, [pc, #44]	@ (80046e4 <SetManualR0+0xa8>)
 80046b6:	f001 f827 	bl	8005708 <iprintf>
 80046ba:	e003      	b.n	80046c4 <SetManualR0+0x88>
    } else {
        printf("❌ MQ135 R0 khong hop le\r\n");
 80046bc:	480a      	ldr	r0, [pc, #40]	@ (80046e8 <SetManualR0+0xac>)
 80046be:	f001 f88b 	bl	80057d8 <puts>
    }
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	0800aa38 	.word	0x0800aa38
 80046d0:	459c4000 	.word	0x459c4000
 80046d4:	48927c00 	.word	0x48927c00
 80046d8:	20000350 	.word	0x20000350
 80046dc:	0800aa54 	.word	0x0800aa54
 80046e0:	0800aa70 	.word	0x0800aa70
 80046e4:	0800aa8c 	.word	0x0800aa8c
 80046e8:	0800aaa8 	.word	0x0800aaa8

080046ec <GetNH3_PPM>:
// =============================================================================

/**
 * @brief Lấy nồng độ NH3 hiện tại
 */
float GetNH3_PPM(void) {
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
    return g_sensor_system.mq137.base.is_valid ? g_sensor_system.mq137.gas_ppm : 0.0f;
 80046f0:	4b06      	ldr	r3, [pc, #24]	@ (800470c <GetNH3_PPM+0x20>)
 80046f2:	7cdb      	ldrb	r3, [r3, #19]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <GetNH3_PPM+0x12>
 80046f8:	4b04      	ldr	r3, [pc, #16]	@ (800470c <GetNH3_PPM+0x20>)
 80046fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046fc:	e001      	b.n	8004702 <GetNH3_PPM+0x16>
 80046fe:	f04f 0300 	mov.w	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000350 	.word	0x20000350

08004710 <GetCO2_PPM>:

/**
 * @brief Lấy nồng độ CO2 hiện tại
 */
float GetCO2_PPM(void) {
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
    return g_sensor_system.mq135.base.is_valid ? g_sensor_system.mq135.gas_ppm : 0.0f;
 8004714:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <GetCO2_PPM+0x24>)
 8004716:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <GetCO2_PPM+0x16>
 800471e:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <GetCO2_PPM+0x24>)
 8004720:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004724:	e001      	b.n	800472a <GetCO2_PPM+0x1a>
 8004726:	f04f 0300 	mov.w	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000350 	.word	0x20000350

08004738 <GetNH3AlarmLevel>:

/**
 * @brief Lấy mức cảnh báo NH3
 */
AlarmLevel_t GetNH3AlarmLevel(void) {
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
    return g_sensor_system.mq137.alarm_level;
 800473c:	4b03      	ldr	r3, [pc, #12]	@ (800474c <GetNH3AlarmLevel+0x14>)
 800473e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
}
 8004742:	4618      	mov	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000350 	.word	0x20000350

08004750 <GetCO2AlarmLevel>:

/**
 * @brief Lấy mức cảnh báo CO2
 */
AlarmLevel_t GetCO2AlarmLevel(void) {
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
    return g_sensor_system.mq135.alarm_level;
 8004754:	4b03      	ldr	r3, [pc, #12]	@ (8004764 <GetCO2AlarmLevel+0x14>)
 8004756:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
}
 800475a:	4618      	mov	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000350 	.word	0x20000350

08004768 <GetSystemAlarmLevel>:

/**
 * @brief Lấy mức cảnh báo tổng thể
 */
AlarmLevel_t GetSystemAlarmLevel(void) {
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
    return g_sensor_system.system_alarm;
 800476c:	4b03      	ldr	r3, [pc, #12]	@ (800477c <GetSystemAlarmLevel+0x14>)
 800476e:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
}
 8004772:	4618      	mov	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000350 	.word	0x20000350

08004780 <GetSystemStatus>:

/**
 * @brief Lấy trạng thái hệ thống
 */
uint8_t GetSystemStatus(void) {
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
    return g_sensor_system.system_status;
 8004784:	4b03      	ldr	r3, [pc, #12]	@ (8004794 <GetSystemStatus+0x14>)
 8004786:	f893 30f1 	ldrb.w	r3, [r3, #241]	@ 0xf1
}
 800478a:	4618      	mov	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000350 	.word	0x20000350

08004798 <SaveToHistory>:
/**
 * @brief Lưu dữ liệu vào buffer lịch sử
 */
void SaveToHistory(void) {
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
    history_buffer[history_index] = g_sensor_system;
 800479c:	4b12      	ldr	r3, [pc, #72]	@ (80047e8 <SaveToHistory+0x50>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	4619      	mov	r1, r3
 80047a2:	4a12      	ldr	r2, [pc, #72]	@ (80047ec <SaveToHistory+0x54>)
 80047a4:	460b      	mov	r3, r1
 80047a6:	019b      	lsls	r3, r3, #6
 80047a8:	440b      	add	r3, r1
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	4a10      	ldr	r2, [pc, #64]	@ (80047f0 <SaveToHistory+0x58>)
 80047b0:	4618      	mov	r0, r3
 80047b2:	4611      	mov	r1, r2
 80047b4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80047b8:	461a      	mov	r2, r3
 80047ba:	f001 f99a 	bl	8005af2 <memcpy>
    history_index = (history_index + 1) % HISTORY_SIZE;
 80047be:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <SaveToHistory+0x50>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	4b0b      	ldr	r3, [pc, #44]	@ (80047f4 <SaveToHistory+0x5c>)
 80047c6:	fb83 1302 	smull	r1, r3, r3, r2
 80047ca:	4413      	add	r3, r2
 80047cc:	1159      	asrs	r1, r3, #5
 80047ce:	17d3      	asrs	r3, r2, #31
 80047d0:	1ac9      	subs	r1, r1, r3
 80047d2:	460b      	mov	r3, r1
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	1a5b      	subs	r3, r3, r1
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	1ad1      	subs	r1, r2, r3
 80047dc:	b2ca      	uxtb	r2, r1
 80047de:	4b02      	ldr	r3, [pc, #8]	@ (80047e8 <SaveToHistory+0x50>)
 80047e0:	701a      	strb	r2, [r3, #0]
}
 80047e2:	bf00      	nop
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20004144 	.word	0x20004144
 80047ec:	20000454 	.word	0x20000454
 80047f0:	20000350 	.word	0x20000350
 80047f4:	88888889 	.word	0x88888889

080047f8 <UpdateSystemStatus>:
/**
 * @brief Cập nhật trạng thái hệ thống
 */         

void UpdateSystemStatus(void) {
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
    uint8_t valid_sensors = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	71fb      	strb	r3, [r7, #7]
    AlarmLevel_t max_alarm = ALARM_NORMAL;
 8004802:	2300      	movs	r3, #0
 8004804:	71bb      	strb	r3, [r7, #6]
    
    // Đếm cảm biến hợp lệ và tìm mức cảnh báo cao nhất
    if(g_sensor_system.mq137.base.is_enabled && g_sensor_system.mq137.base.is_valid) {
 8004806:	4b28      	ldr	r3, [pc, #160]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 8004808:	7c9b      	ldrb	r3, [r3, #18]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d010      	beq.n	8004830 <UpdateSystemStatus+0x38>
 800480e:	4b26      	ldr	r3, [pc, #152]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 8004810:	7cdb      	ldrb	r3, [r3, #19]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <UpdateSystemStatus+0x38>
        valid_sensors++;
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	3301      	adds	r3, #1
 800481a:	71fb      	strb	r3, [r7, #7]
        if(g_sensor_system.mq137.alarm_level > max_alarm) {
 800481c:	4b22      	ldr	r3, [pc, #136]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 800481e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8004822:	79ba      	ldrb	r2, [r7, #6]
 8004824:	429a      	cmp	r2, r3
 8004826:	d203      	bcs.n	8004830 <UpdateSystemStatus+0x38>
            max_alarm = g_sensor_system.mq137.alarm_level;
 8004828:	4b1f      	ldr	r3, [pc, #124]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 800482a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800482e:	71bb      	strb	r3, [r7, #6]
        }
    }
    
    if(g_sensor_system.mq135.base.is_enabled && g_sensor_system.mq135.base.is_valid) {
 8004830:	4b1d      	ldr	r3, [pc, #116]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 8004832:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8004836:	2b00      	cmp	r3, #0
 8004838:	d011      	beq.n	800485e <UpdateSystemStatus+0x66>
 800483a:	4b1b      	ldr	r3, [pc, #108]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 800483c:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00c      	beq.n	800485e <UpdateSystemStatus+0x66>
        valid_sensors++;
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	3301      	adds	r3, #1
 8004848:	71fb      	strb	r3, [r7, #7]
        if(g_sensor_system.mq135.alarm_level > max_alarm) {
 800484a:	4b17      	ldr	r3, [pc, #92]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 800484c:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004850:	79ba      	ldrb	r2, [r7, #6]
 8004852:	429a      	cmp	r2, r3
 8004854:	d203      	bcs.n	800485e <UpdateSystemStatus+0x66>
            max_alarm = g_sensor_system.mq135.alarm_level;
 8004856:	4b14      	ldr	r3, [pc, #80]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 8004858:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800485c:	71bb      	strb	r3, [r7, #6]
        }
    }
    
    // Cập nhật trạng thái hệ thống
    if(valid_sensors == 2) {
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d104      	bne.n	800486e <UpdateSystemStatus+0x76>
        g_sensor_system.system_status = 3; // Tối ưu
 8004864:	4b10      	ldr	r3, [pc, #64]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 8004866:	2203      	movs	r2, #3
 8004868:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
 800486c:	e012      	b.n	8004894 <UpdateSystemStatus+0x9c>
    } else if(valid_sensors == 1) {
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d104      	bne.n	800487e <UpdateSystemStatus+0x86>
        g_sensor_system.system_status = 2; // Tốt
 8004874:	4b0c      	ldr	r3, [pc, #48]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 8004876:	2202      	movs	r2, #2
 8004878:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
 800487c:	e00a      	b.n	8004894 <UpdateSystemStatus+0x9c>
    } else {
        g_sensor_system.system_status = 0; // Lỗi
 800487e:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 8004880:	2200      	movs	r2, #0
 8004882:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
        g_sensor_system.error_count++;
 8004886:	4b08      	ldr	r3, [pc, #32]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 8004888:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800488c:	3301      	adds	r3, #1
 800488e:	4a06      	ldr	r2, [pc, #24]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 8004890:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
    }
    
    g_sensor_system.system_alarm = max_alarm;
 8004894:	4a04      	ldr	r2, [pc, #16]	@ (80048a8 <UpdateSystemStatus+0xb0>)
 8004896:	79bb      	ldrb	r3, [r7, #6]
 8004898:	f882 30f2 	strb.w	r3, [r2, #242]	@ 0xf2
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20000350 	.word	0x20000350

080048ac <__cvt>:
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b2:	461d      	mov	r5, r3
 80048b4:	bfbb      	ittet	lt
 80048b6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80048ba:	461d      	movlt	r5, r3
 80048bc:	2300      	movge	r3, #0
 80048be:	232d      	movlt	r3, #45	@ 0x2d
 80048c0:	b088      	sub	sp, #32
 80048c2:	4614      	mov	r4, r2
 80048c4:	bfb8      	it	lt
 80048c6:	4614      	movlt	r4, r2
 80048c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80048ca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80048cc:	7013      	strb	r3, [r2, #0]
 80048ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80048d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80048d4:	f023 0820 	bic.w	r8, r3, #32
 80048d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048dc:	d005      	beq.n	80048ea <__cvt+0x3e>
 80048de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80048e2:	d100      	bne.n	80048e6 <__cvt+0x3a>
 80048e4:	3601      	adds	r6, #1
 80048e6:	2302      	movs	r3, #2
 80048e8:	e000      	b.n	80048ec <__cvt+0x40>
 80048ea:	2303      	movs	r3, #3
 80048ec:	aa07      	add	r2, sp, #28
 80048ee:	9204      	str	r2, [sp, #16]
 80048f0:	aa06      	add	r2, sp, #24
 80048f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048f6:	e9cd 3600 	strd	r3, r6, [sp]
 80048fa:	4622      	mov	r2, r4
 80048fc:	462b      	mov	r3, r5
 80048fe:	f001 f993 	bl	8005c28 <_dtoa_r>
 8004902:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004906:	4607      	mov	r7, r0
 8004908:	d119      	bne.n	800493e <__cvt+0x92>
 800490a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800490c:	07db      	lsls	r3, r3, #31
 800490e:	d50e      	bpl.n	800492e <__cvt+0x82>
 8004910:	eb00 0906 	add.w	r9, r0, r6
 8004914:	2200      	movs	r2, #0
 8004916:	2300      	movs	r3, #0
 8004918:	4620      	mov	r0, r4
 800491a:	4629      	mov	r1, r5
 800491c:	f7fc f844 	bl	80009a8 <__aeabi_dcmpeq>
 8004920:	b108      	cbz	r0, 8004926 <__cvt+0x7a>
 8004922:	f8cd 901c 	str.w	r9, [sp, #28]
 8004926:	2230      	movs	r2, #48	@ 0x30
 8004928:	9b07      	ldr	r3, [sp, #28]
 800492a:	454b      	cmp	r3, r9
 800492c:	d31e      	bcc.n	800496c <__cvt+0xc0>
 800492e:	4638      	mov	r0, r7
 8004930:	9b07      	ldr	r3, [sp, #28]
 8004932:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004934:	1bdb      	subs	r3, r3, r7
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	b008      	add	sp, #32
 800493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004942:	eb00 0906 	add.w	r9, r0, r6
 8004946:	d1e5      	bne.n	8004914 <__cvt+0x68>
 8004948:	7803      	ldrb	r3, [r0, #0]
 800494a:	2b30      	cmp	r3, #48	@ 0x30
 800494c:	d10a      	bne.n	8004964 <__cvt+0xb8>
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7fc f827 	bl	80009a8 <__aeabi_dcmpeq>
 800495a:	b918      	cbnz	r0, 8004964 <__cvt+0xb8>
 800495c:	f1c6 0601 	rsb	r6, r6, #1
 8004960:	f8ca 6000 	str.w	r6, [sl]
 8004964:	f8da 3000 	ldr.w	r3, [sl]
 8004968:	4499      	add	r9, r3
 800496a:	e7d3      	b.n	8004914 <__cvt+0x68>
 800496c:	1c59      	adds	r1, r3, #1
 800496e:	9107      	str	r1, [sp, #28]
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e7d9      	b.n	8004928 <__cvt+0x7c>

08004974 <__exponent>:
 8004974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004976:	2900      	cmp	r1, #0
 8004978:	bfb6      	itet	lt
 800497a:	232d      	movlt	r3, #45	@ 0x2d
 800497c:	232b      	movge	r3, #43	@ 0x2b
 800497e:	4249      	neglt	r1, r1
 8004980:	2909      	cmp	r1, #9
 8004982:	7002      	strb	r2, [r0, #0]
 8004984:	7043      	strb	r3, [r0, #1]
 8004986:	dd29      	ble.n	80049dc <__exponent+0x68>
 8004988:	f10d 0307 	add.w	r3, sp, #7
 800498c:	461d      	mov	r5, r3
 800498e:	270a      	movs	r7, #10
 8004990:	fbb1 f6f7 	udiv	r6, r1, r7
 8004994:	461a      	mov	r2, r3
 8004996:	fb07 1416 	mls	r4, r7, r6, r1
 800499a:	3430      	adds	r4, #48	@ 0x30
 800499c:	f802 4c01 	strb.w	r4, [r2, #-1]
 80049a0:	460c      	mov	r4, r1
 80049a2:	2c63      	cmp	r4, #99	@ 0x63
 80049a4:	4631      	mov	r1, r6
 80049a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80049aa:	dcf1      	bgt.n	8004990 <__exponent+0x1c>
 80049ac:	3130      	adds	r1, #48	@ 0x30
 80049ae:	1e94      	subs	r4, r2, #2
 80049b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049b4:	4623      	mov	r3, r4
 80049b6:	1c41      	adds	r1, r0, #1
 80049b8:	42ab      	cmp	r3, r5
 80049ba:	d30a      	bcc.n	80049d2 <__exponent+0x5e>
 80049bc:	f10d 0309 	add.w	r3, sp, #9
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	42ac      	cmp	r4, r5
 80049c4:	bf88      	it	hi
 80049c6:	2300      	movhi	r3, #0
 80049c8:	3302      	adds	r3, #2
 80049ca:	4403      	add	r3, r0
 80049cc:	1a18      	subs	r0, r3, r0
 80049ce:	b003      	add	sp, #12
 80049d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80049d6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80049da:	e7ed      	b.n	80049b8 <__exponent+0x44>
 80049dc:	2330      	movs	r3, #48	@ 0x30
 80049de:	3130      	adds	r1, #48	@ 0x30
 80049e0:	7083      	strb	r3, [r0, #2]
 80049e2:	70c1      	strb	r1, [r0, #3]
 80049e4:	1d03      	adds	r3, r0, #4
 80049e6:	e7f1      	b.n	80049cc <__exponent+0x58>

080049e8 <_printf_float>:
 80049e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ec:	b091      	sub	sp, #68	@ 0x44
 80049ee:	460c      	mov	r4, r1
 80049f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80049f4:	4616      	mov	r6, r2
 80049f6:	461f      	mov	r7, r3
 80049f8:	4605      	mov	r5, r0
 80049fa:	f000 fff5 	bl	80059e8 <_localeconv_r>
 80049fe:	6803      	ldr	r3, [r0, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	9308      	str	r3, [sp, #32]
 8004a04:	f7fb fba4 	bl	8000150 <strlen>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a10:	9009      	str	r0, [sp, #36]	@ 0x24
 8004a12:	3307      	adds	r3, #7
 8004a14:	f023 0307 	bic.w	r3, r3, #7
 8004a18:	f103 0208 	add.w	r2, r3, #8
 8004a1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a20:	f8d4 b000 	ldr.w	fp, [r4]
 8004a24:	f8c8 2000 	str.w	r2, [r8]
 8004a28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a32:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004a36:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a42:	4b9c      	ldr	r3, [pc, #624]	@ (8004cb4 <_printf_float+0x2cc>)
 8004a44:	f7fb ffe2 	bl	8000a0c <__aeabi_dcmpun>
 8004a48:	bb70      	cbnz	r0, 8004aa8 <_printf_float+0xc0>
 8004a4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a52:	4b98      	ldr	r3, [pc, #608]	@ (8004cb4 <_printf_float+0x2cc>)
 8004a54:	f7fb ffbc 	bl	80009d0 <__aeabi_dcmple>
 8004a58:	bb30      	cbnz	r0, 8004aa8 <_printf_float+0xc0>
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4640      	mov	r0, r8
 8004a60:	4649      	mov	r1, r9
 8004a62:	f7fb ffab 	bl	80009bc <__aeabi_dcmplt>
 8004a66:	b110      	cbz	r0, 8004a6e <_printf_float+0x86>
 8004a68:	232d      	movs	r3, #45	@ 0x2d
 8004a6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a6e:	4a92      	ldr	r2, [pc, #584]	@ (8004cb8 <_printf_float+0x2d0>)
 8004a70:	4b92      	ldr	r3, [pc, #584]	@ (8004cbc <_printf_float+0x2d4>)
 8004a72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a76:	bf94      	ite	ls
 8004a78:	4690      	movls	r8, r2
 8004a7a:	4698      	movhi	r8, r3
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	f04f 0900 	mov.w	r9, #0
 8004a82:	6123      	str	r3, [r4, #16]
 8004a84:	f02b 0304 	bic.w	r3, fp, #4
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	4633      	mov	r3, r6
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	4628      	mov	r0, r5
 8004a90:	9700      	str	r7, [sp, #0]
 8004a92:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004a94:	f000 f9d4 	bl	8004e40 <_printf_common>
 8004a98:	3001      	adds	r0, #1
 8004a9a:	f040 8090 	bne.w	8004bbe <_printf_float+0x1d6>
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	b011      	add	sp, #68	@ 0x44
 8004aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	464b      	mov	r3, r9
 8004aac:	4640      	mov	r0, r8
 8004aae:	4649      	mov	r1, r9
 8004ab0:	f7fb ffac 	bl	8000a0c <__aeabi_dcmpun>
 8004ab4:	b148      	cbz	r0, 8004aca <_printf_float+0xe2>
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bfb8      	it	lt
 8004abc:	232d      	movlt	r3, #45	@ 0x2d
 8004abe:	4a80      	ldr	r2, [pc, #512]	@ (8004cc0 <_printf_float+0x2d8>)
 8004ac0:	bfb8      	it	lt
 8004ac2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8004cc4 <_printf_float+0x2dc>)
 8004ac8:	e7d3      	b.n	8004a72 <_printf_float+0x8a>
 8004aca:	6863      	ldr	r3, [r4, #4]
 8004acc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	d13f      	bne.n	8004b54 <_printf_float+0x16c>
 8004ad4:	2306      	movs	r3, #6
 8004ad6:	6063      	str	r3, [r4, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004ade:	6023      	str	r3, [r4, #0]
 8004ae0:	9206      	str	r2, [sp, #24]
 8004ae2:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ae4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004ae8:	aa0d      	add	r2, sp, #52	@ 0x34
 8004aea:	9203      	str	r2, [sp, #12]
 8004aec:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004af0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004af4:	6863      	ldr	r3, [r4, #4]
 8004af6:	4642      	mov	r2, r8
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	4628      	mov	r0, r5
 8004afc:	464b      	mov	r3, r9
 8004afe:	910a      	str	r1, [sp, #40]	@ 0x28
 8004b00:	f7ff fed4 	bl	80048ac <__cvt>
 8004b04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b06:	4680      	mov	r8, r0
 8004b08:	2947      	cmp	r1, #71	@ 0x47
 8004b0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004b0c:	d128      	bne.n	8004b60 <_printf_float+0x178>
 8004b0e:	1cc8      	adds	r0, r1, #3
 8004b10:	db02      	blt.n	8004b18 <_printf_float+0x130>
 8004b12:	6863      	ldr	r3, [r4, #4]
 8004b14:	4299      	cmp	r1, r3
 8004b16:	dd40      	ble.n	8004b9a <_printf_float+0x1b2>
 8004b18:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b1c:	fa5f fa8a 	uxtb.w	sl, sl
 8004b20:	4652      	mov	r2, sl
 8004b22:	3901      	subs	r1, #1
 8004b24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b28:	910d      	str	r1, [sp, #52]	@ 0x34
 8004b2a:	f7ff ff23 	bl	8004974 <__exponent>
 8004b2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b30:	4681      	mov	r9, r0
 8004b32:	1813      	adds	r3, r2, r0
 8004b34:	2a01      	cmp	r2, #1
 8004b36:	6123      	str	r3, [r4, #16]
 8004b38:	dc02      	bgt.n	8004b40 <_printf_float+0x158>
 8004b3a:	6822      	ldr	r2, [r4, #0]
 8004b3c:	07d2      	lsls	r2, r2, #31
 8004b3e:	d501      	bpl.n	8004b44 <_printf_float+0x15c>
 8004b40:	3301      	adds	r3, #1
 8004b42:	6123      	str	r3, [r4, #16]
 8004b44:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d09e      	beq.n	8004a8a <_printf_float+0xa2>
 8004b4c:	232d      	movs	r3, #45	@ 0x2d
 8004b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b52:	e79a      	b.n	8004a8a <_printf_float+0xa2>
 8004b54:	2947      	cmp	r1, #71	@ 0x47
 8004b56:	d1bf      	bne.n	8004ad8 <_printf_float+0xf0>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1bd      	bne.n	8004ad8 <_printf_float+0xf0>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e7ba      	b.n	8004ad6 <_printf_float+0xee>
 8004b60:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b64:	d9dc      	bls.n	8004b20 <_printf_float+0x138>
 8004b66:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b6a:	d118      	bne.n	8004b9e <_printf_float+0x1b6>
 8004b6c:	2900      	cmp	r1, #0
 8004b6e:	6863      	ldr	r3, [r4, #4]
 8004b70:	dd0b      	ble.n	8004b8a <_printf_float+0x1a2>
 8004b72:	6121      	str	r1, [r4, #16]
 8004b74:	b913      	cbnz	r3, 8004b7c <_printf_float+0x194>
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	07d0      	lsls	r0, r2, #31
 8004b7a:	d502      	bpl.n	8004b82 <_printf_float+0x19a>
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	440b      	add	r3, r1
 8004b80:	6123      	str	r3, [r4, #16]
 8004b82:	f04f 0900 	mov.w	r9, #0
 8004b86:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b88:	e7dc      	b.n	8004b44 <_printf_float+0x15c>
 8004b8a:	b913      	cbnz	r3, 8004b92 <_printf_float+0x1aa>
 8004b8c:	6822      	ldr	r2, [r4, #0]
 8004b8e:	07d2      	lsls	r2, r2, #31
 8004b90:	d501      	bpl.n	8004b96 <_printf_float+0x1ae>
 8004b92:	3302      	adds	r3, #2
 8004b94:	e7f4      	b.n	8004b80 <_printf_float+0x198>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e7f2      	b.n	8004b80 <_printf_float+0x198>
 8004b9a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ba0:	4299      	cmp	r1, r3
 8004ba2:	db05      	blt.n	8004bb0 <_printf_float+0x1c8>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	6121      	str	r1, [r4, #16]
 8004ba8:	07d8      	lsls	r0, r3, #31
 8004baa:	d5ea      	bpl.n	8004b82 <_printf_float+0x19a>
 8004bac:	1c4b      	adds	r3, r1, #1
 8004bae:	e7e7      	b.n	8004b80 <_printf_float+0x198>
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	bfcc      	ite	gt
 8004bb4:	2201      	movgt	r2, #1
 8004bb6:	f1c1 0202 	rsble	r2, r1, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	e7e0      	b.n	8004b80 <_printf_float+0x198>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	055a      	lsls	r2, r3, #21
 8004bc2:	d407      	bmi.n	8004bd4 <_printf_float+0x1ec>
 8004bc4:	6923      	ldr	r3, [r4, #16]
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4628      	mov	r0, r5
 8004bcc:	47b8      	blx	r7
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d12b      	bne.n	8004c2a <_printf_float+0x242>
 8004bd2:	e764      	b.n	8004a9e <_printf_float+0xb6>
 8004bd4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bd8:	f240 80dc 	bls.w	8004d94 <_printf_float+0x3ac>
 8004bdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004be0:	2200      	movs	r2, #0
 8004be2:	2300      	movs	r3, #0
 8004be4:	f7fb fee0 	bl	80009a8 <__aeabi_dcmpeq>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d033      	beq.n	8004c54 <_printf_float+0x26c>
 8004bec:	2301      	movs	r3, #1
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	4a35      	ldr	r2, [pc, #212]	@ (8004cc8 <_printf_float+0x2e0>)
 8004bf4:	47b8      	blx	r7
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	f43f af51 	beq.w	8004a9e <_printf_float+0xb6>
 8004bfc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004c00:	4543      	cmp	r3, r8
 8004c02:	db02      	blt.n	8004c0a <_printf_float+0x222>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	07d8      	lsls	r0, r3, #31
 8004c08:	d50f      	bpl.n	8004c2a <_printf_float+0x242>
 8004c0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b8      	blx	r7
 8004c14:	3001      	adds	r0, #1
 8004c16:	f43f af42 	beq.w	8004a9e <_printf_float+0xb6>
 8004c1a:	f04f 0900 	mov.w	r9, #0
 8004c1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c22:	f104 0a1a 	add.w	sl, r4, #26
 8004c26:	45c8      	cmp	r8, r9
 8004c28:	dc09      	bgt.n	8004c3e <_printf_float+0x256>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	079b      	lsls	r3, r3, #30
 8004c2e:	f100 8102 	bmi.w	8004e36 <_printf_float+0x44e>
 8004c32:	68e0      	ldr	r0, [r4, #12]
 8004c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c36:	4298      	cmp	r0, r3
 8004c38:	bfb8      	it	lt
 8004c3a:	4618      	movlt	r0, r3
 8004c3c:	e731      	b.n	8004aa2 <_printf_float+0xba>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4652      	mov	r2, sl
 8004c42:	4631      	mov	r1, r6
 8004c44:	4628      	mov	r0, r5
 8004c46:	47b8      	blx	r7
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f43f af28 	beq.w	8004a9e <_printf_float+0xb6>
 8004c4e:	f109 0901 	add.w	r9, r9, #1
 8004c52:	e7e8      	b.n	8004c26 <_printf_float+0x23e>
 8004c54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	dc38      	bgt.n	8004ccc <_printf_float+0x2e4>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4628      	mov	r0, r5
 8004c60:	4a19      	ldr	r2, [pc, #100]	@ (8004cc8 <_printf_float+0x2e0>)
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	f43f af1a 	beq.w	8004a9e <_printf_float+0xb6>
 8004c6a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004c6e:	ea59 0303 	orrs.w	r3, r9, r3
 8004c72:	d102      	bne.n	8004c7a <_printf_float+0x292>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	07d9      	lsls	r1, r3, #31
 8004c78:	d5d7      	bpl.n	8004c2a <_printf_float+0x242>
 8004c7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4628      	mov	r0, r5
 8004c82:	47b8      	blx	r7
 8004c84:	3001      	adds	r0, #1
 8004c86:	f43f af0a 	beq.w	8004a9e <_printf_float+0xb6>
 8004c8a:	f04f 0a00 	mov.w	sl, #0
 8004c8e:	f104 0b1a 	add.w	fp, r4, #26
 8004c92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c94:	425b      	negs	r3, r3
 8004c96:	4553      	cmp	r3, sl
 8004c98:	dc01      	bgt.n	8004c9e <_printf_float+0x2b6>
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	e793      	b.n	8004bc6 <_printf_float+0x1de>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	465a      	mov	r2, fp
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	47b8      	blx	r7
 8004ca8:	3001      	adds	r0, #1
 8004caa:	f43f aef8 	beq.w	8004a9e <_printf_float+0xb6>
 8004cae:	f10a 0a01 	add.w	sl, sl, #1
 8004cb2:	e7ee      	b.n	8004c92 <_printf_float+0x2aa>
 8004cb4:	7fefffff 	.word	0x7fefffff
 8004cb8:	0800aaee 	.word	0x0800aaee
 8004cbc:	0800aaf2 	.word	0x0800aaf2
 8004cc0:	0800aaf6 	.word	0x0800aaf6
 8004cc4:	0800aafa 	.word	0x0800aafa
 8004cc8:	0800aafe 	.word	0x0800aafe
 8004ccc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cce:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004cd2:	4553      	cmp	r3, sl
 8004cd4:	bfa8      	it	ge
 8004cd6:	4653      	movge	r3, sl
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	4699      	mov	r9, r3
 8004cdc:	dc36      	bgt.n	8004d4c <_printf_float+0x364>
 8004cde:	f04f 0b00 	mov.w	fp, #0
 8004ce2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ce6:	f104 021a 	add.w	r2, r4, #26
 8004cea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cec:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cee:	eba3 0309 	sub.w	r3, r3, r9
 8004cf2:	455b      	cmp	r3, fp
 8004cf4:	dc31      	bgt.n	8004d5a <_printf_float+0x372>
 8004cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cf8:	459a      	cmp	sl, r3
 8004cfa:	dc3a      	bgt.n	8004d72 <_printf_float+0x38a>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	07da      	lsls	r2, r3, #31
 8004d00:	d437      	bmi.n	8004d72 <_printf_float+0x38a>
 8004d02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d04:	ebaa 0903 	sub.w	r9, sl, r3
 8004d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d0a:	ebaa 0303 	sub.w	r3, sl, r3
 8004d0e:	4599      	cmp	r9, r3
 8004d10:	bfa8      	it	ge
 8004d12:	4699      	movge	r9, r3
 8004d14:	f1b9 0f00 	cmp.w	r9, #0
 8004d18:	dc33      	bgt.n	8004d82 <_printf_float+0x39a>
 8004d1a:	f04f 0800 	mov.w	r8, #0
 8004d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d22:	f104 0b1a 	add.w	fp, r4, #26
 8004d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d28:	ebaa 0303 	sub.w	r3, sl, r3
 8004d2c:	eba3 0309 	sub.w	r3, r3, r9
 8004d30:	4543      	cmp	r3, r8
 8004d32:	f77f af7a 	ble.w	8004c2a <_printf_float+0x242>
 8004d36:	2301      	movs	r3, #1
 8004d38:	465a      	mov	r2, fp
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b8      	blx	r7
 8004d40:	3001      	adds	r0, #1
 8004d42:	f43f aeac 	beq.w	8004a9e <_printf_float+0xb6>
 8004d46:	f108 0801 	add.w	r8, r8, #1
 8004d4a:	e7ec      	b.n	8004d26 <_printf_float+0x33e>
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b8      	blx	r7
 8004d54:	3001      	adds	r0, #1
 8004d56:	d1c2      	bne.n	8004cde <_printf_float+0x2f6>
 8004d58:	e6a1      	b.n	8004a9e <_printf_float+0xb6>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4628      	mov	r0, r5
 8004d60:	920a      	str	r2, [sp, #40]	@ 0x28
 8004d62:	47b8      	blx	r7
 8004d64:	3001      	adds	r0, #1
 8004d66:	f43f ae9a 	beq.w	8004a9e <_printf_float+0xb6>
 8004d6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d6c:	f10b 0b01 	add.w	fp, fp, #1
 8004d70:	e7bb      	b.n	8004cea <_printf_float+0x302>
 8004d72:	4631      	mov	r1, r6
 8004d74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d78:	4628      	mov	r0, r5
 8004d7a:	47b8      	blx	r7
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d1c0      	bne.n	8004d02 <_printf_float+0x31a>
 8004d80:	e68d      	b.n	8004a9e <_printf_float+0xb6>
 8004d82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d84:	464b      	mov	r3, r9
 8004d86:	4631      	mov	r1, r6
 8004d88:	4628      	mov	r0, r5
 8004d8a:	4442      	add	r2, r8
 8004d8c:	47b8      	blx	r7
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d1c3      	bne.n	8004d1a <_printf_float+0x332>
 8004d92:	e684      	b.n	8004a9e <_printf_float+0xb6>
 8004d94:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d98:	f1ba 0f01 	cmp.w	sl, #1
 8004d9c:	dc01      	bgt.n	8004da2 <_printf_float+0x3ba>
 8004d9e:	07db      	lsls	r3, r3, #31
 8004da0:	d536      	bpl.n	8004e10 <_printf_float+0x428>
 8004da2:	2301      	movs	r3, #1
 8004da4:	4642      	mov	r2, r8
 8004da6:	4631      	mov	r1, r6
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b8      	blx	r7
 8004dac:	3001      	adds	r0, #1
 8004dae:	f43f ae76 	beq.w	8004a9e <_printf_float+0xb6>
 8004db2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	f43f ae6e 	beq.w	8004a9e <_printf_float+0xb6>
 8004dc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dce:	f7fb fdeb 	bl	80009a8 <__aeabi_dcmpeq>
 8004dd2:	b9c0      	cbnz	r0, 8004e06 <_printf_float+0x41e>
 8004dd4:	4653      	mov	r3, sl
 8004dd6:	f108 0201 	add.w	r2, r8, #1
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	d10c      	bne.n	8004dfe <_printf_float+0x416>
 8004de4:	e65b      	b.n	8004a9e <_printf_float+0xb6>
 8004de6:	2301      	movs	r3, #1
 8004de8:	465a      	mov	r2, fp
 8004dea:	4631      	mov	r1, r6
 8004dec:	4628      	mov	r0, r5
 8004dee:	47b8      	blx	r7
 8004df0:	3001      	adds	r0, #1
 8004df2:	f43f ae54 	beq.w	8004a9e <_printf_float+0xb6>
 8004df6:	f108 0801 	add.w	r8, r8, #1
 8004dfa:	45d0      	cmp	r8, sl
 8004dfc:	dbf3      	blt.n	8004de6 <_printf_float+0x3fe>
 8004dfe:	464b      	mov	r3, r9
 8004e00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e04:	e6e0      	b.n	8004bc8 <_printf_float+0x1e0>
 8004e06:	f04f 0800 	mov.w	r8, #0
 8004e0a:	f104 0b1a 	add.w	fp, r4, #26
 8004e0e:	e7f4      	b.n	8004dfa <_printf_float+0x412>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4642      	mov	r2, r8
 8004e14:	e7e1      	b.n	8004dda <_printf_float+0x3f2>
 8004e16:	2301      	movs	r3, #1
 8004e18:	464a      	mov	r2, r9
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f ae3c 	beq.w	8004a9e <_printf_float+0xb6>
 8004e26:	f108 0801 	add.w	r8, r8, #1
 8004e2a:	68e3      	ldr	r3, [r4, #12]
 8004e2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004e2e:	1a5b      	subs	r3, r3, r1
 8004e30:	4543      	cmp	r3, r8
 8004e32:	dcf0      	bgt.n	8004e16 <_printf_float+0x42e>
 8004e34:	e6fd      	b.n	8004c32 <_printf_float+0x24a>
 8004e36:	f04f 0800 	mov.w	r8, #0
 8004e3a:	f104 0919 	add.w	r9, r4, #25
 8004e3e:	e7f4      	b.n	8004e2a <_printf_float+0x442>

08004e40 <_printf_common>:
 8004e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	4616      	mov	r6, r2
 8004e46:	4698      	mov	r8, r3
 8004e48:	688a      	ldr	r2, [r1, #8]
 8004e4a:	690b      	ldr	r3, [r1, #16]
 8004e4c:	4607      	mov	r7, r0
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	bfb8      	it	lt
 8004e52:	4613      	movlt	r3, r2
 8004e54:	6033      	str	r3, [r6, #0]
 8004e56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e60:	b10a      	cbz	r2, 8004e66 <_printf_common+0x26>
 8004e62:	3301      	adds	r3, #1
 8004e64:	6033      	str	r3, [r6, #0]
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	0699      	lsls	r1, r3, #26
 8004e6a:	bf42      	ittt	mi
 8004e6c:	6833      	ldrmi	r3, [r6, #0]
 8004e6e:	3302      	addmi	r3, #2
 8004e70:	6033      	strmi	r3, [r6, #0]
 8004e72:	6825      	ldr	r5, [r4, #0]
 8004e74:	f015 0506 	ands.w	r5, r5, #6
 8004e78:	d106      	bne.n	8004e88 <_printf_common+0x48>
 8004e7a:	f104 0a19 	add.w	sl, r4, #25
 8004e7e:	68e3      	ldr	r3, [r4, #12]
 8004e80:	6832      	ldr	r2, [r6, #0]
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	42ab      	cmp	r3, r5
 8004e86:	dc2b      	bgt.n	8004ee0 <_printf_common+0xa0>
 8004e88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e8c:	6822      	ldr	r2, [r4, #0]
 8004e8e:	3b00      	subs	r3, #0
 8004e90:	bf18      	it	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	0692      	lsls	r2, r2, #26
 8004e96:	d430      	bmi.n	8004efa <_printf_common+0xba>
 8004e98:	4641      	mov	r1, r8
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ea0:	47c8      	blx	r9
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d023      	beq.n	8004eee <_printf_common+0xae>
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	6922      	ldr	r2, [r4, #16]
 8004eaa:	f003 0306 	and.w	r3, r3, #6
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	bf14      	ite	ne
 8004eb2:	2500      	movne	r5, #0
 8004eb4:	6833      	ldreq	r3, [r6, #0]
 8004eb6:	f04f 0600 	mov.w	r6, #0
 8004eba:	bf08      	it	eq
 8004ebc:	68e5      	ldreq	r5, [r4, #12]
 8004ebe:	f104 041a 	add.w	r4, r4, #26
 8004ec2:	bf08      	it	eq
 8004ec4:	1aed      	subeq	r5, r5, r3
 8004ec6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004eca:	bf08      	it	eq
 8004ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bfc4      	itt	gt
 8004ed4:	1a9b      	subgt	r3, r3, r2
 8004ed6:	18ed      	addgt	r5, r5, r3
 8004ed8:	42b5      	cmp	r5, r6
 8004eda:	d11a      	bne.n	8004f12 <_printf_common+0xd2>
 8004edc:	2000      	movs	r0, #0
 8004ede:	e008      	b.n	8004ef2 <_printf_common+0xb2>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	4652      	mov	r2, sl
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	47c8      	blx	r9
 8004eea:	3001      	adds	r0, #1
 8004eec:	d103      	bne.n	8004ef6 <_printf_common+0xb6>
 8004eee:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef6:	3501      	adds	r5, #1
 8004ef8:	e7c1      	b.n	8004e7e <_printf_common+0x3e>
 8004efa:	2030      	movs	r0, #48	@ 0x30
 8004efc:	18e1      	adds	r1, r4, r3
 8004efe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f08:	4422      	add	r2, r4
 8004f0a:	3302      	adds	r3, #2
 8004f0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f10:	e7c2      	b.n	8004e98 <_printf_common+0x58>
 8004f12:	2301      	movs	r3, #1
 8004f14:	4622      	mov	r2, r4
 8004f16:	4641      	mov	r1, r8
 8004f18:	4638      	mov	r0, r7
 8004f1a:	47c8      	blx	r9
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d0e6      	beq.n	8004eee <_printf_common+0xae>
 8004f20:	3601      	adds	r6, #1
 8004f22:	e7d9      	b.n	8004ed8 <_printf_common+0x98>

08004f24 <_printf_i>:
 8004f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	7e0f      	ldrb	r7, [r1, #24]
 8004f2a:	4691      	mov	r9, r2
 8004f2c:	2f78      	cmp	r7, #120	@ 0x78
 8004f2e:	4680      	mov	r8, r0
 8004f30:	460c      	mov	r4, r1
 8004f32:	469a      	mov	sl, r3
 8004f34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f3a:	d807      	bhi.n	8004f4c <_printf_i+0x28>
 8004f3c:	2f62      	cmp	r7, #98	@ 0x62
 8004f3e:	d80a      	bhi.n	8004f56 <_printf_i+0x32>
 8004f40:	2f00      	cmp	r7, #0
 8004f42:	f000 80d3 	beq.w	80050ec <_printf_i+0x1c8>
 8004f46:	2f58      	cmp	r7, #88	@ 0x58
 8004f48:	f000 80ba 	beq.w	80050c0 <_printf_i+0x19c>
 8004f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f54:	e03a      	b.n	8004fcc <_printf_i+0xa8>
 8004f56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f5a:	2b15      	cmp	r3, #21
 8004f5c:	d8f6      	bhi.n	8004f4c <_printf_i+0x28>
 8004f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f64 <_printf_i+0x40>)
 8004f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f64:	08004fbd 	.word	0x08004fbd
 8004f68:	08004fd1 	.word	0x08004fd1
 8004f6c:	08004f4d 	.word	0x08004f4d
 8004f70:	08004f4d 	.word	0x08004f4d
 8004f74:	08004f4d 	.word	0x08004f4d
 8004f78:	08004f4d 	.word	0x08004f4d
 8004f7c:	08004fd1 	.word	0x08004fd1
 8004f80:	08004f4d 	.word	0x08004f4d
 8004f84:	08004f4d 	.word	0x08004f4d
 8004f88:	08004f4d 	.word	0x08004f4d
 8004f8c:	08004f4d 	.word	0x08004f4d
 8004f90:	080050d3 	.word	0x080050d3
 8004f94:	08004ffb 	.word	0x08004ffb
 8004f98:	0800508d 	.word	0x0800508d
 8004f9c:	08004f4d 	.word	0x08004f4d
 8004fa0:	08004f4d 	.word	0x08004f4d
 8004fa4:	080050f5 	.word	0x080050f5
 8004fa8:	08004f4d 	.word	0x08004f4d
 8004fac:	08004ffb 	.word	0x08004ffb
 8004fb0:	08004f4d 	.word	0x08004f4d
 8004fb4:	08004f4d 	.word	0x08004f4d
 8004fb8:	08005095 	.word	0x08005095
 8004fbc:	6833      	ldr	r3, [r6, #0]
 8004fbe:	1d1a      	adds	r2, r3, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6032      	str	r2, [r6, #0]
 8004fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e09e      	b.n	800510e <_printf_i+0x1ea>
 8004fd0:	6833      	ldr	r3, [r6, #0]
 8004fd2:	6820      	ldr	r0, [r4, #0]
 8004fd4:	1d19      	adds	r1, r3, #4
 8004fd6:	6031      	str	r1, [r6, #0]
 8004fd8:	0606      	lsls	r6, r0, #24
 8004fda:	d501      	bpl.n	8004fe0 <_printf_i+0xbc>
 8004fdc:	681d      	ldr	r5, [r3, #0]
 8004fde:	e003      	b.n	8004fe8 <_printf_i+0xc4>
 8004fe0:	0645      	lsls	r5, r0, #25
 8004fe2:	d5fb      	bpl.n	8004fdc <_printf_i+0xb8>
 8004fe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fe8:	2d00      	cmp	r5, #0
 8004fea:	da03      	bge.n	8004ff4 <_printf_i+0xd0>
 8004fec:	232d      	movs	r3, #45	@ 0x2d
 8004fee:	426d      	negs	r5, r5
 8004ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ff4:	230a      	movs	r3, #10
 8004ff6:	4859      	ldr	r0, [pc, #356]	@ (800515c <_printf_i+0x238>)
 8004ff8:	e011      	b.n	800501e <_printf_i+0xfa>
 8004ffa:	6821      	ldr	r1, [r4, #0]
 8004ffc:	6833      	ldr	r3, [r6, #0]
 8004ffe:	0608      	lsls	r0, r1, #24
 8005000:	f853 5b04 	ldr.w	r5, [r3], #4
 8005004:	d402      	bmi.n	800500c <_printf_i+0xe8>
 8005006:	0649      	lsls	r1, r1, #25
 8005008:	bf48      	it	mi
 800500a:	b2ad      	uxthmi	r5, r5
 800500c:	2f6f      	cmp	r7, #111	@ 0x6f
 800500e:	6033      	str	r3, [r6, #0]
 8005010:	bf14      	ite	ne
 8005012:	230a      	movne	r3, #10
 8005014:	2308      	moveq	r3, #8
 8005016:	4851      	ldr	r0, [pc, #324]	@ (800515c <_printf_i+0x238>)
 8005018:	2100      	movs	r1, #0
 800501a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800501e:	6866      	ldr	r6, [r4, #4]
 8005020:	2e00      	cmp	r6, #0
 8005022:	bfa8      	it	ge
 8005024:	6821      	ldrge	r1, [r4, #0]
 8005026:	60a6      	str	r6, [r4, #8]
 8005028:	bfa4      	itt	ge
 800502a:	f021 0104 	bicge.w	r1, r1, #4
 800502e:	6021      	strge	r1, [r4, #0]
 8005030:	b90d      	cbnz	r5, 8005036 <_printf_i+0x112>
 8005032:	2e00      	cmp	r6, #0
 8005034:	d04b      	beq.n	80050ce <_printf_i+0x1aa>
 8005036:	4616      	mov	r6, r2
 8005038:	fbb5 f1f3 	udiv	r1, r5, r3
 800503c:	fb03 5711 	mls	r7, r3, r1, r5
 8005040:	5dc7      	ldrb	r7, [r0, r7]
 8005042:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005046:	462f      	mov	r7, r5
 8005048:	42bb      	cmp	r3, r7
 800504a:	460d      	mov	r5, r1
 800504c:	d9f4      	bls.n	8005038 <_printf_i+0x114>
 800504e:	2b08      	cmp	r3, #8
 8005050:	d10b      	bne.n	800506a <_printf_i+0x146>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	07df      	lsls	r7, r3, #31
 8005056:	d508      	bpl.n	800506a <_printf_i+0x146>
 8005058:	6923      	ldr	r3, [r4, #16]
 800505a:	6861      	ldr	r1, [r4, #4]
 800505c:	4299      	cmp	r1, r3
 800505e:	bfde      	ittt	le
 8005060:	2330      	movle	r3, #48	@ 0x30
 8005062:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005066:	f106 36ff 	addle.w	r6, r6, #4294967295
 800506a:	1b92      	subs	r2, r2, r6
 800506c:	6122      	str	r2, [r4, #16]
 800506e:	464b      	mov	r3, r9
 8005070:	4621      	mov	r1, r4
 8005072:	4640      	mov	r0, r8
 8005074:	f8cd a000 	str.w	sl, [sp]
 8005078:	aa03      	add	r2, sp, #12
 800507a:	f7ff fee1 	bl	8004e40 <_printf_common>
 800507e:	3001      	adds	r0, #1
 8005080:	d14a      	bne.n	8005118 <_printf_i+0x1f4>
 8005082:	f04f 30ff 	mov.w	r0, #4294967295
 8005086:	b004      	add	sp, #16
 8005088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	f043 0320 	orr.w	r3, r3, #32
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	2778      	movs	r7, #120	@ 0x78
 8005096:	4832      	ldr	r0, [pc, #200]	@ (8005160 <_printf_i+0x23c>)
 8005098:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	6831      	ldr	r1, [r6, #0]
 80050a0:	061f      	lsls	r7, r3, #24
 80050a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80050a6:	d402      	bmi.n	80050ae <_printf_i+0x18a>
 80050a8:	065f      	lsls	r7, r3, #25
 80050aa:	bf48      	it	mi
 80050ac:	b2ad      	uxthmi	r5, r5
 80050ae:	6031      	str	r1, [r6, #0]
 80050b0:	07d9      	lsls	r1, r3, #31
 80050b2:	bf44      	itt	mi
 80050b4:	f043 0320 	orrmi.w	r3, r3, #32
 80050b8:	6023      	strmi	r3, [r4, #0]
 80050ba:	b11d      	cbz	r5, 80050c4 <_printf_i+0x1a0>
 80050bc:	2310      	movs	r3, #16
 80050be:	e7ab      	b.n	8005018 <_printf_i+0xf4>
 80050c0:	4826      	ldr	r0, [pc, #152]	@ (800515c <_printf_i+0x238>)
 80050c2:	e7e9      	b.n	8005098 <_printf_i+0x174>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	f023 0320 	bic.w	r3, r3, #32
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	e7f6      	b.n	80050bc <_printf_i+0x198>
 80050ce:	4616      	mov	r6, r2
 80050d0:	e7bd      	b.n	800504e <_printf_i+0x12a>
 80050d2:	6833      	ldr	r3, [r6, #0]
 80050d4:	6825      	ldr	r5, [r4, #0]
 80050d6:	1d18      	adds	r0, r3, #4
 80050d8:	6961      	ldr	r1, [r4, #20]
 80050da:	6030      	str	r0, [r6, #0]
 80050dc:	062e      	lsls	r6, r5, #24
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	d501      	bpl.n	80050e6 <_printf_i+0x1c2>
 80050e2:	6019      	str	r1, [r3, #0]
 80050e4:	e002      	b.n	80050ec <_printf_i+0x1c8>
 80050e6:	0668      	lsls	r0, r5, #25
 80050e8:	d5fb      	bpl.n	80050e2 <_printf_i+0x1be>
 80050ea:	8019      	strh	r1, [r3, #0]
 80050ec:	2300      	movs	r3, #0
 80050ee:	4616      	mov	r6, r2
 80050f0:	6123      	str	r3, [r4, #16]
 80050f2:	e7bc      	b.n	800506e <_printf_i+0x14a>
 80050f4:	6833      	ldr	r3, [r6, #0]
 80050f6:	2100      	movs	r1, #0
 80050f8:	1d1a      	adds	r2, r3, #4
 80050fa:	6032      	str	r2, [r6, #0]
 80050fc:	681e      	ldr	r6, [r3, #0]
 80050fe:	6862      	ldr	r2, [r4, #4]
 8005100:	4630      	mov	r0, r6
 8005102:	f000 fce8 	bl	8005ad6 <memchr>
 8005106:	b108      	cbz	r0, 800510c <_printf_i+0x1e8>
 8005108:	1b80      	subs	r0, r0, r6
 800510a:	6060      	str	r0, [r4, #4]
 800510c:	6863      	ldr	r3, [r4, #4]
 800510e:	6123      	str	r3, [r4, #16]
 8005110:	2300      	movs	r3, #0
 8005112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005116:	e7aa      	b.n	800506e <_printf_i+0x14a>
 8005118:	4632      	mov	r2, r6
 800511a:	4649      	mov	r1, r9
 800511c:	4640      	mov	r0, r8
 800511e:	6923      	ldr	r3, [r4, #16]
 8005120:	47d0      	blx	sl
 8005122:	3001      	adds	r0, #1
 8005124:	d0ad      	beq.n	8005082 <_printf_i+0x15e>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	079b      	lsls	r3, r3, #30
 800512a:	d413      	bmi.n	8005154 <_printf_i+0x230>
 800512c:	68e0      	ldr	r0, [r4, #12]
 800512e:	9b03      	ldr	r3, [sp, #12]
 8005130:	4298      	cmp	r0, r3
 8005132:	bfb8      	it	lt
 8005134:	4618      	movlt	r0, r3
 8005136:	e7a6      	b.n	8005086 <_printf_i+0x162>
 8005138:	2301      	movs	r3, #1
 800513a:	4632      	mov	r2, r6
 800513c:	4649      	mov	r1, r9
 800513e:	4640      	mov	r0, r8
 8005140:	47d0      	blx	sl
 8005142:	3001      	adds	r0, #1
 8005144:	d09d      	beq.n	8005082 <_printf_i+0x15e>
 8005146:	3501      	adds	r5, #1
 8005148:	68e3      	ldr	r3, [r4, #12]
 800514a:	9903      	ldr	r1, [sp, #12]
 800514c:	1a5b      	subs	r3, r3, r1
 800514e:	42ab      	cmp	r3, r5
 8005150:	dcf2      	bgt.n	8005138 <_printf_i+0x214>
 8005152:	e7eb      	b.n	800512c <_printf_i+0x208>
 8005154:	2500      	movs	r5, #0
 8005156:	f104 0619 	add.w	r6, r4, #25
 800515a:	e7f5      	b.n	8005148 <_printf_i+0x224>
 800515c:	0800ab00 	.word	0x0800ab00
 8005160:	0800ab11 	.word	0x0800ab11

08005164 <_scanf_float>:
 8005164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005168:	b087      	sub	sp, #28
 800516a:	9303      	str	r3, [sp, #12]
 800516c:	688b      	ldr	r3, [r1, #8]
 800516e:	4617      	mov	r7, r2
 8005170:	1e5a      	subs	r2, r3, #1
 8005172:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005176:	bf82      	ittt	hi
 8005178:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800517c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005180:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005184:	460a      	mov	r2, r1
 8005186:	f04f 0500 	mov.w	r5, #0
 800518a:	bf88      	it	hi
 800518c:	608b      	strhi	r3, [r1, #8]
 800518e:	680b      	ldr	r3, [r1, #0]
 8005190:	4680      	mov	r8, r0
 8005192:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005196:	f842 3b1c 	str.w	r3, [r2], #28
 800519a:	460c      	mov	r4, r1
 800519c:	bf98      	it	ls
 800519e:	f04f 0b00 	movls.w	fp, #0
 80051a2:	4616      	mov	r6, r2
 80051a4:	46aa      	mov	sl, r5
 80051a6:	46a9      	mov	r9, r5
 80051a8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80051ac:	9201      	str	r2, [sp, #4]
 80051ae:	9502      	str	r5, [sp, #8]
 80051b0:	68a2      	ldr	r2, [r4, #8]
 80051b2:	b152      	cbz	r2, 80051ca <_scanf_float+0x66>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b4e      	cmp	r3, #78	@ 0x4e
 80051ba:	d865      	bhi.n	8005288 <_scanf_float+0x124>
 80051bc:	2b40      	cmp	r3, #64	@ 0x40
 80051be:	d83d      	bhi.n	800523c <_scanf_float+0xd8>
 80051c0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80051c4:	b2c8      	uxtb	r0, r1
 80051c6:	280e      	cmp	r0, #14
 80051c8:	d93b      	bls.n	8005242 <_scanf_float+0xde>
 80051ca:	f1b9 0f00 	cmp.w	r9, #0
 80051ce:	d003      	beq.n	80051d8 <_scanf_float+0x74>
 80051d0:	6823      	ldr	r3, [r4, #0]
 80051d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051d6:	6023      	str	r3, [r4, #0]
 80051d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051dc:	f1ba 0f01 	cmp.w	sl, #1
 80051e0:	f200 8118 	bhi.w	8005414 <_scanf_float+0x2b0>
 80051e4:	9b01      	ldr	r3, [sp, #4]
 80051e6:	429e      	cmp	r6, r3
 80051e8:	f200 8109 	bhi.w	80053fe <_scanf_float+0x29a>
 80051ec:	2001      	movs	r0, #1
 80051ee:	b007      	add	sp, #28
 80051f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80051f8:	2a0d      	cmp	r2, #13
 80051fa:	d8e6      	bhi.n	80051ca <_scanf_float+0x66>
 80051fc:	a101      	add	r1, pc, #4	@ (adr r1, 8005204 <_scanf_float+0xa0>)
 80051fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005202:	bf00      	nop
 8005204:	0800534b 	.word	0x0800534b
 8005208:	080051cb 	.word	0x080051cb
 800520c:	080051cb 	.word	0x080051cb
 8005210:	080051cb 	.word	0x080051cb
 8005214:	080053ab 	.word	0x080053ab
 8005218:	08005383 	.word	0x08005383
 800521c:	080051cb 	.word	0x080051cb
 8005220:	080051cb 	.word	0x080051cb
 8005224:	08005359 	.word	0x08005359
 8005228:	080051cb 	.word	0x080051cb
 800522c:	080051cb 	.word	0x080051cb
 8005230:	080051cb 	.word	0x080051cb
 8005234:	080051cb 	.word	0x080051cb
 8005238:	08005311 	.word	0x08005311
 800523c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005240:	e7da      	b.n	80051f8 <_scanf_float+0x94>
 8005242:	290e      	cmp	r1, #14
 8005244:	d8c1      	bhi.n	80051ca <_scanf_float+0x66>
 8005246:	a001      	add	r0, pc, #4	@ (adr r0, 800524c <_scanf_float+0xe8>)
 8005248:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800524c:	08005301 	.word	0x08005301
 8005250:	080051cb 	.word	0x080051cb
 8005254:	08005301 	.word	0x08005301
 8005258:	08005397 	.word	0x08005397
 800525c:	080051cb 	.word	0x080051cb
 8005260:	080052a9 	.word	0x080052a9
 8005264:	080052e7 	.word	0x080052e7
 8005268:	080052e7 	.word	0x080052e7
 800526c:	080052e7 	.word	0x080052e7
 8005270:	080052e7 	.word	0x080052e7
 8005274:	080052e7 	.word	0x080052e7
 8005278:	080052e7 	.word	0x080052e7
 800527c:	080052e7 	.word	0x080052e7
 8005280:	080052e7 	.word	0x080052e7
 8005284:	080052e7 	.word	0x080052e7
 8005288:	2b6e      	cmp	r3, #110	@ 0x6e
 800528a:	d809      	bhi.n	80052a0 <_scanf_float+0x13c>
 800528c:	2b60      	cmp	r3, #96	@ 0x60
 800528e:	d8b1      	bhi.n	80051f4 <_scanf_float+0x90>
 8005290:	2b54      	cmp	r3, #84	@ 0x54
 8005292:	d07b      	beq.n	800538c <_scanf_float+0x228>
 8005294:	2b59      	cmp	r3, #89	@ 0x59
 8005296:	d198      	bne.n	80051ca <_scanf_float+0x66>
 8005298:	2d07      	cmp	r5, #7
 800529a:	d196      	bne.n	80051ca <_scanf_float+0x66>
 800529c:	2508      	movs	r5, #8
 800529e:	e02c      	b.n	80052fa <_scanf_float+0x196>
 80052a0:	2b74      	cmp	r3, #116	@ 0x74
 80052a2:	d073      	beq.n	800538c <_scanf_float+0x228>
 80052a4:	2b79      	cmp	r3, #121	@ 0x79
 80052a6:	e7f6      	b.n	8005296 <_scanf_float+0x132>
 80052a8:	6821      	ldr	r1, [r4, #0]
 80052aa:	05c8      	lsls	r0, r1, #23
 80052ac:	d51b      	bpl.n	80052e6 <_scanf_float+0x182>
 80052ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80052b2:	6021      	str	r1, [r4, #0]
 80052b4:	f109 0901 	add.w	r9, r9, #1
 80052b8:	f1bb 0f00 	cmp.w	fp, #0
 80052bc:	d003      	beq.n	80052c6 <_scanf_float+0x162>
 80052be:	3201      	adds	r2, #1
 80052c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052c4:	60a2      	str	r2, [r4, #8]
 80052c6:	68a3      	ldr	r3, [r4, #8]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	60a3      	str	r3, [r4, #8]
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	3301      	adds	r3, #1
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	f340 8087 	ble.w	80053ec <_scanf_float+0x288>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	e764      	b.n	80051b0 <_scanf_float+0x4c>
 80052e6:	eb1a 0105 	adds.w	r1, sl, r5
 80052ea:	f47f af6e 	bne.w	80051ca <_scanf_float+0x66>
 80052ee:	460d      	mov	r5, r1
 80052f0:	468a      	mov	sl, r1
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80052f8:	6022      	str	r2, [r4, #0]
 80052fa:	f806 3b01 	strb.w	r3, [r6], #1
 80052fe:	e7e2      	b.n	80052c6 <_scanf_float+0x162>
 8005300:	6822      	ldr	r2, [r4, #0]
 8005302:	0610      	lsls	r0, r2, #24
 8005304:	f57f af61 	bpl.w	80051ca <_scanf_float+0x66>
 8005308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800530c:	6022      	str	r2, [r4, #0]
 800530e:	e7f4      	b.n	80052fa <_scanf_float+0x196>
 8005310:	f1ba 0f00 	cmp.w	sl, #0
 8005314:	d10e      	bne.n	8005334 <_scanf_float+0x1d0>
 8005316:	f1b9 0f00 	cmp.w	r9, #0
 800531a:	d10e      	bne.n	800533a <_scanf_float+0x1d6>
 800531c:	6822      	ldr	r2, [r4, #0]
 800531e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005322:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005326:	d108      	bne.n	800533a <_scanf_float+0x1d6>
 8005328:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800532c:	f04f 0a01 	mov.w	sl, #1
 8005330:	6022      	str	r2, [r4, #0]
 8005332:	e7e2      	b.n	80052fa <_scanf_float+0x196>
 8005334:	f1ba 0f02 	cmp.w	sl, #2
 8005338:	d055      	beq.n	80053e6 <_scanf_float+0x282>
 800533a:	2d01      	cmp	r5, #1
 800533c:	d002      	beq.n	8005344 <_scanf_float+0x1e0>
 800533e:	2d04      	cmp	r5, #4
 8005340:	f47f af43 	bne.w	80051ca <_scanf_float+0x66>
 8005344:	3501      	adds	r5, #1
 8005346:	b2ed      	uxtb	r5, r5
 8005348:	e7d7      	b.n	80052fa <_scanf_float+0x196>
 800534a:	f1ba 0f01 	cmp.w	sl, #1
 800534e:	f47f af3c 	bne.w	80051ca <_scanf_float+0x66>
 8005352:	f04f 0a02 	mov.w	sl, #2
 8005356:	e7d0      	b.n	80052fa <_scanf_float+0x196>
 8005358:	b97d      	cbnz	r5, 800537a <_scanf_float+0x216>
 800535a:	f1b9 0f00 	cmp.w	r9, #0
 800535e:	f47f af37 	bne.w	80051d0 <_scanf_float+0x6c>
 8005362:	6822      	ldr	r2, [r4, #0]
 8005364:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005368:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800536c:	f040 8103 	bne.w	8005576 <_scanf_float+0x412>
 8005370:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005374:	2501      	movs	r5, #1
 8005376:	6022      	str	r2, [r4, #0]
 8005378:	e7bf      	b.n	80052fa <_scanf_float+0x196>
 800537a:	2d03      	cmp	r5, #3
 800537c:	d0e2      	beq.n	8005344 <_scanf_float+0x1e0>
 800537e:	2d05      	cmp	r5, #5
 8005380:	e7de      	b.n	8005340 <_scanf_float+0x1dc>
 8005382:	2d02      	cmp	r5, #2
 8005384:	f47f af21 	bne.w	80051ca <_scanf_float+0x66>
 8005388:	2503      	movs	r5, #3
 800538a:	e7b6      	b.n	80052fa <_scanf_float+0x196>
 800538c:	2d06      	cmp	r5, #6
 800538e:	f47f af1c 	bne.w	80051ca <_scanf_float+0x66>
 8005392:	2507      	movs	r5, #7
 8005394:	e7b1      	b.n	80052fa <_scanf_float+0x196>
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	0591      	lsls	r1, r2, #22
 800539a:	f57f af16 	bpl.w	80051ca <_scanf_float+0x66>
 800539e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80053a2:	6022      	str	r2, [r4, #0]
 80053a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80053a8:	e7a7      	b.n	80052fa <_scanf_float+0x196>
 80053aa:	6822      	ldr	r2, [r4, #0]
 80053ac:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80053b0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80053b4:	d006      	beq.n	80053c4 <_scanf_float+0x260>
 80053b6:	0550      	lsls	r0, r2, #21
 80053b8:	f57f af07 	bpl.w	80051ca <_scanf_float+0x66>
 80053bc:	f1b9 0f00 	cmp.w	r9, #0
 80053c0:	f000 80d9 	beq.w	8005576 <_scanf_float+0x412>
 80053c4:	0591      	lsls	r1, r2, #22
 80053c6:	bf58      	it	pl
 80053c8:	9902      	ldrpl	r1, [sp, #8]
 80053ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80053ce:	bf58      	it	pl
 80053d0:	eba9 0101 	subpl.w	r1, r9, r1
 80053d4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80053d8:	f04f 0900 	mov.w	r9, #0
 80053dc:	bf58      	it	pl
 80053de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80053e2:	6022      	str	r2, [r4, #0]
 80053e4:	e789      	b.n	80052fa <_scanf_float+0x196>
 80053e6:	f04f 0a03 	mov.w	sl, #3
 80053ea:	e786      	b.n	80052fa <_scanf_float+0x196>
 80053ec:	4639      	mov	r1, r7
 80053ee:	4640      	mov	r0, r8
 80053f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80053f4:	4798      	blx	r3
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f43f aeda 	beq.w	80051b0 <_scanf_float+0x4c>
 80053fc:	e6e5      	b.n	80051ca <_scanf_float+0x66>
 80053fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005402:	463a      	mov	r2, r7
 8005404:	4640      	mov	r0, r8
 8005406:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800540a:	4798      	blx	r3
 800540c:	6923      	ldr	r3, [r4, #16]
 800540e:	3b01      	subs	r3, #1
 8005410:	6123      	str	r3, [r4, #16]
 8005412:	e6e7      	b.n	80051e4 <_scanf_float+0x80>
 8005414:	1e6b      	subs	r3, r5, #1
 8005416:	2b06      	cmp	r3, #6
 8005418:	d824      	bhi.n	8005464 <_scanf_float+0x300>
 800541a:	2d02      	cmp	r5, #2
 800541c:	d836      	bhi.n	800548c <_scanf_float+0x328>
 800541e:	9b01      	ldr	r3, [sp, #4]
 8005420:	429e      	cmp	r6, r3
 8005422:	f67f aee3 	bls.w	80051ec <_scanf_float+0x88>
 8005426:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800542a:	463a      	mov	r2, r7
 800542c:	4640      	mov	r0, r8
 800542e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005432:	4798      	blx	r3
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	3b01      	subs	r3, #1
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	e7f0      	b.n	800541e <_scanf_float+0x2ba>
 800543c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005440:	463a      	mov	r2, r7
 8005442:	4640      	mov	r0, r8
 8005444:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005448:	4798      	blx	r3
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	3b01      	subs	r3, #1
 800544e:	6123      	str	r3, [r4, #16]
 8005450:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005454:	fa5f fa8a 	uxtb.w	sl, sl
 8005458:	f1ba 0f02 	cmp.w	sl, #2
 800545c:	d1ee      	bne.n	800543c <_scanf_float+0x2d8>
 800545e:	3d03      	subs	r5, #3
 8005460:	b2ed      	uxtb	r5, r5
 8005462:	1b76      	subs	r6, r6, r5
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	05da      	lsls	r2, r3, #23
 8005468:	d530      	bpl.n	80054cc <_scanf_float+0x368>
 800546a:	055b      	lsls	r3, r3, #21
 800546c:	d511      	bpl.n	8005492 <_scanf_float+0x32e>
 800546e:	9b01      	ldr	r3, [sp, #4]
 8005470:	429e      	cmp	r6, r3
 8005472:	f67f aebb 	bls.w	80051ec <_scanf_float+0x88>
 8005476:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800547a:	463a      	mov	r2, r7
 800547c:	4640      	mov	r0, r8
 800547e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005482:	4798      	blx	r3
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	3b01      	subs	r3, #1
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	e7f0      	b.n	800546e <_scanf_float+0x30a>
 800548c:	46aa      	mov	sl, r5
 800548e:	46b3      	mov	fp, r6
 8005490:	e7de      	b.n	8005450 <_scanf_float+0x2ec>
 8005492:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005496:	6923      	ldr	r3, [r4, #16]
 8005498:	2965      	cmp	r1, #101	@ 0x65
 800549a:	f103 33ff 	add.w	r3, r3, #4294967295
 800549e:	f106 35ff 	add.w	r5, r6, #4294967295
 80054a2:	6123      	str	r3, [r4, #16]
 80054a4:	d00c      	beq.n	80054c0 <_scanf_float+0x35c>
 80054a6:	2945      	cmp	r1, #69	@ 0x45
 80054a8:	d00a      	beq.n	80054c0 <_scanf_float+0x35c>
 80054aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054ae:	463a      	mov	r2, r7
 80054b0:	4640      	mov	r0, r8
 80054b2:	4798      	blx	r3
 80054b4:	6923      	ldr	r3, [r4, #16]
 80054b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	1eb5      	subs	r5, r6, #2
 80054be:	6123      	str	r3, [r4, #16]
 80054c0:	463a      	mov	r2, r7
 80054c2:	4640      	mov	r0, r8
 80054c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80054c8:	4798      	blx	r3
 80054ca:	462e      	mov	r6, r5
 80054cc:	6822      	ldr	r2, [r4, #0]
 80054ce:	f012 0210 	ands.w	r2, r2, #16
 80054d2:	d001      	beq.n	80054d8 <_scanf_float+0x374>
 80054d4:	2000      	movs	r0, #0
 80054d6:	e68a      	b.n	80051ee <_scanf_float+0x8a>
 80054d8:	7032      	strb	r2, [r6, #0]
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e4:	d11c      	bne.n	8005520 <_scanf_float+0x3bc>
 80054e6:	9b02      	ldr	r3, [sp, #8]
 80054e8:	454b      	cmp	r3, r9
 80054ea:	eba3 0209 	sub.w	r2, r3, r9
 80054ee:	d123      	bne.n	8005538 <_scanf_float+0x3d4>
 80054f0:	2200      	movs	r2, #0
 80054f2:	4640      	mov	r0, r8
 80054f4:	9901      	ldr	r1, [sp, #4]
 80054f6:	f002 fcff 	bl	8007ef8 <_strtod_r>
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	6825      	ldr	r5, [r4, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f015 0f02 	tst.w	r5, #2
 8005504:	4606      	mov	r6, r0
 8005506:	460f      	mov	r7, r1
 8005508:	f103 0204 	add.w	r2, r3, #4
 800550c:	d01f      	beq.n	800554e <_scanf_float+0x3ea>
 800550e:	9903      	ldr	r1, [sp, #12]
 8005510:	600a      	str	r2, [r1, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	e9c3 6700 	strd	r6, r7, [r3]
 8005518:	68e3      	ldr	r3, [r4, #12]
 800551a:	3301      	adds	r3, #1
 800551c:	60e3      	str	r3, [r4, #12]
 800551e:	e7d9      	b.n	80054d4 <_scanf_float+0x370>
 8005520:	9b04      	ldr	r3, [sp, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0e4      	beq.n	80054f0 <_scanf_float+0x38c>
 8005526:	9905      	ldr	r1, [sp, #20]
 8005528:	230a      	movs	r3, #10
 800552a:	4640      	mov	r0, r8
 800552c:	3101      	adds	r1, #1
 800552e:	f002 fd63 	bl	8007ff8 <_strtol_r>
 8005532:	9b04      	ldr	r3, [sp, #16]
 8005534:	9e05      	ldr	r6, [sp, #20]
 8005536:	1ac2      	subs	r2, r0, r3
 8005538:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800553c:	429e      	cmp	r6, r3
 800553e:	bf28      	it	cs
 8005540:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005544:	4630      	mov	r0, r6
 8005546:	490d      	ldr	r1, [pc, #52]	@ (800557c <_scanf_float+0x418>)
 8005548:	f000 f94e 	bl	80057e8 <siprintf>
 800554c:	e7d0      	b.n	80054f0 <_scanf_float+0x38c>
 800554e:	076d      	lsls	r5, r5, #29
 8005550:	d4dd      	bmi.n	800550e <_scanf_float+0x3aa>
 8005552:	9d03      	ldr	r5, [sp, #12]
 8005554:	602a      	str	r2, [r5, #0]
 8005556:	681d      	ldr	r5, [r3, #0]
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	f7fb fa56 	bl	8000a0c <__aeabi_dcmpun>
 8005560:	b120      	cbz	r0, 800556c <_scanf_float+0x408>
 8005562:	4807      	ldr	r0, [pc, #28]	@ (8005580 <_scanf_float+0x41c>)
 8005564:	f000 fad4 	bl	8005b10 <nanf>
 8005568:	6028      	str	r0, [r5, #0]
 800556a:	e7d5      	b.n	8005518 <_scanf_float+0x3b4>
 800556c:	4630      	mov	r0, r6
 800556e:	4639      	mov	r1, r7
 8005570:	f7fb faaa 	bl	8000ac8 <__aeabi_d2f>
 8005574:	e7f8      	b.n	8005568 <_scanf_float+0x404>
 8005576:	f04f 0900 	mov.w	r9, #0
 800557a:	e62d      	b.n	80051d8 <_scanf_float+0x74>
 800557c:	0800ab22 	.word	0x0800ab22
 8005580:	0800aebd 	.word	0x0800aebd

08005584 <std>:
 8005584:	2300      	movs	r3, #0
 8005586:	b510      	push	{r4, lr}
 8005588:	4604      	mov	r4, r0
 800558a:	e9c0 3300 	strd	r3, r3, [r0]
 800558e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005592:	6083      	str	r3, [r0, #8]
 8005594:	8181      	strh	r1, [r0, #12]
 8005596:	6643      	str	r3, [r0, #100]	@ 0x64
 8005598:	81c2      	strh	r2, [r0, #14]
 800559a:	6183      	str	r3, [r0, #24]
 800559c:	4619      	mov	r1, r3
 800559e:	2208      	movs	r2, #8
 80055a0:	305c      	adds	r0, #92	@ 0x5c
 80055a2:	f000 fa19 	bl	80059d8 <memset>
 80055a6:	4b0d      	ldr	r3, [pc, #52]	@ (80055dc <std+0x58>)
 80055a8:	6224      	str	r4, [r4, #32]
 80055aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80055ac:	4b0c      	ldr	r3, [pc, #48]	@ (80055e0 <std+0x5c>)
 80055ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055b0:	4b0c      	ldr	r3, [pc, #48]	@ (80055e4 <std+0x60>)
 80055b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055b4:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <std+0x64>)
 80055b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80055b8:	4b0c      	ldr	r3, [pc, #48]	@ (80055ec <std+0x68>)
 80055ba:	429c      	cmp	r4, r3
 80055bc:	d006      	beq.n	80055cc <std+0x48>
 80055be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055c2:	4294      	cmp	r4, r2
 80055c4:	d002      	beq.n	80055cc <std+0x48>
 80055c6:	33d0      	adds	r3, #208	@ 0xd0
 80055c8:	429c      	cmp	r4, r3
 80055ca:	d105      	bne.n	80055d8 <std+0x54>
 80055cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80055d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d4:	f000 ba7c 	b.w	8005ad0 <__retarget_lock_init_recursive>
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	bf00      	nop
 80055dc:	08005829 	.word	0x08005829
 80055e0:	0800584b 	.word	0x0800584b
 80055e4:	08005883 	.word	0x08005883
 80055e8:	080058a7 	.word	0x080058a7
 80055ec:	20004148 	.word	0x20004148

080055f0 <stdio_exit_handler>:
 80055f0:	4a02      	ldr	r2, [pc, #8]	@ (80055fc <stdio_exit_handler+0xc>)
 80055f2:	4903      	ldr	r1, [pc, #12]	@ (8005600 <stdio_exit_handler+0x10>)
 80055f4:	4803      	ldr	r0, [pc, #12]	@ (8005604 <stdio_exit_handler+0x14>)
 80055f6:	f000 b869 	b.w	80056cc <_fwalk_sglue>
 80055fa:	bf00      	nop
 80055fc:	20000030 	.word	0x20000030
 8005600:	0800862d 	.word	0x0800862d
 8005604:	20000040 	.word	0x20000040

08005608 <cleanup_stdio>:
 8005608:	6841      	ldr	r1, [r0, #4]
 800560a:	4b0c      	ldr	r3, [pc, #48]	@ (800563c <cleanup_stdio+0x34>)
 800560c:	b510      	push	{r4, lr}
 800560e:	4299      	cmp	r1, r3
 8005610:	4604      	mov	r4, r0
 8005612:	d001      	beq.n	8005618 <cleanup_stdio+0x10>
 8005614:	f003 f80a 	bl	800862c <_fflush_r>
 8005618:	68a1      	ldr	r1, [r4, #8]
 800561a:	4b09      	ldr	r3, [pc, #36]	@ (8005640 <cleanup_stdio+0x38>)
 800561c:	4299      	cmp	r1, r3
 800561e:	d002      	beq.n	8005626 <cleanup_stdio+0x1e>
 8005620:	4620      	mov	r0, r4
 8005622:	f003 f803 	bl	800862c <_fflush_r>
 8005626:	68e1      	ldr	r1, [r4, #12]
 8005628:	4b06      	ldr	r3, [pc, #24]	@ (8005644 <cleanup_stdio+0x3c>)
 800562a:	4299      	cmp	r1, r3
 800562c:	d004      	beq.n	8005638 <cleanup_stdio+0x30>
 800562e:	4620      	mov	r0, r4
 8005630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005634:	f002 bffa 	b.w	800862c <_fflush_r>
 8005638:	bd10      	pop	{r4, pc}
 800563a:	bf00      	nop
 800563c:	20004148 	.word	0x20004148
 8005640:	200041b0 	.word	0x200041b0
 8005644:	20004218 	.word	0x20004218

08005648 <global_stdio_init.part.0>:
 8005648:	b510      	push	{r4, lr}
 800564a:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <global_stdio_init.part.0+0x30>)
 800564c:	4c0b      	ldr	r4, [pc, #44]	@ (800567c <global_stdio_init.part.0+0x34>)
 800564e:	4a0c      	ldr	r2, [pc, #48]	@ (8005680 <global_stdio_init.part.0+0x38>)
 8005650:	4620      	mov	r0, r4
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	2104      	movs	r1, #4
 8005656:	2200      	movs	r2, #0
 8005658:	f7ff ff94 	bl	8005584 <std>
 800565c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005660:	2201      	movs	r2, #1
 8005662:	2109      	movs	r1, #9
 8005664:	f7ff ff8e 	bl	8005584 <std>
 8005668:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800566c:	2202      	movs	r2, #2
 800566e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005672:	2112      	movs	r1, #18
 8005674:	f7ff bf86 	b.w	8005584 <std>
 8005678:	20004280 	.word	0x20004280
 800567c:	20004148 	.word	0x20004148
 8005680:	080055f1 	.word	0x080055f1

08005684 <__sfp_lock_acquire>:
 8005684:	4801      	ldr	r0, [pc, #4]	@ (800568c <__sfp_lock_acquire+0x8>)
 8005686:	f000 ba24 	b.w	8005ad2 <__retarget_lock_acquire_recursive>
 800568a:	bf00      	nop
 800568c:	20004289 	.word	0x20004289

08005690 <__sfp_lock_release>:
 8005690:	4801      	ldr	r0, [pc, #4]	@ (8005698 <__sfp_lock_release+0x8>)
 8005692:	f000 ba1f 	b.w	8005ad4 <__retarget_lock_release_recursive>
 8005696:	bf00      	nop
 8005698:	20004289 	.word	0x20004289

0800569c <__sinit>:
 800569c:	b510      	push	{r4, lr}
 800569e:	4604      	mov	r4, r0
 80056a0:	f7ff fff0 	bl	8005684 <__sfp_lock_acquire>
 80056a4:	6a23      	ldr	r3, [r4, #32]
 80056a6:	b11b      	cbz	r3, 80056b0 <__sinit+0x14>
 80056a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ac:	f7ff bff0 	b.w	8005690 <__sfp_lock_release>
 80056b0:	4b04      	ldr	r3, [pc, #16]	@ (80056c4 <__sinit+0x28>)
 80056b2:	6223      	str	r3, [r4, #32]
 80056b4:	4b04      	ldr	r3, [pc, #16]	@ (80056c8 <__sinit+0x2c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f5      	bne.n	80056a8 <__sinit+0xc>
 80056bc:	f7ff ffc4 	bl	8005648 <global_stdio_init.part.0>
 80056c0:	e7f2      	b.n	80056a8 <__sinit+0xc>
 80056c2:	bf00      	nop
 80056c4:	08005609 	.word	0x08005609
 80056c8:	20004280 	.word	0x20004280

080056cc <_fwalk_sglue>:
 80056cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056d0:	4607      	mov	r7, r0
 80056d2:	4688      	mov	r8, r1
 80056d4:	4614      	mov	r4, r2
 80056d6:	2600      	movs	r6, #0
 80056d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056dc:	f1b9 0901 	subs.w	r9, r9, #1
 80056e0:	d505      	bpl.n	80056ee <_fwalk_sglue+0x22>
 80056e2:	6824      	ldr	r4, [r4, #0]
 80056e4:	2c00      	cmp	r4, #0
 80056e6:	d1f7      	bne.n	80056d8 <_fwalk_sglue+0xc>
 80056e8:	4630      	mov	r0, r6
 80056ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ee:	89ab      	ldrh	r3, [r5, #12]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d907      	bls.n	8005704 <_fwalk_sglue+0x38>
 80056f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056f8:	3301      	adds	r3, #1
 80056fa:	d003      	beq.n	8005704 <_fwalk_sglue+0x38>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4638      	mov	r0, r7
 8005700:	47c0      	blx	r8
 8005702:	4306      	orrs	r6, r0
 8005704:	3568      	adds	r5, #104	@ 0x68
 8005706:	e7e9      	b.n	80056dc <_fwalk_sglue+0x10>

08005708 <iprintf>:
 8005708:	b40f      	push	{r0, r1, r2, r3}
 800570a:	b507      	push	{r0, r1, r2, lr}
 800570c:	4906      	ldr	r1, [pc, #24]	@ (8005728 <iprintf+0x20>)
 800570e:	ab04      	add	r3, sp, #16
 8005710:	6808      	ldr	r0, [r1, #0]
 8005712:	f853 2b04 	ldr.w	r2, [r3], #4
 8005716:	6881      	ldr	r1, [r0, #8]
 8005718:	9301      	str	r3, [sp, #4]
 800571a:	f002 fdef 	bl	80082fc <_vfiprintf_r>
 800571e:	b003      	add	sp, #12
 8005720:	f85d eb04 	ldr.w	lr, [sp], #4
 8005724:	b004      	add	sp, #16
 8005726:	4770      	bx	lr
 8005728:	2000003c 	.word	0x2000003c

0800572c <_puts_r>:
 800572c:	6a03      	ldr	r3, [r0, #32]
 800572e:	b570      	push	{r4, r5, r6, lr}
 8005730:	4605      	mov	r5, r0
 8005732:	460e      	mov	r6, r1
 8005734:	6884      	ldr	r4, [r0, #8]
 8005736:	b90b      	cbnz	r3, 800573c <_puts_r+0x10>
 8005738:	f7ff ffb0 	bl	800569c <__sinit>
 800573c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800573e:	07db      	lsls	r3, r3, #31
 8005740:	d405      	bmi.n	800574e <_puts_r+0x22>
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	0598      	lsls	r0, r3, #22
 8005746:	d402      	bmi.n	800574e <_puts_r+0x22>
 8005748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800574a:	f000 f9c2 	bl	8005ad2 <__retarget_lock_acquire_recursive>
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	0719      	lsls	r1, r3, #28
 8005752:	d502      	bpl.n	800575a <_puts_r+0x2e>
 8005754:	6923      	ldr	r3, [r4, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d135      	bne.n	80057c6 <_puts_r+0x9a>
 800575a:	4621      	mov	r1, r4
 800575c:	4628      	mov	r0, r5
 800575e:	f000 f8e5 	bl	800592c <__swsetup_r>
 8005762:	b380      	cbz	r0, 80057c6 <_puts_r+0x9a>
 8005764:	f04f 35ff 	mov.w	r5, #4294967295
 8005768:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800576a:	07da      	lsls	r2, r3, #31
 800576c:	d405      	bmi.n	800577a <_puts_r+0x4e>
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	059b      	lsls	r3, r3, #22
 8005772:	d402      	bmi.n	800577a <_puts_r+0x4e>
 8005774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005776:	f000 f9ad 	bl	8005ad4 <__retarget_lock_release_recursive>
 800577a:	4628      	mov	r0, r5
 800577c:	bd70      	pop	{r4, r5, r6, pc}
 800577e:	2b00      	cmp	r3, #0
 8005780:	da04      	bge.n	800578c <_puts_r+0x60>
 8005782:	69a2      	ldr	r2, [r4, #24]
 8005784:	429a      	cmp	r2, r3
 8005786:	dc17      	bgt.n	80057b8 <_puts_r+0x8c>
 8005788:	290a      	cmp	r1, #10
 800578a:	d015      	beq.n	80057b8 <_puts_r+0x8c>
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	6022      	str	r2, [r4, #0]
 8005792:	7019      	strb	r1, [r3, #0]
 8005794:	68a3      	ldr	r3, [r4, #8]
 8005796:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800579a:	3b01      	subs	r3, #1
 800579c:	60a3      	str	r3, [r4, #8]
 800579e:	2900      	cmp	r1, #0
 80057a0:	d1ed      	bne.n	800577e <_puts_r+0x52>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	da11      	bge.n	80057ca <_puts_r+0x9e>
 80057a6:	4622      	mov	r2, r4
 80057a8:	210a      	movs	r1, #10
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 f87f 	bl	80058ae <__swbuf_r>
 80057b0:	3001      	adds	r0, #1
 80057b2:	d0d7      	beq.n	8005764 <_puts_r+0x38>
 80057b4:	250a      	movs	r5, #10
 80057b6:	e7d7      	b.n	8005768 <_puts_r+0x3c>
 80057b8:	4622      	mov	r2, r4
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 f877 	bl	80058ae <__swbuf_r>
 80057c0:	3001      	adds	r0, #1
 80057c2:	d1e7      	bne.n	8005794 <_puts_r+0x68>
 80057c4:	e7ce      	b.n	8005764 <_puts_r+0x38>
 80057c6:	3e01      	subs	r6, #1
 80057c8:	e7e4      	b.n	8005794 <_puts_r+0x68>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	6022      	str	r2, [r4, #0]
 80057d0:	220a      	movs	r2, #10
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	e7ee      	b.n	80057b4 <_puts_r+0x88>
	...

080057d8 <puts>:
 80057d8:	4b02      	ldr	r3, [pc, #8]	@ (80057e4 <puts+0xc>)
 80057da:	4601      	mov	r1, r0
 80057dc:	6818      	ldr	r0, [r3, #0]
 80057de:	f7ff bfa5 	b.w	800572c <_puts_r>
 80057e2:	bf00      	nop
 80057e4:	2000003c 	.word	0x2000003c

080057e8 <siprintf>:
 80057e8:	b40e      	push	{r1, r2, r3}
 80057ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057ee:	b500      	push	{lr}
 80057f0:	b09c      	sub	sp, #112	@ 0x70
 80057f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80057f4:	9002      	str	r0, [sp, #8]
 80057f6:	9006      	str	r0, [sp, #24]
 80057f8:	9107      	str	r1, [sp, #28]
 80057fa:	9104      	str	r1, [sp, #16]
 80057fc:	4808      	ldr	r0, [pc, #32]	@ (8005820 <siprintf+0x38>)
 80057fe:	4909      	ldr	r1, [pc, #36]	@ (8005824 <siprintf+0x3c>)
 8005800:	f853 2b04 	ldr.w	r2, [r3], #4
 8005804:	9105      	str	r1, [sp, #20]
 8005806:	6800      	ldr	r0, [r0, #0]
 8005808:	a902      	add	r1, sp, #8
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	f002 fc52 	bl	80080b4 <_svfiprintf_r>
 8005810:	2200      	movs	r2, #0
 8005812:	9b02      	ldr	r3, [sp, #8]
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	b01c      	add	sp, #112	@ 0x70
 8005818:	f85d eb04 	ldr.w	lr, [sp], #4
 800581c:	b003      	add	sp, #12
 800581e:	4770      	bx	lr
 8005820:	2000003c 	.word	0x2000003c
 8005824:	ffff0208 	.word	0xffff0208

08005828 <__sread>:
 8005828:	b510      	push	{r4, lr}
 800582a:	460c      	mov	r4, r1
 800582c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005830:	f000 f900 	bl	8005a34 <_read_r>
 8005834:	2800      	cmp	r0, #0
 8005836:	bfab      	itete	ge
 8005838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800583a:	89a3      	ldrhlt	r3, [r4, #12]
 800583c:	181b      	addge	r3, r3, r0
 800583e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005842:	bfac      	ite	ge
 8005844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005846:	81a3      	strhlt	r3, [r4, #12]
 8005848:	bd10      	pop	{r4, pc}

0800584a <__swrite>:
 800584a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584e:	461f      	mov	r7, r3
 8005850:	898b      	ldrh	r3, [r1, #12]
 8005852:	4605      	mov	r5, r0
 8005854:	05db      	lsls	r3, r3, #23
 8005856:	460c      	mov	r4, r1
 8005858:	4616      	mov	r6, r2
 800585a:	d505      	bpl.n	8005868 <__swrite+0x1e>
 800585c:	2302      	movs	r3, #2
 800585e:	2200      	movs	r2, #0
 8005860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005864:	f000 f8d4 	bl	8005a10 <_lseek_r>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	4632      	mov	r2, r6
 800586c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	4628      	mov	r0, r5
 8005874:	463b      	mov	r3, r7
 8005876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800587a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800587e:	f000 b8eb 	b.w	8005a58 <_write_r>

08005882 <__sseek>:
 8005882:	b510      	push	{r4, lr}
 8005884:	460c      	mov	r4, r1
 8005886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800588a:	f000 f8c1 	bl	8005a10 <_lseek_r>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	bf15      	itete	ne
 8005894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800589a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800589e:	81a3      	strheq	r3, [r4, #12]
 80058a0:	bf18      	it	ne
 80058a2:	81a3      	strhne	r3, [r4, #12]
 80058a4:	bd10      	pop	{r4, pc}

080058a6 <__sclose>:
 80058a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058aa:	f000 b8a1 	b.w	80059f0 <_close_r>

080058ae <__swbuf_r>:
 80058ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b0:	460e      	mov	r6, r1
 80058b2:	4614      	mov	r4, r2
 80058b4:	4605      	mov	r5, r0
 80058b6:	b118      	cbz	r0, 80058c0 <__swbuf_r+0x12>
 80058b8:	6a03      	ldr	r3, [r0, #32]
 80058ba:	b90b      	cbnz	r3, 80058c0 <__swbuf_r+0x12>
 80058bc:	f7ff feee 	bl	800569c <__sinit>
 80058c0:	69a3      	ldr	r3, [r4, #24]
 80058c2:	60a3      	str	r3, [r4, #8]
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	071a      	lsls	r2, r3, #28
 80058c8:	d501      	bpl.n	80058ce <__swbuf_r+0x20>
 80058ca:	6923      	ldr	r3, [r4, #16]
 80058cc:	b943      	cbnz	r3, 80058e0 <__swbuf_r+0x32>
 80058ce:	4621      	mov	r1, r4
 80058d0:	4628      	mov	r0, r5
 80058d2:	f000 f82b 	bl	800592c <__swsetup_r>
 80058d6:	b118      	cbz	r0, 80058e0 <__swbuf_r+0x32>
 80058d8:	f04f 37ff 	mov.w	r7, #4294967295
 80058dc:	4638      	mov	r0, r7
 80058de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	6922      	ldr	r2, [r4, #16]
 80058e4:	b2f6      	uxtb	r6, r6
 80058e6:	1a98      	subs	r0, r3, r2
 80058e8:	6963      	ldr	r3, [r4, #20]
 80058ea:	4637      	mov	r7, r6
 80058ec:	4283      	cmp	r3, r0
 80058ee:	dc05      	bgt.n	80058fc <__swbuf_r+0x4e>
 80058f0:	4621      	mov	r1, r4
 80058f2:	4628      	mov	r0, r5
 80058f4:	f002 fe9a 	bl	800862c <_fflush_r>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d1ed      	bne.n	80058d8 <__swbuf_r+0x2a>
 80058fc:	68a3      	ldr	r3, [r4, #8]
 80058fe:	3b01      	subs	r3, #1
 8005900:	60a3      	str	r3, [r4, #8]
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	6022      	str	r2, [r4, #0]
 8005908:	701e      	strb	r6, [r3, #0]
 800590a:	6962      	ldr	r2, [r4, #20]
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	429a      	cmp	r2, r3
 8005910:	d004      	beq.n	800591c <__swbuf_r+0x6e>
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	07db      	lsls	r3, r3, #31
 8005916:	d5e1      	bpl.n	80058dc <__swbuf_r+0x2e>
 8005918:	2e0a      	cmp	r6, #10
 800591a:	d1df      	bne.n	80058dc <__swbuf_r+0x2e>
 800591c:	4621      	mov	r1, r4
 800591e:	4628      	mov	r0, r5
 8005920:	f002 fe84 	bl	800862c <_fflush_r>
 8005924:	2800      	cmp	r0, #0
 8005926:	d0d9      	beq.n	80058dc <__swbuf_r+0x2e>
 8005928:	e7d6      	b.n	80058d8 <__swbuf_r+0x2a>
	...

0800592c <__swsetup_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4b29      	ldr	r3, [pc, #164]	@ (80059d4 <__swsetup_r+0xa8>)
 8005930:	4605      	mov	r5, r0
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	460c      	mov	r4, r1
 8005936:	b118      	cbz	r0, 8005940 <__swsetup_r+0x14>
 8005938:	6a03      	ldr	r3, [r0, #32]
 800593a:	b90b      	cbnz	r3, 8005940 <__swsetup_r+0x14>
 800593c:	f7ff feae 	bl	800569c <__sinit>
 8005940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005944:	0719      	lsls	r1, r3, #28
 8005946:	d422      	bmi.n	800598e <__swsetup_r+0x62>
 8005948:	06da      	lsls	r2, r3, #27
 800594a:	d407      	bmi.n	800595c <__swsetup_r+0x30>
 800594c:	2209      	movs	r2, #9
 800594e:	602a      	str	r2, [r5, #0]
 8005950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005954:	f04f 30ff 	mov.w	r0, #4294967295
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	e033      	b.n	80059c4 <__swsetup_r+0x98>
 800595c:	0758      	lsls	r0, r3, #29
 800595e:	d512      	bpl.n	8005986 <__swsetup_r+0x5a>
 8005960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005962:	b141      	cbz	r1, 8005976 <__swsetup_r+0x4a>
 8005964:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005968:	4299      	cmp	r1, r3
 800596a:	d002      	beq.n	8005972 <__swsetup_r+0x46>
 800596c:	4628      	mov	r0, r5
 800596e:	f000 ff23 	bl	80067b8 <_free_r>
 8005972:	2300      	movs	r3, #0
 8005974:	6363      	str	r3, [r4, #52]	@ 0x34
 8005976:	89a3      	ldrh	r3, [r4, #12]
 8005978:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	2300      	movs	r3, #0
 8005980:	6063      	str	r3, [r4, #4]
 8005982:	6923      	ldr	r3, [r4, #16]
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	f043 0308 	orr.w	r3, r3, #8
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	b94b      	cbnz	r3, 80059a6 <__swsetup_r+0x7a>
 8005992:	89a3      	ldrh	r3, [r4, #12]
 8005994:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800599c:	d003      	beq.n	80059a6 <__swsetup_r+0x7a>
 800599e:	4621      	mov	r1, r4
 80059a0:	4628      	mov	r0, r5
 80059a2:	f002 fe90 	bl	80086c6 <__smakebuf_r>
 80059a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059aa:	f013 0201 	ands.w	r2, r3, #1
 80059ae:	d00a      	beq.n	80059c6 <__swsetup_r+0x9a>
 80059b0:	2200      	movs	r2, #0
 80059b2:	60a2      	str	r2, [r4, #8]
 80059b4:	6962      	ldr	r2, [r4, #20]
 80059b6:	4252      	negs	r2, r2
 80059b8:	61a2      	str	r2, [r4, #24]
 80059ba:	6922      	ldr	r2, [r4, #16]
 80059bc:	b942      	cbnz	r2, 80059d0 <__swsetup_r+0xa4>
 80059be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80059c2:	d1c5      	bne.n	8005950 <__swsetup_r+0x24>
 80059c4:	bd38      	pop	{r3, r4, r5, pc}
 80059c6:	0799      	lsls	r1, r3, #30
 80059c8:	bf58      	it	pl
 80059ca:	6962      	ldrpl	r2, [r4, #20]
 80059cc:	60a2      	str	r2, [r4, #8]
 80059ce:	e7f4      	b.n	80059ba <__swsetup_r+0x8e>
 80059d0:	2000      	movs	r0, #0
 80059d2:	e7f7      	b.n	80059c4 <__swsetup_r+0x98>
 80059d4:	2000003c 	.word	0x2000003c

080059d8 <memset>:
 80059d8:	4603      	mov	r3, r0
 80059da:	4402      	add	r2, r0
 80059dc:	4293      	cmp	r3, r2
 80059de:	d100      	bne.n	80059e2 <memset+0xa>
 80059e0:	4770      	bx	lr
 80059e2:	f803 1b01 	strb.w	r1, [r3], #1
 80059e6:	e7f9      	b.n	80059dc <memset+0x4>

080059e8 <_localeconv_r>:
 80059e8:	4800      	ldr	r0, [pc, #0]	@ (80059ec <_localeconv_r+0x4>)
 80059ea:	4770      	bx	lr
 80059ec:	2000017c 	.word	0x2000017c

080059f0 <_close_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	2300      	movs	r3, #0
 80059f4:	4d05      	ldr	r5, [pc, #20]	@ (8005a0c <_close_r+0x1c>)
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	f7fb ff39 	bl	8001872 <_close>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_close_r+0x1a>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_close_r+0x1a>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	20004284 	.word	0x20004284

08005a10 <_lseek_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	4604      	mov	r4, r0
 8005a14:	4608      	mov	r0, r1
 8005a16:	4611      	mov	r1, r2
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4d05      	ldr	r5, [pc, #20]	@ (8005a30 <_lseek_r+0x20>)
 8005a1c:	602a      	str	r2, [r5, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f7fb ff4b 	bl	80018ba <_lseek>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d102      	bne.n	8005a2e <_lseek_r+0x1e>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	b103      	cbz	r3, 8005a2e <_lseek_r+0x1e>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	bd38      	pop	{r3, r4, r5, pc}
 8005a30:	20004284 	.word	0x20004284

08005a34 <_read_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	4604      	mov	r4, r0
 8005a38:	4608      	mov	r0, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4d05      	ldr	r5, [pc, #20]	@ (8005a54 <_read_r+0x20>)
 8005a40:	602a      	str	r2, [r5, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f7fb fef8 	bl	8001838 <_read>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_read_r+0x1e>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_read_r+0x1e>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	20004284 	.word	0x20004284

08005a58 <_write_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	4611      	mov	r1, r2
 8005a60:	2200      	movs	r2, #0
 8005a62:	4d05      	ldr	r5, [pc, #20]	@ (8005a78 <_write_r+0x20>)
 8005a64:	602a      	str	r2, [r5, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f7fd fc56 	bl	8003318 <_write>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_write_r+0x1e>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_write_r+0x1e>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	20004284 	.word	0x20004284

08005a7c <__errno>:
 8005a7c:	4b01      	ldr	r3, [pc, #4]	@ (8005a84 <__errno+0x8>)
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	2000003c 	.word	0x2000003c

08005a88 <__libc_init_array>:
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	2600      	movs	r6, #0
 8005a8c:	4d0c      	ldr	r5, [pc, #48]	@ (8005ac0 <__libc_init_array+0x38>)
 8005a8e:	4c0d      	ldr	r4, [pc, #52]	@ (8005ac4 <__libc_init_array+0x3c>)
 8005a90:	1b64      	subs	r4, r4, r5
 8005a92:	10a4      	asrs	r4, r4, #2
 8005a94:	42a6      	cmp	r6, r4
 8005a96:	d109      	bne.n	8005aac <__libc_init_array+0x24>
 8005a98:	f003 ff80 	bl	800999c <_init>
 8005a9c:	2600      	movs	r6, #0
 8005a9e:	4d0a      	ldr	r5, [pc, #40]	@ (8005ac8 <__libc_init_array+0x40>)
 8005aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8005acc <__libc_init_array+0x44>)
 8005aa2:	1b64      	subs	r4, r4, r5
 8005aa4:	10a4      	asrs	r4, r4, #2
 8005aa6:	42a6      	cmp	r6, r4
 8005aa8:	d105      	bne.n	8005ab6 <__libc_init_array+0x2e>
 8005aaa:	bd70      	pop	{r4, r5, r6, pc}
 8005aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab0:	4798      	blx	r3
 8005ab2:	3601      	adds	r6, #1
 8005ab4:	e7ee      	b.n	8005a94 <__libc_init_array+0xc>
 8005ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aba:	4798      	blx	r3
 8005abc:	3601      	adds	r6, #1
 8005abe:	e7f2      	b.n	8005aa6 <__libc_init_array+0x1e>
 8005ac0:	0800af40 	.word	0x0800af40
 8005ac4:	0800af40 	.word	0x0800af40
 8005ac8:	0800af40 	.word	0x0800af40
 8005acc:	0800af44 	.word	0x0800af44

08005ad0 <__retarget_lock_init_recursive>:
 8005ad0:	4770      	bx	lr

08005ad2 <__retarget_lock_acquire_recursive>:
 8005ad2:	4770      	bx	lr

08005ad4 <__retarget_lock_release_recursive>:
 8005ad4:	4770      	bx	lr

08005ad6 <memchr>:
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	b510      	push	{r4, lr}
 8005ada:	b2c9      	uxtb	r1, r1
 8005adc:	4402      	add	r2, r0
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	d101      	bne.n	8005ae8 <memchr+0x12>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e003      	b.n	8005af0 <memchr+0x1a>
 8005ae8:	7804      	ldrb	r4, [r0, #0]
 8005aea:	3301      	adds	r3, #1
 8005aec:	428c      	cmp	r4, r1
 8005aee:	d1f6      	bne.n	8005ade <memchr+0x8>
 8005af0:	bd10      	pop	{r4, pc}

08005af2 <memcpy>:
 8005af2:	440a      	add	r2, r1
 8005af4:	4291      	cmp	r1, r2
 8005af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8005afa:	d100      	bne.n	8005afe <memcpy+0xc>
 8005afc:	4770      	bx	lr
 8005afe:	b510      	push	{r4, lr}
 8005b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b04:	4291      	cmp	r1, r2
 8005b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b0a:	d1f9      	bne.n	8005b00 <memcpy+0xe>
 8005b0c:	bd10      	pop	{r4, pc}
	...

08005b10 <nanf>:
 8005b10:	4800      	ldr	r0, [pc, #0]	@ (8005b14 <nanf+0x4>)
 8005b12:	4770      	bx	lr
 8005b14:	7fc00000 	.word	0x7fc00000

08005b18 <quorem>:
 8005b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1c:	6903      	ldr	r3, [r0, #16]
 8005b1e:	690c      	ldr	r4, [r1, #16]
 8005b20:	4607      	mov	r7, r0
 8005b22:	42a3      	cmp	r3, r4
 8005b24:	db7e      	blt.n	8005c24 <quorem+0x10c>
 8005b26:	3c01      	subs	r4, #1
 8005b28:	00a3      	lsls	r3, r4, #2
 8005b2a:	f100 0514 	add.w	r5, r0, #20
 8005b2e:	f101 0814 	add.w	r8, r1, #20
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b42:	3301      	adds	r3, #1
 8005b44:	429a      	cmp	r2, r3
 8005b46:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b4e:	d32e      	bcc.n	8005bae <quorem+0x96>
 8005b50:	f04f 0a00 	mov.w	sl, #0
 8005b54:	46c4      	mov	ip, r8
 8005b56:	46ae      	mov	lr, r5
 8005b58:	46d3      	mov	fp, sl
 8005b5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b5e:	b298      	uxth	r0, r3
 8005b60:	fb06 a000 	mla	r0, r6, r0, sl
 8005b64:	0c1b      	lsrs	r3, r3, #16
 8005b66:	0c02      	lsrs	r2, r0, #16
 8005b68:	fb06 2303 	mla	r3, r6, r3, r2
 8005b6c:	f8de 2000 	ldr.w	r2, [lr]
 8005b70:	b280      	uxth	r0, r0
 8005b72:	b292      	uxth	r2, r2
 8005b74:	1a12      	subs	r2, r2, r0
 8005b76:	445a      	add	r2, fp
 8005b78:	f8de 0000 	ldr.w	r0, [lr]
 8005b7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b8a:	b292      	uxth	r2, r2
 8005b8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b90:	45e1      	cmp	r9, ip
 8005b92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b96:	f84e 2b04 	str.w	r2, [lr], #4
 8005b9a:	d2de      	bcs.n	8005b5a <quorem+0x42>
 8005b9c:	9b00      	ldr	r3, [sp, #0]
 8005b9e:	58eb      	ldr	r3, [r5, r3]
 8005ba0:	b92b      	cbnz	r3, 8005bae <quorem+0x96>
 8005ba2:	9b01      	ldr	r3, [sp, #4]
 8005ba4:	3b04      	subs	r3, #4
 8005ba6:	429d      	cmp	r5, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	d32f      	bcc.n	8005c0c <quorem+0xf4>
 8005bac:	613c      	str	r4, [r7, #16]
 8005bae:	4638      	mov	r0, r7
 8005bb0:	f001 f9c2 	bl	8006f38 <__mcmp>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	db25      	blt.n	8005c04 <quorem+0xec>
 8005bb8:	4629      	mov	r1, r5
 8005bba:	2000      	movs	r0, #0
 8005bbc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bc0:	f8d1 c000 	ldr.w	ip, [r1]
 8005bc4:	fa1f fe82 	uxth.w	lr, r2
 8005bc8:	fa1f f38c 	uxth.w	r3, ip
 8005bcc:	eba3 030e 	sub.w	r3, r3, lr
 8005bd0:	4403      	add	r3, r0
 8005bd2:	0c12      	lsrs	r2, r2, #16
 8005bd4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bd8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005be2:	45c1      	cmp	r9, r8
 8005be4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005be8:	f841 3b04 	str.w	r3, [r1], #4
 8005bec:	d2e6      	bcs.n	8005bbc <quorem+0xa4>
 8005bee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bf6:	b922      	cbnz	r2, 8005c02 <quorem+0xea>
 8005bf8:	3b04      	subs	r3, #4
 8005bfa:	429d      	cmp	r5, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	d30b      	bcc.n	8005c18 <quorem+0x100>
 8005c00:	613c      	str	r4, [r7, #16]
 8005c02:	3601      	adds	r6, #1
 8005c04:	4630      	mov	r0, r6
 8005c06:	b003      	add	sp, #12
 8005c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	3b04      	subs	r3, #4
 8005c10:	2a00      	cmp	r2, #0
 8005c12:	d1cb      	bne.n	8005bac <quorem+0x94>
 8005c14:	3c01      	subs	r4, #1
 8005c16:	e7c6      	b.n	8005ba6 <quorem+0x8e>
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	3b04      	subs	r3, #4
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	d1ef      	bne.n	8005c00 <quorem+0xe8>
 8005c20:	3c01      	subs	r4, #1
 8005c22:	e7ea      	b.n	8005bfa <quorem+0xe2>
 8005c24:	2000      	movs	r0, #0
 8005c26:	e7ee      	b.n	8005c06 <quorem+0xee>

08005c28 <_dtoa_r>:
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	461d      	mov	r5, r3
 8005c30:	69c7      	ldr	r7, [r0, #28]
 8005c32:	b097      	sub	sp, #92	@ 0x5c
 8005c34:	4683      	mov	fp, r0
 8005c36:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005c3a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005c3c:	b97f      	cbnz	r7, 8005c5e <_dtoa_r+0x36>
 8005c3e:	2010      	movs	r0, #16
 8005c40:	f000 fe02 	bl	8006848 <malloc>
 8005c44:	4602      	mov	r2, r0
 8005c46:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c4a:	b920      	cbnz	r0, 8005c56 <_dtoa_r+0x2e>
 8005c4c:	21ef      	movs	r1, #239	@ 0xef
 8005c4e:	4ba8      	ldr	r3, [pc, #672]	@ (8005ef0 <_dtoa_r+0x2c8>)
 8005c50:	48a8      	ldr	r0, [pc, #672]	@ (8005ef4 <_dtoa_r+0x2cc>)
 8005c52:	f002 fdd9 	bl	8008808 <__assert_func>
 8005c56:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c5a:	6007      	str	r7, [r0, #0]
 8005c5c:	60c7      	str	r7, [r0, #12]
 8005c5e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c62:	6819      	ldr	r1, [r3, #0]
 8005c64:	b159      	cbz	r1, 8005c7e <_dtoa_r+0x56>
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	2301      	movs	r3, #1
 8005c6a:	4093      	lsls	r3, r2
 8005c6c:	604a      	str	r2, [r1, #4]
 8005c6e:	608b      	str	r3, [r1, #8]
 8005c70:	4658      	mov	r0, fp
 8005c72:	f000 fedf 	bl	8006a34 <_Bfree>
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	1e2b      	subs	r3, r5, #0
 8005c80:	bfaf      	iteee	ge
 8005c82:	2300      	movge	r3, #0
 8005c84:	2201      	movlt	r2, #1
 8005c86:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c8a:	9303      	strlt	r3, [sp, #12]
 8005c8c:	bfa8      	it	ge
 8005c8e:	6033      	strge	r3, [r6, #0]
 8005c90:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c94:	4b98      	ldr	r3, [pc, #608]	@ (8005ef8 <_dtoa_r+0x2d0>)
 8005c96:	bfb8      	it	lt
 8005c98:	6032      	strlt	r2, [r6, #0]
 8005c9a:	ea33 0308 	bics.w	r3, r3, r8
 8005c9e:	d112      	bne.n	8005cc6 <_dtoa_r+0x9e>
 8005ca0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ca4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005cac:	4323      	orrs	r3, r4
 8005cae:	f000 8550 	beq.w	8006752 <_dtoa_r+0xb2a>
 8005cb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cb4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005efc <_dtoa_r+0x2d4>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8552 	beq.w	8006762 <_dtoa_r+0xb3a>
 8005cbe:	f10a 0303 	add.w	r3, sl, #3
 8005cc2:	f000 bd4c 	b.w	800675e <_dtoa_r+0xb36>
 8005cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005cce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f7fa fe67 	bl	80009a8 <__aeabi_dcmpeq>
 8005cda:	4607      	mov	r7, r0
 8005cdc:	b158      	cbz	r0, 8005cf6 <_dtoa_r+0xce>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ce6:	b113      	cbz	r3, 8005cee <_dtoa_r+0xc6>
 8005ce8:	4b85      	ldr	r3, [pc, #532]	@ (8005f00 <_dtoa_r+0x2d8>)
 8005cea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005f04 <_dtoa_r+0x2dc>
 8005cf2:	f000 bd36 	b.w	8006762 <_dtoa_r+0xb3a>
 8005cf6:	ab14      	add	r3, sp, #80	@ 0x50
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	ab15      	add	r3, sp, #84	@ 0x54
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	4658      	mov	r0, fp
 8005d00:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005d04:	f001 fa30 	bl	8007168 <__d2b>
 8005d08:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005d0c:	4681      	mov	r9, r0
 8005d0e:	2e00      	cmp	r6, #0
 8005d10:	d077      	beq.n	8005e02 <_dtoa_r+0x1da>
 8005d12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d18:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d20:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d24:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d28:	9712      	str	r7, [sp, #72]	@ 0x48
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4b76      	ldr	r3, [pc, #472]	@ (8005f08 <_dtoa_r+0x2e0>)
 8005d30:	f7fa fa1a 	bl	8000168 <__aeabi_dsub>
 8005d34:	a368      	add	r3, pc, #416	@ (adr r3, 8005ed8 <_dtoa_r+0x2b0>)
 8005d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3a:	f7fa fbcd 	bl	80004d8 <__aeabi_dmul>
 8005d3e:	a368      	add	r3, pc, #416	@ (adr r3, 8005ee0 <_dtoa_r+0x2b8>)
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	f7fa fa12 	bl	800016c <__adddf3>
 8005d48:	4604      	mov	r4, r0
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	460d      	mov	r5, r1
 8005d4e:	f7fa fb59 	bl	8000404 <__aeabi_i2d>
 8005d52:	a365      	add	r3, pc, #404	@ (adr r3, 8005ee8 <_dtoa_r+0x2c0>)
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f7fa fbbe 	bl	80004d8 <__aeabi_dmul>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4620      	mov	r0, r4
 8005d62:	4629      	mov	r1, r5
 8005d64:	f7fa fa02 	bl	800016c <__adddf3>
 8005d68:	4604      	mov	r4, r0
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	f7fa fe64 	bl	8000a38 <__aeabi_d2iz>
 8005d70:	2200      	movs	r2, #0
 8005d72:	4607      	mov	r7, r0
 8005d74:	2300      	movs	r3, #0
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa fe1f 	bl	80009bc <__aeabi_dcmplt>
 8005d7e:	b140      	cbz	r0, 8005d92 <_dtoa_r+0x16a>
 8005d80:	4638      	mov	r0, r7
 8005d82:	f7fa fb3f 	bl	8000404 <__aeabi_i2d>
 8005d86:	4622      	mov	r2, r4
 8005d88:	462b      	mov	r3, r5
 8005d8a:	f7fa fe0d 	bl	80009a8 <__aeabi_dcmpeq>
 8005d8e:	b900      	cbnz	r0, 8005d92 <_dtoa_r+0x16a>
 8005d90:	3f01      	subs	r7, #1
 8005d92:	2f16      	cmp	r7, #22
 8005d94:	d853      	bhi.n	8005e3e <_dtoa_r+0x216>
 8005d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d9a:	4b5c      	ldr	r3, [pc, #368]	@ (8005f0c <_dtoa_r+0x2e4>)
 8005d9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f7fa fe0a 	bl	80009bc <__aeabi_dcmplt>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d04a      	beq.n	8005e42 <_dtoa_r+0x21a>
 8005dac:	2300      	movs	r3, #0
 8005dae:	3f01      	subs	r7, #1
 8005db0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005db2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005db4:	1b9b      	subs	r3, r3, r6
 8005db6:	1e5a      	subs	r2, r3, #1
 8005db8:	bf46      	itte	mi
 8005dba:	f1c3 0801 	rsbmi	r8, r3, #1
 8005dbe:	2300      	movmi	r3, #0
 8005dc0:	f04f 0800 	movpl.w	r8, #0
 8005dc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dc6:	bf48      	it	mi
 8005dc8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005dca:	2f00      	cmp	r7, #0
 8005dcc:	db3b      	blt.n	8005e46 <_dtoa_r+0x21e>
 8005dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd0:	970e      	str	r7, [sp, #56]	@ 0x38
 8005dd2:	443b      	add	r3, r7
 8005dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ddc:	2b09      	cmp	r3, #9
 8005dde:	d866      	bhi.n	8005eae <_dtoa_r+0x286>
 8005de0:	2b05      	cmp	r3, #5
 8005de2:	bfc4      	itt	gt
 8005de4:	3b04      	subgt	r3, #4
 8005de6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005de8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dea:	bfc8      	it	gt
 8005dec:	2400      	movgt	r4, #0
 8005dee:	f1a3 0302 	sub.w	r3, r3, #2
 8005df2:	bfd8      	it	le
 8005df4:	2401      	movle	r4, #1
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d864      	bhi.n	8005ec4 <_dtoa_r+0x29c>
 8005dfa:	e8df f003 	tbb	[pc, r3]
 8005dfe:	382b      	.short	0x382b
 8005e00:	5636      	.short	0x5636
 8005e02:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e06:	441e      	add	r6, r3
 8005e08:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	bfc1      	itttt	gt
 8005e10:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e14:	fa08 f803 	lslgt.w	r8, r8, r3
 8005e18:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e1c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e20:	bfd6      	itet	le
 8005e22:	f1c3 0320 	rsble	r3, r3, #32
 8005e26:	ea48 0003 	orrgt.w	r0, r8, r3
 8005e2a:	fa04 f003 	lslle.w	r0, r4, r3
 8005e2e:	f7fa fad9 	bl	80003e4 <__aeabi_ui2d>
 8005e32:	2201      	movs	r2, #1
 8005e34:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e38:	3e01      	subs	r6, #1
 8005e3a:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e3c:	e775      	b.n	8005d2a <_dtoa_r+0x102>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e7b6      	b.n	8005db0 <_dtoa_r+0x188>
 8005e42:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005e44:	e7b5      	b.n	8005db2 <_dtoa_r+0x18a>
 8005e46:	427b      	negs	r3, r7
 8005e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	eba8 0807 	sub.w	r8, r8, r7
 8005e50:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e52:	e7c2      	b.n	8005dda <_dtoa_r+0x1b2>
 8005e54:	2300      	movs	r3, #0
 8005e56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dc35      	bgt.n	8005eca <_dtoa_r+0x2a2>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	461a      	mov	r2, r3
 8005e62:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e66:	9221      	str	r2, [sp, #132]	@ 0x84
 8005e68:	e00b      	b.n	8005e82 <_dtoa_r+0x25a>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e7f3      	b.n	8005e56 <_dtoa_r+0x22e>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e74:	18fb      	adds	r3, r7, r3
 8005e76:	9308      	str	r3, [sp, #32]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	9307      	str	r3, [sp, #28]
 8005e7e:	bfb8      	it	lt
 8005e80:	2301      	movlt	r3, #1
 8005e82:	2100      	movs	r1, #0
 8005e84:	2204      	movs	r2, #4
 8005e86:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e8a:	f102 0514 	add.w	r5, r2, #20
 8005e8e:	429d      	cmp	r5, r3
 8005e90:	d91f      	bls.n	8005ed2 <_dtoa_r+0x2aa>
 8005e92:	6041      	str	r1, [r0, #4]
 8005e94:	4658      	mov	r0, fp
 8005e96:	f000 fd8d 	bl	80069b4 <_Balloc>
 8005e9a:	4682      	mov	sl, r0
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d139      	bne.n	8005f14 <_dtoa_r+0x2ec>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f10 <_dtoa_r+0x2e8>)
 8005ea8:	e6d2      	b.n	8005c50 <_dtoa_r+0x28>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e7e0      	b.n	8005e70 <_dtoa_r+0x248>
 8005eae:	2401      	movs	r4, #1
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005eb4:	9320      	str	r3, [sp, #128]	@ 0x80
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eba:	2200      	movs	r2, #0
 8005ebc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ec0:	2312      	movs	r3, #18
 8005ec2:	e7d0      	b.n	8005e66 <_dtoa_r+0x23e>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ec8:	e7f5      	b.n	8005eb6 <_dtoa_r+0x28e>
 8005eca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ecc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ed0:	e7d7      	b.n	8005e82 <_dtoa_r+0x25a>
 8005ed2:	3101      	adds	r1, #1
 8005ed4:	0052      	lsls	r2, r2, #1
 8005ed6:	e7d8      	b.n	8005e8a <_dtoa_r+0x262>
 8005ed8:	636f4361 	.word	0x636f4361
 8005edc:	3fd287a7 	.word	0x3fd287a7
 8005ee0:	8b60c8b3 	.word	0x8b60c8b3
 8005ee4:	3fc68a28 	.word	0x3fc68a28
 8005ee8:	509f79fb 	.word	0x509f79fb
 8005eec:	3fd34413 	.word	0x3fd34413
 8005ef0:	0800ab34 	.word	0x0800ab34
 8005ef4:	0800ab4b 	.word	0x0800ab4b
 8005ef8:	7ff00000 	.word	0x7ff00000
 8005efc:	0800ab30 	.word	0x0800ab30
 8005f00:	0800aaff 	.word	0x0800aaff
 8005f04:	0800aafe 	.word	0x0800aafe
 8005f08:	3ff80000 	.word	0x3ff80000
 8005f0c:	0800ac48 	.word	0x0800ac48
 8005f10:	0800aba3 	.word	0x0800aba3
 8005f14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f18:	6018      	str	r0, [r3, #0]
 8005f1a:	9b07      	ldr	r3, [sp, #28]
 8005f1c:	2b0e      	cmp	r3, #14
 8005f1e:	f200 80a4 	bhi.w	800606a <_dtoa_r+0x442>
 8005f22:	2c00      	cmp	r4, #0
 8005f24:	f000 80a1 	beq.w	800606a <_dtoa_r+0x442>
 8005f28:	2f00      	cmp	r7, #0
 8005f2a:	dd33      	ble.n	8005f94 <_dtoa_r+0x36c>
 8005f2c:	4b86      	ldr	r3, [pc, #536]	@ (8006148 <_dtoa_r+0x520>)
 8005f2e:	f007 020f 	and.w	r2, r7, #15
 8005f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f36:	05f8      	lsls	r0, r7, #23
 8005f38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f44:	d516      	bpl.n	8005f74 <_dtoa_r+0x34c>
 8005f46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f4a:	4b80      	ldr	r3, [pc, #512]	@ (800614c <_dtoa_r+0x524>)
 8005f4c:	2603      	movs	r6, #3
 8005f4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f52:	f7fa fbeb 	bl	800072c <__aeabi_ddiv>
 8005f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f5a:	f004 040f 	and.w	r4, r4, #15
 8005f5e:	4d7b      	ldr	r5, [pc, #492]	@ (800614c <_dtoa_r+0x524>)
 8005f60:	b954      	cbnz	r4, 8005f78 <_dtoa_r+0x350>
 8005f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f6a:	f7fa fbdf 	bl	800072c <__aeabi_ddiv>
 8005f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f72:	e028      	b.n	8005fc6 <_dtoa_r+0x39e>
 8005f74:	2602      	movs	r6, #2
 8005f76:	e7f2      	b.n	8005f5e <_dtoa_r+0x336>
 8005f78:	07e1      	lsls	r1, r4, #31
 8005f7a:	d508      	bpl.n	8005f8e <_dtoa_r+0x366>
 8005f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f84:	f7fa faa8 	bl	80004d8 <__aeabi_dmul>
 8005f88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f8c:	3601      	adds	r6, #1
 8005f8e:	1064      	asrs	r4, r4, #1
 8005f90:	3508      	adds	r5, #8
 8005f92:	e7e5      	b.n	8005f60 <_dtoa_r+0x338>
 8005f94:	f000 80d2 	beq.w	800613c <_dtoa_r+0x514>
 8005f98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f9c:	427c      	negs	r4, r7
 8005f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8006148 <_dtoa_r+0x520>)
 8005fa0:	f004 020f 	and.w	r2, r4, #15
 8005fa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f7fa fa94 	bl	80004d8 <__aeabi_dmul>
 8005fb0:	2602      	movs	r6, #2
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fb8:	4d64      	ldr	r5, [pc, #400]	@ (800614c <_dtoa_r+0x524>)
 8005fba:	1124      	asrs	r4, r4, #4
 8005fbc:	2c00      	cmp	r4, #0
 8005fbe:	f040 80b2 	bne.w	8006126 <_dtoa_r+0x4fe>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1d3      	bne.n	8005f6e <_dtoa_r+0x346>
 8005fc6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80b7 	beq.w	8006140 <_dtoa_r+0x518>
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	4b5d      	ldr	r3, [pc, #372]	@ (8006150 <_dtoa_r+0x528>)
 8005fda:	f7fa fcef 	bl	80009bc <__aeabi_dcmplt>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f000 80ae 	beq.w	8006140 <_dtoa_r+0x518>
 8005fe4:	9b07      	ldr	r3, [sp, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 80aa 	beq.w	8006140 <_dtoa_r+0x518>
 8005fec:	9b08      	ldr	r3, [sp, #32]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dd37      	ble.n	8006062 <_dtoa_r+0x43a>
 8005ff2:	1e7b      	subs	r3, r7, #1
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	9304      	str	r3, [sp, #16]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	4b55      	ldr	r3, [pc, #340]	@ (8006154 <_dtoa_r+0x52c>)
 8005ffe:	f7fa fa6b 	bl	80004d8 <__aeabi_dmul>
 8006002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006006:	9c08      	ldr	r4, [sp, #32]
 8006008:	3601      	adds	r6, #1
 800600a:	4630      	mov	r0, r6
 800600c:	f7fa f9fa 	bl	8000404 <__aeabi_i2d>
 8006010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006014:	f7fa fa60 	bl	80004d8 <__aeabi_dmul>
 8006018:	2200      	movs	r2, #0
 800601a:	4b4f      	ldr	r3, [pc, #316]	@ (8006158 <_dtoa_r+0x530>)
 800601c:	f7fa f8a6 	bl	800016c <__adddf3>
 8006020:	4605      	mov	r5, r0
 8006022:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006026:	2c00      	cmp	r4, #0
 8006028:	f040 809a 	bne.w	8006160 <_dtoa_r+0x538>
 800602c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006030:	2200      	movs	r2, #0
 8006032:	4b4a      	ldr	r3, [pc, #296]	@ (800615c <_dtoa_r+0x534>)
 8006034:	f7fa f898 	bl	8000168 <__aeabi_dsub>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006040:	462a      	mov	r2, r5
 8006042:	4633      	mov	r3, r6
 8006044:	f7fa fcd8 	bl	80009f8 <__aeabi_dcmpgt>
 8006048:	2800      	cmp	r0, #0
 800604a:	f040 828e 	bne.w	800656a <_dtoa_r+0x942>
 800604e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006052:	462a      	mov	r2, r5
 8006054:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006058:	f7fa fcb0 	bl	80009bc <__aeabi_dcmplt>
 800605c:	2800      	cmp	r0, #0
 800605e:	f040 8127 	bne.w	80062b0 <_dtoa_r+0x688>
 8006062:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006066:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800606a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800606c:	2b00      	cmp	r3, #0
 800606e:	f2c0 8163 	blt.w	8006338 <_dtoa_r+0x710>
 8006072:	2f0e      	cmp	r7, #14
 8006074:	f300 8160 	bgt.w	8006338 <_dtoa_r+0x710>
 8006078:	4b33      	ldr	r3, [pc, #204]	@ (8006148 <_dtoa_r+0x520>)
 800607a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800607e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006082:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006086:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006088:	2b00      	cmp	r3, #0
 800608a:	da03      	bge.n	8006094 <_dtoa_r+0x46c>
 800608c:	9b07      	ldr	r3, [sp, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f340 8100 	ble.w	8006294 <_dtoa_r+0x66c>
 8006094:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006098:	4656      	mov	r6, sl
 800609a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800609e:	4620      	mov	r0, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fa fb43 	bl	800072c <__aeabi_ddiv>
 80060a6:	f7fa fcc7 	bl	8000a38 <__aeabi_d2iz>
 80060aa:	4680      	mov	r8, r0
 80060ac:	f7fa f9aa 	bl	8000404 <__aeabi_i2d>
 80060b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060b4:	f7fa fa10 	bl	80004d8 <__aeabi_dmul>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4620      	mov	r0, r4
 80060be:	4629      	mov	r1, r5
 80060c0:	f7fa f852 	bl	8000168 <__aeabi_dsub>
 80060c4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060c8:	9d07      	ldr	r5, [sp, #28]
 80060ca:	f806 4b01 	strb.w	r4, [r6], #1
 80060ce:	eba6 040a 	sub.w	r4, r6, sl
 80060d2:	42a5      	cmp	r5, r4
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	f040 8116 	bne.w	8006308 <_dtoa_r+0x6e0>
 80060dc:	f7fa f846 	bl	800016c <__adddf3>
 80060e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060e4:	4604      	mov	r4, r0
 80060e6:	460d      	mov	r5, r1
 80060e8:	f7fa fc86 	bl	80009f8 <__aeabi_dcmpgt>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	f040 80f8 	bne.w	80062e2 <_dtoa_r+0x6ba>
 80060f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060f6:	4620      	mov	r0, r4
 80060f8:	4629      	mov	r1, r5
 80060fa:	f7fa fc55 	bl	80009a8 <__aeabi_dcmpeq>
 80060fe:	b118      	cbz	r0, 8006108 <_dtoa_r+0x4e0>
 8006100:	f018 0f01 	tst.w	r8, #1
 8006104:	f040 80ed 	bne.w	80062e2 <_dtoa_r+0x6ba>
 8006108:	4649      	mov	r1, r9
 800610a:	4658      	mov	r0, fp
 800610c:	f000 fc92 	bl	8006a34 <_Bfree>
 8006110:	2300      	movs	r3, #0
 8006112:	7033      	strb	r3, [r6, #0]
 8006114:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006116:	3701      	adds	r7, #1
 8006118:	601f      	str	r7, [r3, #0]
 800611a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 8320 	beq.w	8006762 <_dtoa_r+0xb3a>
 8006122:	601e      	str	r6, [r3, #0]
 8006124:	e31d      	b.n	8006762 <_dtoa_r+0xb3a>
 8006126:	07e2      	lsls	r2, r4, #31
 8006128:	d505      	bpl.n	8006136 <_dtoa_r+0x50e>
 800612a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800612e:	f7fa f9d3 	bl	80004d8 <__aeabi_dmul>
 8006132:	2301      	movs	r3, #1
 8006134:	3601      	adds	r6, #1
 8006136:	1064      	asrs	r4, r4, #1
 8006138:	3508      	adds	r5, #8
 800613a:	e73f      	b.n	8005fbc <_dtoa_r+0x394>
 800613c:	2602      	movs	r6, #2
 800613e:	e742      	b.n	8005fc6 <_dtoa_r+0x39e>
 8006140:	9c07      	ldr	r4, [sp, #28]
 8006142:	9704      	str	r7, [sp, #16]
 8006144:	e761      	b.n	800600a <_dtoa_r+0x3e2>
 8006146:	bf00      	nop
 8006148:	0800ac48 	.word	0x0800ac48
 800614c:	0800ac20 	.word	0x0800ac20
 8006150:	3ff00000 	.word	0x3ff00000
 8006154:	40240000 	.word	0x40240000
 8006158:	401c0000 	.word	0x401c0000
 800615c:	40140000 	.word	0x40140000
 8006160:	4b70      	ldr	r3, [pc, #448]	@ (8006324 <_dtoa_r+0x6fc>)
 8006162:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006164:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006168:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800616c:	4454      	add	r4, sl
 800616e:	2900      	cmp	r1, #0
 8006170:	d045      	beq.n	80061fe <_dtoa_r+0x5d6>
 8006172:	2000      	movs	r0, #0
 8006174:	496c      	ldr	r1, [pc, #432]	@ (8006328 <_dtoa_r+0x700>)
 8006176:	f7fa fad9 	bl	800072c <__aeabi_ddiv>
 800617a:	4633      	mov	r3, r6
 800617c:	462a      	mov	r2, r5
 800617e:	f7f9 fff3 	bl	8000168 <__aeabi_dsub>
 8006182:	4656      	mov	r6, sl
 8006184:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618c:	f7fa fc54 	bl	8000a38 <__aeabi_d2iz>
 8006190:	4605      	mov	r5, r0
 8006192:	f7fa f937 	bl	8000404 <__aeabi_i2d>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800619e:	f7f9 ffe3 	bl	8000168 <__aeabi_dsub>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	3530      	adds	r5, #48	@ 0x30
 80061a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061b0:	f806 5b01 	strb.w	r5, [r6], #1
 80061b4:	f7fa fc02 	bl	80009bc <__aeabi_dcmplt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d163      	bne.n	8006284 <_dtoa_r+0x65c>
 80061bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c0:	2000      	movs	r0, #0
 80061c2:	495a      	ldr	r1, [pc, #360]	@ (800632c <_dtoa_r+0x704>)
 80061c4:	f7f9 ffd0 	bl	8000168 <__aeabi_dsub>
 80061c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061cc:	f7fa fbf6 	bl	80009bc <__aeabi_dcmplt>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	f040 8087 	bne.w	80062e4 <_dtoa_r+0x6bc>
 80061d6:	42a6      	cmp	r6, r4
 80061d8:	f43f af43 	beq.w	8006062 <_dtoa_r+0x43a>
 80061dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061e0:	2200      	movs	r2, #0
 80061e2:	4b53      	ldr	r3, [pc, #332]	@ (8006330 <_dtoa_r+0x708>)
 80061e4:	f7fa f978 	bl	80004d8 <__aeabi_dmul>
 80061e8:	2200      	movs	r2, #0
 80061ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f2:	4b4f      	ldr	r3, [pc, #316]	@ (8006330 <_dtoa_r+0x708>)
 80061f4:	f7fa f970 	bl	80004d8 <__aeabi_dmul>
 80061f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061fc:	e7c4      	b.n	8006188 <_dtoa_r+0x560>
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	f7fa f969 	bl	80004d8 <__aeabi_dmul>
 8006206:	4656      	mov	r6, sl
 8006208:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800620c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800620e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006212:	f7fa fc11 	bl	8000a38 <__aeabi_d2iz>
 8006216:	4605      	mov	r5, r0
 8006218:	f7fa f8f4 	bl	8000404 <__aeabi_i2d>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006224:	f7f9 ffa0 	bl	8000168 <__aeabi_dsub>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	3530      	adds	r5, #48	@ 0x30
 800622e:	f806 5b01 	strb.w	r5, [r6], #1
 8006232:	42a6      	cmp	r6, r4
 8006234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	d124      	bne.n	8006288 <_dtoa_r+0x660>
 800623e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006242:	4b39      	ldr	r3, [pc, #228]	@ (8006328 <_dtoa_r+0x700>)
 8006244:	f7f9 ff92 	bl	800016c <__adddf3>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006250:	f7fa fbd2 	bl	80009f8 <__aeabi_dcmpgt>
 8006254:	2800      	cmp	r0, #0
 8006256:	d145      	bne.n	80062e4 <_dtoa_r+0x6bc>
 8006258:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800625c:	2000      	movs	r0, #0
 800625e:	4932      	ldr	r1, [pc, #200]	@ (8006328 <_dtoa_r+0x700>)
 8006260:	f7f9 ff82 	bl	8000168 <__aeabi_dsub>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800626c:	f7fa fba6 	bl	80009bc <__aeabi_dcmplt>
 8006270:	2800      	cmp	r0, #0
 8006272:	f43f aef6 	beq.w	8006062 <_dtoa_r+0x43a>
 8006276:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006278:	1e73      	subs	r3, r6, #1
 800627a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800627c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006280:	2b30      	cmp	r3, #48	@ 0x30
 8006282:	d0f8      	beq.n	8006276 <_dtoa_r+0x64e>
 8006284:	9f04      	ldr	r7, [sp, #16]
 8006286:	e73f      	b.n	8006108 <_dtoa_r+0x4e0>
 8006288:	4b29      	ldr	r3, [pc, #164]	@ (8006330 <_dtoa_r+0x708>)
 800628a:	f7fa f925 	bl	80004d8 <__aeabi_dmul>
 800628e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006292:	e7bc      	b.n	800620e <_dtoa_r+0x5e6>
 8006294:	d10c      	bne.n	80062b0 <_dtoa_r+0x688>
 8006296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800629a:	2200      	movs	r2, #0
 800629c:	4b25      	ldr	r3, [pc, #148]	@ (8006334 <_dtoa_r+0x70c>)
 800629e:	f7fa f91b 	bl	80004d8 <__aeabi_dmul>
 80062a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062a6:	f7fa fb9d 	bl	80009e4 <__aeabi_dcmpge>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	f000 815b 	beq.w	8006566 <_dtoa_r+0x93e>
 80062b0:	2400      	movs	r4, #0
 80062b2:	4625      	mov	r5, r4
 80062b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062b6:	4656      	mov	r6, sl
 80062b8:	43db      	mvns	r3, r3
 80062ba:	9304      	str	r3, [sp, #16]
 80062bc:	2700      	movs	r7, #0
 80062be:	4621      	mov	r1, r4
 80062c0:	4658      	mov	r0, fp
 80062c2:	f000 fbb7 	bl	8006a34 <_Bfree>
 80062c6:	2d00      	cmp	r5, #0
 80062c8:	d0dc      	beq.n	8006284 <_dtoa_r+0x65c>
 80062ca:	b12f      	cbz	r7, 80062d8 <_dtoa_r+0x6b0>
 80062cc:	42af      	cmp	r7, r5
 80062ce:	d003      	beq.n	80062d8 <_dtoa_r+0x6b0>
 80062d0:	4639      	mov	r1, r7
 80062d2:	4658      	mov	r0, fp
 80062d4:	f000 fbae 	bl	8006a34 <_Bfree>
 80062d8:	4629      	mov	r1, r5
 80062da:	4658      	mov	r0, fp
 80062dc:	f000 fbaa 	bl	8006a34 <_Bfree>
 80062e0:	e7d0      	b.n	8006284 <_dtoa_r+0x65c>
 80062e2:	9704      	str	r7, [sp, #16]
 80062e4:	4633      	mov	r3, r6
 80062e6:	461e      	mov	r6, r3
 80062e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062ec:	2a39      	cmp	r2, #57	@ 0x39
 80062ee:	d107      	bne.n	8006300 <_dtoa_r+0x6d8>
 80062f0:	459a      	cmp	sl, r3
 80062f2:	d1f8      	bne.n	80062e6 <_dtoa_r+0x6be>
 80062f4:	9a04      	ldr	r2, [sp, #16]
 80062f6:	3201      	adds	r2, #1
 80062f8:	9204      	str	r2, [sp, #16]
 80062fa:	2230      	movs	r2, #48	@ 0x30
 80062fc:	f88a 2000 	strb.w	r2, [sl]
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	3201      	adds	r2, #1
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	e7bd      	b.n	8006284 <_dtoa_r+0x65c>
 8006308:	2200      	movs	r2, #0
 800630a:	4b09      	ldr	r3, [pc, #36]	@ (8006330 <_dtoa_r+0x708>)
 800630c:	f7fa f8e4 	bl	80004d8 <__aeabi_dmul>
 8006310:	2200      	movs	r2, #0
 8006312:	2300      	movs	r3, #0
 8006314:	4604      	mov	r4, r0
 8006316:	460d      	mov	r5, r1
 8006318:	f7fa fb46 	bl	80009a8 <__aeabi_dcmpeq>
 800631c:	2800      	cmp	r0, #0
 800631e:	f43f aebc 	beq.w	800609a <_dtoa_r+0x472>
 8006322:	e6f1      	b.n	8006108 <_dtoa_r+0x4e0>
 8006324:	0800ac48 	.word	0x0800ac48
 8006328:	3fe00000 	.word	0x3fe00000
 800632c:	3ff00000 	.word	0x3ff00000
 8006330:	40240000 	.word	0x40240000
 8006334:	40140000 	.word	0x40140000
 8006338:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800633a:	2a00      	cmp	r2, #0
 800633c:	f000 80db 	beq.w	80064f6 <_dtoa_r+0x8ce>
 8006340:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006342:	2a01      	cmp	r2, #1
 8006344:	f300 80bf 	bgt.w	80064c6 <_dtoa_r+0x89e>
 8006348:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800634a:	2a00      	cmp	r2, #0
 800634c:	f000 80b7 	beq.w	80064be <_dtoa_r+0x896>
 8006350:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006354:	4646      	mov	r6, r8
 8006356:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800635a:	2101      	movs	r1, #1
 800635c:	441a      	add	r2, r3
 800635e:	4658      	mov	r0, fp
 8006360:	4498      	add	r8, r3
 8006362:	9209      	str	r2, [sp, #36]	@ 0x24
 8006364:	f000 fc64 	bl	8006c30 <__i2b>
 8006368:	4605      	mov	r5, r0
 800636a:	b15e      	cbz	r6, 8006384 <_dtoa_r+0x75c>
 800636c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800636e:	2b00      	cmp	r3, #0
 8006370:	dd08      	ble.n	8006384 <_dtoa_r+0x75c>
 8006372:	42b3      	cmp	r3, r6
 8006374:	bfa8      	it	ge
 8006376:	4633      	movge	r3, r6
 8006378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800637a:	eba8 0803 	sub.w	r8, r8, r3
 800637e:	1af6      	subs	r6, r6, r3
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	9309      	str	r3, [sp, #36]	@ 0x24
 8006384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006386:	b1f3      	cbz	r3, 80063c6 <_dtoa_r+0x79e>
 8006388:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80b7 	beq.w	80064fe <_dtoa_r+0x8d6>
 8006390:	b18c      	cbz	r4, 80063b6 <_dtoa_r+0x78e>
 8006392:	4629      	mov	r1, r5
 8006394:	4622      	mov	r2, r4
 8006396:	4658      	mov	r0, fp
 8006398:	f000 fd08 	bl	8006dac <__pow5mult>
 800639c:	464a      	mov	r2, r9
 800639e:	4601      	mov	r1, r0
 80063a0:	4605      	mov	r5, r0
 80063a2:	4658      	mov	r0, fp
 80063a4:	f000 fc5a 	bl	8006c5c <__multiply>
 80063a8:	4649      	mov	r1, r9
 80063aa:	9004      	str	r0, [sp, #16]
 80063ac:	4658      	mov	r0, fp
 80063ae:	f000 fb41 	bl	8006a34 <_Bfree>
 80063b2:	9b04      	ldr	r3, [sp, #16]
 80063b4:	4699      	mov	r9, r3
 80063b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063b8:	1b1a      	subs	r2, r3, r4
 80063ba:	d004      	beq.n	80063c6 <_dtoa_r+0x79e>
 80063bc:	4649      	mov	r1, r9
 80063be:	4658      	mov	r0, fp
 80063c0:	f000 fcf4 	bl	8006dac <__pow5mult>
 80063c4:	4681      	mov	r9, r0
 80063c6:	2101      	movs	r1, #1
 80063c8:	4658      	mov	r0, fp
 80063ca:	f000 fc31 	bl	8006c30 <__i2b>
 80063ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063d0:	4604      	mov	r4, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 81c9 	beq.w	800676a <_dtoa_r+0xb42>
 80063d8:	461a      	mov	r2, r3
 80063da:	4601      	mov	r1, r0
 80063dc:	4658      	mov	r0, fp
 80063de:	f000 fce5 	bl	8006dac <__pow5mult>
 80063e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063e4:	4604      	mov	r4, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	f300 808f 	bgt.w	800650a <_dtoa_r+0x8e2>
 80063ec:	9b02      	ldr	r3, [sp, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 8087 	bne.w	8006502 <_dtoa_r+0x8da>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 8083 	bne.w	8006506 <_dtoa_r+0x8de>
 8006400:	9b03      	ldr	r3, [sp, #12]
 8006402:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006406:	0d1b      	lsrs	r3, r3, #20
 8006408:	051b      	lsls	r3, r3, #20
 800640a:	b12b      	cbz	r3, 8006418 <_dtoa_r+0x7f0>
 800640c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800640e:	f108 0801 	add.w	r8, r8, #1
 8006412:	3301      	adds	r3, #1
 8006414:	9309      	str	r3, [sp, #36]	@ 0x24
 8006416:	2301      	movs	r3, #1
 8006418:	930a      	str	r3, [sp, #40]	@ 0x28
 800641a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 81aa 	beq.w	8006776 <_dtoa_r+0xb4e>
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006428:	6918      	ldr	r0, [r3, #16]
 800642a:	f000 fbb5 	bl	8006b98 <__hi0bits>
 800642e:	f1c0 0020 	rsb	r0, r0, #32
 8006432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006434:	4418      	add	r0, r3
 8006436:	f010 001f 	ands.w	r0, r0, #31
 800643a:	d071      	beq.n	8006520 <_dtoa_r+0x8f8>
 800643c:	f1c0 0320 	rsb	r3, r0, #32
 8006440:	2b04      	cmp	r3, #4
 8006442:	dd65      	ble.n	8006510 <_dtoa_r+0x8e8>
 8006444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006446:	f1c0 001c 	rsb	r0, r0, #28
 800644a:	4403      	add	r3, r0
 800644c:	4480      	add	r8, r0
 800644e:	4406      	add	r6, r0
 8006450:	9309      	str	r3, [sp, #36]	@ 0x24
 8006452:	f1b8 0f00 	cmp.w	r8, #0
 8006456:	dd05      	ble.n	8006464 <_dtoa_r+0x83c>
 8006458:	4649      	mov	r1, r9
 800645a:	4642      	mov	r2, r8
 800645c:	4658      	mov	r0, fp
 800645e:	f000 fcff 	bl	8006e60 <__lshift>
 8006462:	4681      	mov	r9, r0
 8006464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006466:	2b00      	cmp	r3, #0
 8006468:	dd05      	ble.n	8006476 <_dtoa_r+0x84e>
 800646a:	4621      	mov	r1, r4
 800646c:	461a      	mov	r2, r3
 800646e:	4658      	mov	r0, fp
 8006470:	f000 fcf6 	bl	8006e60 <__lshift>
 8006474:	4604      	mov	r4, r0
 8006476:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d053      	beq.n	8006524 <_dtoa_r+0x8fc>
 800647c:	4621      	mov	r1, r4
 800647e:	4648      	mov	r0, r9
 8006480:	f000 fd5a 	bl	8006f38 <__mcmp>
 8006484:	2800      	cmp	r0, #0
 8006486:	da4d      	bge.n	8006524 <_dtoa_r+0x8fc>
 8006488:	1e7b      	subs	r3, r7, #1
 800648a:	4649      	mov	r1, r9
 800648c:	9304      	str	r3, [sp, #16]
 800648e:	220a      	movs	r2, #10
 8006490:	2300      	movs	r3, #0
 8006492:	4658      	mov	r0, fp
 8006494:	f000 faf0 	bl	8006a78 <__multadd>
 8006498:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800649a:	4681      	mov	r9, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 816c 	beq.w	800677a <_dtoa_r+0xb52>
 80064a2:	2300      	movs	r3, #0
 80064a4:	4629      	mov	r1, r5
 80064a6:	220a      	movs	r2, #10
 80064a8:	4658      	mov	r0, fp
 80064aa:	f000 fae5 	bl	8006a78 <__multadd>
 80064ae:	9b08      	ldr	r3, [sp, #32]
 80064b0:	4605      	mov	r5, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dc61      	bgt.n	800657a <_dtoa_r+0x952>
 80064b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	dc3b      	bgt.n	8006534 <_dtoa_r+0x90c>
 80064bc:	e05d      	b.n	800657a <_dtoa_r+0x952>
 80064be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064c0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064c4:	e746      	b.n	8006354 <_dtoa_r+0x72c>
 80064c6:	9b07      	ldr	r3, [sp, #28]
 80064c8:	1e5c      	subs	r4, r3, #1
 80064ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064cc:	42a3      	cmp	r3, r4
 80064ce:	bfbf      	itttt	lt
 80064d0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064d2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80064d4:	1ae3      	sublt	r3, r4, r3
 80064d6:	18d2      	addlt	r2, r2, r3
 80064d8:	bfa8      	it	ge
 80064da:	1b1c      	subge	r4, r3, r4
 80064dc:	9b07      	ldr	r3, [sp, #28]
 80064de:	bfbe      	ittt	lt
 80064e0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064e2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80064e4:	2400      	movlt	r4, #0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bfb5      	itete	lt
 80064ea:	eba8 0603 	sublt.w	r6, r8, r3
 80064ee:	4646      	movge	r6, r8
 80064f0:	2300      	movlt	r3, #0
 80064f2:	9b07      	ldrge	r3, [sp, #28]
 80064f4:	e730      	b.n	8006358 <_dtoa_r+0x730>
 80064f6:	4646      	mov	r6, r8
 80064f8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064fa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064fc:	e735      	b.n	800636a <_dtoa_r+0x742>
 80064fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006500:	e75c      	b.n	80063bc <_dtoa_r+0x794>
 8006502:	2300      	movs	r3, #0
 8006504:	e788      	b.n	8006418 <_dtoa_r+0x7f0>
 8006506:	9b02      	ldr	r3, [sp, #8]
 8006508:	e786      	b.n	8006418 <_dtoa_r+0x7f0>
 800650a:	2300      	movs	r3, #0
 800650c:	930a      	str	r3, [sp, #40]	@ 0x28
 800650e:	e788      	b.n	8006422 <_dtoa_r+0x7fa>
 8006510:	d09f      	beq.n	8006452 <_dtoa_r+0x82a>
 8006512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006514:	331c      	adds	r3, #28
 8006516:	441a      	add	r2, r3
 8006518:	4498      	add	r8, r3
 800651a:	441e      	add	r6, r3
 800651c:	9209      	str	r2, [sp, #36]	@ 0x24
 800651e:	e798      	b.n	8006452 <_dtoa_r+0x82a>
 8006520:	4603      	mov	r3, r0
 8006522:	e7f6      	b.n	8006512 <_dtoa_r+0x8ea>
 8006524:	9b07      	ldr	r3, [sp, #28]
 8006526:	9704      	str	r7, [sp, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	dc20      	bgt.n	800656e <_dtoa_r+0x946>
 800652c:	9308      	str	r3, [sp, #32]
 800652e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006530:	2b02      	cmp	r3, #2
 8006532:	dd1e      	ble.n	8006572 <_dtoa_r+0x94a>
 8006534:	9b08      	ldr	r3, [sp, #32]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f47f aebc 	bne.w	80062b4 <_dtoa_r+0x68c>
 800653c:	4621      	mov	r1, r4
 800653e:	2205      	movs	r2, #5
 8006540:	4658      	mov	r0, fp
 8006542:	f000 fa99 	bl	8006a78 <__multadd>
 8006546:	4601      	mov	r1, r0
 8006548:	4604      	mov	r4, r0
 800654a:	4648      	mov	r0, r9
 800654c:	f000 fcf4 	bl	8006f38 <__mcmp>
 8006550:	2800      	cmp	r0, #0
 8006552:	f77f aeaf 	ble.w	80062b4 <_dtoa_r+0x68c>
 8006556:	2331      	movs	r3, #49	@ 0x31
 8006558:	4656      	mov	r6, sl
 800655a:	f806 3b01 	strb.w	r3, [r6], #1
 800655e:	9b04      	ldr	r3, [sp, #16]
 8006560:	3301      	adds	r3, #1
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	e6aa      	b.n	80062bc <_dtoa_r+0x694>
 8006566:	9c07      	ldr	r4, [sp, #28]
 8006568:	9704      	str	r7, [sp, #16]
 800656a:	4625      	mov	r5, r4
 800656c:	e7f3      	b.n	8006556 <_dtoa_r+0x92e>
 800656e:	9b07      	ldr	r3, [sp, #28]
 8006570:	9308      	str	r3, [sp, #32]
 8006572:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 8104 	beq.w	8006782 <_dtoa_r+0xb5a>
 800657a:	2e00      	cmp	r6, #0
 800657c:	dd05      	ble.n	800658a <_dtoa_r+0x962>
 800657e:	4629      	mov	r1, r5
 8006580:	4632      	mov	r2, r6
 8006582:	4658      	mov	r0, fp
 8006584:	f000 fc6c 	bl	8006e60 <__lshift>
 8006588:	4605      	mov	r5, r0
 800658a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800658c:	2b00      	cmp	r3, #0
 800658e:	d05a      	beq.n	8006646 <_dtoa_r+0xa1e>
 8006590:	4658      	mov	r0, fp
 8006592:	6869      	ldr	r1, [r5, #4]
 8006594:	f000 fa0e 	bl	80069b4 <_Balloc>
 8006598:	4606      	mov	r6, r0
 800659a:	b928      	cbnz	r0, 80065a8 <_dtoa_r+0x980>
 800659c:	4602      	mov	r2, r0
 800659e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065a2:	4b83      	ldr	r3, [pc, #524]	@ (80067b0 <_dtoa_r+0xb88>)
 80065a4:	f7ff bb54 	b.w	8005c50 <_dtoa_r+0x28>
 80065a8:	692a      	ldr	r2, [r5, #16]
 80065aa:	f105 010c 	add.w	r1, r5, #12
 80065ae:	3202      	adds	r2, #2
 80065b0:	0092      	lsls	r2, r2, #2
 80065b2:	300c      	adds	r0, #12
 80065b4:	f7ff fa9d 	bl	8005af2 <memcpy>
 80065b8:	2201      	movs	r2, #1
 80065ba:	4631      	mov	r1, r6
 80065bc:	4658      	mov	r0, fp
 80065be:	f000 fc4f 	bl	8006e60 <__lshift>
 80065c2:	462f      	mov	r7, r5
 80065c4:	4605      	mov	r5, r0
 80065c6:	f10a 0301 	add.w	r3, sl, #1
 80065ca:	9307      	str	r3, [sp, #28]
 80065cc:	9b08      	ldr	r3, [sp, #32]
 80065ce:	4453      	add	r3, sl
 80065d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065d2:	9b02      	ldr	r3, [sp, #8]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065da:	9b07      	ldr	r3, [sp, #28]
 80065dc:	4621      	mov	r1, r4
 80065de:	3b01      	subs	r3, #1
 80065e0:	4648      	mov	r0, r9
 80065e2:	9302      	str	r3, [sp, #8]
 80065e4:	f7ff fa98 	bl	8005b18 <quorem>
 80065e8:	4639      	mov	r1, r7
 80065ea:	9008      	str	r0, [sp, #32]
 80065ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065f0:	4648      	mov	r0, r9
 80065f2:	f000 fca1 	bl	8006f38 <__mcmp>
 80065f6:	462a      	mov	r2, r5
 80065f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80065fa:	4621      	mov	r1, r4
 80065fc:	4658      	mov	r0, fp
 80065fe:	f000 fcb7 	bl	8006f70 <__mdiff>
 8006602:	68c2      	ldr	r2, [r0, #12]
 8006604:	4606      	mov	r6, r0
 8006606:	bb02      	cbnz	r2, 800664a <_dtoa_r+0xa22>
 8006608:	4601      	mov	r1, r0
 800660a:	4648      	mov	r0, r9
 800660c:	f000 fc94 	bl	8006f38 <__mcmp>
 8006610:	4602      	mov	r2, r0
 8006612:	4631      	mov	r1, r6
 8006614:	4658      	mov	r0, fp
 8006616:	920c      	str	r2, [sp, #48]	@ 0x30
 8006618:	f000 fa0c 	bl	8006a34 <_Bfree>
 800661c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800661e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006620:	9e07      	ldr	r6, [sp, #28]
 8006622:	ea43 0102 	orr.w	r1, r3, r2
 8006626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006628:	4319      	orrs	r1, r3
 800662a:	d110      	bne.n	800664e <_dtoa_r+0xa26>
 800662c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006630:	d029      	beq.n	8006686 <_dtoa_r+0xa5e>
 8006632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006634:	2b00      	cmp	r3, #0
 8006636:	dd02      	ble.n	800663e <_dtoa_r+0xa16>
 8006638:	9b08      	ldr	r3, [sp, #32]
 800663a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800663e:	9b02      	ldr	r3, [sp, #8]
 8006640:	f883 8000 	strb.w	r8, [r3]
 8006644:	e63b      	b.n	80062be <_dtoa_r+0x696>
 8006646:	4628      	mov	r0, r5
 8006648:	e7bb      	b.n	80065c2 <_dtoa_r+0x99a>
 800664a:	2201      	movs	r2, #1
 800664c:	e7e1      	b.n	8006612 <_dtoa_r+0x9ea>
 800664e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	db04      	blt.n	800665e <_dtoa_r+0xa36>
 8006654:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006656:	430b      	orrs	r3, r1
 8006658:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800665a:	430b      	orrs	r3, r1
 800665c:	d120      	bne.n	80066a0 <_dtoa_r+0xa78>
 800665e:	2a00      	cmp	r2, #0
 8006660:	dded      	ble.n	800663e <_dtoa_r+0xa16>
 8006662:	4649      	mov	r1, r9
 8006664:	2201      	movs	r2, #1
 8006666:	4658      	mov	r0, fp
 8006668:	f000 fbfa 	bl	8006e60 <__lshift>
 800666c:	4621      	mov	r1, r4
 800666e:	4681      	mov	r9, r0
 8006670:	f000 fc62 	bl	8006f38 <__mcmp>
 8006674:	2800      	cmp	r0, #0
 8006676:	dc03      	bgt.n	8006680 <_dtoa_r+0xa58>
 8006678:	d1e1      	bne.n	800663e <_dtoa_r+0xa16>
 800667a:	f018 0f01 	tst.w	r8, #1
 800667e:	d0de      	beq.n	800663e <_dtoa_r+0xa16>
 8006680:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006684:	d1d8      	bne.n	8006638 <_dtoa_r+0xa10>
 8006686:	2339      	movs	r3, #57	@ 0x39
 8006688:	9a02      	ldr	r2, [sp, #8]
 800668a:	7013      	strb	r3, [r2, #0]
 800668c:	4633      	mov	r3, r6
 800668e:	461e      	mov	r6, r3
 8006690:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006694:	3b01      	subs	r3, #1
 8006696:	2a39      	cmp	r2, #57	@ 0x39
 8006698:	d052      	beq.n	8006740 <_dtoa_r+0xb18>
 800669a:	3201      	adds	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	e60e      	b.n	80062be <_dtoa_r+0x696>
 80066a0:	2a00      	cmp	r2, #0
 80066a2:	dd07      	ble.n	80066b4 <_dtoa_r+0xa8c>
 80066a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066a8:	d0ed      	beq.n	8006686 <_dtoa_r+0xa5e>
 80066aa:	9a02      	ldr	r2, [sp, #8]
 80066ac:	f108 0301 	add.w	r3, r8, #1
 80066b0:	7013      	strb	r3, [r2, #0]
 80066b2:	e604      	b.n	80062be <_dtoa_r+0x696>
 80066b4:	9b07      	ldr	r3, [sp, #28]
 80066b6:	9a07      	ldr	r2, [sp, #28]
 80066b8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066be:	4293      	cmp	r3, r2
 80066c0:	d028      	beq.n	8006714 <_dtoa_r+0xaec>
 80066c2:	4649      	mov	r1, r9
 80066c4:	2300      	movs	r3, #0
 80066c6:	220a      	movs	r2, #10
 80066c8:	4658      	mov	r0, fp
 80066ca:	f000 f9d5 	bl	8006a78 <__multadd>
 80066ce:	42af      	cmp	r7, r5
 80066d0:	4681      	mov	r9, r0
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	f04f 020a 	mov.w	r2, #10
 80066da:	4639      	mov	r1, r7
 80066dc:	4658      	mov	r0, fp
 80066de:	d107      	bne.n	80066f0 <_dtoa_r+0xac8>
 80066e0:	f000 f9ca 	bl	8006a78 <__multadd>
 80066e4:	4607      	mov	r7, r0
 80066e6:	4605      	mov	r5, r0
 80066e8:	9b07      	ldr	r3, [sp, #28]
 80066ea:	3301      	adds	r3, #1
 80066ec:	9307      	str	r3, [sp, #28]
 80066ee:	e774      	b.n	80065da <_dtoa_r+0x9b2>
 80066f0:	f000 f9c2 	bl	8006a78 <__multadd>
 80066f4:	4629      	mov	r1, r5
 80066f6:	4607      	mov	r7, r0
 80066f8:	2300      	movs	r3, #0
 80066fa:	220a      	movs	r2, #10
 80066fc:	4658      	mov	r0, fp
 80066fe:	f000 f9bb 	bl	8006a78 <__multadd>
 8006702:	4605      	mov	r5, r0
 8006704:	e7f0      	b.n	80066e8 <_dtoa_r+0xac0>
 8006706:	9b08      	ldr	r3, [sp, #32]
 8006708:	2700      	movs	r7, #0
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfcc      	ite	gt
 800670e:	461e      	movgt	r6, r3
 8006710:	2601      	movle	r6, #1
 8006712:	4456      	add	r6, sl
 8006714:	4649      	mov	r1, r9
 8006716:	2201      	movs	r2, #1
 8006718:	4658      	mov	r0, fp
 800671a:	f000 fba1 	bl	8006e60 <__lshift>
 800671e:	4621      	mov	r1, r4
 8006720:	4681      	mov	r9, r0
 8006722:	f000 fc09 	bl	8006f38 <__mcmp>
 8006726:	2800      	cmp	r0, #0
 8006728:	dcb0      	bgt.n	800668c <_dtoa_r+0xa64>
 800672a:	d102      	bne.n	8006732 <_dtoa_r+0xb0a>
 800672c:	f018 0f01 	tst.w	r8, #1
 8006730:	d1ac      	bne.n	800668c <_dtoa_r+0xa64>
 8006732:	4633      	mov	r3, r6
 8006734:	461e      	mov	r6, r3
 8006736:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800673a:	2a30      	cmp	r2, #48	@ 0x30
 800673c:	d0fa      	beq.n	8006734 <_dtoa_r+0xb0c>
 800673e:	e5be      	b.n	80062be <_dtoa_r+0x696>
 8006740:	459a      	cmp	sl, r3
 8006742:	d1a4      	bne.n	800668e <_dtoa_r+0xa66>
 8006744:	9b04      	ldr	r3, [sp, #16]
 8006746:	3301      	adds	r3, #1
 8006748:	9304      	str	r3, [sp, #16]
 800674a:	2331      	movs	r3, #49	@ 0x31
 800674c:	f88a 3000 	strb.w	r3, [sl]
 8006750:	e5b5      	b.n	80062be <_dtoa_r+0x696>
 8006752:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006754:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80067b4 <_dtoa_r+0xb8c>
 8006758:	b11b      	cbz	r3, 8006762 <_dtoa_r+0xb3a>
 800675a:	f10a 0308 	add.w	r3, sl, #8
 800675e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	4650      	mov	r0, sl
 8006764:	b017      	add	sp, #92	@ 0x5c
 8006766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800676c:	2b01      	cmp	r3, #1
 800676e:	f77f ae3d 	ble.w	80063ec <_dtoa_r+0x7c4>
 8006772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006774:	930a      	str	r3, [sp, #40]	@ 0x28
 8006776:	2001      	movs	r0, #1
 8006778:	e65b      	b.n	8006432 <_dtoa_r+0x80a>
 800677a:	9b08      	ldr	r3, [sp, #32]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f77f aed6 	ble.w	800652e <_dtoa_r+0x906>
 8006782:	4656      	mov	r6, sl
 8006784:	4621      	mov	r1, r4
 8006786:	4648      	mov	r0, r9
 8006788:	f7ff f9c6 	bl	8005b18 <quorem>
 800678c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006790:	9b08      	ldr	r3, [sp, #32]
 8006792:	f806 8b01 	strb.w	r8, [r6], #1
 8006796:	eba6 020a 	sub.w	r2, r6, sl
 800679a:	4293      	cmp	r3, r2
 800679c:	ddb3      	ble.n	8006706 <_dtoa_r+0xade>
 800679e:	4649      	mov	r1, r9
 80067a0:	2300      	movs	r3, #0
 80067a2:	220a      	movs	r2, #10
 80067a4:	4658      	mov	r0, fp
 80067a6:	f000 f967 	bl	8006a78 <__multadd>
 80067aa:	4681      	mov	r9, r0
 80067ac:	e7ea      	b.n	8006784 <_dtoa_r+0xb5c>
 80067ae:	bf00      	nop
 80067b0:	0800aba3 	.word	0x0800aba3
 80067b4:	0800ab27 	.word	0x0800ab27

080067b8 <_free_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4605      	mov	r5, r0
 80067bc:	2900      	cmp	r1, #0
 80067be:	d040      	beq.n	8006842 <_free_r+0x8a>
 80067c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c4:	1f0c      	subs	r4, r1, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bfb8      	it	lt
 80067ca:	18e4      	addlt	r4, r4, r3
 80067cc:	f000 f8e6 	bl	800699c <__malloc_lock>
 80067d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006844 <_free_r+0x8c>)
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	b933      	cbnz	r3, 80067e4 <_free_r+0x2c>
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	6014      	str	r4, [r2, #0]
 80067da:	4628      	mov	r0, r5
 80067dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067e0:	f000 b8e2 	b.w	80069a8 <__malloc_unlock>
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d908      	bls.n	80067fa <_free_r+0x42>
 80067e8:	6820      	ldr	r0, [r4, #0]
 80067ea:	1821      	adds	r1, r4, r0
 80067ec:	428b      	cmp	r3, r1
 80067ee:	bf01      	itttt	eq
 80067f0:	6819      	ldreq	r1, [r3, #0]
 80067f2:	685b      	ldreq	r3, [r3, #4]
 80067f4:	1809      	addeq	r1, r1, r0
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	e7ed      	b.n	80067d6 <_free_r+0x1e>
 80067fa:	461a      	mov	r2, r3
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <_free_r+0x4c>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d9fa      	bls.n	80067fa <_free_r+0x42>
 8006804:	6811      	ldr	r1, [r2, #0]
 8006806:	1850      	adds	r0, r2, r1
 8006808:	42a0      	cmp	r0, r4
 800680a:	d10b      	bne.n	8006824 <_free_r+0x6c>
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	4401      	add	r1, r0
 8006810:	1850      	adds	r0, r2, r1
 8006812:	4283      	cmp	r3, r0
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	d1e0      	bne.n	80067da <_free_r+0x22>
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4408      	add	r0, r1
 800681e:	6010      	str	r0, [r2, #0]
 8006820:	6053      	str	r3, [r2, #4]
 8006822:	e7da      	b.n	80067da <_free_r+0x22>
 8006824:	d902      	bls.n	800682c <_free_r+0x74>
 8006826:	230c      	movs	r3, #12
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	e7d6      	b.n	80067da <_free_r+0x22>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	1821      	adds	r1, r4, r0
 8006830:	428b      	cmp	r3, r1
 8006832:	bf01      	itttt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	1809      	addeq	r1, r1, r0
 800683a:	6021      	streq	r1, [r4, #0]
 800683c:	6063      	str	r3, [r4, #4]
 800683e:	6054      	str	r4, [r2, #4]
 8006840:	e7cb      	b.n	80067da <_free_r+0x22>
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	20004290 	.word	0x20004290

08006848 <malloc>:
 8006848:	4b02      	ldr	r3, [pc, #8]	@ (8006854 <malloc+0xc>)
 800684a:	4601      	mov	r1, r0
 800684c:	6818      	ldr	r0, [r3, #0]
 800684e:	f000 b825 	b.w	800689c <_malloc_r>
 8006852:	bf00      	nop
 8006854:	2000003c 	.word	0x2000003c

08006858 <sbrk_aligned>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	4e0f      	ldr	r6, [pc, #60]	@ (8006898 <sbrk_aligned+0x40>)
 800685c:	460c      	mov	r4, r1
 800685e:	6831      	ldr	r1, [r6, #0]
 8006860:	4605      	mov	r5, r0
 8006862:	b911      	cbnz	r1, 800686a <sbrk_aligned+0x12>
 8006864:	f001 ffba 	bl	80087dc <_sbrk_r>
 8006868:	6030      	str	r0, [r6, #0]
 800686a:	4621      	mov	r1, r4
 800686c:	4628      	mov	r0, r5
 800686e:	f001 ffb5 	bl	80087dc <_sbrk_r>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	d103      	bne.n	800687e <sbrk_aligned+0x26>
 8006876:	f04f 34ff 	mov.w	r4, #4294967295
 800687a:	4620      	mov	r0, r4
 800687c:	bd70      	pop	{r4, r5, r6, pc}
 800687e:	1cc4      	adds	r4, r0, #3
 8006880:	f024 0403 	bic.w	r4, r4, #3
 8006884:	42a0      	cmp	r0, r4
 8006886:	d0f8      	beq.n	800687a <sbrk_aligned+0x22>
 8006888:	1a21      	subs	r1, r4, r0
 800688a:	4628      	mov	r0, r5
 800688c:	f001 ffa6 	bl	80087dc <_sbrk_r>
 8006890:	3001      	adds	r0, #1
 8006892:	d1f2      	bne.n	800687a <sbrk_aligned+0x22>
 8006894:	e7ef      	b.n	8006876 <sbrk_aligned+0x1e>
 8006896:	bf00      	nop
 8006898:	2000428c 	.word	0x2000428c

0800689c <_malloc_r>:
 800689c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a0:	1ccd      	adds	r5, r1, #3
 80068a2:	f025 0503 	bic.w	r5, r5, #3
 80068a6:	3508      	adds	r5, #8
 80068a8:	2d0c      	cmp	r5, #12
 80068aa:	bf38      	it	cc
 80068ac:	250c      	movcc	r5, #12
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	4606      	mov	r6, r0
 80068b2:	db01      	blt.n	80068b8 <_malloc_r+0x1c>
 80068b4:	42a9      	cmp	r1, r5
 80068b6:	d904      	bls.n	80068c2 <_malloc_r+0x26>
 80068b8:	230c      	movs	r3, #12
 80068ba:	6033      	str	r3, [r6, #0]
 80068bc:	2000      	movs	r0, #0
 80068be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006998 <_malloc_r+0xfc>
 80068c6:	f000 f869 	bl	800699c <__malloc_lock>
 80068ca:	f8d8 3000 	ldr.w	r3, [r8]
 80068ce:	461c      	mov	r4, r3
 80068d0:	bb44      	cbnz	r4, 8006924 <_malloc_r+0x88>
 80068d2:	4629      	mov	r1, r5
 80068d4:	4630      	mov	r0, r6
 80068d6:	f7ff ffbf 	bl	8006858 <sbrk_aligned>
 80068da:	1c43      	adds	r3, r0, #1
 80068dc:	4604      	mov	r4, r0
 80068de:	d158      	bne.n	8006992 <_malloc_r+0xf6>
 80068e0:	f8d8 4000 	ldr.w	r4, [r8]
 80068e4:	4627      	mov	r7, r4
 80068e6:	2f00      	cmp	r7, #0
 80068e8:	d143      	bne.n	8006972 <_malloc_r+0xd6>
 80068ea:	2c00      	cmp	r4, #0
 80068ec:	d04b      	beq.n	8006986 <_malloc_r+0xea>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	4639      	mov	r1, r7
 80068f2:	4630      	mov	r0, r6
 80068f4:	eb04 0903 	add.w	r9, r4, r3
 80068f8:	f001 ff70 	bl	80087dc <_sbrk_r>
 80068fc:	4581      	cmp	r9, r0
 80068fe:	d142      	bne.n	8006986 <_malloc_r+0xea>
 8006900:	6821      	ldr	r1, [r4, #0]
 8006902:	4630      	mov	r0, r6
 8006904:	1a6d      	subs	r5, r5, r1
 8006906:	4629      	mov	r1, r5
 8006908:	f7ff ffa6 	bl	8006858 <sbrk_aligned>
 800690c:	3001      	adds	r0, #1
 800690e:	d03a      	beq.n	8006986 <_malloc_r+0xea>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	442b      	add	r3, r5
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	f8d8 3000 	ldr.w	r3, [r8]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	bb62      	cbnz	r2, 8006978 <_malloc_r+0xdc>
 800691e:	f8c8 7000 	str.w	r7, [r8]
 8006922:	e00f      	b.n	8006944 <_malloc_r+0xa8>
 8006924:	6822      	ldr	r2, [r4, #0]
 8006926:	1b52      	subs	r2, r2, r5
 8006928:	d420      	bmi.n	800696c <_malloc_r+0xd0>
 800692a:	2a0b      	cmp	r2, #11
 800692c:	d917      	bls.n	800695e <_malloc_r+0xc2>
 800692e:	1961      	adds	r1, r4, r5
 8006930:	42a3      	cmp	r3, r4
 8006932:	6025      	str	r5, [r4, #0]
 8006934:	bf18      	it	ne
 8006936:	6059      	strne	r1, [r3, #4]
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	bf08      	it	eq
 800693c:	f8c8 1000 	streq.w	r1, [r8]
 8006940:	5162      	str	r2, [r4, r5]
 8006942:	604b      	str	r3, [r1, #4]
 8006944:	4630      	mov	r0, r6
 8006946:	f000 f82f 	bl	80069a8 <__malloc_unlock>
 800694a:	f104 000b 	add.w	r0, r4, #11
 800694e:	1d23      	adds	r3, r4, #4
 8006950:	f020 0007 	bic.w	r0, r0, #7
 8006954:	1ac2      	subs	r2, r0, r3
 8006956:	bf1c      	itt	ne
 8006958:	1a1b      	subne	r3, r3, r0
 800695a:	50a3      	strne	r3, [r4, r2]
 800695c:	e7af      	b.n	80068be <_malloc_r+0x22>
 800695e:	6862      	ldr	r2, [r4, #4]
 8006960:	42a3      	cmp	r3, r4
 8006962:	bf0c      	ite	eq
 8006964:	f8c8 2000 	streq.w	r2, [r8]
 8006968:	605a      	strne	r2, [r3, #4]
 800696a:	e7eb      	b.n	8006944 <_malloc_r+0xa8>
 800696c:	4623      	mov	r3, r4
 800696e:	6864      	ldr	r4, [r4, #4]
 8006970:	e7ae      	b.n	80068d0 <_malloc_r+0x34>
 8006972:	463c      	mov	r4, r7
 8006974:	687f      	ldr	r7, [r7, #4]
 8006976:	e7b6      	b.n	80068e6 <_malloc_r+0x4a>
 8006978:	461a      	mov	r2, r3
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	42a3      	cmp	r3, r4
 800697e:	d1fb      	bne.n	8006978 <_malloc_r+0xdc>
 8006980:	2300      	movs	r3, #0
 8006982:	6053      	str	r3, [r2, #4]
 8006984:	e7de      	b.n	8006944 <_malloc_r+0xa8>
 8006986:	230c      	movs	r3, #12
 8006988:	4630      	mov	r0, r6
 800698a:	6033      	str	r3, [r6, #0]
 800698c:	f000 f80c 	bl	80069a8 <__malloc_unlock>
 8006990:	e794      	b.n	80068bc <_malloc_r+0x20>
 8006992:	6005      	str	r5, [r0, #0]
 8006994:	e7d6      	b.n	8006944 <_malloc_r+0xa8>
 8006996:	bf00      	nop
 8006998:	20004290 	.word	0x20004290

0800699c <__malloc_lock>:
 800699c:	4801      	ldr	r0, [pc, #4]	@ (80069a4 <__malloc_lock+0x8>)
 800699e:	f7ff b898 	b.w	8005ad2 <__retarget_lock_acquire_recursive>
 80069a2:	bf00      	nop
 80069a4:	20004288 	.word	0x20004288

080069a8 <__malloc_unlock>:
 80069a8:	4801      	ldr	r0, [pc, #4]	@ (80069b0 <__malloc_unlock+0x8>)
 80069aa:	f7ff b893 	b.w	8005ad4 <__retarget_lock_release_recursive>
 80069ae:	bf00      	nop
 80069b0:	20004288 	.word	0x20004288

080069b4 <_Balloc>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	69c6      	ldr	r6, [r0, #28]
 80069b8:	4604      	mov	r4, r0
 80069ba:	460d      	mov	r5, r1
 80069bc:	b976      	cbnz	r6, 80069dc <_Balloc+0x28>
 80069be:	2010      	movs	r0, #16
 80069c0:	f7ff ff42 	bl	8006848 <malloc>
 80069c4:	4602      	mov	r2, r0
 80069c6:	61e0      	str	r0, [r4, #28]
 80069c8:	b920      	cbnz	r0, 80069d4 <_Balloc+0x20>
 80069ca:	216b      	movs	r1, #107	@ 0x6b
 80069cc:	4b17      	ldr	r3, [pc, #92]	@ (8006a2c <_Balloc+0x78>)
 80069ce:	4818      	ldr	r0, [pc, #96]	@ (8006a30 <_Balloc+0x7c>)
 80069d0:	f001 ff1a 	bl	8008808 <__assert_func>
 80069d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069d8:	6006      	str	r6, [r0, #0]
 80069da:	60c6      	str	r6, [r0, #12]
 80069dc:	69e6      	ldr	r6, [r4, #28]
 80069de:	68f3      	ldr	r3, [r6, #12]
 80069e0:	b183      	cbz	r3, 8006a04 <_Balloc+0x50>
 80069e2:	69e3      	ldr	r3, [r4, #28]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069ea:	b9b8      	cbnz	r0, 8006a1c <_Balloc+0x68>
 80069ec:	2101      	movs	r1, #1
 80069ee:	fa01 f605 	lsl.w	r6, r1, r5
 80069f2:	1d72      	adds	r2, r6, #5
 80069f4:	4620      	mov	r0, r4
 80069f6:	0092      	lsls	r2, r2, #2
 80069f8:	f001 ff24 	bl	8008844 <_calloc_r>
 80069fc:	b160      	cbz	r0, 8006a18 <_Balloc+0x64>
 80069fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a02:	e00e      	b.n	8006a22 <_Balloc+0x6e>
 8006a04:	2221      	movs	r2, #33	@ 0x21
 8006a06:	2104      	movs	r1, #4
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f001 ff1b 	bl	8008844 <_calloc_r>
 8006a0e:	69e3      	ldr	r3, [r4, #28]
 8006a10:	60f0      	str	r0, [r6, #12]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e4      	bne.n	80069e2 <_Balloc+0x2e>
 8006a18:	2000      	movs	r0, #0
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	6802      	ldr	r2, [r0, #0]
 8006a1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a22:	2300      	movs	r3, #0
 8006a24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a28:	e7f7      	b.n	8006a1a <_Balloc+0x66>
 8006a2a:	bf00      	nop
 8006a2c:	0800ab34 	.word	0x0800ab34
 8006a30:	0800abb4 	.word	0x0800abb4

08006a34 <_Bfree>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	69c6      	ldr	r6, [r0, #28]
 8006a38:	4605      	mov	r5, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	b976      	cbnz	r6, 8006a5c <_Bfree+0x28>
 8006a3e:	2010      	movs	r0, #16
 8006a40:	f7ff ff02 	bl	8006848 <malloc>
 8006a44:	4602      	mov	r2, r0
 8006a46:	61e8      	str	r0, [r5, #28]
 8006a48:	b920      	cbnz	r0, 8006a54 <_Bfree+0x20>
 8006a4a:	218f      	movs	r1, #143	@ 0x8f
 8006a4c:	4b08      	ldr	r3, [pc, #32]	@ (8006a70 <_Bfree+0x3c>)
 8006a4e:	4809      	ldr	r0, [pc, #36]	@ (8006a74 <_Bfree+0x40>)
 8006a50:	f001 feda 	bl	8008808 <__assert_func>
 8006a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a58:	6006      	str	r6, [r0, #0]
 8006a5a:	60c6      	str	r6, [r0, #12]
 8006a5c:	b13c      	cbz	r4, 8006a6e <_Bfree+0x3a>
 8006a5e:	69eb      	ldr	r3, [r5, #28]
 8006a60:	6862      	ldr	r2, [r4, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a68:	6021      	str	r1, [r4, #0]
 8006a6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	0800ab34 	.word	0x0800ab34
 8006a74:	0800abb4 	.word	0x0800abb4

08006a78 <__multadd>:
 8006a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	461e      	mov	r6, r3
 8006a82:	2000      	movs	r0, #0
 8006a84:	690d      	ldr	r5, [r1, #16]
 8006a86:	f101 0c14 	add.w	ip, r1, #20
 8006a8a:	f8dc 3000 	ldr.w	r3, [ip]
 8006a8e:	3001      	adds	r0, #1
 8006a90:	b299      	uxth	r1, r3
 8006a92:	fb02 6101 	mla	r1, r2, r1, r6
 8006a96:	0c1e      	lsrs	r6, r3, #16
 8006a98:	0c0b      	lsrs	r3, r1, #16
 8006a9a:	fb02 3306 	mla	r3, r2, r6, r3
 8006a9e:	b289      	uxth	r1, r1
 8006aa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006aa4:	4285      	cmp	r5, r0
 8006aa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006aaa:	f84c 1b04 	str.w	r1, [ip], #4
 8006aae:	dcec      	bgt.n	8006a8a <__multadd+0x12>
 8006ab0:	b30e      	cbz	r6, 8006af6 <__multadd+0x7e>
 8006ab2:	68a3      	ldr	r3, [r4, #8]
 8006ab4:	42ab      	cmp	r3, r5
 8006ab6:	dc19      	bgt.n	8006aec <__multadd+0x74>
 8006ab8:	6861      	ldr	r1, [r4, #4]
 8006aba:	4638      	mov	r0, r7
 8006abc:	3101      	adds	r1, #1
 8006abe:	f7ff ff79 	bl	80069b4 <_Balloc>
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	b928      	cbnz	r0, 8006ad2 <__multadd+0x5a>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	21ba      	movs	r1, #186	@ 0xba
 8006aca:	4b0c      	ldr	r3, [pc, #48]	@ (8006afc <__multadd+0x84>)
 8006acc:	480c      	ldr	r0, [pc, #48]	@ (8006b00 <__multadd+0x88>)
 8006ace:	f001 fe9b 	bl	8008808 <__assert_func>
 8006ad2:	6922      	ldr	r2, [r4, #16]
 8006ad4:	f104 010c 	add.w	r1, r4, #12
 8006ad8:	3202      	adds	r2, #2
 8006ada:	0092      	lsls	r2, r2, #2
 8006adc:	300c      	adds	r0, #12
 8006ade:	f7ff f808 	bl	8005af2 <memcpy>
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	f7ff ffa5 	bl	8006a34 <_Bfree>
 8006aea:	4644      	mov	r4, r8
 8006aec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006af0:	3501      	adds	r5, #1
 8006af2:	615e      	str	r6, [r3, #20]
 8006af4:	6125      	str	r5, [r4, #16]
 8006af6:	4620      	mov	r0, r4
 8006af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006afc:	0800aba3 	.word	0x0800aba3
 8006b00:	0800abb4 	.word	0x0800abb4

08006b04 <__s2b>:
 8006b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b08:	4615      	mov	r5, r2
 8006b0a:	2209      	movs	r2, #9
 8006b0c:	461f      	mov	r7, r3
 8006b0e:	3308      	adds	r3, #8
 8006b10:	460c      	mov	r4, r1
 8006b12:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b16:	4606      	mov	r6, r0
 8006b18:	2201      	movs	r2, #1
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	db09      	blt.n	8006b34 <__s2b+0x30>
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7ff ff47 	bl	80069b4 <_Balloc>
 8006b26:	b940      	cbnz	r0, 8006b3a <__s2b+0x36>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	21d3      	movs	r1, #211	@ 0xd3
 8006b2c:	4b18      	ldr	r3, [pc, #96]	@ (8006b90 <__s2b+0x8c>)
 8006b2e:	4819      	ldr	r0, [pc, #100]	@ (8006b94 <__s2b+0x90>)
 8006b30:	f001 fe6a 	bl	8008808 <__assert_func>
 8006b34:	0052      	lsls	r2, r2, #1
 8006b36:	3101      	adds	r1, #1
 8006b38:	e7f0      	b.n	8006b1c <__s2b+0x18>
 8006b3a:	9b08      	ldr	r3, [sp, #32]
 8006b3c:	2d09      	cmp	r5, #9
 8006b3e:	6143      	str	r3, [r0, #20]
 8006b40:	f04f 0301 	mov.w	r3, #1
 8006b44:	6103      	str	r3, [r0, #16]
 8006b46:	dd16      	ble.n	8006b76 <__s2b+0x72>
 8006b48:	f104 0909 	add.w	r9, r4, #9
 8006b4c:	46c8      	mov	r8, r9
 8006b4e:	442c      	add	r4, r5
 8006b50:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b54:	4601      	mov	r1, r0
 8006b56:	220a      	movs	r2, #10
 8006b58:	4630      	mov	r0, r6
 8006b5a:	3b30      	subs	r3, #48	@ 0x30
 8006b5c:	f7ff ff8c 	bl	8006a78 <__multadd>
 8006b60:	45a0      	cmp	r8, r4
 8006b62:	d1f5      	bne.n	8006b50 <__s2b+0x4c>
 8006b64:	f1a5 0408 	sub.w	r4, r5, #8
 8006b68:	444c      	add	r4, r9
 8006b6a:	1b2d      	subs	r5, r5, r4
 8006b6c:	1963      	adds	r3, r4, r5
 8006b6e:	42bb      	cmp	r3, r7
 8006b70:	db04      	blt.n	8006b7c <__s2b+0x78>
 8006b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b76:	2509      	movs	r5, #9
 8006b78:	340a      	adds	r4, #10
 8006b7a:	e7f6      	b.n	8006b6a <__s2b+0x66>
 8006b7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b80:	4601      	mov	r1, r0
 8006b82:	220a      	movs	r2, #10
 8006b84:	4630      	mov	r0, r6
 8006b86:	3b30      	subs	r3, #48	@ 0x30
 8006b88:	f7ff ff76 	bl	8006a78 <__multadd>
 8006b8c:	e7ee      	b.n	8006b6c <__s2b+0x68>
 8006b8e:	bf00      	nop
 8006b90:	0800aba3 	.word	0x0800aba3
 8006b94:	0800abb4 	.word	0x0800abb4

08006b98 <__hi0bits>:
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b9e:	bf3a      	itte	cc
 8006ba0:	0403      	lslcc	r3, r0, #16
 8006ba2:	2010      	movcc	r0, #16
 8006ba4:	2000      	movcs	r0, #0
 8006ba6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006baa:	bf3c      	itt	cc
 8006bac:	021b      	lslcc	r3, r3, #8
 8006bae:	3008      	addcc	r0, #8
 8006bb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bb4:	bf3c      	itt	cc
 8006bb6:	011b      	lslcc	r3, r3, #4
 8006bb8:	3004      	addcc	r0, #4
 8006bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bbe:	bf3c      	itt	cc
 8006bc0:	009b      	lslcc	r3, r3, #2
 8006bc2:	3002      	addcc	r0, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	db05      	blt.n	8006bd4 <__hi0bits+0x3c>
 8006bc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006bcc:	f100 0001 	add.w	r0, r0, #1
 8006bd0:	bf08      	it	eq
 8006bd2:	2020      	moveq	r0, #32
 8006bd4:	4770      	bx	lr

08006bd6 <__lo0bits>:
 8006bd6:	6803      	ldr	r3, [r0, #0]
 8006bd8:	4602      	mov	r2, r0
 8006bda:	f013 0007 	ands.w	r0, r3, #7
 8006bde:	d00b      	beq.n	8006bf8 <__lo0bits+0x22>
 8006be0:	07d9      	lsls	r1, r3, #31
 8006be2:	d421      	bmi.n	8006c28 <__lo0bits+0x52>
 8006be4:	0798      	lsls	r0, r3, #30
 8006be6:	bf49      	itett	mi
 8006be8:	085b      	lsrmi	r3, r3, #1
 8006bea:	089b      	lsrpl	r3, r3, #2
 8006bec:	2001      	movmi	r0, #1
 8006bee:	6013      	strmi	r3, [r2, #0]
 8006bf0:	bf5c      	itt	pl
 8006bf2:	2002      	movpl	r0, #2
 8006bf4:	6013      	strpl	r3, [r2, #0]
 8006bf6:	4770      	bx	lr
 8006bf8:	b299      	uxth	r1, r3
 8006bfa:	b909      	cbnz	r1, 8006c00 <__lo0bits+0x2a>
 8006bfc:	2010      	movs	r0, #16
 8006bfe:	0c1b      	lsrs	r3, r3, #16
 8006c00:	b2d9      	uxtb	r1, r3
 8006c02:	b909      	cbnz	r1, 8006c08 <__lo0bits+0x32>
 8006c04:	3008      	adds	r0, #8
 8006c06:	0a1b      	lsrs	r3, r3, #8
 8006c08:	0719      	lsls	r1, r3, #28
 8006c0a:	bf04      	itt	eq
 8006c0c:	091b      	lsreq	r3, r3, #4
 8006c0e:	3004      	addeq	r0, #4
 8006c10:	0799      	lsls	r1, r3, #30
 8006c12:	bf04      	itt	eq
 8006c14:	089b      	lsreq	r3, r3, #2
 8006c16:	3002      	addeq	r0, #2
 8006c18:	07d9      	lsls	r1, r3, #31
 8006c1a:	d403      	bmi.n	8006c24 <__lo0bits+0x4e>
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	f100 0001 	add.w	r0, r0, #1
 8006c22:	d003      	beq.n	8006c2c <__lo0bits+0x56>
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	4770      	bx	lr
 8006c28:	2000      	movs	r0, #0
 8006c2a:	4770      	bx	lr
 8006c2c:	2020      	movs	r0, #32
 8006c2e:	4770      	bx	lr

08006c30 <__i2b>:
 8006c30:	b510      	push	{r4, lr}
 8006c32:	460c      	mov	r4, r1
 8006c34:	2101      	movs	r1, #1
 8006c36:	f7ff febd 	bl	80069b4 <_Balloc>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	b928      	cbnz	r0, 8006c4a <__i2b+0x1a>
 8006c3e:	f240 1145 	movw	r1, #325	@ 0x145
 8006c42:	4b04      	ldr	r3, [pc, #16]	@ (8006c54 <__i2b+0x24>)
 8006c44:	4804      	ldr	r0, [pc, #16]	@ (8006c58 <__i2b+0x28>)
 8006c46:	f001 fddf 	bl	8008808 <__assert_func>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	6144      	str	r4, [r0, #20]
 8006c4e:	6103      	str	r3, [r0, #16]
 8006c50:	bd10      	pop	{r4, pc}
 8006c52:	bf00      	nop
 8006c54:	0800aba3 	.word	0x0800aba3
 8006c58:	0800abb4 	.word	0x0800abb4

08006c5c <__multiply>:
 8006c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c60:	4614      	mov	r4, r2
 8006c62:	690a      	ldr	r2, [r1, #16]
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	460f      	mov	r7, r1
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	bfa2      	ittt	ge
 8006c6c:	4623      	movge	r3, r4
 8006c6e:	460c      	movge	r4, r1
 8006c70:	461f      	movge	r7, r3
 8006c72:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c76:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	6861      	ldr	r1, [r4, #4]
 8006c7e:	eb0a 0609 	add.w	r6, sl, r9
 8006c82:	42b3      	cmp	r3, r6
 8006c84:	b085      	sub	sp, #20
 8006c86:	bfb8      	it	lt
 8006c88:	3101      	addlt	r1, #1
 8006c8a:	f7ff fe93 	bl	80069b4 <_Balloc>
 8006c8e:	b930      	cbnz	r0, 8006c9e <__multiply+0x42>
 8006c90:	4602      	mov	r2, r0
 8006c92:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c96:	4b43      	ldr	r3, [pc, #268]	@ (8006da4 <__multiply+0x148>)
 8006c98:	4843      	ldr	r0, [pc, #268]	@ (8006da8 <__multiply+0x14c>)
 8006c9a:	f001 fdb5 	bl	8008808 <__assert_func>
 8006c9e:	f100 0514 	add.w	r5, r0, #20
 8006ca2:	462b      	mov	r3, r5
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006caa:	4543      	cmp	r3, r8
 8006cac:	d321      	bcc.n	8006cf2 <__multiply+0x96>
 8006cae:	f107 0114 	add.w	r1, r7, #20
 8006cb2:	f104 0214 	add.w	r2, r4, #20
 8006cb6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006cba:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006cbe:	9302      	str	r3, [sp, #8]
 8006cc0:	1b13      	subs	r3, r2, r4
 8006cc2:	3b15      	subs	r3, #21
 8006cc4:	f023 0303 	bic.w	r3, r3, #3
 8006cc8:	3304      	adds	r3, #4
 8006cca:	f104 0715 	add.w	r7, r4, #21
 8006cce:	42ba      	cmp	r2, r7
 8006cd0:	bf38      	it	cc
 8006cd2:	2304      	movcc	r3, #4
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	9b02      	ldr	r3, [sp, #8]
 8006cd8:	9103      	str	r1, [sp, #12]
 8006cda:	428b      	cmp	r3, r1
 8006cdc:	d80c      	bhi.n	8006cf8 <__multiply+0x9c>
 8006cde:	2e00      	cmp	r6, #0
 8006ce0:	dd03      	ble.n	8006cea <__multiply+0x8e>
 8006ce2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d05a      	beq.n	8006da0 <__multiply+0x144>
 8006cea:	6106      	str	r6, [r0, #16]
 8006cec:	b005      	add	sp, #20
 8006cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf2:	f843 2b04 	str.w	r2, [r3], #4
 8006cf6:	e7d8      	b.n	8006caa <__multiply+0x4e>
 8006cf8:	f8b1 a000 	ldrh.w	sl, [r1]
 8006cfc:	f1ba 0f00 	cmp.w	sl, #0
 8006d00:	d023      	beq.n	8006d4a <__multiply+0xee>
 8006d02:	46a9      	mov	r9, r5
 8006d04:	f04f 0c00 	mov.w	ip, #0
 8006d08:	f104 0e14 	add.w	lr, r4, #20
 8006d0c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d10:	f8d9 3000 	ldr.w	r3, [r9]
 8006d14:	fa1f fb87 	uxth.w	fp, r7
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d1e:	4463      	add	r3, ip
 8006d20:	f8d9 c000 	ldr.w	ip, [r9]
 8006d24:	0c3f      	lsrs	r7, r7, #16
 8006d26:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d2a:	fb0a c707 	mla	r7, sl, r7, ip
 8006d2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d38:	4572      	cmp	r2, lr
 8006d3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d3e:	f849 3b04 	str.w	r3, [r9], #4
 8006d42:	d8e3      	bhi.n	8006d0c <__multiply+0xb0>
 8006d44:	9b01      	ldr	r3, [sp, #4]
 8006d46:	f845 c003 	str.w	ip, [r5, r3]
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	3104      	adds	r1, #4
 8006d4e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d52:	f1b9 0f00 	cmp.w	r9, #0
 8006d56:	d021      	beq.n	8006d9c <__multiply+0x140>
 8006d58:	46ae      	mov	lr, r5
 8006d5a:	f04f 0a00 	mov.w	sl, #0
 8006d5e:	682b      	ldr	r3, [r5, #0]
 8006d60:	f104 0c14 	add.w	ip, r4, #20
 8006d64:	f8bc b000 	ldrh.w	fp, [ip]
 8006d68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	fb09 770b 	mla	r7, r9, fp, r7
 8006d72:	4457      	add	r7, sl
 8006d74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d78:	f84e 3b04 	str.w	r3, [lr], #4
 8006d7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d84:	f8be 3000 	ldrh.w	r3, [lr]
 8006d88:	4562      	cmp	r2, ip
 8006d8a:	fb09 330a 	mla	r3, r9, sl, r3
 8006d8e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d96:	d8e5      	bhi.n	8006d64 <__multiply+0x108>
 8006d98:	9f01      	ldr	r7, [sp, #4]
 8006d9a:	51eb      	str	r3, [r5, r7]
 8006d9c:	3504      	adds	r5, #4
 8006d9e:	e79a      	b.n	8006cd6 <__multiply+0x7a>
 8006da0:	3e01      	subs	r6, #1
 8006da2:	e79c      	b.n	8006cde <__multiply+0x82>
 8006da4:	0800aba3 	.word	0x0800aba3
 8006da8:	0800abb4 	.word	0x0800abb4

08006dac <__pow5mult>:
 8006dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db0:	4615      	mov	r5, r2
 8006db2:	f012 0203 	ands.w	r2, r2, #3
 8006db6:	4607      	mov	r7, r0
 8006db8:	460e      	mov	r6, r1
 8006dba:	d007      	beq.n	8006dcc <__pow5mult+0x20>
 8006dbc:	4c25      	ldr	r4, [pc, #148]	@ (8006e54 <__pow5mult+0xa8>)
 8006dbe:	3a01      	subs	r2, #1
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dc6:	f7ff fe57 	bl	8006a78 <__multadd>
 8006dca:	4606      	mov	r6, r0
 8006dcc:	10ad      	asrs	r5, r5, #2
 8006dce:	d03d      	beq.n	8006e4c <__pow5mult+0xa0>
 8006dd0:	69fc      	ldr	r4, [r7, #28]
 8006dd2:	b97c      	cbnz	r4, 8006df4 <__pow5mult+0x48>
 8006dd4:	2010      	movs	r0, #16
 8006dd6:	f7ff fd37 	bl	8006848 <malloc>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	61f8      	str	r0, [r7, #28]
 8006dde:	b928      	cbnz	r0, 8006dec <__pow5mult+0x40>
 8006de0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006de4:	4b1c      	ldr	r3, [pc, #112]	@ (8006e58 <__pow5mult+0xac>)
 8006de6:	481d      	ldr	r0, [pc, #116]	@ (8006e5c <__pow5mult+0xb0>)
 8006de8:	f001 fd0e 	bl	8008808 <__assert_func>
 8006dec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006df0:	6004      	str	r4, [r0, #0]
 8006df2:	60c4      	str	r4, [r0, #12]
 8006df4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006df8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dfc:	b94c      	cbnz	r4, 8006e12 <__pow5mult+0x66>
 8006dfe:	f240 2171 	movw	r1, #625	@ 0x271
 8006e02:	4638      	mov	r0, r7
 8006e04:	f7ff ff14 	bl	8006c30 <__i2b>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e10:	6003      	str	r3, [r0, #0]
 8006e12:	f04f 0900 	mov.w	r9, #0
 8006e16:	07eb      	lsls	r3, r5, #31
 8006e18:	d50a      	bpl.n	8006e30 <__pow5mult+0x84>
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	4638      	mov	r0, r7
 8006e20:	f7ff ff1c 	bl	8006c5c <__multiply>
 8006e24:	4680      	mov	r8, r0
 8006e26:	4631      	mov	r1, r6
 8006e28:	4638      	mov	r0, r7
 8006e2a:	f7ff fe03 	bl	8006a34 <_Bfree>
 8006e2e:	4646      	mov	r6, r8
 8006e30:	106d      	asrs	r5, r5, #1
 8006e32:	d00b      	beq.n	8006e4c <__pow5mult+0xa0>
 8006e34:	6820      	ldr	r0, [r4, #0]
 8006e36:	b938      	cbnz	r0, 8006e48 <__pow5mult+0x9c>
 8006e38:	4622      	mov	r2, r4
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	f7ff ff0d 	bl	8006c5c <__multiply>
 8006e42:	6020      	str	r0, [r4, #0]
 8006e44:	f8c0 9000 	str.w	r9, [r0]
 8006e48:	4604      	mov	r4, r0
 8006e4a:	e7e4      	b.n	8006e16 <__pow5mult+0x6a>
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e52:	bf00      	nop
 8006e54:	0800ac10 	.word	0x0800ac10
 8006e58:	0800ab34 	.word	0x0800ab34
 8006e5c:	0800abb4 	.word	0x0800abb4

08006e60 <__lshift>:
 8006e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	460c      	mov	r4, r1
 8006e66:	4607      	mov	r7, r0
 8006e68:	4691      	mov	r9, r2
 8006e6a:	6923      	ldr	r3, [r4, #16]
 8006e6c:	6849      	ldr	r1, [r1, #4]
 8006e6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e72:	68a3      	ldr	r3, [r4, #8]
 8006e74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e78:	f108 0601 	add.w	r6, r8, #1
 8006e7c:	42b3      	cmp	r3, r6
 8006e7e:	db0b      	blt.n	8006e98 <__lshift+0x38>
 8006e80:	4638      	mov	r0, r7
 8006e82:	f7ff fd97 	bl	80069b4 <_Balloc>
 8006e86:	4605      	mov	r5, r0
 8006e88:	b948      	cbnz	r0, 8006e9e <__lshift+0x3e>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e90:	4b27      	ldr	r3, [pc, #156]	@ (8006f30 <__lshift+0xd0>)
 8006e92:	4828      	ldr	r0, [pc, #160]	@ (8006f34 <__lshift+0xd4>)
 8006e94:	f001 fcb8 	bl	8008808 <__assert_func>
 8006e98:	3101      	adds	r1, #1
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	e7ee      	b.n	8006e7c <__lshift+0x1c>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f100 0114 	add.w	r1, r0, #20
 8006ea4:	f100 0210 	add.w	r2, r0, #16
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	4553      	cmp	r3, sl
 8006eac:	db33      	blt.n	8006f16 <__lshift+0xb6>
 8006eae:	6920      	ldr	r0, [r4, #16]
 8006eb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006eb4:	f104 0314 	add.w	r3, r4, #20
 8006eb8:	f019 091f 	ands.w	r9, r9, #31
 8006ebc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ec0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ec4:	d02b      	beq.n	8006f1e <__lshift+0xbe>
 8006ec6:	468a      	mov	sl, r1
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f1c9 0e20 	rsb	lr, r9, #32
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ed4:	4310      	orrs	r0, r2
 8006ed6:	f84a 0b04 	str.w	r0, [sl], #4
 8006eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ede:	459c      	cmp	ip, r3
 8006ee0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ee4:	d8f3      	bhi.n	8006ece <__lshift+0x6e>
 8006ee6:	ebac 0304 	sub.w	r3, ip, r4
 8006eea:	3b15      	subs	r3, #21
 8006eec:	f023 0303 	bic.w	r3, r3, #3
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	f104 0015 	add.w	r0, r4, #21
 8006ef6:	4584      	cmp	ip, r0
 8006ef8:	bf38      	it	cc
 8006efa:	2304      	movcc	r3, #4
 8006efc:	50ca      	str	r2, [r1, r3]
 8006efe:	b10a      	cbz	r2, 8006f04 <__lshift+0xa4>
 8006f00:	f108 0602 	add.w	r6, r8, #2
 8006f04:	3e01      	subs	r6, #1
 8006f06:	4638      	mov	r0, r7
 8006f08:	4621      	mov	r1, r4
 8006f0a:	612e      	str	r6, [r5, #16]
 8006f0c:	f7ff fd92 	bl	8006a34 <_Bfree>
 8006f10:	4628      	mov	r0, r5
 8006f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f16:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	e7c5      	b.n	8006eaa <__lshift+0x4a>
 8006f1e:	3904      	subs	r1, #4
 8006f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f24:	459c      	cmp	ip, r3
 8006f26:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f2a:	d8f9      	bhi.n	8006f20 <__lshift+0xc0>
 8006f2c:	e7ea      	b.n	8006f04 <__lshift+0xa4>
 8006f2e:	bf00      	nop
 8006f30:	0800aba3 	.word	0x0800aba3
 8006f34:	0800abb4 	.word	0x0800abb4

08006f38 <__mcmp>:
 8006f38:	4603      	mov	r3, r0
 8006f3a:	690a      	ldr	r2, [r1, #16]
 8006f3c:	6900      	ldr	r0, [r0, #16]
 8006f3e:	b530      	push	{r4, r5, lr}
 8006f40:	1a80      	subs	r0, r0, r2
 8006f42:	d10e      	bne.n	8006f62 <__mcmp+0x2a>
 8006f44:	3314      	adds	r3, #20
 8006f46:	3114      	adds	r1, #20
 8006f48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f58:	4295      	cmp	r5, r2
 8006f5a:	d003      	beq.n	8006f64 <__mcmp+0x2c>
 8006f5c:	d205      	bcs.n	8006f6a <__mcmp+0x32>
 8006f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f62:	bd30      	pop	{r4, r5, pc}
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d3f3      	bcc.n	8006f50 <__mcmp+0x18>
 8006f68:	e7fb      	b.n	8006f62 <__mcmp+0x2a>
 8006f6a:	2001      	movs	r0, #1
 8006f6c:	e7f9      	b.n	8006f62 <__mcmp+0x2a>
	...

08006f70 <__mdiff>:
 8006f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	4689      	mov	r9, r1
 8006f76:	4606      	mov	r6, r0
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4648      	mov	r0, r9
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	f7ff ffdb 	bl	8006f38 <__mcmp>
 8006f82:	1e05      	subs	r5, r0, #0
 8006f84:	d112      	bne.n	8006fac <__mdiff+0x3c>
 8006f86:	4629      	mov	r1, r5
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f7ff fd13 	bl	80069b4 <_Balloc>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	b928      	cbnz	r0, 8006f9e <__mdiff+0x2e>
 8006f92:	f240 2137 	movw	r1, #567	@ 0x237
 8006f96:	4b3e      	ldr	r3, [pc, #248]	@ (8007090 <__mdiff+0x120>)
 8006f98:	483e      	ldr	r0, [pc, #248]	@ (8007094 <__mdiff+0x124>)
 8006f9a:	f001 fc35 	bl	8008808 <__assert_func>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	b003      	add	sp, #12
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fac:	bfbc      	itt	lt
 8006fae:	464b      	movlt	r3, r9
 8006fb0:	46a1      	movlt	r9, r4
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006fb8:	bfba      	itte	lt
 8006fba:	461c      	movlt	r4, r3
 8006fbc:	2501      	movlt	r5, #1
 8006fbe:	2500      	movge	r5, #0
 8006fc0:	f7ff fcf8 	bl	80069b4 <_Balloc>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	b918      	cbnz	r0, 8006fd0 <__mdiff+0x60>
 8006fc8:	f240 2145 	movw	r1, #581	@ 0x245
 8006fcc:	4b30      	ldr	r3, [pc, #192]	@ (8007090 <__mdiff+0x120>)
 8006fce:	e7e3      	b.n	8006f98 <__mdiff+0x28>
 8006fd0:	f100 0b14 	add.w	fp, r0, #20
 8006fd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006fd8:	f109 0310 	add.w	r3, r9, #16
 8006fdc:	60c5      	str	r5, [r0, #12]
 8006fde:	f04f 0c00 	mov.w	ip, #0
 8006fe2:	f109 0514 	add.w	r5, r9, #20
 8006fe6:	46d9      	mov	r9, fp
 8006fe8:	6926      	ldr	r6, [r4, #16]
 8006fea:	f104 0e14 	add.w	lr, r4, #20
 8006fee:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ff2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	9b01      	ldr	r3, [sp, #4]
 8006ffa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ffe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007002:	b281      	uxth	r1, r0
 8007004:	9301      	str	r3, [sp, #4]
 8007006:	fa1f f38a 	uxth.w	r3, sl
 800700a:	1a5b      	subs	r3, r3, r1
 800700c:	0c00      	lsrs	r0, r0, #16
 800700e:	4463      	add	r3, ip
 8007010:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007014:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007018:	b29b      	uxth	r3, r3
 800701a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800701e:	4576      	cmp	r6, lr
 8007020:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007024:	f849 3b04 	str.w	r3, [r9], #4
 8007028:	d8e6      	bhi.n	8006ff8 <__mdiff+0x88>
 800702a:	1b33      	subs	r3, r6, r4
 800702c:	3b15      	subs	r3, #21
 800702e:	f023 0303 	bic.w	r3, r3, #3
 8007032:	3415      	adds	r4, #21
 8007034:	3304      	adds	r3, #4
 8007036:	42a6      	cmp	r6, r4
 8007038:	bf38      	it	cc
 800703a:	2304      	movcc	r3, #4
 800703c:	441d      	add	r5, r3
 800703e:	445b      	add	r3, fp
 8007040:	461e      	mov	r6, r3
 8007042:	462c      	mov	r4, r5
 8007044:	4544      	cmp	r4, r8
 8007046:	d30e      	bcc.n	8007066 <__mdiff+0xf6>
 8007048:	f108 0103 	add.w	r1, r8, #3
 800704c:	1b49      	subs	r1, r1, r5
 800704e:	f021 0103 	bic.w	r1, r1, #3
 8007052:	3d03      	subs	r5, #3
 8007054:	45a8      	cmp	r8, r5
 8007056:	bf38      	it	cc
 8007058:	2100      	movcc	r1, #0
 800705a:	440b      	add	r3, r1
 800705c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007060:	b199      	cbz	r1, 800708a <__mdiff+0x11a>
 8007062:	6117      	str	r7, [r2, #16]
 8007064:	e79e      	b.n	8006fa4 <__mdiff+0x34>
 8007066:	46e6      	mov	lr, ip
 8007068:	f854 1b04 	ldr.w	r1, [r4], #4
 800706c:	fa1f fc81 	uxth.w	ip, r1
 8007070:	44f4      	add	ip, lr
 8007072:	0c08      	lsrs	r0, r1, #16
 8007074:	4471      	add	r1, lr
 8007076:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800707a:	b289      	uxth	r1, r1
 800707c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007080:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007084:	f846 1b04 	str.w	r1, [r6], #4
 8007088:	e7dc      	b.n	8007044 <__mdiff+0xd4>
 800708a:	3f01      	subs	r7, #1
 800708c:	e7e6      	b.n	800705c <__mdiff+0xec>
 800708e:	bf00      	nop
 8007090:	0800aba3 	.word	0x0800aba3
 8007094:	0800abb4 	.word	0x0800abb4

08007098 <__ulp>:
 8007098:	4b0e      	ldr	r3, [pc, #56]	@ (80070d4 <__ulp+0x3c>)
 800709a:	400b      	ands	r3, r1
 800709c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	dc08      	bgt.n	80070b6 <__ulp+0x1e>
 80070a4:	425b      	negs	r3, r3
 80070a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80070aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80070ae:	da04      	bge.n	80070ba <__ulp+0x22>
 80070b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80070b4:	4113      	asrs	r3, r2
 80070b6:	2200      	movs	r2, #0
 80070b8:	e008      	b.n	80070cc <__ulp+0x34>
 80070ba:	f1a2 0314 	sub.w	r3, r2, #20
 80070be:	2b1e      	cmp	r3, #30
 80070c0:	bfd6      	itet	le
 80070c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80070c6:	2201      	movgt	r2, #1
 80070c8:	40da      	lsrle	r2, r3
 80070ca:	2300      	movs	r3, #0
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	7ff00000 	.word	0x7ff00000

080070d8 <__b2d>:
 80070d8:	6902      	ldr	r2, [r0, #16]
 80070da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070dc:	f100 0614 	add.w	r6, r0, #20
 80070e0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80070e4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80070e8:	4f1e      	ldr	r7, [pc, #120]	@ (8007164 <__b2d+0x8c>)
 80070ea:	4620      	mov	r0, r4
 80070ec:	f7ff fd54 	bl	8006b98 <__hi0bits>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f1c0 0020 	rsb	r0, r0, #32
 80070f6:	2b0a      	cmp	r3, #10
 80070f8:	f1a2 0504 	sub.w	r5, r2, #4
 80070fc:	6008      	str	r0, [r1, #0]
 80070fe:	dc12      	bgt.n	8007126 <__b2d+0x4e>
 8007100:	42ae      	cmp	r6, r5
 8007102:	bf2c      	ite	cs
 8007104:	2200      	movcs	r2, #0
 8007106:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800710a:	f1c3 0c0b 	rsb	ip, r3, #11
 800710e:	3315      	adds	r3, #21
 8007110:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007114:	fa04 f303 	lsl.w	r3, r4, r3
 8007118:	fa22 f20c 	lsr.w	r2, r2, ip
 800711c:	ea4e 0107 	orr.w	r1, lr, r7
 8007120:	431a      	orrs	r2, r3
 8007122:	4610      	mov	r0, r2
 8007124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007126:	42ae      	cmp	r6, r5
 8007128:	bf36      	itet	cc
 800712a:	f1a2 0508 	subcc.w	r5, r2, #8
 800712e:	2200      	movcs	r2, #0
 8007130:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007134:	3b0b      	subs	r3, #11
 8007136:	d012      	beq.n	800715e <__b2d+0x86>
 8007138:	f1c3 0720 	rsb	r7, r3, #32
 800713c:	fa22 f107 	lsr.w	r1, r2, r7
 8007140:	409c      	lsls	r4, r3
 8007142:	430c      	orrs	r4, r1
 8007144:	42b5      	cmp	r5, r6
 8007146:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800714a:	bf94      	ite	ls
 800714c:	2400      	movls	r4, #0
 800714e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007152:	409a      	lsls	r2, r3
 8007154:	40fc      	lsrs	r4, r7
 8007156:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800715a:	4322      	orrs	r2, r4
 800715c:	e7e1      	b.n	8007122 <__b2d+0x4a>
 800715e:	ea44 0107 	orr.w	r1, r4, r7
 8007162:	e7de      	b.n	8007122 <__b2d+0x4a>
 8007164:	3ff00000 	.word	0x3ff00000

08007168 <__d2b>:
 8007168:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800716c:	2101      	movs	r1, #1
 800716e:	4690      	mov	r8, r2
 8007170:	4699      	mov	r9, r3
 8007172:	9e08      	ldr	r6, [sp, #32]
 8007174:	f7ff fc1e 	bl	80069b4 <_Balloc>
 8007178:	4604      	mov	r4, r0
 800717a:	b930      	cbnz	r0, 800718a <__d2b+0x22>
 800717c:	4602      	mov	r2, r0
 800717e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007182:	4b23      	ldr	r3, [pc, #140]	@ (8007210 <__d2b+0xa8>)
 8007184:	4823      	ldr	r0, [pc, #140]	@ (8007214 <__d2b+0xac>)
 8007186:	f001 fb3f 	bl	8008808 <__assert_func>
 800718a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800718e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007192:	b10d      	cbz	r5, 8007198 <__d2b+0x30>
 8007194:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	f1b8 0300 	subs.w	r3, r8, #0
 800719e:	d024      	beq.n	80071ea <__d2b+0x82>
 80071a0:	4668      	mov	r0, sp
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	f7ff fd17 	bl	8006bd6 <__lo0bits>
 80071a8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071ac:	b1d8      	cbz	r0, 80071e6 <__d2b+0x7e>
 80071ae:	f1c0 0320 	rsb	r3, r0, #32
 80071b2:	fa02 f303 	lsl.w	r3, r2, r3
 80071b6:	430b      	orrs	r3, r1
 80071b8:	40c2      	lsrs	r2, r0
 80071ba:	6163      	str	r3, [r4, #20]
 80071bc:	9201      	str	r2, [sp, #4]
 80071be:	9b01      	ldr	r3, [sp, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bf0c      	ite	eq
 80071c4:	2201      	moveq	r2, #1
 80071c6:	2202      	movne	r2, #2
 80071c8:	61a3      	str	r3, [r4, #24]
 80071ca:	6122      	str	r2, [r4, #16]
 80071cc:	b1ad      	cbz	r5, 80071fa <__d2b+0x92>
 80071ce:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80071d2:	4405      	add	r5, r0
 80071d4:	6035      	str	r5, [r6, #0]
 80071d6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80071da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071dc:	6018      	str	r0, [r3, #0]
 80071de:	4620      	mov	r0, r4
 80071e0:	b002      	add	sp, #8
 80071e2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80071e6:	6161      	str	r1, [r4, #20]
 80071e8:	e7e9      	b.n	80071be <__d2b+0x56>
 80071ea:	a801      	add	r0, sp, #4
 80071ec:	f7ff fcf3 	bl	8006bd6 <__lo0bits>
 80071f0:	9b01      	ldr	r3, [sp, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	6163      	str	r3, [r4, #20]
 80071f6:	3020      	adds	r0, #32
 80071f8:	e7e7      	b.n	80071ca <__d2b+0x62>
 80071fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80071fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007202:	6030      	str	r0, [r6, #0]
 8007204:	6918      	ldr	r0, [r3, #16]
 8007206:	f7ff fcc7 	bl	8006b98 <__hi0bits>
 800720a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800720e:	e7e4      	b.n	80071da <__d2b+0x72>
 8007210:	0800aba3 	.word	0x0800aba3
 8007214:	0800abb4 	.word	0x0800abb4

08007218 <__ratio>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	b085      	sub	sp, #20
 800721e:	e9cd 1000 	strd	r1, r0, [sp]
 8007222:	a902      	add	r1, sp, #8
 8007224:	f7ff ff58 	bl	80070d8 <__b2d>
 8007228:	468b      	mov	fp, r1
 800722a:	4606      	mov	r6, r0
 800722c:	460f      	mov	r7, r1
 800722e:	9800      	ldr	r0, [sp, #0]
 8007230:	a903      	add	r1, sp, #12
 8007232:	f7ff ff51 	bl	80070d8 <__b2d>
 8007236:	460d      	mov	r5, r1
 8007238:	9b01      	ldr	r3, [sp, #4]
 800723a:	4689      	mov	r9, r1
 800723c:	6919      	ldr	r1, [r3, #16]
 800723e:	9b00      	ldr	r3, [sp, #0]
 8007240:	4604      	mov	r4, r0
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	4630      	mov	r0, r6
 8007246:	1ac9      	subs	r1, r1, r3
 8007248:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007252:	2b00      	cmp	r3, #0
 8007254:	bfcd      	iteet	gt
 8007256:	463a      	movgt	r2, r7
 8007258:	462a      	movle	r2, r5
 800725a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800725e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007262:	bfd8      	it	le
 8007264:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007268:	464b      	mov	r3, r9
 800726a:	4622      	mov	r2, r4
 800726c:	4659      	mov	r1, fp
 800726e:	f7f9 fa5d 	bl	800072c <__aeabi_ddiv>
 8007272:	b005      	add	sp, #20
 8007274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007278 <__copybits>:
 8007278:	3901      	subs	r1, #1
 800727a:	b570      	push	{r4, r5, r6, lr}
 800727c:	1149      	asrs	r1, r1, #5
 800727e:	6914      	ldr	r4, [r2, #16]
 8007280:	3101      	adds	r1, #1
 8007282:	f102 0314 	add.w	r3, r2, #20
 8007286:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800728a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800728e:	1f05      	subs	r5, r0, #4
 8007290:	42a3      	cmp	r3, r4
 8007292:	d30c      	bcc.n	80072ae <__copybits+0x36>
 8007294:	1aa3      	subs	r3, r4, r2
 8007296:	3b11      	subs	r3, #17
 8007298:	f023 0303 	bic.w	r3, r3, #3
 800729c:	3211      	adds	r2, #17
 800729e:	42a2      	cmp	r2, r4
 80072a0:	bf88      	it	hi
 80072a2:	2300      	movhi	r3, #0
 80072a4:	4418      	add	r0, r3
 80072a6:	2300      	movs	r3, #0
 80072a8:	4288      	cmp	r0, r1
 80072aa:	d305      	bcc.n	80072b8 <__copybits+0x40>
 80072ac:	bd70      	pop	{r4, r5, r6, pc}
 80072ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80072b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80072b6:	e7eb      	b.n	8007290 <__copybits+0x18>
 80072b8:	f840 3b04 	str.w	r3, [r0], #4
 80072bc:	e7f4      	b.n	80072a8 <__copybits+0x30>

080072be <__any_on>:
 80072be:	f100 0214 	add.w	r2, r0, #20
 80072c2:	6900      	ldr	r0, [r0, #16]
 80072c4:	114b      	asrs	r3, r1, #5
 80072c6:	4298      	cmp	r0, r3
 80072c8:	b510      	push	{r4, lr}
 80072ca:	db11      	blt.n	80072f0 <__any_on+0x32>
 80072cc:	dd0a      	ble.n	80072e4 <__any_on+0x26>
 80072ce:	f011 011f 	ands.w	r1, r1, #31
 80072d2:	d007      	beq.n	80072e4 <__any_on+0x26>
 80072d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80072d8:	fa24 f001 	lsr.w	r0, r4, r1
 80072dc:	fa00 f101 	lsl.w	r1, r0, r1
 80072e0:	428c      	cmp	r4, r1
 80072e2:	d10b      	bne.n	80072fc <__any_on+0x3e>
 80072e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d803      	bhi.n	80072f4 <__any_on+0x36>
 80072ec:	2000      	movs	r0, #0
 80072ee:	bd10      	pop	{r4, pc}
 80072f0:	4603      	mov	r3, r0
 80072f2:	e7f7      	b.n	80072e4 <__any_on+0x26>
 80072f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072f8:	2900      	cmp	r1, #0
 80072fa:	d0f5      	beq.n	80072e8 <__any_on+0x2a>
 80072fc:	2001      	movs	r0, #1
 80072fe:	e7f6      	b.n	80072ee <__any_on+0x30>

08007300 <sulp>:
 8007300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007304:	460f      	mov	r7, r1
 8007306:	4690      	mov	r8, r2
 8007308:	f7ff fec6 	bl	8007098 <__ulp>
 800730c:	4604      	mov	r4, r0
 800730e:	460d      	mov	r5, r1
 8007310:	f1b8 0f00 	cmp.w	r8, #0
 8007314:	d011      	beq.n	800733a <sulp+0x3a>
 8007316:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800731a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800731e:	2b00      	cmp	r3, #0
 8007320:	dd0b      	ble.n	800733a <sulp+0x3a>
 8007322:	2400      	movs	r4, #0
 8007324:	051b      	lsls	r3, r3, #20
 8007326:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800732a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800732e:	4622      	mov	r2, r4
 8007330:	462b      	mov	r3, r5
 8007332:	f7f9 f8d1 	bl	80004d8 <__aeabi_dmul>
 8007336:	4604      	mov	r4, r0
 8007338:	460d      	mov	r5, r1
 800733a:	4620      	mov	r0, r4
 800733c:	4629      	mov	r1, r5
 800733e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007342:	0000      	movs	r0, r0
 8007344:	0000      	movs	r0, r0
	...

08007348 <_strtod_l>:
 8007348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	b09f      	sub	sp, #124	@ 0x7c
 800734e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007350:	2200      	movs	r2, #0
 8007352:	460c      	mov	r4, r1
 8007354:	921a      	str	r2, [sp, #104]	@ 0x68
 8007356:	f04f 0a00 	mov.w	sl, #0
 800735a:	f04f 0b00 	mov.w	fp, #0
 800735e:	460a      	mov	r2, r1
 8007360:	9005      	str	r0, [sp, #20]
 8007362:	9219      	str	r2, [sp, #100]	@ 0x64
 8007364:	7811      	ldrb	r1, [r2, #0]
 8007366:	292b      	cmp	r1, #43	@ 0x2b
 8007368:	d048      	beq.n	80073fc <_strtod_l+0xb4>
 800736a:	d836      	bhi.n	80073da <_strtod_l+0x92>
 800736c:	290d      	cmp	r1, #13
 800736e:	d830      	bhi.n	80073d2 <_strtod_l+0x8a>
 8007370:	2908      	cmp	r1, #8
 8007372:	d830      	bhi.n	80073d6 <_strtod_l+0x8e>
 8007374:	2900      	cmp	r1, #0
 8007376:	d039      	beq.n	80073ec <_strtod_l+0xa4>
 8007378:	2200      	movs	r2, #0
 800737a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800737c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800737e:	782a      	ldrb	r2, [r5, #0]
 8007380:	2a30      	cmp	r2, #48	@ 0x30
 8007382:	f040 80b1 	bne.w	80074e8 <_strtod_l+0x1a0>
 8007386:	786a      	ldrb	r2, [r5, #1]
 8007388:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800738c:	2a58      	cmp	r2, #88	@ 0x58
 800738e:	d16c      	bne.n	800746a <_strtod_l+0x122>
 8007390:	9302      	str	r3, [sp, #8]
 8007392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007394:	4a8e      	ldr	r2, [pc, #568]	@ (80075d0 <_strtod_l+0x288>)
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	ab1a      	add	r3, sp, #104	@ 0x68
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	9805      	ldr	r0, [sp, #20]
 800739e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80073a0:	a919      	add	r1, sp, #100	@ 0x64
 80073a2:	f001 facb 	bl	800893c <__gethex>
 80073a6:	f010 060f 	ands.w	r6, r0, #15
 80073aa:	4604      	mov	r4, r0
 80073ac:	d005      	beq.n	80073ba <_strtod_l+0x72>
 80073ae:	2e06      	cmp	r6, #6
 80073b0:	d126      	bne.n	8007400 <_strtod_l+0xb8>
 80073b2:	2300      	movs	r3, #0
 80073b4:	3501      	adds	r5, #1
 80073b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80073b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f040 8584 	bne.w	8007eca <_strtod_l+0xb82>
 80073c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073c4:	b1bb      	cbz	r3, 80073f6 <_strtod_l+0xae>
 80073c6:	4650      	mov	r0, sl
 80073c8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80073cc:	b01f      	add	sp, #124	@ 0x7c
 80073ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d2:	2920      	cmp	r1, #32
 80073d4:	d1d0      	bne.n	8007378 <_strtod_l+0x30>
 80073d6:	3201      	adds	r2, #1
 80073d8:	e7c3      	b.n	8007362 <_strtod_l+0x1a>
 80073da:	292d      	cmp	r1, #45	@ 0x2d
 80073dc:	d1cc      	bne.n	8007378 <_strtod_l+0x30>
 80073de:	2101      	movs	r1, #1
 80073e0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80073e2:	1c51      	adds	r1, r2, #1
 80073e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80073e6:	7852      	ldrb	r2, [r2, #1]
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	d1c7      	bne.n	800737c <_strtod_l+0x34>
 80073ec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073ee:	9419      	str	r4, [sp, #100]	@ 0x64
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f040 8568 	bne.w	8007ec6 <_strtod_l+0xb7e>
 80073f6:	4650      	mov	r0, sl
 80073f8:	4659      	mov	r1, fp
 80073fa:	e7e7      	b.n	80073cc <_strtod_l+0x84>
 80073fc:	2100      	movs	r1, #0
 80073fe:	e7ef      	b.n	80073e0 <_strtod_l+0x98>
 8007400:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007402:	b13a      	cbz	r2, 8007414 <_strtod_l+0xcc>
 8007404:	2135      	movs	r1, #53	@ 0x35
 8007406:	a81c      	add	r0, sp, #112	@ 0x70
 8007408:	f7ff ff36 	bl	8007278 <__copybits>
 800740c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800740e:	9805      	ldr	r0, [sp, #20]
 8007410:	f7ff fb10 	bl	8006a34 <_Bfree>
 8007414:	3e01      	subs	r6, #1
 8007416:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007418:	2e04      	cmp	r6, #4
 800741a:	d806      	bhi.n	800742a <_strtod_l+0xe2>
 800741c:	e8df f006 	tbb	[pc, r6]
 8007420:	201d0314 	.word	0x201d0314
 8007424:	14          	.byte	0x14
 8007425:	00          	.byte	0x00
 8007426:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800742a:	05e1      	lsls	r1, r4, #23
 800742c:	bf48      	it	mi
 800742e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007432:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007436:	0d1b      	lsrs	r3, r3, #20
 8007438:	051b      	lsls	r3, r3, #20
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1bd      	bne.n	80073ba <_strtod_l+0x72>
 800743e:	f7fe fb1d 	bl	8005a7c <__errno>
 8007442:	2322      	movs	r3, #34	@ 0x22
 8007444:	6003      	str	r3, [r0, #0]
 8007446:	e7b8      	b.n	80073ba <_strtod_l+0x72>
 8007448:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800744c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007450:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007454:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007458:	e7e7      	b.n	800742a <_strtod_l+0xe2>
 800745a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80075d4 <_strtod_l+0x28c>
 800745e:	e7e4      	b.n	800742a <_strtod_l+0xe2>
 8007460:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007464:	f04f 3aff 	mov.w	sl, #4294967295
 8007468:	e7df      	b.n	800742a <_strtod_l+0xe2>
 800746a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007470:	785b      	ldrb	r3, [r3, #1]
 8007472:	2b30      	cmp	r3, #48	@ 0x30
 8007474:	d0f9      	beq.n	800746a <_strtod_l+0x122>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d09f      	beq.n	80073ba <_strtod_l+0x72>
 800747a:	2301      	movs	r3, #1
 800747c:	9309      	str	r3, [sp, #36]	@ 0x24
 800747e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007480:	220a      	movs	r2, #10
 8007482:	930c      	str	r3, [sp, #48]	@ 0x30
 8007484:	2300      	movs	r3, #0
 8007486:	461f      	mov	r7, r3
 8007488:	9308      	str	r3, [sp, #32]
 800748a:	930a      	str	r3, [sp, #40]	@ 0x28
 800748c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800748e:	7805      	ldrb	r5, [r0, #0]
 8007490:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007494:	b2d9      	uxtb	r1, r3
 8007496:	2909      	cmp	r1, #9
 8007498:	d928      	bls.n	80074ec <_strtod_l+0x1a4>
 800749a:	2201      	movs	r2, #1
 800749c:	494e      	ldr	r1, [pc, #312]	@ (80075d8 <_strtod_l+0x290>)
 800749e:	f001 f968 	bl	8008772 <strncmp>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d032      	beq.n	800750c <_strtod_l+0x1c4>
 80074a6:	2000      	movs	r0, #0
 80074a8:	462a      	mov	r2, r5
 80074aa:	4681      	mov	r9, r0
 80074ac:	463d      	mov	r5, r7
 80074ae:	4603      	mov	r3, r0
 80074b0:	2a65      	cmp	r2, #101	@ 0x65
 80074b2:	d001      	beq.n	80074b8 <_strtod_l+0x170>
 80074b4:	2a45      	cmp	r2, #69	@ 0x45
 80074b6:	d114      	bne.n	80074e2 <_strtod_l+0x19a>
 80074b8:	b91d      	cbnz	r5, 80074c2 <_strtod_l+0x17a>
 80074ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074bc:	4302      	orrs	r2, r0
 80074be:	d095      	beq.n	80073ec <_strtod_l+0xa4>
 80074c0:	2500      	movs	r5, #0
 80074c2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80074c4:	1c62      	adds	r2, r4, #1
 80074c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80074c8:	7862      	ldrb	r2, [r4, #1]
 80074ca:	2a2b      	cmp	r2, #43	@ 0x2b
 80074cc:	d077      	beq.n	80075be <_strtod_l+0x276>
 80074ce:	2a2d      	cmp	r2, #45	@ 0x2d
 80074d0:	d07b      	beq.n	80075ca <_strtod_l+0x282>
 80074d2:	f04f 0c00 	mov.w	ip, #0
 80074d6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80074da:	2909      	cmp	r1, #9
 80074dc:	f240 8082 	bls.w	80075e4 <_strtod_l+0x29c>
 80074e0:	9419      	str	r4, [sp, #100]	@ 0x64
 80074e2:	f04f 0800 	mov.w	r8, #0
 80074e6:	e0a2      	b.n	800762e <_strtod_l+0x2e6>
 80074e8:	2300      	movs	r3, #0
 80074ea:	e7c7      	b.n	800747c <_strtod_l+0x134>
 80074ec:	2f08      	cmp	r7, #8
 80074ee:	bfd5      	itete	le
 80074f0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80074f2:	9908      	ldrgt	r1, [sp, #32]
 80074f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80074f8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80074fc:	f100 0001 	add.w	r0, r0, #1
 8007500:	bfd4      	ite	le
 8007502:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007504:	9308      	strgt	r3, [sp, #32]
 8007506:	3701      	adds	r7, #1
 8007508:	9019      	str	r0, [sp, #100]	@ 0x64
 800750a:	e7bf      	b.n	800748c <_strtod_l+0x144>
 800750c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	9219      	str	r2, [sp, #100]	@ 0x64
 8007512:	785a      	ldrb	r2, [r3, #1]
 8007514:	b37f      	cbz	r7, 8007576 <_strtod_l+0x22e>
 8007516:	4681      	mov	r9, r0
 8007518:	463d      	mov	r5, r7
 800751a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800751e:	2b09      	cmp	r3, #9
 8007520:	d912      	bls.n	8007548 <_strtod_l+0x200>
 8007522:	2301      	movs	r3, #1
 8007524:	e7c4      	b.n	80074b0 <_strtod_l+0x168>
 8007526:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007528:	3001      	adds	r0, #1
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	9219      	str	r2, [sp, #100]	@ 0x64
 800752e:	785a      	ldrb	r2, [r3, #1]
 8007530:	2a30      	cmp	r2, #48	@ 0x30
 8007532:	d0f8      	beq.n	8007526 <_strtod_l+0x1de>
 8007534:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007538:	2b08      	cmp	r3, #8
 800753a:	f200 84cb 	bhi.w	8007ed4 <_strtod_l+0xb8c>
 800753e:	4681      	mov	r9, r0
 8007540:	2000      	movs	r0, #0
 8007542:	4605      	mov	r5, r0
 8007544:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007546:	930c      	str	r3, [sp, #48]	@ 0x30
 8007548:	3a30      	subs	r2, #48	@ 0x30
 800754a:	f100 0301 	add.w	r3, r0, #1
 800754e:	d02a      	beq.n	80075a6 <_strtod_l+0x25e>
 8007550:	4499      	add	r9, r3
 8007552:	210a      	movs	r1, #10
 8007554:	462b      	mov	r3, r5
 8007556:	eb00 0c05 	add.w	ip, r0, r5
 800755a:	4563      	cmp	r3, ip
 800755c:	d10d      	bne.n	800757a <_strtod_l+0x232>
 800755e:	1c69      	adds	r1, r5, #1
 8007560:	4401      	add	r1, r0
 8007562:	4428      	add	r0, r5
 8007564:	2808      	cmp	r0, #8
 8007566:	dc16      	bgt.n	8007596 <_strtod_l+0x24e>
 8007568:	230a      	movs	r3, #10
 800756a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800756c:	fb03 2300 	mla	r3, r3, r0, r2
 8007570:	930a      	str	r3, [sp, #40]	@ 0x28
 8007572:	2300      	movs	r3, #0
 8007574:	e018      	b.n	80075a8 <_strtod_l+0x260>
 8007576:	4638      	mov	r0, r7
 8007578:	e7da      	b.n	8007530 <_strtod_l+0x1e8>
 800757a:	2b08      	cmp	r3, #8
 800757c:	f103 0301 	add.w	r3, r3, #1
 8007580:	dc03      	bgt.n	800758a <_strtod_l+0x242>
 8007582:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007584:	434e      	muls	r6, r1
 8007586:	960a      	str	r6, [sp, #40]	@ 0x28
 8007588:	e7e7      	b.n	800755a <_strtod_l+0x212>
 800758a:	2b10      	cmp	r3, #16
 800758c:	bfde      	ittt	le
 800758e:	9e08      	ldrle	r6, [sp, #32]
 8007590:	434e      	mulle	r6, r1
 8007592:	9608      	strle	r6, [sp, #32]
 8007594:	e7e1      	b.n	800755a <_strtod_l+0x212>
 8007596:	280f      	cmp	r0, #15
 8007598:	dceb      	bgt.n	8007572 <_strtod_l+0x22a>
 800759a:	230a      	movs	r3, #10
 800759c:	9808      	ldr	r0, [sp, #32]
 800759e:	fb03 2300 	mla	r3, r3, r0, r2
 80075a2:	9308      	str	r3, [sp, #32]
 80075a4:	e7e5      	b.n	8007572 <_strtod_l+0x22a>
 80075a6:	4629      	mov	r1, r5
 80075a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075aa:	460d      	mov	r5, r1
 80075ac:	1c50      	adds	r0, r2, #1
 80075ae:	9019      	str	r0, [sp, #100]	@ 0x64
 80075b0:	7852      	ldrb	r2, [r2, #1]
 80075b2:	4618      	mov	r0, r3
 80075b4:	e7b1      	b.n	800751a <_strtod_l+0x1d2>
 80075b6:	f04f 0900 	mov.w	r9, #0
 80075ba:	2301      	movs	r3, #1
 80075bc:	e77d      	b.n	80074ba <_strtod_l+0x172>
 80075be:	f04f 0c00 	mov.w	ip, #0
 80075c2:	1ca2      	adds	r2, r4, #2
 80075c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80075c6:	78a2      	ldrb	r2, [r4, #2]
 80075c8:	e785      	b.n	80074d6 <_strtod_l+0x18e>
 80075ca:	f04f 0c01 	mov.w	ip, #1
 80075ce:	e7f8      	b.n	80075c2 <_strtod_l+0x27a>
 80075d0:	0800ad28 	.word	0x0800ad28
 80075d4:	7ff00000 	.word	0x7ff00000
 80075d8:	0800ad10 	.word	0x0800ad10
 80075dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075de:	1c51      	adds	r1, r2, #1
 80075e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80075e2:	7852      	ldrb	r2, [r2, #1]
 80075e4:	2a30      	cmp	r2, #48	@ 0x30
 80075e6:	d0f9      	beq.n	80075dc <_strtod_l+0x294>
 80075e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80075ec:	2908      	cmp	r1, #8
 80075ee:	f63f af78 	bhi.w	80074e2 <_strtod_l+0x19a>
 80075f2:	f04f 080a 	mov.w	r8, #10
 80075f6:	3a30      	subs	r2, #48	@ 0x30
 80075f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80075fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80075fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007600:	1c56      	adds	r6, r2, #1
 8007602:	9619      	str	r6, [sp, #100]	@ 0x64
 8007604:	7852      	ldrb	r2, [r2, #1]
 8007606:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800760a:	f1be 0f09 	cmp.w	lr, #9
 800760e:	d939      	bls.n	8007684 <_strtod_l+0x33c>
 8007610:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007612:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007616:	1a76      	subs	r6, r6, r1
 8007618:	2e08      	cmp	r6, #8
 800761a:	dc03      	bgt.n	8007624 <_strtod_l+0x2dc>
 800761c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800761e:	4588      	cmp	r8, r1
 8007620:	bfa8      	it	ge
 8007622:	4688      	movge	r8, r1
 8007624:	f1bc 0f00 	cmp.w	ip, #0
 8007628:	d001      	beq.n	800762e <_strtod_l+0x2e6>
 800762a:	f1c8 0800 	rsb	r8, r8, #0
 800762e:	2d00      	cmp	r5, #0
 8007630:	d14e      	bne.n	80076d0 <_strtod_l+0x388>
 8007632:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007634:	4308      	orrs	r0, r1
 8007636:	f47f aec0 	bne.w	80073ba <_strtod_l+0x72>
 800763a:	2b00      	cmp	r3, #0
 800763c:	f47f aed6 	bne.w	80073ec <_strtod_l+0xa4>
 8007640:	2a69      	cmp	r2, #105	@ 0x69
 8007642:	d028      	beq.n	8007696 <_strtod_l+0x34e>
 8007644:	dc25      	bgt.n	8007692 <_strtod_l+0x34a>
 8007646:	2a49      	cmp	r2, #73	@ 0x49
 8007648:	d025      	beq.n	8007696 <_strtod_l+0x34e>
 800764a:	2a4e      	cmp	r2, #78	@ 0x4e
 800764c:	f47f aece 	bne.w	80073ec <_strtod_l+0xa4>
 8007650:	499a      	ldr	r1, [pc, #616]	@ (80078bc <_strtod_l+0x574>)
 8007652:	a819      	add	r0, sp, #100	@ 0x64
 8007654:	f001 fb94 	bl	8008d80 <__match>
 8007658:	2800      	cmp	r0, #0
 800765a:	f43f aec7 	beq.w	80073ec <_strtod_l+0xa4>
 800765e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b28      	cmp	r3, #40	@ 0x28
 8007664:	d12e      	bne.n	80076c4 <_strtod_l+0x37c>
 8007666:	4996      	ldr	r1, [pc, #600]	@ (80078c0 <_strtod_l+0x578>)
 8007668:	aa1c      	add	r2, sp, #112	@ 0x70
 800766a:	a819      	add	r0, sp, #100	@ 0x64
 800766c:	f001 fb9c 	bl	8008da8 <__hexnan>
 8007670:	2805      	cmp	r0, #5
 8007672:	d127      	bne.n	80076c4 <_strtod_l+0x37c>
 8007674:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007676:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800767a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800767e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007682:	e69a      	b.n	80073ba <_strtod_l+0x72>
 8007684:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007686:	fb08 2101 	mla	r1, r8, r1, r2
 800768a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800768e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007690:	e7b5      	b.n	80075fe <_strtod_l+0x2b6>
 8007692:	2a6e      	cmp	r2, #110	@ 0x6e
 8007694:	e7da      	b.n	800764c <_strtod_l+0x304>
 8007696:	498b      	ldr	r1, [pc, #556]	@ (80078c4 <_strtod_l+0x57c>)
 8007698:	a819      	add	r0, sp, #100	@ 0x64
 800769a:	f001 fb71 	bl	8008d80 <__match>
 800769e:	2800      	cmp	r0, #0
 80076a0:	f43f aea4 	beq.w	80073ec <_strtod_l+0xa4>
 80076a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076a6:	4988      	ldr	r1, [pc, #544]	@ (80078c8 <_strtod_l+0x580>)
 80076a8:	3b01      	subs	r3, #1
 80076aa:	a819      	add	r0, sp, #100	@ 0x64
 80076ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80076ae:	f001 fb67 	bl	8008d80 <__match>
 80076b2:	b910      	cbnz	r0, 80076ba <_strtod_l+0x372>
 80076b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076b6:	3301      	adds	r3, #1
 80076b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80076ba:	f04f 0a00 	mov.w	sl, #0
 80076be:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80078cc <_strtod_l+0x584>
 80076c2:	e67a      	b.n	80073ba <_strtod_l+0x72>
 80076c4:	4882      	ldr	r0, [pc, #520]	@ (80078d0 <_strtod_l+0x588>)
 80076c6:	f001 f899 	bl	80087fc <nan>
 80076ca:	4682      	mov	sl, r0
 80076cc:	468b      	mov	fp, r1
 80076ce:	e674      	b.n	80073ba <_strtod_l+0x72>
 80076d0:	eba8 0309 	sub.w	r3, r8, r9
 80076d4:	2f00      	cmp	r7, #0
 80076d6:	bf08      	it	eq
 80076d8:	462f      	moveq	r7, r5
 80076da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80076dc:	2d10      	cmp	r5, #16
 80076de:	462c      	mov	r4, r5
 80076e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80076e2:	bfa8      	it	ge
 80076e4:	2410      	movge	r4, #16
 80076e6:	f7f8 fe7d 	bl	80003e4 <__aeabi_ui2d>
 80076ea:	2d09      	cmp	r5, #9
 80076ec:	4682      	mov	sl, r0
 80076ee:	468b      	mov	fp, r1
 80076f0:	dc11      	bgt.n	8007716 <_strtod_l+0x3ce>
 80076f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f43f ae60 	beq.w	80073ba <_strtod_l+0x72>
 80076fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076fc:	dd76      	ble.n	80077ec <_strtod_l+0x4a4>
 80076fe:	2b16      	cmp	r3, #22
 8007700:	dc5d      	bgt.n	80077be <_strtod_l+0x476>
 8007702:	4974      	ldr	r1, [pc, #464]	@ (80078d4 <_strtod_l+0x58c>)
 8007704:	4652      	mov	r2, sl
 8007706:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800770a:	465b      	mov	r3, fp
 800770c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007710:	f7f8 fee2 	bl	80004d8 <__aeabi_dmul>
 8007714:	e7d9      	b.n	80076ca <_strtod_l+0x382>
 8007716:	4b6f      	ldr	r3, [pc, #444]	@ (80078d4 <_strtod_l+0x58c>)
 8007718:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800771c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007720:	f7f8 feda 	bl	80004d8 <__aeabi_dmul>
 8007724:	4682      	mov	sl, r0
 8007726:	9808      	ldr	r0, [sp, #32]
 8007728:	468b      	mov	fp, r1
 800772a:	f7f8 fe5b 	bl	80003e4 <__aeabi_ui2d>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4650      	mov	r0, sl
 8007734:	4659      	mov	r1, fp
 8007736:	f7f8 fd19 	bl	800016c <__adddf3>
 800773a:	2d0f      	cmp	r5, #15
 800773c:	4682      	mov	sl, r0
 800773e:	468b      	mov	fp, r1
 8007740:	ddd7      	ble.n	80076f2 <_strtod_l+0x3aa>
 8007742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007744:	1b2c      	subs	r4, r5, r4
 8007746:	441c      	add	r4, r3
 8007748:	2c00      	cmp	r4, #0
 800774a:	f340 8096 	ble.w	800787a <_strtod_l+0x532>
 800774e:	f014 030f 	ands.w	r3, r4, #15
 8007752:	d00a      	beq.n	800776a <_strtod_l+0x422>
 8007754:	495f      	ldr	r1, [pc, #380]	@ (80078d4 <_strtod_l+0x58c>)
 8007756:	4652      	mov	r2, sl
 8007758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800775c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007760:	465b      	mov	r3, fp
 8007762:	f7f8 feb9 	bl	80004d8 <__aeabi_dmul>
 8007766:	4682      	mov	sl, r0
 8007768:	468b      	mov	fp, r1
 800776a:	f034 040f 	bics.w	r4, r4, #15
 800776e:	d073      	beq.n	8007858 <_strtod_l+0x510>
 8007770:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007774:	dd48      	ble.n	8007808 <_strtod_l+0x4c0>
 8007776:	2400      	movs	r4, #0
 8007778:	46a0      	mov	r8, r4
 800777a:	46a1      	mov	r9, r4
 800777c:	940a      	str	r4, [sp, #40]	@ 0x28
 800777e:	2322      	movs	r3, #34	@ 0x22
 8007780:	f04f 0a00 	mov.w	sl, #0
 8007784:	9a05      	ldr	r2, [sp, #20]
 8007786:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80078cc <_strtod_l+0x584>
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800778e:	2b00      	cmp	r3, #0
 8007790:	f43f ae13 	beq.w	80073ba <_strtod_l+0x72>
 8007794:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007796:	9805      	ldr	r0, [sp, #20]
 8007798:	f7ff f94c 	bl	8006a34 <_Bfree>
 800779c:	4649      	mov	r1, r9
 800779e:	9805      	ldr	r0, [sp, #20]
 80077a0:	f7ff f948 	bl	8006a34 <_Bfree>
 80077a4:	4641      	mov	r1, r8
 80077a6:	9805      	ldr	r0, [sp, #20]
 80077a8:	f7ff f944 	bl	8006a34 <_Bfree>
 80077ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077ae:	9805      	ldr	r0, [sp, #20]
 80077b0:	f7ff f940 	bl	8006a34 <_Bfree>
 80077b4:	4621      	mov	r1, r4
 80077b6:	9805      	ldr	r0, [sp, #20]
 80077b8:	f7ff f93c 	bl	8006a34 <_Bfree>
 80077bc:	e5fd      	b.n	80073ba <_strtod_l+0x72>
 80077be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80077c4:	4293      	cmp	r3, r2
 80077c6:	dbbc      	blt.n	8007742 <_strtod_l+0x3fa>
 80077c8:	4c42      	ldr	r4, [pc, #264]	@ (80078d4 <_strtod_l+0x58c>)
 80077ca:	f1c5 050f 	rsb	r5, r5, #15
 80077ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80077d2:	4652      	mov	r2, sl
 80077d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d8:	465b      	mov	r3, fp
 80077da:	f7f8 fe7d 	bl	80004d8 <__aeabi_dmul>
 80077de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e0:	1b5d      	subs	r5, r3, r5
 80077e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80077e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80077ea:	e791      	b.n	8007710 <_strtod_l+0x3c8>
 80077ec:	3316      	adds	r3, #22
 80077ee:	dba8      	blt.n	8007742 <_strtod_l+0x3fa>
 80077f0:	4b38      	ldr	r3, [pc, #224]	@ (80078d4 <_strtod_l+0x58c>)
 80077f2:	eba9 0808 	sub.w	r8, r9, r8
 80077f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80077fa:	4650      	mov	r0, sl
 80077fc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007800:	4659      	mov	r1, fp
 8007802:	f7f8 ff93 	bl	800072c <__aeabi_ddiv>
 8007806:	e760      	b.n	80076ca <_strtod_l+0x382>
 8007808:	4b33      	ldr	r3, [pc, #204]	@ (80078d8 <_strtod_l+0x590>)
 800780a:	4650      	mov	r0, sl
 800780c:	9308      	str	r3, [sp, #32]
 800780e:	2300      	movs	r3, #0
 8007810:	4659      	mov	r1, fp
 8007812:	461e      	mov	r6, r3
 8007814:	1124      	asrs	r4, r4, #4
 8007816:	2c01      	cmp	r4, #1
 8007818:	dc21      	bgt.n	800785e <_strtod_l+0x516>
 800781a:	b10b      	cbz	r3, 8007820 <_strtod_l+0x4d8>
 800781c:	4682      	mov	sl, r0
 800781e:	468b      	mov	fp, r1
 8007820:	492d      	ldr	r1, [pc, #180]	@ (80078d8 <_strtod_l+0x590>)
 8007822:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007826:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800782a:	4652      	mov	r2, sl
 800782c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007830:	465b      	mov	r3, fp
 8007832:	f7f8 fe51 	bl	80004d8 <__aeabi_dmul>
 8007836:	4b25      	ldr	r3, [pc, #148]	@ (80078cc <_strtod_l+0x584>)
 8007838:	460a      	mov	r2, r1
 800783a:	400b      	ands	r3, r1
 800783c:	4927      	ldr	r1, [pc, #156]	@ (80078dc <_strtod_l+0x594>)
 800783e:	4682      	mov	sl, r0
 8007840:	428b      	cmp	r3, r1
 8007842:	d898      	bhi.n	8007776 <_strtod_l+0x42e>
 8007844:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007848:	428b      	cmp	r3, r1
 800784a:	bf86      	itte	hi
 800784c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007850:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80078e0 <_strtod_l+0x598>
 8007854:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007858:	2300      	movs	r3, #0
 800785a:	9308      	str	r3, [sp, #32]
 800785c:	e07a      	b.n	8007954 <_strtod_l+0x60c>
 800785e:	07e2      	lsls	r2, r4, #31
 8007860:	d505      	bpl.n	800786e <_strtod_l+0x526>
 8007862:	9b08      	ldr	r3, [sp, #32]
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f8 fe36 	bl	80004d8 <__aeabi_dmul>
 800786c:	2301      	movs	r3, #1
 800786e:	9a08      	ldr	r2, [sp, #32]
 8007870:	3601      	adds	r6, #1
 8007872:	3208      	adds	r2, #8
 8007874:	1064      	asrs	r4, r4, #1
 8007876:	9208      	str	r2, [sp, #32]
 8007878:	e7cd      	b.n	8007816 <_strtod_l+0x4ce>
 800787a:	d0ed      	beq.n	8007858 <_strtod_l+0x510>
 800787c:	4264      	negs	r4, r4
 800787e:	f014 020f 	ands.w	r2, r4, #15
 8007882:	d00a      	beq.n	800789a <_strtod_l+0x552>
 8007884:	4b13      	ldr	r3, [pc, #76]	@ (80078d4 <_strtod_l+0x58c>)
 8007886:	4650      	mov	r0, sl
 8007888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800788c:	4659      	mov	r1, fp
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f7f8 ff4b 	bl	800072c <__aeabi_ddiv>
 8007896:	4682      	mov	sl, r0
 8007898:	468b      	mov	fp, r1
 800789a:	1124      	asrs	r4, r4, #4
 800789c:	d0dc      	beq.n	8007858 <_strtod_l+0x510>
 800789e:	2c1f      	cmp	r4, #31
 80078a0:	dd20      	ble.n	80078e4 <_strtod_l+0x59c>
 80078a2:	2400      	movs	r4, #0
 80078a4:	46a0      	mov	r8, r4
 80078a6:	46a1      	mov	r9, r4
 80078a8:	940a      	str	r4, [sp, #40]	@ 0x28
 80078aa:	2322      	movs	r3, #34	@ 0x22
 80078ac:	9a05      	ldr	r2, [sp, #20]
 80078ae:	f04f 0a00 	mov.w	sl, #0
 80078b2:	f04f 0b00 	mov.w	fp, #0
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	e768      	b.n	800778c <_strtod_l+0x444>
 80078ba:	bf00      	nop
 80078bc:	0800aafb 	.word	0x0800aafb
 80078c0:	0800ad14 	.word	0x0800ad14
 80078c4:	0800aaf3 	.word	0x0800aaf3
 80078c8:	0800ab2a 	.word	0x0800ab2a
 80078cc:	7ff00000 	.word	0x7ff00000
 80078d0:	0800aebd 	.word	0x0800aebd
 80078d4:	0800ac48 	.word	0x0800ac48
 80078d8:	0800ac20 	.word	0x0800ac20
 80078dc:	7ca00000 	.word	0x7ca00000
 80078e0:	7fefffff 	.word	0x7fefffff
 80078e4:	f014 0310 	ands.w	r3, r4, #16
 80078e8:	bf18      	it	ne
 80078ea:	236a      	movne	r3, #106	@ 0x6a
 80078ec:	4650      	mov	r0, sl
 80078ee:	9308      	str	r3, [sp, #32]
 80078f0:	4659      	mov	r1, fp
 80078f2:	2300      	movs	r3, #0
 80078f4:	4ea9      	ldr	r6, [pc, #676]	@ (8007b9c <_strtod_l+0x854>)
 80078f6:	07e2      	lsls	r2, r4, #31
 80078f8:	d504      	bpl.n	8007904 <_strtod_l+0x5bc>
 80078fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078fe:	f7f8 fdeb 	bl	80004d8 <__aeabi_dmul>
 8007902:	2301      	movs	r3, #1
 8007904:	1064      	asrs	r4, r4, #1
 8007906:	f106 0608 	add.w	r6, r6, #8
 800790a:	d1f4      	bne.n	80078f6 <_strtod_l+0x5ae>
 800790c:	b10b      	cbz	r3, 8007912 <_strtod_l+0x5ca>
 800790e:	4682      	mov	sl, r0
 8007910:	468b      	mov	fp, r1
 8007912:	9b08      	ldr	r3, [sp, #32]
 8007914:	b1b3      	cbz	r3, 8007944 <_strtod_l+0x5fc>
 8007916:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800791a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800791e:	2b00      	cmp	r3, #0
 8007920:	4659      	mov	r1, fp
 8007922:	dd0f      	ble.n	8007944 <_strtod_l+0x5fc>
 8007924:	2b1f      	cmp	r3, #31
 8007926:	dd57      	ble.n	80079d8 <_strtod_l+0x690>
 8007928:	2b34      	cmp	r3, #52	@ 0x34
 800792a:	bfd8      	it	le
 800792c:	f04f 33ff 	movle.w	r3, #4294967295
 8007930:	f04f 0a00 	mov.w	sl, #0
 8007934:	bfcf      	iteee	gt
 8007936:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800793a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800793e:	4093      	lslle	r3, r2
 8007940:	ea03 0b01 	andle.w	fp, r3, r1
 8007944:	2200      	movs	r2, #0
 8007946:	2300      	movs	r3, #0
 8007948:	4650      	mov	r0, sl
 800794a:	4659      	mov	r1, fp
 800794c:	f7f9 f82c 	bl	80009a8 <__aeabi_dcmpeq>
 8007950:	2800      	cmp	r0, #0
 8007952:	d1a6      	bne.n	80078a2 <_strtod_l+0x55a>
 8007954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007956:	463a      	mov	r2, r7
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800795c:	462b      	mov	r3, r5
 800795e:	9805      	ldr	r0, [sp, #20]
 8007960:	f7ff f8d0 	bl	8006b04 <__s2b>
 8007964:	900a      	str	r0, [sp, #40]	@ 0x28
 8007966:	2800      	cmp	r0, #0
 8007968:	f43f af05 	beq.w	8007776 <_strtod_l+0x42e>
 800796c:	2400      	movs	r4, #0
 800796e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007970:	eba9 0308 	sub.w	r3, r9, r8
 8007974:	2a00      	cmp	r2, #0
 8007976:	bfa8      	it	ge
 8007978:	2300      	movge	r3, #0
 800797a:	46a0      	mov	r8, r4
 800797c:	9312      	str	r3, [sp, #72]	@ 0x48
 800797e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007982:	9316      	str	r3, [sp, #88]	@ 0x58
 8007984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007986:	9805      	ldr	r0, [sp, #20]
 8007988:	6859      	ldr	r1, [r3, #4]
 800798a:	f7ff f813 	bl	80069b4 <_Balloc>
 800798e:	4681      	mov	r9, r0
 8007990:	2800      	cmp	r0, #0
 8007992:	f43f aef4 	beq.w	800777e <_strtod_l+0x436>
 8007996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007998:	300c      	adds	r0, #12
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	f103 010c 	add.w	r1, r3, #12
 80079a0:	3202      	adds	r2, #2
 80079a2:	0092      	lsls	r2, r2, #2
 80079a4:	f7fe f8a5 	bl	8005af2 <memcpy>
 80079a8:	ab1c      	add	r3, sp, #112	@ 0x70
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	ab1b      	add	r3, sp, #108	@ 0x6c
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	4652      	mov	r2, sl
 80079b2:	465b      	mov	r3, fp
 80079b4:	9805      	ldr	r0, [sp, #20]
 80079b6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80079ba:	f7ff fbd5 	bl	8007168 <__d2b>
 80079be:	901a      	str	r0, [sp, #104]	@ 0x68
 80079c0:	2800      	cmp	r0, #0
 80079c2:	f43f aedc 	beq.w	800777e <_strtod_l+0x436>
 80079c6:	2101      	movs	r1, #1
 80079c8:	9805      	ldr	r0, [sp, #20]
 80079ca:	f7ff f931 	bl	8006c30 <__i2b>
 80079ce:	4680      	mov	r8, r0
 80079d0:	b948      	cbnz	r0, 80079e6 <_strtod_l+0x69e>
 80079d2:	f04f 0800 	mov.w	r8, #0
 80079d6:	e6d2      	b.n	800777e <_strtod_l+0x436>
 80079d8:	f04f 32ff 	mov.w	r2, #4294967295
 80079dc:	fa02 f303 	lsl.w	r3, r2, r3
 80079e0:	ea03 0a0a 	and.w	sl, r3, sl
 80079e4:	e7ae      	b.n	8007944 <_strtod_l+0x5fc>
 80079e6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80079e8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80079ea:	2d00      	cmp	r5, #0
 80079ec:	bfab      	itete	ge
 80079ee:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80079f0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80079f2:	18ef      	addge	r7, r5, r3
 80079f4:	1b5e      	sublt	r6, r3, r5
 80079f6:	9b08      	ldr	r3, [sp, #32]
 80079f8:	bfa8      	it	ge
 80079fa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80079fc:	eba5 0503 	sub.w	r5, r5, r3
 8007a00:	4415      	add	r5, r2
 8007a02:	4b67      	ldr	r3, [pc, #412]	@ (8007ba0 <_strtod_l+0x858>)
 8007a04:	f105 35ff 	add.w	r5, r5, #4294967295
 8007a08:	bfb8      	it	lt
 8007a0a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007a0c:	429d      	cmp	r5, r3
 8007a0e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007a12:	da50      	bge.n	8007ab6 <_strtod_l+0x76e>
 8007a14:	1b5b      	subs	r3, r3, r5
 8007a16:	2b1f      	cmp	r3, #31
 8007a18:	f04f 0101 	mov.w	r1, #1
 8007a1c:	eba2 0203 	sub.w	r2, r2, r3
 8007a20:	dc3d      	bgt.n	8007a9e <_strtod_l+0x756>
 8007a22:	fa01 f303 	lsl.w	r3, r1, r3
 8007a26:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a28:	2300      	movs	r3, #0
 8007a2a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a2c:	18bd      	adds	r5, r7, r2
 8007a2e:	9b08      	ldr	r3, [sp, #32]
 8007a30:	42af      	cmp	r7, r5
 8007a32:	4416      	add	r6, r2
 8007a34:	441e      	add	r6, r3
 8007a36:	463b      	mov	r3, r7
 8007a38:	bfa8      	it	ge
 8007a3a:	462b      	movge	r3, r5
 8007a3c:	42b3      	cmp	r3, r6
 8007a3e:	bfa8      	it	ge
 8007a40:	4633      	movge	r3, r6
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bfc2      	ittt	gt
 8007a46:	1aed      	subgt	r5, r5, r3
 8007a48:	1af6      	subgt	r6, r6, r3
 8007a4a:	1aff      	subgt	r7, r7, r3
 8007a4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dd16      	ble.n	8007a80 <_strtod_l+0x738>
 8007a52:	4641      	mov	r1, r8
 8007a54:	461a      	mov	r2, r3
 8007a56:	9805      	ldr	r0, [sp, #20]
 8007a58:	f7ff f9a8 	bl	8006dac <__pow5mult>
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d0b7      	beq.n	80079d2 <_strtod_l+0x68a>
 8007a62:	4601      	mov	r1, r0
 8007a64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007a66:	9805      	ldr	r0, [sp, #20]
 8007a68:	f7ff f8f8 	bl	8006c5c <__multiply>
 8007a6c:	900e      	str	r0, [sp, #56]	@ 0x38
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	f43f ae85 	beq.w	800777e <_strtod_l+0x436>
 8007a74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a76:	9805      	ldr	r0, [sp, #20]
 8007a78:	f7fe ffdc 	bl	8006a34 <_Bfree>
 8007a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a80:	2d00      	cmp	r5, #0
 8007a82:	dc1d      	bgt.n	8007ac0 <_strtod_l+0x778>
 8007a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dd23      	ble.n	8007ad2 <_strtod_l+0x78a>
 8007a8a:	4649      	mov	r1, r9
 8007a8c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007a8e:	9805      	ldr	r0, [sp, #20]
 8007a90:	f7ff f98c 	bl	8006dac <__pow5mult>
 8007a94:	4681      	mov	r9, r0
 8007a96:	b9e0      	cbnz	r0, 8007ad2 <_strtod_l+0x78a>
 8007a98:	f04f 0900 	mov.w	r9, #0
 8007a9c:	e66f      	b.n	800777e <_strtod_l+0x436>
 8007a9e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007aa2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007aa6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007aaa:	35e2      	adds	r5, #226	@ 0xe2
 8007aac:	fa01 f305 	lsl.w	r3, r1, r5
 8007ab0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ab2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007ab4:	e7ba      	b.n	8007a2c <_strtod_l+0x6e4>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007aba:	2301      	movs	r3, #1
 8007abc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007abe:	e7b5      	b.n	8007a2c <_strtod_l+0x6e4>
 8007ac0:	462a      	mov	r2, r5
 8007ac2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ac4:	9805      	ldr	r0, [sp, #20]
 8007ac6:	f7ff f9cb 	bl	8006e60 <__lshift>
 8007aca:	901a      	str	r0, [sp, #104]	@ 0x68
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d1d9      	bne.n	8007a84 <_strtod_l+0x73c>
 8007ad0:	e655      	b.n	800777e <_strtod_l+0x436>
 8007ad2:	2e00      	cmp	r6, #0
 8007ad4:	dd07      	ble.n	8007ae6 <_strtod_l+0x79e>
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	4632      	mov	r2, r6
 8007ada:	9805      	ldr	r0, [sp, #20]
 8007adc:	f7ff f9c0 	bl	8006e60 <__lshift>
 8007ae0:	4681      	mov	r9, r0
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d0d8      	beq.n	8007a98 <_strtod_l+0x750>
 8007ae6:	2f00      	cmp	r7, #0
 8007ae8:	dd08      	ble.n	8007afc <_strtod_l+0x7b4>
 8007aea:	4641      	mov	r1, r8
 8007aec:	463a      	mov	r2, r7
 8007aee:	9805      	ldr	r0, [sp, #20]
 8007af0:	f7ff f9b6 	bl	8006e60 <__lshift>
 8007af4:	4680      	mov	r8, r0
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f43f ae41 	beq.w	800777e <_strtod_l+0x436>
 8007afc:	464a      	mov	r2, r9
 8007afe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b00:	9805      	ldr	r0, [sp, #20]
 8007b02:	f7ff fa35 	bl	8006f70 <__mdiff>
 8007b06:	4604      	mov	r4, r0
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	f43f ae38 	beq.w	800777e <_strtod_l+0x436>
 8007b0e:	68c3      	ldr	r3, [r0, #12]
 8007b10:	4641      	mov	r1, r8
 8007b12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b14:	2300      	movs	r3, #0
 8007b16:	60c3      	str	r3, [r0, #12]
 8007b18:	f7ff fa0e 	bl	8006f38 <__mcmp>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	da45      	bge.n	8007bac <_strtod_l+0x864>
 8007b20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b22:	ea53 030a 	orrs.w	r3, r3, sl
 8007b26:	d16b      	bne.n	8007c00 <_strtod_l+0x8b8>
 8007b28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d167      	bne.n	8007c00 <_strtod_l+0x8b8>
 8007b30:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b34:	0d1b      	lsrs	r3, r3, #20
 8007b36:	051b      	lsls	r3, r3, #20
 8007b38:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b3c:	d960      	bls.n	8007c00 <_strtod_l+0x8b8>
 8007b3e:	6963      	ldr	r3, [r4, #20]
 8007b40:	b913      	cbnz	r3, 8007b48 <_strtod_l+0x800>
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	dd5b      	ble.n	8007c00 <_strtod_l+0x8b8>
 8007b48:	4621      	mov	r1, r4
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	9805      	ldr	r0, [sp, #20]
 8007b4e:	f7ff f987 	bl	8006e60 <__lshift>
 8007b52:	4641      	mov	r1, r8
 8007b54:	4604      	mov	r4, r0
 8007b56:	f7ff f9ef 	bl	8006f38 <__mcmp>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	dd50      	ble.n	8007c00 <_strtod_l+0x8b8>
 8007b5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b62:	9a08      	ldr	r2, [sp, #32]
 8007b64:	0d1b      	lsrs	r3, r3, #20
 8007b66:	051b      	lsls	r3, r3, #20
 8007b68:	2a00      	cmp	r2, #0
 8007b6a:	d06a      	beq.n	8007c42 <_strtod_l+0x8fa>
 8007b6c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b70:	d867      	bhi.n	8007c42 <_strtod_l+0x8fa>
 8007b72:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007b76:	f67f ae98 	bls.w	80078aa <_strtod_l+0x562>
 8007b7a:	4650      	mov	r0, sl
 8007b7c:	4659      	mov	r1, fp
 8007b7e:	4b09      	ldr	r3, [pc, #36]	@ (8007ba4 <_strtod_l+0x85c>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	f7f8 fca9 	bl	80004d8 <__aeabi_dmul>
 8007b86:	4b08      	ldr	r3, [pc, #32]	@ (8007ba8 <_strtod_l+0x860>)
 8007b88:	4682      	mov	sl, r0
 8007b8a:	400b      	ands	r3, r1
 8007b8c:	468b      	mov	fp, r1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f47f ae00 	bne.w	8007794 <_strtod_l+0x44c>
 8007b94:	2322      	movs	r3, #34	@ 0x22
 8007b96:	9a05      	ldr	r2, [sp, #20]
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	e5fb      	b.n	8007794 <_strtod_l+0x44c>
 8007b9c:	0800ad40 	.word	0x0800ad40
 8007ba0:	fffffc02 	.word	0xfffffc02
 8007ba4:	39500000 	.word	0x39500000
 8007ba8:	7ff00000 	.word	0x7ff00000
 8007bac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007bb0:	d165      	bne.n	8007c7e <_strtod_l+0x936>
 8007bb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007bb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bb8:	b35a      	cbz	r2, 8007c12 <_strtod_l+0x8ca>
 8007bba:	4a99      	ldr	r2, [pc, #612]	@ (8007e20 <_strtod_l+0xad8>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d12b      	bne.n	8007c18 <_strtod_l+0x8d0>
 8007bc0:	9b08      	ldr	r3, [sp, #32]
 8007bc2:	4651      	mov	r1, sl
 8007bc4:	b303      	cbz	r3, 8007c08 <_strtod_l+0x8c0>
 8007bc6:	465a      	mov	r2, fp
 8007bc8:	4b96      	ldr	r3, [pc, #600]	@ (8007e24 <_strtod_l+0xadc>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd4:	d81b      	bhi.n	8007c0e <_strtod_l+0x8c6>
 8007bd6:	0d1b      	lsrs	r3, r3, #20
 8007bd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007be0:	4299      	cmp	r1, r3
 8007be2:	d119      	bne.n	8007c18 <_strtod_l+0x8d0>
 8007be4:	4b90      	ldr	r3, [pc, #576]	@ (8007e28 <_strtod_l+0xae0>)
 8007be6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d102      	bne.n	8007bf2 <_strtod_l+0x8aa>
 8007bec:	3101      	adds	r1, #1
 8007bee:	f43f adc6 	beq.w	800777e <_strtod_l+0x436>
 8007bf2:	f04f 0a00 	mov.w	sl, #0
 8007bf6:	4b8b      	ldr	r3, [pc, #556]	@ (8007e24 <_strtod_l+0xadc>)
 8007bf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bfa:	401a      	ands	r2, r3
 8007bfc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007c00:	9b08      	ldr	r3, [sp, #32]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1b9      	bne.n	8007b7a <_strtod_l+0x832>
 8007c06:	e5c5      	b.n	8007794 <_strtod_l+0x44c>
 8007c08:	f04f 33ff 	mov.w	r3, #4294967295
 8007c0c:	e7e8      	b.n	8007be0 <_strtod_l+0x898>
 8007c0e:	4613      	mov	r3, r2
 8007c10:	e7e6      	b.n	8007be0 <_strtod_l+0x898>
 8007c12:	ea53 030a 	orrs.w	r3, r3, sl
 8007c16:	d0a2      	beq.n	8007b5e <_strtod_l+0x816>
 8007c18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c1a:	b1db      	cbz	r3, 8007c54 <_strtod_l+0x90c>
 8007c1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c1e:	4213      	tst	r3, r2
 8007c20:	d0ee      	beq.n	8007c00 <_strtod_l+0x8b8>
 8007c22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c24:	4650      	mov	r0, sl
 8007c26:	4659      	mov	r1, fp
 8007c28:	9a08      	ldr	r2, [sp, #32]
 8007c2a:	b1bb      	cbz	r3, 8007c5c <_strtod_l+0x914>
 8007c2c:	f7ff fb68 	bl	8007300 <sulp>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c38:	f7f8 fa98 	bl	800016c <__adddf3>
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	468b      	mov	fp, r1
 8007c40:	e7de      	b.n	8007c00 <_strtod_l+0x8b8>
 8007c42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007c46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c4a:	f04f 3aff 	mov.w	sl, #4294967295
 8007c4e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c52:	e7d5      	b.n	8007c00 <_strtod_l+0x8b8>
 8007c54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c56:	ea13 0f0a 	tst.w	r3, sl
 8007c5a:	e7e1      	b.n	8007c20 <_strtod_l+0x8d8>
 8007c5c:	f7ff fb50 	bl	8007300 <sulp>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c68:	f7f8 fa7e 	bl	8000168 <__aeabi_dsub>
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4682      	mov	sl, r0
 8007c72:	468b      	mov	fp, r1
 8007c74:	f7f8 fe98 	bl	80009a8 <__aeabi_dcmpeq>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d0c1      	beq.n	8007c00 <_strtod_l+0x8b8>
 8007c7c:	e615      	b.n	80078aa <_strtod_l+0x562>
 8007c7e:	4641      	mov	r1, r8
 8007c80:	4620      	mov	r0, r4
 8007c82:	f7ff fac9 	bl	8007218 <__ratio>
 8007c86:	2200      	movs	r2, #0
 8007c88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	460f      	mov	r7, r1
 8007c90:	f7f8 fe9e 	bl	80009d0 <__aeabi_dcmple>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d06d      	beq.n	8007d74 <_strtod_l+0xa2c>
 8007c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d178      	bne.n	8007d90 <_strtod_l+0xa48>
 8007c9e:	f1ba 0f00 	cmp.w	sl, #0
 8007ca2:	d156      	bne.n	8007d52 <_strtod_l+0xa0a>
 8007ca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d158      	bne.n	8007d60 <_strtod_l+0xa18>
 8007cae:	2200      	movs	r2, #0
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	4b5d      	ldr	r3, [pc, #372]	@ (8007e2c <_strtod_l+0xae4>)
 8007cb6:	f7f8 fe81 	bl	80009bc <__aeabi_dcmplt>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	d157      	bne.n	8007d6e <_strtod_l+0xa26>
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8007e30 <_strtod_l+0xae8>)
 8007cc6:	f7f8 fc07 	bl	80004d8 <__aeabi_dmul>
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460f      	mov	r7, r1
 8007cce:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007cd2:	9606      	str	r6, [sp, #24]
 8007cd4:	9307      	str	r3, [sp, #28]
 8007cd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cda:	4d52      	ldr	r5, [pc, #328]	@ (8007e24 <_strtod_l+0xadc>)
 8007cdc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ce2:	401d      	ands	r5, r3
 8007ce4:	4b53      	ldr	r3, [pc, #332]	@ (8007e34 <_strtod_l+0xaec>)
 8007ce6:	429d      	cmp	r5, r3
 8007ce8:	f040 80aa 	bne.w	8007e40 <_strtod_l+0xaf8>
 8007cec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cee:	4650      	mov	r0, sl
 8007cf0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007cf4:	4659      	mov	r1, fp
 8007cf6:	f7ff f9cf 	bl	8007098 <__ulp>
 8007cfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cfe:	f7f8 fbeb 	bl	80004d8 <__aeabi_dmul>
 8007d02:	4652      	mov	r2, sl
 8007d04:	465b      	mov	r3, fp
 8007d06:	f7f8 fa31 	bl	800016c <__adddf3>
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4945      	ldr	r1, [pc, #276]	@ (8007e24 <_strtod_l+0xadc>)
 8007d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8007e38 <_strtod_l+0xaf0>)
 8007d10:	4019      	ands	r1, r3
 8007d12:	4291      	cmp	r1, r2
 8007d14:	4682      	mov	sl, r0
 8007d16:	d942      	bls.n	8007d9e <_strtod_l+0xa56>
 8007d18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d1a:	4b43      	ldr	r3, [pc, #268]	@ (8007e28 <_strtod_l+0xae0>)
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d103      	bne.n	8007d28 <_strtod_l+0x9e0>
 8007d20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d22:	3301      	adds	r3, #1
 8007d24:	f43f ad2b 	beq.w	800777e <_strtod_l+0x436>
 8007d28:	f04f 3aff 	mov.w	sl, #4294967295
 8007d2c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007e28 <_strtod_l+0xae0>
 8007d30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d32:	9805      	ldr	r0, [sp, #20]
 8007d34:	f7fe fe7e 	bl	8006a34 <_Bfree>
 8007d38:	4649      	mov	r1, r9
 8007d3a:	9805      	ldr	r0, [sp, #20]
 8007d3c:	f7fe fe7a 	bl	8006a34 <_Bfree>
 8007d40:	4641      	mov	r1, r8
 8007d42:	9805      	ldr	r0, [sp, #20]
 8007d44:	f7fe fe76 	bl	8006a34 <_Bfree>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	9805      	ldr	r0, [sp, #20]
 8007d4c:	f7fe fe72 	bl	8006a34 <_Bfree>
 8007d50:	e618      	b.n	8007984 <_strtod_l+0x63c>
 8007d52:	f1ba 0f01 	cmp.w	sl, #1
 8007d56:	d103      	bne.n	8007d60 <_strtod_l+0xa18>
 8007d58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f43f ada5 	beq.w	80078aa <_strtod_l+0x562>
 8007d60:	2200      	movs	r2, #0
 8007d62:	4b36      	ldr	r3, [pc, #216]	@ (8007e3c <_strtod_l+0xaf4>)
 8007d64:	2600      	movs	r6, #0
 8007d66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d6a:	4f30      	ldr	r7, [pc, #192]	@ (8007e2c <_strtod_l+0xae4>)
 8007d6c:	e7b3      	b.n	8007cd6 <_strtod_l+0x98e>
 8007d6e:	2600      	movs	r6, #0
 8007d70:	4f2f      	ldr	r7, [pc, #188]	@ (8007e30 <_strtod_l+0xae8>)
 8007d72:	e7ac      	b.n	8007cce <_strtod_l+0x986>
 8007d74:	4630      	mov	r0, r6
 8007d76:	4639      	mov	r1, r7
 8007d78:	4b2d      	ldr	r3, [pc, #180]	@ (8007e30 <_strtod_l+0xae8>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f7f8 fbac 	bl	80004d8 <__aeabi_dmul>
 8007d80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d82:	4606      	mov	r6, r0
 8007d84:	460f      	mov	r7, r1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0a1      	beq.n	8007cce <_strtod_l+0x986>
 8007d8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007d8e:	e7a2      	b.n	8007cd6 <_strtod_l+0x98e>
 8007d90:	2200      	movs	r2, #0
 8007d92:	4b26      	ldr	r3, [pc, #152]	@ (8007e2c <_strtod_l+0xae4>)
 8007d94:	4616      	mov	r6, r2
 8007d96:	461f      	mov	r7, r3
 8007d98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d9c:	e79b      	b.n	8007cd6 <_strtod_l+0x98e>
 8007d9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007da2:	9b08      	ldr	r3, [sp, #32]
 8007da4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1c1      	bne.n	8007d30 <_strtod_l+0x9e8>
 8007dac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007db0:	0d1b      	lsrs	r3, r3, #20
 8007db2:	051b      	lsls	r3, r3, #20
 8007db4:	429d      	cmp	r5, r3
 8007db6:	d1bb      	bne.n	8007d30 <_strtod_l+0x9e8>
 8007db8:	4630      	mov	r0, r6
 8007dba:	4639      	mov	r1, r7
 8007dbc:	f7f9 f9de 	bl	800117c <__aeabi_d2lz>
 8007dc0:	f7f8 fb5c 	bl	800047c <__aeabi_l2d>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4630      	mov	r0, r6
 8007dca:	4639      	mov	r1, r7
 8007dcc:	f7f8 f9cc 	bl	8000168 <__aeabi_dsub>
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007dd8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dde:	ea46 060a 	orr.w	r6, r6, sl
 8007de2:	431e      	orrs	r6, r3
 8007de4:	d069      	beq.n	8007eba <_strtod_l+0xb72>
 8007de6:	a30a      	add	r3, pc, #40	@ (adr r3, 8007e10 <_strtod_l+0xac8>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 fde6 	bl	80009bc <__aeabi_dcmplt>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f47f accf 	bne.w	8007794 <_strtod_l+0x44c>
 8007df6:	a308      	add	r3, pc, #32	@ (adr r3, 8007e18 <_strtod_l+0xad0>)
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e00:	f7f8 fdfa 	bl	80009f8 <__aeabi_dcmpgt>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d093      	beq.n	8007d30 <_strtod_l+0x9e8>
 8007e08:	e4c4      	b.n	8007794 <_strtod_l+0x44c>
 8007e0a:	bf00      	nop
 8007e0c:	f3af 8000 	nop.w
 8007e10:	94a03595 	.word	0x94a03595
 8007e14:	3fdfffff 	.word	0x3fdfffff
 8007e18:	35afe535 	.word	0x35afe535
 8007e1c:	3fe00000 	.word	0x3fe00000
 8007e20:	000fffff 	.word	0x000fffff
 8007e24:	7ff00000 	.word	0x7ff00000
 8007e28:	7fefffff 	.word	0x7fefffff
 8007e2c:	3ff00000 	.word	0x3ff00000
 8007e30:	3fe00000 	.word	0x3fe00000
 8007e34:	7fe00000 	.word	0x7fe00000
 8007e38:	7c9fffff 	.word	0x7c9fffff
 8007e3c:	bff00000 	.word	0xbff00000
 8007e40:	9b08      	ldr	r3, [sp, #32]
 8007e42:	b323      	cbz	r3, 8007e8e <_strtod_l+0xb46>
 8007e44:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007e48:	d821      	bhi.n	8007e8e <_strtod_l+0xb46>
 8007e4a:	a327      	add	r3, pc, #156	@ (adr r3, 8007ee8 <_strtod_l+0xba0>)
 8007e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 fdbc 	bl	80009d0 <__aeabi_dcmple>
 8007e58:	b1a0      	cbz	r0, 8007e84 <_strtod_l+0xb3c>
 8007e5a:	4639      	mov	r1, r7
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f7f8 fe13 	bl	8000a88 <__aeabi_d2uiz>
 8007e62:	2801      	cmp	r0, #1
 8007e64:	bf38      	it	cc
 8007e66:	2001      	movcc	r0, #1
 8007e68:	f7f8 fabc 	bl	80003e4 <__aeabi_ui2d>
 8007e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e6e:	4606      	mov	r6, r0
 8007e70:	460f      	mov	r7, r1
 8007e72:	b9fb      	cbnz	r3, 8007eb4 <_strtod_l+0xb6c>
 8007e74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e78:	9014      	str	r0, [sp, #80]	@ 0x50
 8007e7a:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007e80:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e86:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007e8a:	1b5b      	subs	r3, r3, r5
 8007e8c:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e92:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007e96:	f7ff f8ff 	bl	8007098 <__ulp>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	4650      	mov	r0, sl
 8007ea0:	4659      	mov	r1, fp
 8007ea2:	f7f8 fb19 	bl	80004d8 <__aeabi_dmul>
 8007ea6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007eaa:	f7f8 f95f 	bl	800016c <__adddf3>
 8007eae:	4682      	mov	sl, r0
 8007eb0:	468b      	mov	fp, r1
 8007eb2:	e776      	b.n	8007da2 <_strtod_l+0xa5a>
 8007eb4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007eb8:	e7e0      	b.n	8007e7c <_strtod_l+0xb34>
 8007eba:	a30d      	add	r3, pc, #52	@ (adr r3, 8007ef0 <_strtod_l+0xba8>)
 8007ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec0:	f7f8 fd7c 	bl	80009bc <__aeabi_dcmplt>
 8007ec4:	e79e      	b.n	8007e04 <_strtod_l+0xabc>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ecc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	f7ff ba77 	b.w	80073c2 <_strtod_l+0x7a>
 8007ed4:	2a65      	cmp	r2, #101	@ 0x65
 8007ed6:	f43f ab6e 	beq.w	80075b6 <_strtod_l+0x26e>
 8007eda:	2a45      	cmp	r2, #69	@ 0x45
 8007edc:	f43f ab6b 	beq.w	80075b6 <_strtod_l+0x26e>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f7ff bba6 	b.w	8007632 <_strtod_l+0x2ea>
 8007ee6:	bf00      	nop
 8007ee8:	ffc00000 	.word	0xffc00000
 8007eec:	41dfffff 	.word	0x41dfffff
 8007ef0:	94a03595 	.word	0x94a03595
 8007ef4:	3fcfffff 	.word	0x3fcfffff

08007ef8 <_strtod_r>:
 8007ef8:	4b01      	ldr	r3, [pc, #4]	@ (8007f00 <_strtod_r+0x8>)
 8007efa:	f7ff ba25 	b.w	8007348 <_strtod_l>
 8007efe:	bf00      	nop
 8007f00:	2000008c 	.word	0x2000008c

08007f04 <_strtol_l.constprop.0>:
 8007f04:	2b24      	cmp	r3, #36	@ 0x24
 8007f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0a:	4686      	mov	lr, r0
 8007f0c:	4690      	mov	r8, r2
 8007f0e:	d801      	bhi.n	8007f14 <_strtol_l.constprop.0+0x10>
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d106      	bne.n	8007f22 <_strtol_l.constprop.0+0x1e>
 8007f14:	f7fd fdb2 	bl	8005a7c <__errno>
 8007f18:	2316      	movs	r3, #22
 8007f1a:	6003      	str	r3, [r0, #0]
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f22:	460d      	mov	r5, r1
 8007f24:	4833      	ldr	r0, [pc, #204]	@ (8007ff4 <_strtol_l.constprop.0+0xf0>)
 8007f26:	462a      	mov	r2, r5
 8007f28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f2c:	5d06      	ldrb	r6, [r0, r4]
 8007f2e:	f016 0608 	ands.w	r6, r6, #8
 8007f32:	d1f8      	bne.n	8007f26 <_strtol_l.constprop.0+0x22>
 8007f34:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f36:	d12d      	bne.n	8007f94 <_strtol_l.constprop.0+0x90>
 8007f38:	2601      	movs	r6, #1
 8007f3a:	782c      	ldrb	r4, [r5, #0]
 8007f3c:	1c95      	adds	r5, r2, #2
 8007f3e:	f033 0210 	bics.w	r2, r3, #16
 8007f42:	d109      	bne.n	8007f58 <_strtol_l.constprop.0+0x54>
 8007f44:	2c30      	cmp	r4, #48	@ 0x30
 8007f46:	d12a      	bne.n	8007f9e <_strtol_l.constprop.0+0x9a>
 8007f48:	782a      	ldrb	r2, [r5, #0]
 8007f4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f4e:	2a58      	cmp	r2, #88	@ 0x58
 8007f50:	d125      	bne.n	8007f9e <_strtol_l.constprop.0+0x9a>
 8007f52:	2310      	movs	r3, #16
 8007f54:	786c      	ldrb	r4, [r5, #1]
 8007f56:	3502      	adds	r5, #2
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f5e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f62:	fbbc f9f3 	udiv	r9, ip, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f6c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f70:	2f09      	cmp	r7, #9
 8007f72:	d81b      	bhi.n	8007fac <_strtol_l.constprop.0+0xa8>
 8007f74:	463c      	mov	r4, r7
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	dd27      	ble.n	8007fca <_strtol_l.constprop.0+0xc6>
 8007f7a:	1c57      	adds	r7, r2, #1
 8007f7c:	d007      	beq.n	8007f8e <_strtol_l.constprop.0+0x8a>
 8007f7e:	4581      	cmp	r9, r0
 8007f80:	d320      	bcc.n	8007fc4 <_strtol_l.constprop.0+0xc0>
 8007f82:	d101      	bne.n	8007f88 <_strtol_l.constprop.0+0x84>
 8007f84:	45a2      	cmp	sl, r4
 8007f86:	db1d      	blt.n	8007fc4 <_strtol_l.constprop.0+0xc0>
 8007f88:	2201      	movs	r2, #1
 8007f8a:	fb00 4003 	mla	r0, r0, r3, r4
 8007f8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f92:	e7eb      	b.n	8007f6c <_strtol_l.constprop.0+0x68>
 8007f94:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f96:	bf04      	itt	eq
 8007f98:	782c      	ldrbeq	r4, [r5, #0]
 8007f9a:	1c95      	addeq	r5, r2, #2
 8007f9c:	e7cf      	b.n	8007f3e <_strtol_l.constprop.0+0x3a>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1da      	bne.n	8007f58 <_strtol_l.constprop.0+0x54>
 8007fa2:	2c30      	cmp	r4, #48	@ 0x30
 8007fa4:	bf0c      	ite	eq
 8007fa6:	2308      	moveq	r3, #8
 8007fa8:	230a      	movne	r3, #10
 8007faa:	e7d5      	b.n	8007f58 <_strtol_l.constprop.0+0x54>
 8007fac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007fb0:	2f19      	cmp	r7, #25
 8007fb2:	d801      	bhi.n	8007fb8 <_strtol_l.constprop.0+0xb4>
 8007fb4:	3c37      	subs	r4, #55	@ 0x37
 8007fb6:	e7de      	b.n	8007f76 <_strtol_l.constprop.0+0x72>
 8007fb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007fbc:	2f19      	cmp	r7, #25
 8007fbe:	d804      	bhi.n	8007fca <_strtol_l.constprop.0+0xc6>
 8007fc0:	3c57      	subs	r4, #87	@ 0x57
 8007fc2:	e7d8      	b.n	8007f76 <_strtol_l.constprop.0+0x72>
 8007fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc8:	e7e1      	b.n	8007f8e <_strtol_l.constprop.0+0x8a>
 8007fca:	1c53      	adds	r3, r2, #1
 8007fcc:	d108      	bne.n	8007fe0 <_strtol_l.constprop.0+0xdc>
 8007fce:	2322      	movs	r3, #34	@ 0x22
 8007fd0:	4660      	mov	r0, ip
 8007fd2:	f8ce 3000 	str.w	r3, [lr]
 8007fd6:	f1b8 0f00 	cmp.w	r8, #0
 8007fda:	d0a0      	beq.n	8007f1e <_strtol_l.constprop.0+0x1a>
 8007fdc:	1e69      	subs	r1, r5, #1
 8007fde:	e006      	b.n	8007fee <_strtol_l.constprop.0+0xea>
 8007fe0:	b106      	cbz	r6, 8007fe4 <_strtol_l.constprop.0+0xe0>
 8007fe2:	4240      	negs	r0, r0
 8007fe4:	f1b8 0f00 	cmp.w	r8, #0
 8007fe8:	d099      	beq.n	8007f1e <_strtol_l.constprop.0+0x1a>
 8007fea:	2a00      	cmp	r2, #0
 8007fec:	d1f6      	bne.n	8007fdc <_strtol_l.constprop.0+0xd8>
 8007fee:	f8c8 1000 	str.w	r1, [r8]
 8007ff2:	e794      	b.n	8007f1e <_strtol_l.constprop.0+0x1a>
 8007ff4:	0800ad69 	.word	0x0800ad69

08007ff8 <_strtol_r>:
 8007ff8:	f7ff bf84 	b.w	8007f04 <_strtol_l.constprop.0>

08007ffc <__ssputs_r>:
 8007ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008000:	461f      	mov	r7, r3
 8008002:	688e      	ldr	r6, [r1, #8]
 8008004:	4682      	mov	sl, r0
 8008006:	42be      	cmp	r6, r7
 8008008:	460c      	mov	r4, r1
 800800a:	4690      	mov	r8, r2
 800800c:	680b      	ldr	r3, [r1, #0]
 800800e:	d82d      	bhi.n	800806c <__ssputs_r+0x70>
 8008010:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008014:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008018:	d026      	beq.n	8008068 <__ssputs_r+0x6c>
 800801a:	6965      	ldr	r5, [r4, #20]
 800801c:	6909      	ldr	r1, [r1, #16]
 800801e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008022:	eba3 0901 	sub.w	r9, r3, r1
 8008026:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800802a:	1c7b      	adds	r3, r7, #1
 800802c:	444b      	add	r3, r9
 800802e:	106d      	asrs	r5, r5, #1
 8008030:	429d      	cmp	r5, r3
 8008032:	bf38      	it	cc
 8008034:	461d      	movcc	r5, r3
 8008036:	0553      	lsls	r3, r2, #21
 8008038:	d527      	bpl.n	800808a <__ssputs_r+0x8e>
 800803a:	4629      	mov	r1, r5
 800803c:	f7fe fc2e 	bl	800689c <_malloc_r>
 8008040:	4606      	mov	r6, r0
 8008042:	b360      	cbz	r0, 800809e <__ssputs_r+0xa2>
 8008044:	464a      	mov	r2, r9
 8008046:	6921      	ldr	r1, [r4, #16]
 8008048:	f7fd fd53 	bl	8005af2 <memcpy>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008056:	81a3      	strh	r3, [r4, #12]
 8008058:	6126      	str	r6, [r4, #16]
 800805a:	444e      	add	r6, r9
 800805c:	6026      	str	r6, [r4, #0]
 800805e:	463e      	mov	r6, r7
 8008060:	6165      	str	r5, [r4, #20]
 8008062:	eba5 0509 	sub.w	r5, r5, r9
 8008066:	60a5      	str	r5, [r4, #8]
 8008068:	42be      	cmp	r6, r7
 800806a:	d900      	bls.n	800806e <__ssputs_r+0x72>
 800806c:	463e      	mov	r6, r7
 800806e:	4632      	mov	r2, r6
 8008070:	4641      	mov	r1, r8
 8008072:	6820      	ldr	r0, [r4, #0]
 8008074:	f000 fb63 	bl	800873e <memmove>
 8008078:	2000      	movs	r0, #0
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	1b9b      	subs	r3, r3, r6
 800807e:	60a3      	str	r3, [r4, #8]
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	4433      	add	r3, r6
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808a:	462a      	mov	r2, r5
 800808c:	f000 ff39 	bl	8008f02 <_realloc_r>
 8008090:	4606      	mov	r6, r0
 8008092:	2800      	cmp	r0, #0
 8008094:	d1e0      	bne.n	8008058 <__ssputs_r+0x5c>
 8008096:	4650      	mov	r0, sl
 8008098:	6921      	ldr	r1, [r4, #16]
 800809a:	f7fe fb8d 	bl	80067b8 <_free_r>
 800809e:	230c      	movs	r3, #12
 80080a0:	f8ca 3000 	str.w	r3, [sl]
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f04f 30ff 	mov.w	r0, #4294967295
 80080aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ae:	81a3      	strh	r3, [r4, #12]
 80080b0:	e7e9      	b.n	8008086 <__ssputs_r+0x8a>
	...

080080b4 <_svfiprintf_r>:
 80080b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b8:	4698      	mov	r8, r3
 80080ba:	898b      	ldrh	r3, [r1, #12]
 80080bc:	4607      	mov	r7, r0
 80080be:	061b      	lsls	r3, r3, #24
 80080c0:	460d      	mov	r5, r1
 80080c2:	4614      	mov	r4, r2
 80080c4:	b09d      	sub	sp, #116	@ 0x74
 80080c6:	d510      	bpl.n	80080ea <_svfiprintf_r+0x36>
 80080c8:	690b      	ldr	r3, [r1, #16]
 80080ca:	b973      	cbnz	r3, 80080ea <_svfiprintf_r+0x36>
 80080cc:	2140      	movs	r1, #64	@ 0x40
 80080ce:	f7fe fbe5 	bl	800689c <_malloc_r>
 80080d2:	6028      	str	r0, [r5, #0]
 80080d4:	6128      	str	r0, [r5, #16]
 80080d6:	b930      	cbnz	r0, 80080e6 <_svfiprintf_r+0x32>
 80080d8:	230c      	movs	r3, #12
 80080da:	603b      	str	r3, [r7, #0]
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	b01d      	add	sp, #116	@ 0x74
 80080e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e6:	2340      	movs	r3, #64	@ 0x40
 80080e8:	616b      	str	r3, [r5, #20]
 80080ea:	2300      	movs	r3, #0
 80080ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ee:	2320      	movs	r3, #32
 80080f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080f4:	2330      	movs	r3, #48	@ 0x30
 80080f6:	f04f 0901 	mov.w	r9, #1
 80080fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80080fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008298 <_svfiprintf_r+0x1e4>
 8008102:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008106:	4623      	mov	r3, r4
 8008108:	469a      	mov	sl, r3
 800810a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800810e:	b10a      	cbz	r2, 8008114 <_svfiprintf_r+0x60>
 8008110:	2a25      	cmp	r2, #37	@ 0x25
 8008112:	d1f9      	bne.n	8008108 <_svfiprintf_r+0x54>
 8008114:	ebba 0b04 	subs.w	fp, sl, r4
 8008118:	d00b      	beq.n	8008132 <_svfiprintf_r+0x7e>
 800811a:	465b      	mov	r3, fp
 800811c:	4622      	mov	r2, r4
 800811e:	4629      	mov	r1, r5
 8008120:	4638      	mov	r0, r7
 8008122:	f7ff ff6b 	bl	8007ffc <__ssputs_r>
 8008126:	3001      	adds	r0, #1
 8008128:	f000 80a7 	beq.w	800827a <_svfiprintf_r+0x1c6>
 800812c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800812e:	445a      	add	r2, fp
 8008130:	9209      	str	r2, [sp, #36]	@ 0x24
 8008132:	f89a 3000 	ldrb.w	r3, [sl]
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 809f 	beq.w	800827a <_svfiprintf_r+0x1c6>
 800813c:	2300      	movs	r3, #0
 800813e:	f04f 32ff 	mov.w	r2, #4294967295
 8008142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008146:	f10a 0a01 	add.w	sl, sl, #1
 800814a:	9304      	str	r3, [sp, #16]
 800814c:	9307      	str	r3, [sp, #28]
 800814e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008152:	931a      	str	r3, [sp, #104]	@ 0x68
 8008154:	4654      	mov	r4, sl
 8008156:	2205      	movs	r2, #5
 8008158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815c:	484e      	ldr	r0, [pc, #312]	@ (8008298 <_svfiprintf_r+0x1e4>)
 800815e:	f7fd fcba 	bl	8005ad6 <memchr>
 8008162:	9a04      	ldr	r2, [sp, #16]
 8008164:	b9d8      	cbnz	r0, 800819e <_svfiprintf_r+0xea>
 8008166:	06d0      	lsls	r0, r2, #27
 8008168:	bf44      	itt	mi
 800816a:	2320      	movmi	r3, #32
 800816c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008170:	0711      	lsls	r1, r2, #28
 8008172:	bf44      	itt	mi
 8008174:	232b      	movmi	r3, #43	@ 0x2b
 8008176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800817a:	f89a 3000 	ldrb.w	r3, [sl]
 800817e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008180:	d015      	beq.n	80081ae <_svfiprintf_r+0xfa>
 8008182:	4654      	mov	r4, sl
 8008184:	2000      	movs	r0, #0
 8008186:	f04f 0c0a 	mov.w	ip, #10
 800818a:	9a07      	ldr	r2, [sp, #28]
 800818c:	4621      	mov	r1, r4
 800818e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008192:	3b30      	subs	r3, #48	@ 0x30
 8008194:	2b09      	cmp	r3, #9
 8008196:	d94b      	bls.n	8008230 <_svfiprintf_r+0x17c>
 8008198:	b1b0      	cbz	r0, 80081c8 <_svfiprintf_r+0x114>
 800819a:	9207      	str	r2, [sp, #28]
 800819c:	e014      	b.n	80081c8 <_svfiprintf_r+0x114>
 800819e:	eba0 0308 	sub.w	r3, r0, r8
 80081a2:	fa09 f303 	lsl.w	r3, r9, r3
 80081a6:	4313      	orrs	r3, r2
 80081a8:	46a2      	mov	sl, r4
 80081aa:	9304      	str	r3, [sp, #16]
 80081ac:	e7d2      	b.n	8008154 <_svfiprintf_r+0xa0>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	1d19      	adds	r1, r3, #4
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	9103      	str	r1, [sp, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bfbb      	ittet	lt
 80081ba:	425b      	neglt	r3, r3
 80081bc:	f042 0202 	orrlt.w	r2, r2, #2
 80081c0:	9307      	strge	r3, [sp, #28]
 80081c2:	9307      	strlt	r3, [sp, #28]
 80081c4:	bfb8      	it	lt
 80081c6:	9204      	strlt	r2, [sp, #16]
 80081c8:	7823      	ldrb	r3, [r4, #0]
 80081ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80081cc:	d10a      	bne.n	80081e4 <_svfiprintf_r+0x130>
 80081ce:	7863      	ldrb	r3, [r4, #1]
 80081d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80081d2:	d132      	bne.n	800823a <_svfiprintf_r+0x186>
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	3402      	adds	r4, #2
 80081d8:	1d1a      	adds	r2, r3, #4
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	9203      	str	r2, [sp, #12]
 80081de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081e2:	9305      	str	r3, [sp, #20]
 80081e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800829c <_svfiprintf_r+0x1e8>
 80081e8:	2203      	movs	r2, #3
 80081ea:	4650      	mov	r0, sl
 80081ec:	7821      	ldrb	r1, [r4, #0]
 80081ee:	f7fd fc72 	bl	8005ad6 <memchr>
 80081f2:	b138      	cbz	r0, 8008204 <_svfiprintf_r+0x150>
 80081f4:	2240      	movs	r2, #64	@ 0x40
 80081f6:	9b04      	ldr	r3, [sp, #16]
 80081f8:	eba0 000a 	sub.w	r0, r0, sl
 80081fc:	4082      	lsls	r2, r0
 80081fe:	4313      	orrs	r3, r2
 8008200:	3401      	adds	r4, #1
 8008202:	9304      	str	r3, [sp, #16]
 8008204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008208:	2206      	movs	r2, #6
 800820a:	4825      	ldr	r0, [pc, #148]	@ (80082a0 <_svfiprintf_r+0x1ec>)
 800820c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008210:	f7fd fc61 	bl	8005ad6 <memchr>
 8008214:	2800      	cmp	r0, #0
 8008216:	d036      	beq.n	8008286 <_svfiprintf_r+0x1d2>
 8008218:	4b22      	ldr	r3, [pc, #136]	@ (80082a4 <_svfiprintf_r+0x1f0>)
 800821a:	bb1b      	cbnz	r3, 8008264 <_svfiprintf_r+0x1b0>
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	3307      	adds	r3, #7
 8008220:	f023 0307 	bic.w	r3, r3, #7
 8008224:	3308      	adds	r3, #8
 8008226:	9303      	str	r3, [sp, #12]
 8008228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822a:	4433      	add	r3, r6
 800822c:	9309      	str	r3, [sp, #36]	@ 0x24
 800822e:	e76a      	b.n	8008106 <_svfiprintf_r+0x52>
 8008230:	460c      	mov	r4, r1
 8008232:	2001      	movs	r0, #1
 8008234:	fb0c 3202 	mla	r2, ip, r2, r3
 8008238:	e7a8      	b.n	800818c <_svfiprintf_r+0xd8>
 800823a:	2300      	movs	r3, #0
 800823c:	f04f 0c0a 	mov.w	ip, #10
 8008240:	4619      	mov	r1, r3
 8008242:	3401      	adds	r4, #1
 8008244:	9305      	str	r3, [sp, #20]
 8008246:	4620      	mov	r0, r4
 8008248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800824c:	3a30      	subs	r2, #48	@ 0x30
 800824e:	2a09      	cmp	r2, #9
 8008250:	d903      	bls.n	800825a <_svfiprintf_r+0x1a6>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0c6      	beq.n	80081e4 <_svfiprintf_r+0x130>
 8008256:	9105      	str	r1, [sp, #20]
 8008258:	e7c4      	b.n	80081e4 <_svfiprintf_r+0x130>
 800825a:	4604      	mov	r4, r0
 800825c:	2301      	movs	r3, #1
 800825e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008262:	e7f0      	b.n	8008246 <_svfiprintf_r+0x192>
 8008264:	ab03      	add	r3, sp, #12
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	462a      	mov	r2, r5
 800826a:	4638      	mov	r0, r7
 800826c:	4b0e      	ldr	r3, [pc, #56]	@ (80082a8 <_svfiprintf_r+0x1f4>)
 800826e:	a904      	add	r1, sp, #16
 8008270:	f7fc fbba 	bl	80049e8 <_printf_float>
 8008274:	1c42      	adds	r2, r0, #1
 8008276:	4606      	mov	r6, r0
 8008278:	d1d6      	bne.n	8008228 <_svfiprintf_r+0x174>
 800827a:	89ab      	ldrh	r3, [r5, #12]
 800827c:	065b      	lsls	r3, r3, #25
 800827e:	f53f af2d 	bmi.w	80080dc <_svfiprintf_r+0x28>
 8008282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008284:	e72c      	b.n	80080e0 <_svfiprintf_r+0x2c>
 8008286:	ab03      	add	r3, sp, #12
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	462a      	mov	r2, r5
 800828c:	4638      	mov	r0, r7
 800828e:	4b06      	ldr	r3, [pc, #24]	@ (80082a8 <_svfiprintf_r+0x1f4>)
 8008290:	a904      	add	r1, sp, #16
 8008292:	f7fc fe47 	bl	8004f24 <_printf_i>
 8008296:	e7ed      	b.n	8008274 <_svfiprintf_r+0x1c0>
 8008298:	0800ae69 	.word	0x0800ae69
 800829c:	0800ae6f 	.word	0x0800ae6f
 80082a0:	0800ae73 	.word	0x0800ae73
 80082a4:	080049e9 	.word	0x080049e9
 80082a8:	08007ffd 	.word	0x08007ffd

080082ac <__sfputc_r>:
 80082ac:	6893      	ldr	r3, [r2, #8]
 80082ae:	b410      	push	{r4}
 80082b0:	3b01      	subs	r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	6093      	str	r3, [r2, #8]
 80082b6:	da07      	bge.n	80082c8 <__sfputc_r+0x1c>
 80082b8:	6994      	ldr	r4, [r2, #24]
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	db01      	blt.n	80082c2 <__sfputc_r+0x16>
 80082be:	290a      	cmp	r1, #10
 80082c0:	d102      	bne.n	80082c8 <__sfputc_r+0x1c>
 80082c2:	bc10      	pop	{r4}
 80082c4:	f7fd baf3 	b.w	80058ae <__swbuf_r>
 80082c8:	6813      	ldr	r3, [r2, #0]
 80082ca:	1c58      	adds	r0, r3, #1
 80082cc:	6010      	str	r0, [r2, #0]
 80082ce:	7019      	strb	r1, [r3, #0]
 80082d0:	4608      	mov	r0, r1
 80082d2:	bc10      	pop	{r4}
 80082d4:	4770      	bx	lr

080082d6 <__sfputs_r>:
 80082d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d8:	4606      	mov	r6, r0
 80082da:	460f      	mov	r7, r1
 80082dc:	4614      	mov	r4, r2
 80082de:	18d5      	adds	r5, r2, r3
 80082e0:	42ac      	cmp	r4, r5
 80082e2:	d101      	bne.n	80082e8 <__sfputs_r+0x12>
 80082e4:	2000      	movs	r0, #0
 80082e6:	e007      	b.n	80082f8 <__sfputs_r+0x22>
 80082e8:	463a      	mov	r2, r7
 80082ea:	4630      	mov	r0, r6
 80082ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082f0:	f7ff ffdc 	bl	80082ac <__sfputc_r>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d1f3      	bne.n	80082e0 <__sfputs_r+0xa>
 80082f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082fc <_vfiprintf_r>:
 80082fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	460d      	mov	r5, r1
 8008302:	4614      	mov	r4, r2
 8008304:	4698      	mov	r8, r3
 8008306:	4606      	mov	r6, r0
 8008308:	b09d      	sub	sp, #116	@ 0x74
 800830a:	b118      	cbz	r0, 8008314 <_vfiprintf_r+0x18>
 800830c:	6a03      	ldr	r3, [r0, #32]
 800830e:	b90b      	cbnz	r3, 8008314 <_vfiprintf_r+0x18>
 8008310:	f7fd f9c4 	bl	800569c <__sinit>
 8008314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008316:	07d9      	lsls	r1, r3, #31
 8008318:	d405      	bmi.n	8008326 <_vfiprintf_r+0x2a>
 800831a:	89ab      	ldrh	r3, [r5, #12]
 800831c:	059a      	lsls	r2, r3, #22
 800831e:	d402      	bmi.n	8008326 <_vfiprintf_r+0x2a>
 8008320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008322:	f7fd fbd6 	bl	8005ad2 <__retarget_lock_acquire_recursive>
 8008326:	89ab      	ldrh	r3, [r5, #12]
 8008328:	071b      	lsls	r3, r3, #28
 800832a:	d501      	bpl.n	8008330 <_vfiprintf_r+0x34>
 800832c:	692b      	ldr	r3, [r5, #16]
 800832e:	b99b      	cbnz	r3, 8008358 <_vfiprintf_r+0x5c>
 8008330:	4629      	mov	r1, r5
 8008332:	4630      	mov	r0, r6
 8008334:	f7fd fafa 	bl	800592c <__swsetup_r>
 8008338:	b170      	cbz	r0, 8008358 <_vfiprintf_r+0x5c>
 800833a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800833c:	07dc      	lsls	r4, r3, #31
 800833e:	d504      	bpl.n	800834a <_vfiprintf_r+0x4e>
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
 8008344:	b01d      	add	sp, #116	@ 0x74
 8008346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834a:	89ab      	ldrh	r3, [r5, #12]
 800834c:	0598      	lsls	r0, r3, #22
 800834e:	d4f7      	bmi.n	8008340 <_vfiprintf_r+0x44>
 8008350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008352:	f7fd fbbf 	bl	8005ad4 <__retarget_lock_release_recursive>
 8008356:	e7f3      	b.n	8008340 <_vfiprintf_r+0x44>
 8008358:	2300      	movs	r3, #0
 800835a:	9309      	str	r3, [sp, #36]	@ 0x24
 800835c:	2320      	movs	r3, #32
 800835e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008362:	2330      	movs	r3, #48	@ 0x30
 8008364:	f04f 0901 	mov.w	r9, #1
 8008368:	f8cd 800c 	str.w	r8, [sp, #12]
 800836c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008518 <_vfiprintf_r+0x21c>
 8008370:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008374:	4623      	mov	r3, r4
 8008376:	469a      	mov	sl, r3
 8008378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800837c:	b10a      	cbz	r2, 8008382 <_vfiprintf_r+0x86>
 800837e:	2a25      	cmp	r2, #37	@ 0x25
 8008380:	d1f9      	bne.n	8008376 <_vfiprintf_r+0x7a>
 8008382:	ebba 0b04 	subs.w	fp, sl, r4
 8008386:	d00b      	beq.n	80083a0 <_vfiprintf_r+0xa4>
 8008388:	465b      	mov	r3, fp
 800838a:	4622      	mov	r2, r4
 800838c:	4629      	mov	r1, r5
 800838e:	4630      	mov	r0, r6
 8008390:	f7ff ffa1 	bl	80082d6 <__sfputs_r>
 8008394:	3001      	adds	r0, #1
 8008396:	f000 80a7 	beq.w	80084e8 <_vfiprintf_r+0x1ec>
 800839a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800839c:	445a      	add	r2, fp
 800839e:	9209      	str	r2, [sp, #36]	@ 0x24
 80083a0:	f89a 3000 	ldrb.w	r3, [sl]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 809f 	beq.w	80084e8 <_vfiprintf_r+0x1ec>
 80083aa:	2300      	movs	r3, #0
 80083ac:	f04f 32ff 	mov.w	r2, #4294967295
 80083b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b4:	f10a 0a01 	add.w	sl, sl, #1
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	9307      	str	r3, [sp, #28]
 80083bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80083c2:	4654      	mov	r4, sl
 80083c4:	2205      	movs	r2, #5
 80083c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ca:	4853      	ldr	r0, [pc, #332]	@ (8008518 <_vfiprintf_r+0x21c>)
 80083cc:	f7fd fb83 	bl	8005ad6 <memchr>
 80083d0:	9a04      	ldr	r2, [sp, #16]
 80083d2:	b9d8      	cbnz	r0, 800840c <_vfiprintf_r+0x110>
 80083d4:	06d1      	lsls	r1, r2, #27
 80083d6:	bf44      	itt	mi
 80083d8:	2320      	movmi	r3, #32
 80083da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083de:	0713      	lsls	r3, r2, #28
 80083e0:	bf44      	itt	mi
 80083e2:	232b      	movmi	r3, #43	@ 0x2b
 80083e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083e8:	f89a 3000 	ldrb.w	r3, [sl]
 80083ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ee:	d015      	beq.n	800841c <_vfiprintf_r+0x120>
 80083f0:	4654      	mov	r4, sl
 80083f2:	2000      	movs	r0, #0
 80083f4:	f04f 0c0a 	mov.w	ip, #10
 80083f8:	9a07      	ldr	r2, [sp, #28]
 80083fa:	4621      	mov	r1, r4
 80083fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008400:	3b30      	subs	r3, #48	@ 0x30
 8008402:	2b09      	cmp	r3, #9
 8008404:	d94b      	bls.n	800849e <_vfiprintf_r+0x1a2>
 8008406:	b1b0      	cbz	r0, 8008436 <_vfiprintf_r+0x13a>
 8008408:	9207      	str	r2, [sp, #28]
 800840a:	e014      	b.n	8008436 <_vfiprintf_r+0x13a>
 800840c:	eba0 0308 	sub.w	r3, r0, r8
 8008410:	fa09 f303 	lsl.w	r3, r9, r3
 8008414:	4313      	orrs	r3, r2
 8008416:	46a2      	mov	sl, r4
 8008418:	9304      	str	r3, [sp, #16]
 800841a:	e7d2      	b.n	80083c2 <_vfiprintf_r+0xc6>
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	1d19      	adds	r1, r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	9103      	str	r1, [sp, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	bfbb      	ittet	lt
 8008428:	425b      	neglt	r3, r3
 800842a:	f042 0202 	orrlt.w	r2, r2, #2
 800842e:	9307      	strge	r3, [sp, #28]
 8008430:	9307      	strlt	r3, [sp, #28]
 8008432:	bfb8      	it	lt
 8008434:	9204      	strlt	r2, [sp, #16]
 8008436:	7823      	ldrb	r3, [r4, #0]
 8008438:	2b2e      	cmp	r3, #46	@ 0x2e
 800843a:	d10a      	bne.n	8008452 <_vfiprintf_r+0x156>
 800843c:	7863      	ldrb	r3, [r4, #1]
 800843e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008440:	d132      	bne.n	80084a8 <_vfiprintf_r+0x1ac>
 8008442:	9b03      	ldr	r3, [sp, #12]
 8008444:	3402      	adds	r4, #2
 8008446:	1d1a      	adds	r2, r3, #4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	9203      	str	r2, [sp, #12]
 800844c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800851c <_vfiprintf_r+0x220>
 8008456:	2203      	movs	r2, #3
 8008458:	4650      	mov	r0, sl
 800845a:	7821      	ldrb	r1, [r4, #0]
 800845c:	f7fd fb3b 	bl	8005ad6 <memchr>
 8008460:	b138      	cbz	r0, 8008472 <_vfiprintf_r+0x176>
 8008462:	2240      	movs	r2, #64	@ 0x40
 8008464:	9b04      	ldr	r3, [sp, #16]
 8008466:	eba0 000a 	sub.w	r0, r0, sl
 800846a:	4082      	lsls	r2, r0
 800846c:	4313      	orrs	r3, r2
 800846e:	3401      	adds	r4, #1
 8008470:	9304      	str	r3, [sp, #16]
 8008472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008476:	2206      	movs	r2, #6
 8008478:	4829      	ldr	r0, [pc, #164]	@ (8008520 <_vfiprintf_r+0x224>)
 800847a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800847e:	f7fd fb2a 	bl	8005ad6 <memchr>
 8008482:	2800      	cmp	r0, #0
 8008484:	d03f      	beq.n	8008506 <_vfiprintf_r+0x20a>
 8008486:	4b27      	ldr	r3, [pc, #156]	@ (8008524 <_vfiprintf_r+0x228>)
 8008488:	bb1b      	cbnz	r3, 80084d2 <_vfiprintf_r+0x1d6>
 800848a:	9b03      	ldr	r3, [sp, #12]
 800848c:	3307      	adds	r3, #7
 800848e:	f023 0307 	bic.w	r3, r3, #7
 8008492:	3308      	adds	r3, #8
 8008494:	9303      	str	r3, [sp, #12]
 8008496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008498:	443b      	add	r3, r7
 800849a:	9309      	str	r3, [sp, #36]	@ 0x24
 800849c:	e76a      	b.n	8008374 <_vfiprintf_r+0x78>
 800849e:	460c      	mov	r4, r1
 80084a0:	2001      	movs	r0, #1
 80084a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a6:	e7a8      	b.n	80083fa <_vfiprintf_r+0xfe>
 80084a8:	2300      	movs	r3, #0
 80084aa:	f04f 0c0a 	mov.w	ip, #10
 80084ae:	4619      	mov	r1, r3
 80084b0:	3401      	adds	r4, #1
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	4620      	mov	r0, r4
 80084b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ba:	3a30      	subs	r2, #48	@ 0x30
 80084bc:	2a09      	cmp	r2, #9
 80084be:	d903      	bls.n	80084c8 <_vfiprintf_r+0x1cc>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0c6      	beq.n	8008452 <_vfiprintf_r+0x156>
 80084c4:	9105      	str	r1, [sp, #20]
 80084c6:	e7c4      	b.n	8008452 <_vfiprintf_r+0x156>
 80084c8:	4604      	mov	r4, r0
 80084ca:	2301      	movs	r3, #1
 80084cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80084d0:	e7f0      	b.n	80084b4 <_vfiprintf_r+0x1b8>
 80084d2:	ab03      	add	r3, sp, #12
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	462a      	mov	r2, r5
 80084d8:	4630      	mov	r0, r6
 80084da:	4b13      	ldr	r3, [pc, #76]	@ (8008528 <_vfiprintf_r+0x22c>)
 80084dc:	a904      	add	r1, sp, #16
 80084de:	f7fc fa83 	bl	80049e8 <_printf_float>
 80084e2:	4607      	mov	r7, r0
 80084e4:	1c78      	adds	r0, r7, #1
 80084e6:	d1d6      	bne.n	8008496 <_vfiprintf_r+0x19a>
 80084e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084ea:	07d9      	lsls	r1, r3, #31
 80084ec:	d405      	bmi.n	80084fa <_vfiprintf_r+0x1fe>
 80084ee:	89ab      	ldrh	r3, [r5, #12]
 80084f0:	059a      	lsls	r2, r3, #22
 80084f2:	d402      	bmi.n	80084fa <_vfiprintf_r+0x1fe>
 80084f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084f6:	f7fd faed 	bl	8005ad4 <__retarget_lock_release_recursive>
 80084fa:	89ab      	ldrh	r3, [r5, #12]
 80084fc:	065b      	lsls	r3, r3, #25
 80084fe:	f53f af1f 	bmi.w	8008340 <_vfiprintf_r+0x44>
 8008502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008504:	e71e      	b.n	8008344 <_vfiprintf_r+0x48>
 8008506:	ab03      	add	r3, sp, #12
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	462a      	mov	r2, r5
 800850c:	4630      	mov	r0, r6
 800850e:	4b06      	ldr	r3, [pc, #24]	@ (8008528 <_vfiprintf_r+0x22c>)
 8008510:	a904      	add	r1, sp, #16
 8008512:	f7fc fd07 	bl	8004f24 <_printf_i>
 8008516:	e7e4      	b.n	80084e2 <_vfiprintf_r+0x1e6>
 8008518:	0800ae69 	.word	0x0800ae69
 800851c:	0800ae6f 	.word	0x0800ae6f
 8008520:	0800ae73 	.word	0x0800ae73
 8008524:	080049e9 	.word	0x080049e9
 8008528:	080082d7 	.word	0x080082d7

0800852c <__sflush_r>:
 800852c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	0716      	lsls	r6, r2, #28
 8008534:	4605      	mov	r5, r0
 8008536:	460c      	mov	r4, r1
 8008538:	d454      	bmi.n	80085e4 <__sflush_r+0xb8>
 800853a:	684b      	ldr	r3, [r1, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	dc02      	bgt.n	8008546 <__sflush_r+0x1a>
 8008540:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	dd48      	ble.n	80085d8 <__sflush_r+0xac>
 8008546:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008548:	2e00      	cmp	r6, #0
 800854a:	d045      	beq.n	80085d8 <__sflush_r+0xac>
 800854c:	2300      	movs	r3, #0
 800854e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008552:	682f      	ldr	r7, [r5, #0]
 8008554:	6a21      	ldr	r1, [r4, #32]
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	d030      	beq.n	80085bc <__sflush_r+0x90>
 800855a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	0759      	lsls	r1, r3, #29
 8008560:	d505      	bpl.n	800856e <__sflush_r+0x42>
 8008562:	6863      	ldr	r3, [r4, #4]
 8008564:	1ad2      	subs	r2, r2, r3
 8008566:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008568:	b10b      	cbz	r3, 800856e <__sflush_r+0x42>
 800856a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800856c:	1ad2      	subs	r2, r2, r3
 800856e:	2300      	movs	r3, #0
 8008570:	4628      	mov	r0, r5
 8008572:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008574:	6a21      	ldr	r1, [r4, #32]
 8008576:	47b0      	blx	r6
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	d106      	bne.n	800858c <__sflush_r+0x60>
 800857e:	6829      	ldr	r1, [r5, #0]
 8008580:	291d      	cmp	r1, #29
 8008582:	d82b      	bhi.n	80085dc <__sflush_r+0xb0>
 8008584:	4a28      	ldr	r2, [pc, #160]	@ (8008628 <__sflush_r+0xfc>)
 8008586:	410a      	asrs	r2, r1
 8008588:	07d6      	lsls	r6, r2, #31
 800858a:	d427      	bmi.n	80085dc <__sflush_r+0xb0>
 800858c:	2200      	movs	r2, #0
 800858e:	6062      	str	r2, [r4, #4]
 8008590:	6922      	ldr	r2, [r4, #16]
 8008592:	04d9      	lsls	r1, r3, #19
 8008594:	6022      	str	r2, [r4, #0]
 8008596:	d504      	bpl.n	80085a2 <__sflush_r+0x76>
 8008598:	1c42      	adds	r2, r0, #1
 800859a:	d101      	bne.n	80085a0 <__sflush_r+0x74>
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	b903      	cbnz	r3, 80085a2 <__sflush_r+0x76>
 80085a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80085a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085a4:	602f      	str	r7, [r5, #0]
 80085a6:	b1b9      	cbz	r1, 80085d8 <__sflush_r+0xac>
 80085a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085ac:	4299      	cmp	r1, r3
 80085ae:	d002      	beq.n	80085b6 <__sflush_r+0x8a>
 80085b0:	4628      	mov	r0, r5
 80085b2:	f7fe f901 	bl	80067b8 <_free_r>
 80085b6:	2300      	movs	r3, #0
 80085b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80085ba:	e00d      	b.n	80085d8 <__sflush_r+0xac>
 80085bc:	2301      	movs	r3, #1
 80085be:	4628      	mov	r0, r5
 80085c0:	47b0      	blx	r6
 80085c2:	4602      	mov	r2, r0
 80085c4:	1c50      	adds	r0, r2, #1
 80085c6:	d1c9      	bne.n	800855c <__sflush_r+0x30>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0c6      	beq.n	800855c <__sflush_r+0x30>
 80085ce:	2b1d      	cmp	r3, #29
 80085d0:	d001      	beq.n	80085d6 <__sflush_r+0xaa>
 80085d2:	2b16      	cmp	r3, #22
 80085d4:	d11d      	bne.n	8008612 <__sflush_r+0xe6>
 80085d6:	602f      	str	r7, [r5, #0]
 80085d8:	2000      	movs	r0, #0
 80085da:	e021      	b.n	8008620 <__sflush_r+0xf4>
 80085dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085e0:	b21b      	sxth	r3, r3
 80085e2:	e01a      	b.n	800861a <__sflush_r+0xee>
 80085e4:	690f      	ldr	r7, [r1, #16]
 80085e6:	2f00      	cmp	r7, #0
 80085e8:	d0f6      	beq.n	80085d8 <__sflush_r+0xac>
 80085ea:	0793      	lsls	r3, r2, #30
 80085ec:	bf18      	it	ne
 80085ee:	2300      	movne	r3, #0
 80085f0:	680e      	ldr	r6, [r1, #0]
 80085f2:	bf08      	it	eq
 80085f4:	694b      	ldreq	r3, [r1, #20]
 80085f6:	1bf6      	subs	r6, r6, r7
 80085f8:	600f      	str	r7, [r1, #0]
 80085fa:	608b      	str	r3, [r1, #8]
 80085fc:	2e00      	cmp	r6, #0
 80085fe:	ddeb      	ble.n	80085d8 <__sflush_r+0xac>
 8008600:	4633      	mov	r3, r6
 8008602:	463a      	mov	r2, r7
 8008604:	4628      	mov	r0, r5
 8008606:	6a21      	ldr	r1, [r4, #32]
 8008608:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800860c:	47e0      	blx	ip
 800860e:	2800      	cmp	r0, #0
 8008610:	dc07      	bgt.n	8008622 <__sflush_r+0xf6>
 8008612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861a:	f04f 30ff 	mov.w	r0, #4294967295
 800861e:	81a3      	strh	r3, [r4, #12]
 8008620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008622:	4407      	add	r7, r0
 8008624:	1a36      	subs	r6, r6, r0
 8008626:	e7e9      	b.n	80085fc <__sflush_r+0xd0>
 8008628:	dfbffffe 	.word	0xdfbffffe

0800862c <_fflush_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	690b      	ldr	r3, [r1, #16]
 8008630:	4605      	mov	r5, r0
 8008632:	460c      	mov	r4, r1
 8008634:	b913      	cbnz	r3, 800863c <_fflush_r+0x10>
 8008636:	2500      	movs	r5, #0
 8008638:	4628      	mov	r0, r5
 800863a:	bd38      	pop	{r3, r4, r5, pc}
 800863c:	b118      	cbz	r0, 8008646 <_fflush_r+0x1a>
 800863e:	6a03      	ldr	r3, [r0, #32]
 8008640:	b90b      	cbnz	r3, 8008646 <_fflush_r+0x1a>
 8008642:	f7fd f82b 	bl	800569c <__sinit>
 8008646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0f3      	beq.n	8008636 <_fflush_r+0xa>
 800864e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008650:	07d0      	lsls	r0, r2, #31
 8008652:	d404      	bmi.n	800865e <_fflush_r+0x32>
 8008654:	0599      	lsls	r1, r3, #22
 8008656:	d402      	bmi.n	800865e <_fflush_r+0x32>
 8008658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800865a:	f7fd fa3a 	bl	8005ad2 <__retarget_lock_acquire_recursive>
 800865e:	4628      	mov	r0, r5
 8008660:	4621      	mov	r1, r4
 8008662:	f7ff ff63 	bl	800852c <__sflush_r>
 8008666:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008668:	4605      	mov	r5, r0
 800866a:	07da      	lsls	r2, r3, #31
 800866c:	d4e4      	bmi.n	8008638 <_fflush_r+0xc>
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	059b      	lsls	r3, r3, #22
 8008672:	d4e1      	bmi.n	8008638 <_fflush_r+0xc>
 8008674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008676:	f7fd fa2d 	bl	8005ad4 <__retarget_lock_release_recursive>
 800867a:	e7dd      	b.n	8008638 <_fflush_r+0xc>

0800867c <__swhatbuf_r>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	460c      	mov	r4, r1
 8008680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008684:	4615      	mov	r5, r2
 8008686:	2900      	cmp	r1, #0
 8008688:	461e      	mov	r6, r3
 800868a:	b096      	sub	sp, #88	@ 0x58
 800868c:	da0c      	bge.n	80086a8 <__swhatbuf_r+0x2c>
 800868e:	89a3      	ldrh	r3, [r4, #12]
 8008690:	2100      	movs	r1, #0
 8008692:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008696:	bf14      	ite	ne
 8008698:	2340      	movne	r3, #64	@ 0x40
 800869a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800869e:	2000      	movs	r0, #0
 80086a0:	6031      	str	r1, [r6, #0]
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	b016      	add	sp, #88	@ 0x58
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	466a      	mov	r2, sp
 80086aa:	f000 f875 	bl	8008798 <_fstat_r>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	dbed      	blt.n	800868e <__swhatbuf_r+0x12>
 80086b2:	9901      	ldr	r1, [sp, #4]
 80086b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80086b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80086bc:	4259      	negs	r1, r3
 80086be:	4159      	adcs	r1, r3
 80086c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086c4:	e7eb      	b.n	800869e <__swhatbuf_r+0x22>

080086c6 <__smakebuf_r>:
 80086c6:	898b      	ldrh	r3, [r1, #12]
 80086c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086ca:	079d      	lsls	r5, r3, #30
 80086cc:	4606      	mov	r6, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	d507      	bpl.n	80086e2 <__smakebuf_r+0x1c>
 80086d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80086d6:	6023      	str	r3, [r4, #0]
 80086d8:	6123      	str	r3, [r4, #16]
 80086da:	2301      	movs	r3, #1
 80086dc:	6163      	str	r3, [r4, #20]
 80086de:	b003      	add	sp, #12
 80086e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e2:	466a      	mov	r2, sp
 80086e4:	ab01      	add	r3, sp, #4
 80086e6:	f7ff ffc9 	bl	800867c <__swhatbuf_r>
 80086ea:	9f00      	ldr	r7, [sp, #0]
 80086ec:	4605      	mov	r5, r0
 80086ee:	4639      	mov	r1, r7
 80086f0:	4630      	mov	r0, r6
 80086f2:	f7fe f8d3 	bl	800689c <_malloc_r>
 80086f6:	b948      	cbnz	r0, 800870c <__smakebuf_r+0x46>
 80086f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fc:	059a      	lsls	r2, r3, #22
 80086fe:	d4ee      	bmi.n	80086de <__smakebuf_r+0x18>
 8008700:	f023 0303 	bic.w	r3, r3, #3
 8008704:	f043 0302 	orr.w	r3, r3, #2
 8008708:	81a3      	strh	r3, [r4, #12]
 800870a:	e7e2      	b.n	80086d2 <__smakebuf_r+0xc>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008716:	81a3      	strh	r3, [r4, #12]
 8008718:	9b01      	ldr	r3, [sp, #4]
 800871a:	6020      	str	r0, [r4, #0]
 800871c:	b15b      	cbz	r3, 8008736 <__smakebuf_r+0x70>
 800871e:	4630      	mov	r0, r6
 8008720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008724:	f000 f84a 	bl	80087bc <_isatty_r>
 8008728:	b128      	cbz	r0, 8008736 <__smakebuf_r+0x70>
 800872a:	89a3      	ldrh	r3, [r4, #12]
 800872c:	f023 0303 	bic.w	r3, r3, #3
 8008730:	f043 0301 	orr.w	r3, r3, #1
 8008734:	81a3      	strh	r3, [r4, #12]
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	431d      	orrs	r5, r3
 800873a:	81a5      	strh	r5, [r4, #12]
 800873c:	e7cf      	b.n	80086de <__smakebuf_r+0x18>

0800873e <memmove>:
 800873e:	4288      	cmp	r0, r1
 8008740:	b510      	push	{r4, lr}
 8008742:	eb01 0402 	add.w	r4, r1, r2
 8008746:	d902      	bls.n	800874e <memmove+0x10>
 8008748:	4284      	cmp	r4, r0
 800874a:	4623      	mov	r3, r4
 800874c:	d807      	bhi.n	800875e <memmove+0x20>
 800874e:	1e43      	subs	r3, r0, #1
 8008750:	42a1      	cmp	r1, r4
 8008752:	d008      	beq.n	8008766 <memmove+0x28>
 8008754:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008758:	f803 2f01 	strb.w	r2, [r3, #1]!
 800875c:	e7f8      	b.n	8008750 <memmove+0x12>
 800875e:	4601      	mov	r1, r0
 8008760:	4402      	add	r2, r0
 8008762:	428a      	cmp	r2, r1
 8008764:	d100      	bne.n	8008768 <memmove+0x2a>
 8008766:	bd10      	pop	{r4, pc}
 8008768:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800876c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008770:	e7f7      	b.n	8008762 <memmove+0x24>

08008772 <strncmp>:
 8008772:	b510      	push	{r4, lr}
 8008774:	b16a      	cbz	r2, 8008792 <strncmp+0x20>
 8008776:	3901      	subs	r1, #1
 8008778:	1884      	adds	r4, r0, r2
 800877a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800877e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008782:	429a      	cmp	r2, r3
 8008784:	d103      	bne.n	800878e <strncmp+0x1c>
 8008786:	42a0      	cmp	r0, r4
 8008788:	d001      	beq.n	800878e <strncmp+0x1c>
 800878a:	2a00      	cmp	r2, #0
 800878c:	d1f5      	bne.n	800877a <strncmp+0x8>
 800878e:	1ad0      	subs	r0, r2, r3
 8008790:	bd10      	pop	{r4, pc}
 8008792:	4610      	mov	r0, r2
 8008794:	e7fc      	b.n	8008790 <strncmp+0x1e>
	...

08008798 <_fstat_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	2300      	movs	r3, #0
 800879c:	4d06      	ldr	r5, [pc, #24]	@ (80087b8 <_fstat_r+0x20>)
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	4611      	mov	r1, r2
 80087a4:	602b      	str	r3, [r5, #0]
 80087a6:	f7f9 f86f 	bl	8001888 <_fstat>
 80087aa:	1c43      	adds	r3, r0, #1
 80087ac:	d102      	bne.n	80087b4 <_fstat_r+0x1c>
 80087ae:	682b      	ldr	r3, [r5, #0]
 80087b0:	b103      	cbz	r3, 80087b4 <_fstat_r+0x1c>
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	bd38      	pop	{r3, r4, r5, pc}
 80087b6:	bf00      	nop
 80087b8:	20004284 	.word	0x20004284

080087bc <_isatty_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	2300      	movs	r3, #0
 80087c0:	4d05      	ldr	r5, [pc, #20]	@ (80087d8 <_isatty_r+0x1c>)
 80087c2:	4604      	mov	r4, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	602b      	str	r3, [r5, #0]
 80087c8:	f7f9 f86d 	bl	80018a6 <_isatty>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_isatty_r+0x1a>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_isatty_r+0x1a>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	20004284 	.word	0x20004284

080087dc <_sbrk_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	2300      	movs	r3, #0
 80087e0:	4d05      	ldr	r5, [pc, #20]	@ (80087f8 <_sbrk_r+0x1c>)
 80087e2:	4604      	mov	r4, r0
 80087e4:	4608      	mov	r0, r1
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	f7f9 f874 	bl	80018d4 <_sbrk>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_sbrk_r+0x1a>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_sbrk_r+0x1a>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	20004284 	.word	0x20004284

080087fc <nan>:
 80087fc:	2000      	movs	r0, #0
 80087fe:	4901      	ldr	r1, [pc, #4]	@ (8008804 <nan+0x8>)
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	7ff80000 	.word	0x7ff80000

08008808 <__assert_func>:
 8008808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800880a:	4614      	mov	r4, r2
 800880c:	461a      	mov	r2, r3
 800880e:	4b09      	ldr	r3, [pc, #36]	@ (8008834 <__assert_func+0x2c>)
 8008810:	4605      	mov	r5, r0
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68d8      	ldr	r0, [r3, #12]
 8008816:	b954      	cbnz	r4, 800882e <__assert_func+0x26>
 8008818:	4b07      	ldr	r3, [pc, #28]	@ (8008838 <__assert_func+0x30>)
 800881a:	461c      	mov	r4, r3
 800881c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008820:	9100      	str	r1, [sp, #0]
 8008822:	462b      	mov	r3, r5
 8008824:	4905      	ldr	r1, [pc, #20]	@ (800883c <__assert_func+0x34>)
 8008826:	f000 fba7 	bl	8008f78 <fiprintf>
 800882a:	f000 fbb7 	bl	8008f9c <abort>
 800882e:	4b04      	ldr	r3, [pc, #16]	@ (8008840 <__assert_func+0x38>)
 8008830:	e7f4      	b.n	800881c <__assert_func+0x14>
 8008832:	bf00      	nop
 8008834:	2000003c 	.word	0x2000003c
 8008838:	0800aebd 	.word	0x0800aebd
 800883c:	0800ae8f 	.word	0x0800ae8f
 8008840:	0800ae82 	.word	0x0800ae82

08008844 <_calloc_r>:
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	fba1 5402 	umull	r5, r4, r1, r2
 800884a:	b93c      	cbnz	r4, 800885c <_calloc_r+0x18>
 800884c:	4629      	mov	r1, r5
 800884e:	f7fe f825 	bl	800689c <_malloc_r>
 8008852:	4606      	mov	r6, r0
 8008854:	b928      	cbnz	r0, 8008862 <_calloc_r+0x1e>
 8008856:	2600      	movs	r6, #0
 8008858:	4630      	mov	r0, r6
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	220c      	movs	r2, #12
 800885e:	6002      	str	r2, [r0, #0]
 8008860:	e7f9      	b.n	8008856 <_calloc_r+0x12>
 8008862:	462a      	mov	r2, r5
 8008864:	4621      	mov	r1, r4
 8008866:	f7fd f8b7 	bl	80059d8 <memset>
 800886a:	e7f5      	b.n	8008858 <_calloc_r+0x14>

0800886c <rshift>:
 800886c:	6903      	ldr	r3, [r0, #16]
 800886e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008872:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008876:	f100 0414 	add.w	r4, r0, #20
 800887a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800887e:	dd46      	ble.n	800890e <rshift+0xa2>
 8008880:	f011 011f 	ands.w	r1, r1, #31
 8008884:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008888:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800888c:	d10c      	bne.n	80088a8 <rshift+0x3c>
 800888e:	4629      	mov	r1, r5
 8008890:	f100 0710 	add.w	r7, r0, #16
 8008894:	42b1      	cmp	r1, r6
 8008896:	d335      	bcc.n	8008904 <rshift+0x98>
 8008898:	1a9b      	subs	r3, r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	1eea      	subs	r2, r5, #3
 800889e:	4296      	cmp	r6, r2
 80088a0:	bf38      	it	cc
 80088a2:	2300      	movcc	r3, #0
 80088a4:	4423      	add	r3, r4
 80088a6:	e015      	b.n	80088d4 <rshift+0x68>
 80088a8:	46a1      	mov	r9, r4
 80088aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088ae:	f1c1 0820 	rsb	r8, r1, #32
 80088b2:	40cf      	lsrs	r7, r1
 80088b4:	f105 0e04 	add.w	lr, r5, #4
 80088b8:	4576      	cmp	r6, lr
 80088ba:	46f4      	mov	ip, lr
 80088bc:	d816      	bhi.n	80088ec <rshift+0x80>
 80088be:	1a9a      	subs	r2, r3, r2
 80088c0:	0092      	lsls	r2, r2, #2
 80088c2:	3a04      	subs	r2, #4
 80088c4:	3501      	adds	r5, #1
 80088c6:	42ae      	cmp	r6, r5
 80088c8:	bf38      	it	cc
 80088ca:	2200      	movcc	r2, #0
 80088cc:	18a3      	adds	r3, r4, r2
 80088ce:	50a7      	str	r7, [r4, r2]
 80088d0:	b107      	cbz	r7, 80088d4 <rshift+0x68>
 80088d2:	3304      	adds	r3, #4
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	eba3 0204 	sub.w	r2, r3, r4
 80088da:	bf08      	it	eq
 80088dc:	2300      	moveq	r3, #0
 80088de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088e2:	6102      	str	r2, [r0, #16]
 80088e4:	bf08      	it	eq
 80088e6:	6143      	streq	r3, [r0, #20]
 80088e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088ec:	f8dc c000 	ldr.w	ip, [ip]
 80088f0:	fa0c fc08 	lsl.w	ip, ip, r8
 80088f4:	ea4c 0707 	orr.w	r7, ip, r7
 80088f8:	f849 7b04 	str.w	r7, [r9], #4
 80088fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008900:	40cf      	lsrs	r7, r1
 8008902:	e7d9      	b.n	80088b8 <rshift+0x4c>
 8008904:	f851 cb04 	ldr.w	ip, [r1], #4
 8008908:	f847 cf04 	str.w	ip, [r7, #4]!
 800890c:	e7c2      	b.n	8008894 <rshift+0x28>
 800890e:	4623      	mov	r3, r4
 8008910:	e7e0      	b.n	80088d4 <rshift+0x68>

08008912 <__hexdig_fun>:
 8008912:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008916:	2b09      	cmp	r3, #9
 8008918:	d802      	bhi.n	8008920 <__hexdig_fun+0xe>
 800891a:	3820      	subs	r0, #32
 800891c:	b2c0      	uxtb	r0, r0
 800891e:	4770      	bx	lr
 8008920:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008924:	2b05      	cmp	r3, #5
 8008926:	d801      	bhi.n	800892c <__hexdig_fun+0x1a>
 8008928:	3847      	subs	r0, #71	@ 0x47
 800892a:	e7f7      	b.n	800891c <__hexdig_fun+0xa>
 800892c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008930:	2b05      	cmp	r3, #5
 8008932:	d801      	bhi.n	8008938 <__hexdig_fun+0x26>
 8008934:	3827      	subs	r0, #39	@ 0x27
 8008936:	e7f1      	b.n	800891c <__hexdig_fun+0xa>
 8008938:	2000      	movs	r0, #0
 800893a:	4770      	bx	lr

0800893c <__gethex>:
 800893c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008940:	468a      	mov	sl, r1
 8008942:	4690      	mov	r8, r2
 8008944:	b085      	sub	sp, #20
 8008946:	9302      	str	r3, [sp, #8]
 8008948:	680b      	ldr	r3, [r1, #0]
 800894a:	9001      	str	r0, [sp, #4]
 800894c:	1c9c      	adds	r4, r3, #2
 800894e:	46a1      	mov	r9, r4
 8008950:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008954:	2830      	cmp	r0, #48	@ 0x30
 8008956:	d0fa      	beq.n	800894e <__gethex+0x12>
 8008958:	eba9 0303 	sub.w	r3, r9, r3
 800895c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008960:	f7ff ffd7 	bl	8008912 <__hexdig_fun>
 8008964:	4605      	mov	r5, r0
 8008966:	2800      	cmp	r0, #0
 8008968:	d168      	bne.n	8008a3c <__gethex+0x100>
 800896a:	2201      	movs	r2, #1
 800896c:	4648      	mov	r0, r9
 800896e:	499f      	ldr	r1, [pc, #636]	@ (8008bec <__gethex+0x2b0>)
 8008970:	f7ff feff 	bl	8008772 <strncmp>
 8008974:	4607      	mov	r7, r0
 8008976:	2800      	cmp	r0, #0
 8008978:	d167      	bne.n	8008a4a <__gethex+0x10e>
 800897a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800897e:	4626      	mov	r6, r4
 8008980:	f7ff ffc7 	bl	8008912 <__hexdig_fun>
 8008984:	2800      	cmp	r0, #0
 8008986:	d062      	beq.n	8008a4e <__gethex+0x112>
 8008988:	4623      	mov	r3, r4
 800898a:	7818      	ldrb	r0, [r3, #0]
 800898c:	4699      	mov	r9, r3
 800898e:	2830      	cmp	r0, #48	@ 0x30
 8008990:	f103 0301 	add.w	r3, r3, #1
 8008994:	d0f9      	beq.n	800898a <__gethex+0x4e>
 8008996:	f7ff ffbc 	bl	8008912 <__hexdig_fun>
 800899a:	fab0 f580 	clz	r5, r0
 800899e:	f04f 0b01 	mov.w	fp, #1
 80089a2:	096d      	lsrs	r5, r5, #5
 80089a4:	464a      	mov	r2, r9
 80089a6:	4616      	mov	r6, r2
 80089a8:	7830      	ldrb	r0, [r6, #0]
 80089aa:	3201      	adds	r2, #1
 80089ac:	f7ff ffb1 	bl	8008912 <__hexdig_fun>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d1f8      	bne.n	80089a6 <__gethex+0x6a>
 80089b4:	2201      	movs	r2, #1
 80089b6:	4630      	mov	r0, r6
 80089b8:	498c      	ldr	r1, [pc, #560]	@ (8008bec <__gethex+0x2b0>)
 80089ba:	f7ff feda 	bl	8008772 <strncmp>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d13f      	bne.n	8008a42 <__gethex+0x106>
 80089c2:	b944      	cbnz	r4, 80089d6 <__gethex+0x9a>
 80089c4:	1c74      	adds	r4, r6, #1
 80089c6:	4622      	mov	r2, r4
 80089c8:	4616      	mov	r6, r2
 80089ca:	7830      	ldrb	r0, [r6, #0]
 80089cc:	3201      	adds	r2, #1
 80089ce:	f7ff ffa0 	bl	8008912 <__hexdig_fun>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d1f8      	bne.n	80089c8 <__gethex+0x8c>
 80089d6:	1ba4      	subs	r4, r4, r6
 80089d8:	00a7      	lsls	r7, r4, #2
 80089da:	7833      	ldrb	r3, [r6, #0]
 80089dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80089e0:	2b50      	cmp	r3, #80	@ 0x50
 80089e2:	d13e      	bne.n	8008a62 <__gethex+0x126>
 80089e4:	7873      	ldrb	r3, [r6, #1]
 80089e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80089e8:	d033      	beq.n	8008a52 <__gethex+0x116>
 80089ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80089ec:	d034      	beq.n	8008a58 <__gethex+0x11c>
 80089ee:	2400      	movs	r4, #0
 80089f0:	1c71      	adds	r1, r6, #1
 80089f2:	7808      	ldrb	r0, [r1, #0]
 80089f4:	f7ff ff8d 	bl	8008912 <__hexdig_fun>
 80089f8:	1e43      	subs	r3, r0, #1
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b18      	cmp	r3, #24
 80089fe:	d830      	bhi.n	8008a62 <__gethex+0x126>
 8008a00:	f1a0 0210 	sub.w	r2, r0, #16
 8008a04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a08:	f7ff ff83 	bl	8008912 <__hexdig_fun>
 8008a0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008a10:	fa5f fc8c 	uxtb.w	ip, ip
 8008a14:	f1bc 0f18 	cmp.w	ip, #24
 8008a18:	f04f 030a 	mov.w	r3, #10
 8008a1c:	d91e      	bls.n	8008a5c <__gethex+0x120>
 8008a1e:	b104      	cbz	r4, 8008a22 <__gethex+0xe6>
 8008a20:	4252      	negs	r2, r2
 8008a22:	4417      	add	r7, r2
 8008a24:	f8ca 1000 	str.w	r1, [sl]
 8008a28:	b1ed      	cbz	r5, 8008a66 <__gethex+0x12a>
 8008a2a:	f1bb 0f00 	cmp.w	fp, #0
 8008a2e:	bf0c      	ite	eq
 8008a30:	2506      	moveq	r5, #6
 8008a32:	2500      	movne	r5, #0
 8008a34:	4628      	mov	r0, r5
 8008a36:	b005      	add	sp, #20
 8008a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3c:	2500      	movs	r5, #0
 8008a3e:	462c      	mov	r4, r5
 8008a40:	e7b0      	b.n	80089a4 <__gethex+0x68>
 8008a42:	2c00      	cmp	r4, #0
 8008a44:	d1c7      	bne.n	80089d6 <__gethex+0x9a>
 8008a46:	4627      	mov	r7, r4
 8008a48:	e7c7      	b.n	80089da <__gethex+0x9e>
 8008a4a:	464e      	mov	r6, r9
 8008a4c:	462f      	mov	r7, r5
 8008a4e:	2501      	movs	r5, #1
 8008a50:	e7c3      	b.n	80089da <__gethex+0x9e>
 8008a52:	2400      	movs	r4, #0
 8008a54:	1cb1      	adds	r1, r6, #2
 8008a56:	e7cc      	b.n	80089f2 <__gethex+0xb6>
 8008a58:	2401      	movs	r4, #1
 8008a5a:	e7fb      	b.n	8008a54 <__gethex+0x118>
 8008a5c:	fb03 0002 	mla	r0, r3, r2, r0
 8008a60:	e7ce      	b.n	8008a00 <__gethex+0xc4>
 8008a62:	4631      	mov	r1, r6
 8008a64:	e7de      	b.n	8008a24 <__gethex+0xe8>
 8008a66:	4629      	mov	r1, r5
 8008a68:	eba6 0309 	sub.w	r3, r6, r9
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	2b07      	cmp	r3, #7
 8008a70:	dc0a      	bgt.n	8008a88 <__gethex+0x14c>
 8008a72:	9801      	ldr	r0, [sp, #4]
 8008a74:	f7fd ff9e 	bl	80069b4 <_Balloc>
 8008a78:	4604      	mov	r4, r0
 8008a7a:	b940      	cbnz	r0, 8008a8e <__gethex+0x152>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	21e4      	movs	r1, #228	@ 0xe4
 8008a80:	4b5b      	ldr	r3, [pc, #364]	@ (8008bf0 <__gethex+0x2b4>)
 8008a82:	485c      	ldr	r0, [pc, #368]	@ (8008bf4 <__gethex+0x2b8>)
 8008a84:	f7ff fec0 	bl	8008808 <__assert_func>
 8008a88:	3101      	adds	r1, #1
 8008a8a:	105b      	asrs	r3, r3, #1
 8008a8c:	e7ef      	b.n	8008a6e <__gethex+0x132>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f100 0a14 	add.w	sl, r0, #20
 8008a94:	4655      	mov	r5, sl
 8008a96:	469b      	mov	fp, r3
 8008a98:	45b1      	cmp	r9, r6
 8008a9a:	d337      	bcc.n	8008b0c <__gethex+0x1d0>
 8008a9c:	f845 bb04 	str.w	fp, [r5], #4
 8008aa0:	eba5 050a 	sub.w	r5, r5, sl
 8008aa4:	10ad      	asrs	r5, r5, #2
 8008aa6:	6125      	str	r5, [r4, #16]
 8008aa8:	4658      	mov	r0, fp
 8008aaa:	f7fe f875 	bl	8006b98 <__hi0bits>
 8008aae:	016d      	lsls	r5, r5, #5
 8008ab0:	f8d8 6000 	ldr.w	r6, [r8]
 8008ab4:	1a2d      	subs	r5, r5, r0
 8008ab6:	42b5      	cmp	r5, r6
 8008ab8:	dd54      	ble.n	8008b64 <__gethex+0x228>
 8008aba:	1bad      	subs	r5, r5, r6
 8008abc:	4629      	mov	r1, r5
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f7fe fbfd 	bl	80072be <__any_on>
 8008ac4:	4681      	mov	r9, r0
 8008ac6:	b178      	cbz	r0, 8008ae8 <__gethex+0x1ac>
 8008ac8:	f04f 0901 	mov.w	r9, #1
 8008acc:	1e6b      	subs	r3, r5, #1
 8008ace:	1159      	asrs	r1, r3, #5
 8008ad0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008ad4:	f003 021f 	and.w	r2, r3, #31
 8008ad8:	fa09 f202 	lsl.w	r2, r9, r2
 8008adc:	420a      	tst	r2, r1
 8008ade:	d003      	beq.n	8008ae8 <__gethex+0x1ac>
 8008ae0:	454b      	cmp	r3, r9
 8008ae2:	dc36      	bgt.n	8008b52 <__gethex+0x216>
 8008ae4:	f04f 0902 	mov.w	r9, #2
 8008ae8:	4629      	mov	r1, r5
 8008aea:	4620      	mov	r0, r4
 8008aec:	f7ff febe 	bl	800886c <rshift>
 8008af0:	442f      	add	r7, r5
 8008af2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008af6:	42bb      	cmp	r3, r7
 8008af8:	da42      	bge.n	8008b80 <__gethex+0x244>
 8008afa:	4621      	mov	r1, r4
 8008afc:	9801      	ldr	r0, [sp, #4]
 8008afe:	f7fd ff99 	bl	8006a34 <_Bfree>
 8008b02:	2300      	movs	r3, #0
 8008b04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b06:	25a3      	movs	r5, #163	@ 0xa3
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	e793      	b.n	8008a34 <__gethex+0xf8>
 8008b0c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008b10:	2a2e      	cmp	r2, #46	@ 0x2e
 8008b12:	d012      	beq.n	8008b3a <__gethex+0x1fe>
 8008b14:	2b20      	cmp	r3, #32
 8008b16:	d104      	bne.n	8008b22 <__gethex+0x1e6>
 8008b18:	f845 bb04 	str.w	fp, [r5], #4
 8008b1c:	f04f 0b00 	mov.w	fp, #0
 8008b20:	465b      	mov	r3, fp
 8008b22:	7830      	ldrb	r0, [r6, #0]
 8008b24:	9303      	str	r3, [sp, #12]
 8008b26:	f7ff fef4 	bl	8008912 <__hexdig_fun>
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	f000 000f 	and.w	r0, r0, #15
 8008b30:	4098      	lsls	r0, r3
 8008b32:	ea4b 0b00 	orr.w	fp, fp, r0
 8008b36:	3304      	adds	r3, #4
 8008b38:	e7ae      	b.n	8008a98 <__gethex+0x15c>
 8008b3a:	45b1      	cmp	r9, r6
 8008b3c:	d8ea      	bhi.n	8008b14 <__gethex+0x1d8>
 8008b3e:	2201      	movs	r2, #1
 8008b40:	4630      	mov	r0, r6
 8008b42:	492a      	ldr	r1, [pc, #168]	@ (8008bec <__gethex+0x2b0>)
 8008b44:	9303      	str	r3, [sp, #12]
 8008b46:	f7ff fe14 	bl	8008772 <strncmp>
 8008b4a:	9b03      	ldr	r3, [sp, #12]
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d1e1      	bne.n	8008b14 <__gethex+0x1d8>
 8008b50:	e7a2      	b.n	8008a98 <__gethex+0x15c>
 8008b52:	4620      	mov	r0, r4
 8008b54:	1ea9      	subs	r1, r5, #2
 8008b56:	f7fe fbb2 	bl	80072be <__any_on>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d0c2      	beq.n	8008ae4 <__gethex+0x1a8>
 8008b5e:	f04f 0903 	mov.w	r9, #3
 8008b62:	e7c1      	b.n	8008ae8 <__gethex+0x1ac>
 8008b64:	da09      	bge.n	8008b7a <__gethex+0x23e>
 8008b66:	1b75      	subs	r5, r6, r5
 8008b68:	4621      	mov	r1, r4
 8008b6a:	462a      	mov	r2, r5
 8008b6c:	9801      	ldr	r0, [sp, #4]
 8008b6e:	f7fe f977 	bl	8006e60 <__lshift>
 8008b72:	4604      	mov	r4, r0
 8008b74:	1b7f      	subs	r7, r7, r5
 8008b76:	f100 0a14 	add.w	sl, r0, #20
 8008b7a:	f04f 0900 	mov.w	r9, #0
 8008b7e:	e7b8      	b.n	8008af2 <__gethex+0x1b6>
 8008b80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b84:	42bd      	cmp	r5, r7
 8008b86:	dd6f      	ble.n	8008c68 <__gethex+0x32c>
 8008b88:	1bed      	subs	r5, r5, r7
 8008b8a:	42ae      	cmp	r6, r5
 8008b8c:	dc34      	bgt.n	8008bf8 <__gethex+0x2bc>
 8008b8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d022      	beq.n	8008bdc <__gethex+0x2a0>
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d024      	beq.n	8008be4 <__gethex+0x2a8>
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d115      	bne.n	8008bca <__gethex+0x28e>
 8008b9e:	42ae      	cmp	r6, r5
 8008ba0:	d113      	bne.n	8008bca <__gethex+0x28e>
 8008ba2:	2e01      	cmp	r6, #1
 8008ba4:	d10b      	bne.n	8008bbe <__gethex+0x282>
 8008ba6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008baa:	9a02      	ldr	r2, [sp, #8]
 8008bac:	2562      	movs	r5, #98	@ 0x62
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	6123      	str	r3, [r4, #16]
 8008bb4:	f8ca 3000 	str.w	r3, [sl]
 8008bb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bba:	601c      	str	r4, [r3, #0]
 8008bbc:	e73a      	b.n	8008a34 <__gethex+0xf8>
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	1e71      	subs	r1, r6, #1
 8008bc2:	f7fe fb7c 	bl	80072be <__any_on>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d1ed      	bne.n	8008ba6 <__gethex+0x26a>
 8008bca:	4621      	mov	r1, r4
 8008bcc:	9801      	ldr	r0, [sp, #4]
 8008bce:	f7fd ff31 	bl	8006a34 <_Bfree>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bd6:	2550      	movs	r5, #80	@ 0x50
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	e72b      	b.n	8008a34 <__gethex+0xf8>
 8008bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1f3      	bne.n	8008bca <__gethex+0x28e>
 8008be2:	e7e0      	b.n	8008ba6 <__gethex+0x26a>
 8008be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1dd      	bne.n	8008ba6 <__gethex+0x26a>
 8008bea:	e7ee      	b.n	8008bca <__gethex+0x28e>
 8008bec:	0800ad10 	.word	0x0800ad10
 8008bf0:	0800aba3 	.word	0x0800aba3
 8008bf4:	0800aebe 	.word	0x0800aebe
 8008bf8:	1e6f      	subs	r7, r5, #1
 8008bfa:	f1b9 0f00 	cmp.w	r9, #0
 8008bfe:	d130      	bne.n	8008c62 <__gethex+0x326>
 8008c00:	b127      	cbz	r7, 8008c0c <__gethex+0x2d0>
 8008c02:	4639      	mov	r1, r7
 8008c04:	4620      	mov	r0, r4
 8008c06:	f7fe fb5a 	bl	80072be <__any_on>
 8008c0a:	4681      	mov	r9, r0
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	4629      	mov	r1, r5
 8008c10:	1b76      	subs	r6, r6, r5
 8008c12:	2502      	movs	r5, #2
 8008c14:	117a      	asrs	r2, r7, #5
 8008c16:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008c1a:	f007 071f 	and.w	r7, r7, #31
 8008c1e:	40bb      	lsls	r3, r7
 8008c20:	4213      	tst	r3, r2
 8008c22:	4620      	mov	r0, r4
 8008c24:	bf18      	it	ne
 8008c26:	f049 0902 	orrne.w	r9, r9, #2
 8008c2a:	f7ff fe1f 	bl	800886c <rshift>
 8008c2e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008c32:	f1b9 0f00 	cmp.w	r9, #0
 8008c36:	d047      	beq.n	8008cc8 <__gethex+0x38c>
 8008c38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d015      	beq.n	8008c6c <__gethex+0x330>
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d017      	beq.n	8008c74 <__gethex+0x338>
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d109      	bne.n	8008c5c <__gethex+0x320>
 8008c48:	f019 0f02 	tst.w	r9, #2
 8008c4c:	d006      	beq.n	8008c5c <__gethex+0x320>
 8008c4e:	f8da 3000 	ldr.w	r3, [sl]
 8008c52:	ea49 0903 	orr.w	r9, r9, r3
 8008c56:	f019 0f01 	tst.w	r9, #1
 8008c5a:	d10e      	bne.n	8008c7a <__gethex+0x33e>
 8008c5c:	f045 0510 	orr.w	r5, r5, #16
 8008c60:	e032      	b.n	8008cc8 <__gethex+0x38c>
 8008c62:	f04f 0901 	mov.w	r9, #1
 8008c66:	e7d1      	b.n	8008c0c <__gethex+0x2d0>
 8008c68:	2501      	movs	r5, #1
 8008c6a:	e7e2      	b.n	8008c32 <__gethex+0x2f6>
 8008c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c6e:	f1c3 0301 	rsb	r3, r3, #1
 8008c72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0f0      	beq.n	8008c5c <__gethex+0x320>
 8008c7a:	f04f 0c00 	mov.w	ip, #0
 8008c7e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c82:	f104 0314 	add.w	r3, r4, #20
 8008c86:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c8a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c98:	d01b      	beq.n	8008cd2 <__gethex+0x396>
 8008c9a:	3201      	adds	r2, #1
 8008c9c:	6002      	str	r2, [r0, #0]
 8008c9e:	2d02      	cmp	r5, #2
 8008ca0:	f104 0314 	add.w	r3, r4, #20
 8008ca4:	d13c      	bne.n	8008d20 <__gethex+0x3e4>
 8008ca6:	f8d8 2000 	ldr.w	r2, [r8]
 8008caa:	3a01      	subs	r2, #1
 8008cac:	42b2      	cmp	r2, r6
 8008cae:	d109      	bne.n	8008cc4 <__gethex+0x388>
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	1171      	asrs	r1, r6, #5
 8008cb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cb8:	f006 061f 	and.w	r6, r6, #31
 8008cbc:	fa02 f606 	lsl.w	r6, r2, r6
 8008cc0:	421e      	tst	r6, r3
 8008cc2:	d13a      	bne.n	8008d3a <__gethex+0x3fe>
 8008cc4:	f045 0520 	orr.w	r5, r5, #32
 8008cc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cca:	601c      	str	r4, [r3, #0]
 8008ccc:	9b02      	ldr	r3, [sp, #8]
 8008cce:	601f      	str	r7, [r3, #0]
 8008cd0:	e6b0      	b.n	8008a34 <__gethex+0xf8>
 8008cd2:	4299      	cmp	r1, r3
 8008cd4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008cd8:	d8d9      	bhi.n	8008c8e <__gethex+0x352>
 8008cda:	68a3      	ldr	r3, [r4, #8]
 8008cdc:	459b      	cmp	fp, r3
 8008cde:	db17      	blt.n	8008d10 <__gethex+0x3d4>
 8008ce0:	6861      	ldr	r1, [r4, #4]
 8008ce2:	9801      	ldr	r0, [sp, #4]
 8008ce4:	3101      	adds	r1, #1
 8008ce6:	f7fd fe65 	bl	80069b4 <_Balloc>
 8008cea:	4681      	mov	r9, r0
 8008cec:	b918      	cbnz	r0, 8008cf6 <__gethex+0x3ba>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	2184      	movs	r1, #132	@ 0x84
 8008cf2:	4b19      	ldr	r3, [pc, #100]	@ (8008d58 <__gethex+0x41c>)
 8008cf4:	e6c5      	b.n	8008a82 <__gethex+0x146>
 8008cf6:	6922      	ldr	r2, [r4, #16]
 8008cf8:	f104 010c 	add.w	r1, r4, #12
 8008cfc:	3202      	adds	r2, #2
 8008cfe:	0092      	lsls	r2, r2, #2
 8008d00:	300c      	adds	r0, #12
 8008d02:	f7fc fef6 	bl	8005af2 <memcpy>
 8008d06:	4621      	mov	r1, r4
 8008d08:	9801      	ldr	r0, [sp, #4]
 8008d0a:	f7fd fe93 	bl	8006a34 <_Bfree>
 8008d0e:	464c      	mov	r4, r9
 8008d10:	6923      	ldr	r3, [r4, #16]
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	6122      	str	r2, [r4, #16]
 8008d16:	2201      	movs	r2, #1
 8008d18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d1c:	615a      	str	r2, [r3, #20]
 8008d1e:	e7be      	b.n	8008c9e <__gethex+0x362>
 8008d20:	6922      	ldr	r2, [r4, #16]
 8008d22:	455a      	cmp	r2, fp
 8008d24:	dd0b      	ble.n	8008d3e <__gethex+0x402>
 8008d26:	2101      	movs	r1, #1
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f7ff fd9f 	bl	800886c <rshift>
 8008d2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d32:	3701      	adds	r7, #1
 8008d34:	42bb      	cmp	r3, r7
 8008d36:	f6ff aee0 	blt.w	8008afa <__gethex+0x1be>
 8008d3a:	2501      	movs	r5, #1
 8008d3c:	e7c2      	b.n	8008cc4 <__gethex+0x388>
 8008d3e:	f016 061f 	ands.w	r6, r6, #31
 8008d42:	d0fa      	beq.n	8008d3a <__gethex+0x3fe>
 8008d44:	4453      	add	r3, sl
 8008d46:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008d4a:	f7fd ff25 	bl	8006b98 <__hi0bits>
 8008d4e:	f1c6 0620 	rsb	r6, r6, #32
 8008d52:	42b0      	cmp	r0, r6
 8008d54:	dbe7      	blt.n	8008d26 <__gethex+0x3ea>
 8008d56:	e7f0      	b.n	8008d3a <__gethex+0x3fe>
 8008d58:	0800aba3 	.word	0x0800aba3

08008d5c <L_shift>:
 8008d5c:	f1c2 0208 	rsb	r2, r2, #8
 8008d60:	0092      	lsls	r2, r2, #2
 8008d62:	b570      	push	{r4, r5, r6, lr}
 8008d64:	f1c2 0620 	rsb	r6, r2, #32
 8008d68:	6843      	ldr	r3, [r0, #4]
 8008d6a:	6804      	ldr	r4, [r0, #0]
 8008d6c:	fa03 f506 	lsl.w	r5, r3, r6
 8008d70:	432c      	orrs	r4, r5
 8008d72:	40d3      	lsrs	r3, r2
 8008d74:	6004      	str	r4, [r0, #0]
 8008d76:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d7a:	4288      	cmp	r0, r1
 8008d7c:	d3f4      	bcc.n	8008d68 <L_shift+0xc>
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}

08008d80 <__match>:
 8008d80:	b530      	push	{r4, r5, lr}
 8008d82:	6803      	ldr	r3, [r0, #0]
 8008d84:	3301      	adds	r3, #1
 8008d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d8a:	b914      	cbnz	r4, 8008d92 <__match+0x12>
 8008d8c:	6003      	str	r3, [r0, #0]
 8008d8e:	2001      	movs	r0, #1
 8008d90:	bd30      	pop	{r4, r5, pc}
 8008d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008d9a:	2d19      	cmp	r5, #25
 8008d9c:	bf98      	it	ls
 8008d9e:	3220      	addls	r2, #32
 8008da0:	42a2      	cmp	r2, r4
 8008da2:	d0f0      	beq.n	8008d86 <__match+0x6>
 8008da4:	2000      	movs	r0, #0
 8008da6:	e7f3      	b.n	8008d90 <__match+0x10>

08008da8 <__hexnan>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	2500      	movs	r5, #0
 8008dae:	680b      	ldr	r3, [r1, #0]
 8008db0:	4682      	mov	sl, r0
 8008db2:	115e      	asrs	r6, r3, #5
 8008db4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008db8:	f013 031f 	ands.w	r3, r3, #31
 8008dbc:	bf18      	it	ne
 8008dbe:	3604      	addne	r6, #4
 8008dc0:	1f37      	subs	r7, r6, #4
 8008dc2:	4690      	mov	r8, r2
 8008dc4:	46b9      	mov	r9, r7
 8008dc6:	463c      	mov	r4, r7
 8008dc8:	46ab      	mov	fp, r5
 8008dca:	b087      	sub	sp, #28
 8008dcc:	6801      	ldr	r1, [r0, #0]
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	f846 5c04 	str.w	r5, [r6, #-4]
 8008dd4:	9502      	str	r5, [sp, #8]
 8008dd6:	784a      	ldrb	r2, [r1, #1]
 8008dd8:	1c4b      	adds	r3, r1, #1
 8008dda:	9303      	str	r3, [sp, #12]
 8008ddc:	b342      	cbz	r2, 8008e30 <__hexnan+0x88>
 8008dde:	4610      	mov	r0, r2
 8008de0:	9105      	str	r1, [sp, #20]
 8008de2:	9204      	str	r2, [sp, #16]
 8008de4:	f7ff fd95 	bl	8008912 <__hexdig_fun>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d151      	bne.n	8008e90 <__hexnan+0xe8>
 8008dec:	9a04      	ldr	r2, [sp, #16]
 8008dee:	9905      	ldr	r1, [sp, #20]
 8008df0:	2a20      	cmp	r2, #32
 8008df2:	d818      	bhi.n	8008e26 <__hexnan+0x7e>
 8008df4:	9b02      	ldr	r3, [sp, #8]
 8008df6:	459b      	cmp	fp, r3
 8008df8:	dd13      	ble.n	8008e22 <__hexnan+0x7a>
 8008dfa:	454c      	cmp	r4, r9
 8008dfc:	d206      	bcs.n	8008e0c <__hexnan+0x64>
 8008dfe:	2d07      	cmp	r5, #7
 8008e00:	dc04      	bgt.n	8008e0c <__hexnan+0x64>
 8008e02:	462a      	mov	r2, r5
 8008e04:	4649      	mov	r1, r9
 8008e06:	4620      	mov	r0, r4
 8008e08:	f7ff ffa8 	bl	8008d5c <L_shift>
 8008e0c:	4544      	cmp	r4, r8
 8008e0e:	d952      	bls.n	8008eb6 <__hexnan+0x10e>
 8008e10:	2300      	movs	r3, #0
 8008e12:	f1a4 0904 	sub.w	r9, r4, #4
 8008e16:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e1a:	461d      	mov	r5, r3
 8008e1c:	464c      	mov	r4, r9
 8008e1e:	f8cd b008 	str.w	fp, [sp, #8]
 8008e22:	9903      	ldr	r1, [sp, #12]
 8008e24:	e7d7      	b.n	8008dd6 <__hexnan+0x2e>
 8008e26:	2a29      	cmp	r2, #41	@ 0x29
 8008e28:	d157      	bne.n	8008eda <__hexnan+0x132>
 8008e2a:	3102      	adds	r1, #2
 8008e2c:	f8ca 1000 	str.w	r1, [sl]
 8008e30:	f1bb 0f00 	cmp.w	fp, #0
 8008e34:	d051      	beq.n	8008eda <__hexnan+0x132>
 8008e36:	454c      	cmp	r4, r9
 8008e38:	d206      	bcs.n	8008e48 <__hexnan+0xa0>
 8008e3a:	2d07      	cmp	r5, #7
 8008e3c:	dc04      	bgt.n	8008e48 <__hexnan+0xa0>
 8008e3e:	462a      	mov	r2, r5
 8008e40:	4649      	mov	r1, r9
 8008e42:	4620      	mov	r0, r4
 8008e44:	f7ff ff8a 	bl	8008d5c <L_shift>
 8008e48:	4544      	cmp	r4, r8
 8008e4a:	d936      	bls.n	8008eba <__hexnan+0x112>
 8008e4c:	4623      	mov	r3, r4
 8008e4e:	f1a8 0204 	sub.w	r2, r8, #4
 8008e52:	f853 1b04 	ldr.w	r1, [r3], #4
 8008e56:	429f      	cmp	r7, r3
 8008e58:	f842 1f04 	str.w	r1, [r2, #4]!
 8008e5c:	d2f9      	bcs.n	8008e52 <__hexnan+0xaa>
 8008e5e:	1b3b      	subs	r3, r7, r4
 8008e60:	f023 0303 	bic.w	r3, r3, #3
 8008e64:	3304      	adds	r3, #4
 8008e66:	3401      	adds	r4, #1
 8008e68:	3e03      	subs	r6, #3
 8008e6a:	42b4      	cmp	r4, r6
 8008e6c:	bf88      	it	hi
 8008e6e:	2304      	movhi	r3, #4
 8008e70:	2200      	movs	r2, #0
 8008e72:	4443      	add	r3, r8
 8008e74:	f843 2b04 	str.w	r2, [r3], #4
 8008e78:	429f      	cmp	r7, r3
 8008e7a:	d2fb      	bcs.n	8008e74 <__hexnan+0xcc>
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	b91b      	cbnz	r3, 8008e88 <__hexnan+0xe0>
 8008e80:	4547      	cmp	r7, r8
 8008e82:	d128      	bne.n	8008ed6 <__hexnan+0x12e>
 8008e84:	2301      	movs	r3, #1
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	2005      	movs	r0, #5
 8008e8a:	b007      	add	sp, #28
 8008e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e90:	3501      	adds	r5, #1
 8008e92:	2d08      	cmp	r5, #8
 8008e94:	f10b 0b01 	add.w	fp, fp, #1
 8008e98:	dd06      	ble.n	8008ea8 <__hexnan+0x100>
 8008e9a:	4544      	cmp	r4, r8
 8008e9c:	d9c1      	bls.n	8008e22 <__hexnan+0x7a>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2501      	movs	r5, #1
 8008ea2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ea6:	3c04      	subs	r4, #4
 8008ea8:	6822      	ldr	r2, [r4, #0]
 8008eaa:	f000 000f 	and.w	r0, r0, #15
 8008eae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008eb2:	6020      	str	r0, [r4, #0]
 8008eb4:	e7b5      	b.n	8008e22 <__hexnan+0x7a>
 8008eb6:	2508      	movs	r5, #8
 8008eb8:	e7b3      	b.n	8008e22 <__hexnan+0x7a>
 8008eba:	9b01      	ldr	r3, [sp, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d0dd      	beq.n	8008e7c <__hexnan+0xd4>
 8008ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec4:	f1c3 0320 	rsb	r3, r3, #32
 8008ec8:	40da      	lsrs	r2, r3
 8008eca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	f846 3c04 	str.w	r3, [r6, #-4]
 8008ed4:	e7d2      	b.n	8008e7c <__hexnan+0xd4>
 8008ed6:	3f04      	subs	r7, #4
 8008ed8:	e7d0      	b.n	8008e7c <__hexnan+0xd4>
 8008eda:	2004      	movs	r0, #4
 8008edc:	e7d5      	b.n	8008e8a <__hexnan+0xe2>

08008ede <__ascii_mbtowc>:
 8008ede:	b082      	sub	sp, #8
 8008ee0:	b901      	cbnz	r1, 8008ee4 <__ascii_mbtowc+0x6>
 8008ee2:	a901      	add	r1, sp, #4
 8008ee4:	b142      	cbz	r2, 8008ef8 <__ascii_mbtowc+0x1a>
 8008ee6:	b14b      	cbz	r3, 8008efc <__ascii_mbtowc+0x1e>
 8008ee8:	7813      	ldrb	r3, [r2, #0]
 8008eea:	600b      	str	r3, [r1, #0]
 8008eec:	7812      	ldrb	r2, [r2, #0]
 8008eee:	1e10      	subs	r0, r2, #0
 8008ef0:	bf18      	it	ne
 8008ef2:	2001      	movne	r0, #1
 8008ef4:	b002      	add	sp, #8
 8008ef6:	4770      	bx	lr
 8008ef8:	4610      	mov	r0, r2
 8008efa:	e7fb      	b.n	8008ef4 <__ascii_mbtowc+0x16>
 8008efc:	f06f 0001 	mvn.w	r0, #1
 8008f00:	e7f8      	b.n	8008ef4 <__ascii_mbtowc+0x16>

08008f02 <_realloc_r>:
 8008f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f06:	4680      	mov	r8, r0
 8008f08:	4615      	mov	r5, r2
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	b921      	cbnz	r1, 8008f18 <_realloc_r+0x16>
 8008f0e:	4611      	mov	r1, r2
 8008f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	f7fd bcc2 	b.w	800689c <_malloc_r>
 8008f18:	b92a      	cbnz	r2, 8008f26 <_realloc_r+0x24>
 8008f1a:	f7fd fc4d 	bl	80067b8 <_free_r>
 8008f1e:	2400      	movs	r4, #0
 8008f20:	4620      	mov	r0, r4
 8008f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f26:	f000 f840 	bl	8008faa <_malloc_usable_size_r>
 8008f2a:	4285      	cmp	r5, r0
 8008f2c:	4606      	mov	r6, r0
 8008f2e:	d802      	bhi.n	8008f36 <_realloc_r+0x34>
 8008f30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008f34:	d8f4      	bhi.n	8008f20 <_realloc_r+0x1e>
 8008f36:	4629      	mov	r1, r5
 8008f38:	4640      	mov	r0, r8
 8008f3a:	f7fd fcaf 	bl	800689c <_malloc_r>
 8008f3e:	4607      	mov	r7, r0
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d0ec      	beq.n	8008f1e <_realloc_r+0x1c>
 8008f44:	42b5      	cmp	r5, r6
 8008f46:	462a      	mov	r2, r5
 8008f48:	4621      	mov	r1, r4
 8008f4a:	bf28      	it	cs
 8008f4c:	4632      	movcs	r2, r6
 8008f4e:	f7fc fdd0 	bl	8005af2 <memcpy>
 8008f52:	4621      	mov	r1, r4
 8008f54:	4640      	mov	r0, r8
 8008f56:	f7fd fc2f 	bl	80067b8 <_free_r>
 8008f5a:	463c      	mov	r4, r7
 8008f5c:	e7e0      	b.n	8008f20 <_realloc_r+0x1e>

08008f5e <__ascii_wctomb>:
 8008f5e:	4603      	mov	r3, r0
 8008f60:	4608      	mov	r0, r1
 8008f62:	b141      	cbz	r1, 8008f76 <__ascii_wctomb+0x18>
 8008f64:	2aff      	cmp	r2, #255	@ 0xff
 8008f66:	d904      	bls.n	8008f72 <__ascii_wctomb+0x14>
 8008f68:	228a      	movs	r2, #138	@ 0x8a
 8008f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	4770      	bx	lr
 8008f72:	2001      	movs	r0, #1
 8008f74:	700a      	strb	r2, [r1, #0]
 8008f76:	4770      	bx	lr

08008f78 <fiprintf>:
 8008f78:	b40e      	push	{r1, r2, r3}
 8008f7a:	b503      	push	{r0, r1, lr}
 8008f7c:	4601      	mov	r1, r0
 8008f7e:	ab03      	add	r3, sp, #12
 8008f80:	4805      	ldr	r0, [pc, #20]	@ (8008f98 <fiprintf+0x20>)
 8008f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f86:	6800      	ldr	r0, [r0, #0]
 8008f88:	9301      	str	r3, [sp, #4]
 8008f8a:	f7ff f9b7 	bl	80082fc <_vfiprintf_r>
 8008f8e:	b002      	add	sp, #8
 8008f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f94:	b003      	add	sp, #12
 8008f96:	4770      	bx	lr
 8008f98:	2000003c 	.word	0x2000003c

08008f9c <abort>:
 8008f9c:	2006      	movs	r0, #6
 8008f9e:	b508      	push	{r3, lr}
 8008fa0:	f000 f834 	bl	800900c <raise>
 8008fa4:	2001      	movs	r0, #1
 8008fa6:	f7f8 fc3c 	bl	8001822 <_exit>

08008faa <_malloc_usable_size_r>:
 8008faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fae:	1f18      	subs	r0, r3, #4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	bfbc      	itt	lt
 8008fb4:	580b      	ldrlt	r3, [r1, r0]
 8008fb6:	18c0      	addlt	r0, r0, r3
 8008fb8:	4770      	bx	lr

08008fba <_raise_r>:
 8008fba:	291f      	cmp	r1, #31
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	d904      	bls.n	8008fce <_raise_r+0x14>
 8008fc4:	2316      	movs	r3, #22
 8008fc6:	6003      	str	r3, [r0, #0]
 8008fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fcc:	bd38      	pop	{r3, r4, r5, pc}
 8008fce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fd0:	b112      	cbz	r2, 8008fd8 <_raise_r+0x1e>
 8008fd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fd6:	b94b      	cbnz	r3, 8008fec <_raise_r+0x32>
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 f831 	bl	8009040 <_getpid_r>
 8008fde:	4622      	mov	r2, r4
 8008fe0:	4601      	mov	r1, r0
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe8:	f000 b818 	b.w	800901c <_kill_r>
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d00a      	beq.n	8009006 <_raise_r+0x4c>
 8008ff0:	1c59      	adds	r1, r3, #1
 8008ff2:	d103      	bne.n	8008ffc <_raise_r+0x42>
 8008ff4:	2316      	movs	r3, #22
 8008ff6:	6003      	str	r3, [r0, #0]
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	e7e7      	b.n	8008fcc <_raise_r+0x12>
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	4620      	mov	r0, r4
 8009000:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009004:	4798      	blx	r3
 8009006:	2000      	movs	r0, #0
 8009008:	e7e0      	b.n	8008fcc <_raise_r+0x12>
	...

0800900c <raise>:
 800900c:	4b02      	ldr	r3, [pc, #8]	@ (8009018 <raise+0xc>)
 800900e:	4601      	mov	r1, r0
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	f7ff bfd2 	b.w	8008fba <_raise_r>
 8009016:	bf00      	nop
 8009018:	2000003c 	.word	0x2000003c

0800901c <_kill_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	2300      	movs	r3, #0
 8009020:	4d06      	ldr	r5, [pc, #24]	@ (800903c <_kill_r+0x20>)
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	4611      	mov	r1, r2
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	f7f8 fbea 	bl	8001802 <_kill>
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	d102      	bne.n	8009038 <_kill_r+0x1c>
 8009032:	682b      	ldr	r3, [r5, #0]
 8009034:	b103      	cbz	r3, 8009038 <_kill_r+0x1c>
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	bd38      	pop	{r3, r4, r5, pc}
 800903a:	bf00      	nop
 800903c:	20004284 	.word	0x20004284

08009040 <_getpid_r>:
 8009040:	f7f8 bbd8 	b.w	80017f4 <_getpid>

08009044 <powf>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	460c      	mov	r4, r1
 8009048:	4606      	mov	r6, r0
 800904a:	f000 f8db 	bl	8009204 <__ieee754_powf>
 800904e:	4621      	mov	r1, r4
 8009050:	4605      	mov	r5, r0
 8009052:	4620      	mov	r0, r4
 8009054:	f7f8 f85c 	bl	8001110 <__aeabi_fcmpun>
 8009058:	bb68      	cbnz	r0, 80090b6 <powf+0x72>
 800905a:	2100      	movs	r1, #0
 800905c:	4630      	mov	r0, r6
 800905e:	f7f8 f825 	bl	80010ac <__aeabi_fcmpeq>
 8009062:	b190      	cbz	r0, 800908a <powf+0x46>
 8009064:	2100      	movs	r1, #0
 8009066:	4620      	mov	r0, r4
 8009068:	f7f8 f820 	bl	80010ac <__aeabi_fcmpeq>
 800906c:	2800      	cmp	r0, #0
 800906e:	d133      	bne.n	80090d8 <powf+0x94>
 8009070:	4620      	mov	r0, r4
 8009072:	f000 f84e 	bl	8009112 <finitef>
 8009076:	b1f0      	cbz	r0, 80090b6 <powf+0x72>
 8009078:	2100      	movs	r1, #0
 800907a:	4620      	mov	r0, r4
 800907c:	f7f8 f820 	bl	80010c0 <__aeabi_fcmplt>
 8009080:	b1c8      	cbz	r0, 80090b6 <powf+0x72>
 8009082:	f7fc fcfb 	bl	8005a7c <__errno>
 8009086:	2322      	movs	r3, #34	@ 0x22
 8009088:	e014      	b.n	80090b4 <powf+0x70>
 800908a:	4628      	mov	r0, r5
 800908c:	f000 f841 	bl	8009112 <finitef>
 8009090:	b998      	cbnz	r0, 80090ba <powf+0x76>
 8009092:	4630      	mov	r0, r6
 8009094:	f000 f83d 	bl	8009112 <finitef>
 8009098:	b178      	cbz	r0, 80090ba <powf+0x76>
 800909a:	4620      	mov	r0, r4
 800909c:	f000 f839 	bl	8009112 <finitef>
 80090a0:	b158      	cbz	r0, 80090ba <powf+0x76>
 80090a2:	4629      	mov	r1, r5
 80090a4:	4628      	mov	r0, r5
 80090a6:	f7f8 f833 	bl	8001110 <__aeabi_fcmpun>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d0e9      	beq.n	8009082 <powf+0x3e>
 80090ae:	f7fc fce5 	bl	8005a7c <__errno>
 80090b2:	2321      	movs	r3, #33	@ 0x21
 80090b4:	6003      	str	r3, [r0, #0]
 80090b6:	4628      	mov	r0, r5
 80090b8:	bd70      	pop	{r4, r5, r6, pc}
 80090ba:	2100      	movs	r1, #0
 80090bc:	4628      	mov	r0, r5
 80090be:	f7f7 fff5 	bl	80010ac <__aeabi_fcmpeq>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d0f7      	beq.n	80090b6 <powf+0x72>
 80090c6:	4630      	mov	r0, r6
 80090c8:	f000 f823 	bl	8009112 <finitef>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d0f2      	beq.n	80090b6 <powf+0x72>
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 f81e 	bl	8009112 <finitef>
 80090d6:	e7d3      	b.n	8009080 <powf+0x3c>
 80090d8:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 80090dc:	e7eb      	b.n	80090b6 <powf+0x72>

080090de <sqrtf>:
 80090de:	b538      	push	{r3, r4, r5, lr}
 80090e0:	4605      	mov	r5, r0
 80090e2:	f000 f81f 	bl	8009124 <__ieee754_sqrtf>
 80090e6:	4629      	mov	r1, r5
 80090e8:	4604      	mov	r4, r0
 80090ea:	4628      	mov	r0, r5
 80090ec:	f7f8 f810 	bl	8001110 <__aeabi_fcmpun>
 80090f0:	b968      	cbnz	r0, 800910e <sqrtf+0x30>
 80090f2:	2100      	movs	r1, #0
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7f7 ffe3 	bl	80010c0 <__aeabi_fcmplt>
 80090fa:	b140      	cbz	r0, 800910e <sqrtf+0x30>
 80090fc:	f7fc fcbe 	bl	8005a7c <__errno>
 8009100:	2321      	movs	r3, #33	@ 0x21
 8009102:	2100      	movs	r1, #0
 8009104:	6003      	str	r3, [r0, #0]
 8009106:	4608      	mov	r0, r1
 8009108:	f7f7 fef0 	bl	8000eec <__aeabi_fdiv>
 800910c:	4604      	mov	r4, r0
 800910e:	4620      	mov	r0, r4
 8009110:	bd38      	pop	{r3, r4, r5, pc}

08009112 <finitef>:
 8009112:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8009116:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800911a:	bfac      	ite	ge
 800911c:	2000      	movge	r0, #0
 800911e:	2001      	movlt	r0, #1
 8009120:	4770      	bx	lr
	...

08009124 <__ieee754_sqrtf>:
 8009124:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8009128:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800912c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009130:	4603      	mov	r3, r0
 8009132:	4604      	mov	r4, r0
 8009134:	d30a      	bcc.n	800914c <__ieee754_sqrtf+0x28>
 8009136:	4601      	mov	r1, r0
 8009138:	f7f7 fe24 	bl	8000d84 <__aeabi_fmul>
 800913c:	4601      	mov	r1, r0
 800913e:	4620      	mov	r0, r4
 8009140:	f7f7 fd18 	bl	8000b74 <__addsf3>
 8009144:	4604      	mov	r4, r0
 8009146:	4620      	mov	r0, r4
 8009148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914c:	2a00      	cmp	r2, #0
 800914e:	d0fa      	beq.n	8009146 <__ieee754_sqrtf+0x22>
 8009150:	2800      	cmp	r0, #0
 8009152:	da06      	bge.n	8009162 <__ieee754_sqrtf+0x3e>
 8009154:	4601      	mov	r1, r0
 8009156:	f7f7 fd0b 	bl	8000b70 <__aeabi_fsub>
 800915a:	4601      	mov	r1, r0
 800915c:	f7f7 fec6 	bl	8000eec <__aeabi_fdiv>
 8009160:	e7f0      	b.n	8009144 <__ieee754_sqrtf+0x20>
 8009162:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 8009166:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800916a:	d03e      	beq.n	80091ea <__ieee754_sqrtf+0xc6>
 800916c:	2400      	movs	r4, #0
 800916e:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8009172:	07ca      	lsls	r2, r1, #31
 8009174:	f04f 0019 	mov.w	r0, #25
 8009178:	4626      	mov	r6, r4
 800917a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800917e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009182:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009186:	bf58      	it	pl
 8009188:	005b      	lslpl	r3, r3, #1
 800918a:	106d      	asrs	r5, r5, #1
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	1872      	adds	r2, r6, r1
 8009190:	429a      	cmp	r2, r3
 8009192:	bfcf      	iteee	gt
 8009194:	461a      	movgt	r2, r3
 8009196:	1856      	addle	r6, r2, r1
 8009198:	1864      	addle	r4, r4, r1
 800919a:	1a9a      	suble	r2, r3, r2
 800919c:	3801      	subs	r0, #1
 800919e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80091a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80091a6:	d1f2      	bne.n	800918e <__ieee754_sqrtf+0x6a>
 80091a8:	b1ba      	cbz	r2, 80091da <__ieee754_sqrtf+0xb6>
 80091aa:	4e14      	ldr	r6, [pc, #80]	@ (80091fc <__ieee754_sqrtf+0xd8>)
 80091ac:	4f14      	ldr	r7, [pc, #80]	@ (8009200 <__ieee754_sqrtf+0xdc>)
 80091ae:	6830      	ldr	r0, [r6, #0]
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	f7f7 fcdd 	bl	8000b70 <__aeabi_fsub>
 80091b6:	f8d6 8000 	ldr.w	r8, [r6]
 80091ba:	4601      	mov	r1, r0
 80091bc:	4640      	mov	r0, r8
 80091be:	f7f7 ff89 	bl	80010d4 <__aeabi_fcmple>
 80091c2:	b150      	cbz	r0, 80091da <__ieee754_sqrtf+0xb6>
 80091c4:	6830      	ldr	r0, [r6, #0]
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	f7f7 fcd4 	bl	8000b74 <__addsf3>
 80091cc:	6836      	ldr	r6, [r6, #0]
 80091ce:	4601      	mov	r1, r0
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7f7 ff75 	bl	80010c0 <__aeabi_fcmplt>
 80091d6:	b168      	cbz	r0, 80091f4 <__ieee754_sqrtf+0xd0>
 80091d8:	3402      	adds	r4, #2
 80091da:	1064      	asrs	r4, r4, #1
 80091dc:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 80091e0:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80091e4:	e7af      	b.n	8009146 <__ieee754_sqrtf+0x22>
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	3201      	adds	r2, #1
 80091ea:	0218      	lsls	r0, r3, #8
 80091ec:	d5fb      	bpl.n	80091e6 <__ieee754_sqrtf+0xc2>
 80091ee:	3a01      	subs	r2, #1
 80091f0:	1a89      	subs	r1, r1, r2
 80091f2:	e7bb      	b.n	800916c <__ieee754_sqrtf+0x48>
 80091f4:	3401      	adds	r4, #1
 80091f6:	f024 0401 	bic.w	r4, r4, #1
 80091fa:	e7ee      	b.n	80091da <__ieee754_sqrtf+0xb6>
 80091fc:	200001fc 	.word	0x200001fc
 8009200:	200001f8 	.word	0x200001f8

08009204 <__ieee754_powf>:
 8009204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009208:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 800920c:	4680      	mov	r8, r0
 800920e:	460f      	mov	r7, r1
 8009210:	4606      	mov	r6, r0
 8009212:	460c      	mov	r4, r1
 8009214:	b087      	sub	sp, #28
 8009216:	d10c      	bne.n	8009232 <__ieee754_powf+0x2e>
 8009218:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 800921c:	0076      	lsls	r6, r6, #1
 800921e:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8009222:	f240 8336 	bls.w	8009892 <__ieee754_powf+0x68e>
 8009226:	4639      	mov	r1, r7
 8009228:	4640      	mov	r0, r8
 800922a:	f7f7 fca3 	bl	8000b74 <__addsf3>
 800922e:	4601      	mov	r1, r0
 8009230:	e03e      	b.n	80092b0 <__ieee754_powf+0xac>
 8009232:	f020 4900 	bic.w	r9, r0, #2147483648	@ 0x80000000
 8009236:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800923a:	d802      	bhi.n	8009242 <__ieee754_powf+0x3e>
 800923c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8009240:	d908      	bls.n	8009254 <__ieee754_powf+0x50>
 8009242:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8009246:	d1ee      	bne.n	8009226 <__ieee754_powf+0x22>
 8009248:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800924c:	0064      	lsls	r4, r4, #1
 800924e:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009252:	e7e6      	b.n	8009222 <__ieee754_powf+0x1e>
 8009254:	2800      	cmp	r0, #0
 8009256:	da1e      	bge.n	8009296 <__ieee754_powf+0x92>
 8009258:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 800925c:	d22c      	bcs.n	80092b8 <__ieee754_powf+0xb4>
 800925e:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8009262:	d333      	bcc.n	80092cc <__ieee754_powf+0xc8>
 8009264:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8009268:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800926c:	fa4b f503 	asr.w	r5, fp, r3
 8009270:	fa05 f303 	lsl.w	r3, r5, r3
 8009274:	455b      	cmp	r3, fp
 8009276:	d127      	bne.n	80092c8 <__ieee754_powf+0xc4>
 8009278:	f005 0501 	and.w	r5, r5, #1
 800927c:	f1c5 0502 	rsb	r5, r5, #2
 8009280:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8009284:	d123      	bne.n	80092ce <__ieee754_powf+0xca>
 8009286:	2c00      	cmp	r4, #0
 8009288:	4641      	mov	r1, r8
 800928a:	da11      	bge.n	80092b0 <__ieee754_powf+0xac>
 800928c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009290:	f7f7 fe2c 	bl	8000eec <__aeabi_fdiv>
 8009294:	e7cb      	b.n	800922e <__ieee754_powf+0x2a>
 8009296:	2500      	movs	r5, #0
 8009298:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800929c:	d1f0      	bne.n	8009280 <__ieee754_powf+0x7c>
 800929e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80092a2:	f000 82f6 	beq.w	8009892 <__ieee754_powf+0x68e>
 80092a6:	d909      	bls.n	80092bc <__ieee754_powf+0xb8>
 80092a8:	2c00      	cmp	r4, #0
 80092aa:	f2c0 82f5 	blt.w	8009898 <__ieee754_powf+0x694>
 80092ae:	4639      	mov	r1, r7
 80092b0:	4608      	mov	r0, r1
 80092b2:	b007      	add	sp, #28
 80092b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b8:	2502      	movs	r5, #2
 80092ba:	e7ed      	b.n	8009298 <__ieee754_powf+0x94>
 80092bc:	2c00      	cmp	r4, #0
 80092be:	f280 82eb 	bge.w	8009898 <__ieee754_powf+0x694>
 80092c2:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 80092c6:	e7f3      	b.n	80092b0 <__ieee754_powf+0xac>
 80092c8:	2500      	movs	r5, #0
 80092ca:	e7d9      	b.n	8009280 <__ieee754_powf+0x7c>
 80092cc:	2500      	movs	r5, #0
 80092ce:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80092d2:	d104      	bne.n	80092de <__ieee754_powf+0xda>
 80092d4:	4641      	mov	r1, r8
 80092d6:	4640      	mov	r0, r8
 80092d8:	f7f7 fd54 	bl	8000d84 <__aeabi_fmul>
 80092dc:	e7a7      	b.n	800922e <__ieee754_powf+0x2a>
 80092de:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80092e2:	d107      	bne.n	80092f4 <__ieee754_powf+0xf0>
 80092e4:	2e00      	cmp	r6, #0
 80092e6:	db05      	blt.n	80092f4 <__ieee754_powf+0xf0>
 80092e8:	4640      	mov	r0, r8
 80092ea:	b007      	add	sp, #28
 80092ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f0:	f7ff bf18 	b.w	8009124 <__ieee754_sqrtf>
 80092f4:	4640      	mov	r0, r8
 80092f6:	f000 fae3 	bl	80098c0 <fabsf>
 80092fa:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80092fe:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009302:	46ca      	mov	sl, r9
 8009304:	4601      	mov	r1, r0
 8009306:	d002      	beq.n	800930e <__ieee754_powf+0x10a>
 8009308:	f1b9 0f00 	cmp.w	r9, #0
 800930c:	d117      	bne.n	800933e <__ieee754_powf+0x13a>
 800930e:	2c00      	cmp	r4, #0
 8009310:	da04      	bge.n	800931c <__ieee754_powf+0x118>
 8009312:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009316:	f7f7 fde9 	bl	8000eec <__aeabi_fdiv>
 800931a:	4601      	mov	r1, r0
 800931c:	2e00      	cmp	r6, #0
 800931e:	dac7      	bge.n	80092b0 <__ieee754_powf+0xac>
 8009320:	f1a9 597e 	sub.w	r9, r9, #1065353216	@ 0x3f800000
 8009324:	ea59 0905 	orrs.w	r9, r9, r5
 8009328:	d104      	bne.n	8009334 <__ieee754_powf+0x130>
 800932a:	4608      	mov	r0, r1
 800932c:	f7f7 fc20 	bl	8000b70 <__aeabi_fsub>
 8009330:	4601      	mov	r1, r0
 8009332:	e7ad      	b.n	8009290 <__ieee754_powf+0x8c>
 8009334:	2d01      	cmp	r5, #1
 8009336:	d1bb      	bne.n	80092b0 <__ieee754_powf+0xac>
 8009338:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800933c:	e777      	b.n	800922e <__ieee754_powf+0x2a>
 800933e:	0ff3      	lsrs	r3, r6, #31
 8009340:	3b01      	subs	r3, #1
 8009342:	9303      	str	r3, [sp, #12]
 8009344:	432b      	orrs	r3, r5
 8009346:	d101      	bne.n	800934c <__ieee754_powf+0x148>
 8009348:	4641      	mov	r1, r8
 800934a:	e7ee      	b.n	800932a <__ieee754_powf+0x126>
 800934c:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8009350:	f240 809e 	bls.w	8009490 <__ieee754_powf+0x28c>
 8009354:	4b47      	ldr	r3, [pc, #284]	@ (8009474 <__ieee754_powf+0x270>)
 8009356:	4599      	cmp	r9, r3
 8009358:	d807      	bhi.n	800936a <__ieee754_powf+0x166>
 800935a:	2c00      	cmp	r4, #0
 800935c:	da0a      	bge.n	8009374 <__ieee754_powf+0x170>
 800935e:	2000      	movs	r0, #0
 8009360:	b007      	add	sp, #28
 8009362:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009366:	f000 bb14 	b.w	8009992 <__math_oflowf>
 800936a:	4b43      	ldr	r3, [pc, #268]	@ (8009478 <__ieee754_powf+0x274>)
 800936c:	4599      	cmp	r9, r3
 800936e:	d907      	bls.n	8009380 <__ieee754_powf+0x17c>
 8009370:	2c00      	cmp	r4, #0
 8009372:	dcf4      	bgt.n	800935e <__ieee754_powf+0x15a>
 8009374:	2000      	movs	r0, #0
 8009376:	b007      	add	sp, #28
 8009378:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937c:	f000 bb05 	b.w	800998a <__math_uflowf>
 8009380:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009384:	f7f7 fbf4 	bl	8000b70 <__aeabi_fsub>
 8009388:	493c      	ldr	r1, [pc, #240]	@ (800947c <__ieee754_powf+0x278>)
 800938a:	4606      	mov	r6, r0
 800938c:	f7f7 fcfa 	bl	8000d84 <__aeabi_fmul>
 8009390:	493b      	ldr	r1, [pc, #236]	@ (8009480 <__ieee754_powf+0x27c>)
 8009392:	4680      	mov	r8, r0
 8009394:	4630      	mov	r0, r6
 8009396:	f7f7 fcf5 	bl	8000d84 <__aeabi_fmul>
 800939a:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800939e:	4681      	mov	r9, r0
 80093a0:	4630      	mov	r0, r6
 80093a2:	f7f7 fcef 	bl	8000d84 <__aeabi_fmul>
 80093a6:	4601      	mov	r1, r0
 80093a8:	4836      	ldr	r0, [pc, #216]	@ (8009484 <__ieee754_powf+0x280>)
 80093aa:	f7f7 fbe1 	bl	8000b70 <__aeabi_fsub>
 80093ae:	4631      	mov	r1, r6
 80093b0:	f7f7 fce8 	bl	8000d84 <__aeabi_fmul>
 80093b4:	4601      	mov	r1, r0
 80093b6:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80093ba:	f7f7 fbd9 	bl	8000b70 <__aeabi_fsub>
 80093be:	4631      	mov	r1, r6
 80093c0:	4682      	mov	sl, r0
 80093c2:	4630      	mov	r0, r6
 80093c4:	f7f7 fcde 	bl	8000d84 <__aeabi_fmul>
 80093c8:	4601      	mov	r1, r0
 80093ca:	4650      	mov	r0, sl
 80093cc:	f7f7 fcda 	bl	8000d84 <__aeabi_fmul>
 80093d0:	492d      	ldr	r1, [pc, #180]	@ (8009488 <__ieee754_powf+0x284>)
 80093d2:	f7f7 fcd7 	bl	8000d84 <__aeabi_fmul>
 80093d6:	4601      	mov	r1, r0
 80093d8:	4648      	mov	r0, r9
 80093da:	f7f7 fbc9 	bl	8000b70 <__aeabi_fsub>
 80093de:	4601      	mov	r1, r0
 80093e0:	4606      	mov	r6, r0
 80093e2:	4640      	mov	r0, r8
 80093e4:	f7f7 fbc6 	bl	8000b74 <__addsf3>
 80093e8:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80093ec:	f02b 0b0f 	bic.w	fp, fp, #15
 80093f0:	4641      	mov	r1, r8
 80093f2:	4658      	mov	r0, fp
 80093f4:	f7f7 fbbc 	bl	8000b70 <__aeabi_fsub>
 80093f8:	4601      	mov	r1, r0
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7f7 fbb8 	bl	8000b70 <__aeabi_fsub>
 8009400:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	3d01      	subs	r5, #1
 8009408:	f024 040f 	bic.w	r4, r4, #15
 800940c:	431d      	orrs	r5, r3
 800940e:	4606      	mov	r6, r0
 8009410:	4621      	mov	r1, r4
 8009412:	4638      	mov	r0, r7
 8009414:	bf14      	ite	ne
 8009416:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 800941a:	4d1c      	ldreq	r5, [pc, #112]	@ (800948c <__ieee754_powf+0x288>)
 800941c:	f7f7 fba8 	bl	8000b70 <__aeabi_fsub>
 8009420:	4659      	mov	r1, fp
 8009422:	f7f7 fcaf 	bl	8000d84 <__aeabi_fmul>
 8009426:	4639      	mov	r1, r7
 8009428:	4680      	mov	r8, r0
 800942a:	4630      	mov	r0, r6
 800942c:	f7f7 fcaa 	bl	8000d84 <__aeabi_fmul>
 8009430:	4601      	mov	r1, r0
 8009432:	4640      	mov	r0, r8
 8009434:	f7f7 fb9e 	bl	8000b74 <__addsf3>
 8009438:	4621      	mov	r1, r4
 800943a:	4606      	mov	r6, r0
 800943c:	4658      	mov	r0, fp
 800943e:	f7f7 fca1 	bl	8000d84 <__aeabi_fmul>
 8009442:	4601      	mov	r1, r0
 8009444:	4607      	mov	r7, r0
 8009446:	4630      	mov	r0, r6
 8009448:	f7f7 fb94 	bl	8000b74 <__addsf3>
 800944c:	2800      	cmp	r0, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4680      	mov	r8, r0
 8009452:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009456:	f340 8141 	ble.w	80096dc <__ieee754_powf+0x4d8>
 800945a:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800945e:	f240 812a 	bls.w	80096b6 <__ieee754_powf+0x4b2>
 8009462:	2100      	movs	r1, #0
 8009464:	4628      	mov	r0, r5
 8009466:	f7f7 fe2b 	bl	80010c0 <__aeabi_fcmplt>
 800946a:	3800      	subs	r0, #0
 800946c:	bf18      	it	ne
 800946e:	2001      	movne	r0, #1
 8009470:	e776      	b.n	8009360 <__ieee754_powf+0x15c>
 8009472:	bf00      	nop
 8009474:	3f7ffff3 	.word	0x3f7ffff3
 8009478:	3f800007 	.word	0x3f800007
 800947c:	3fb8aa00 	.word	0x3fb8aa00
 8009480:	36eca570 	.word	0x36eca570
 8009484:	3eaaaaab 	.word	0x3eaaaaab
 8009488:	3fb8aa3b 	.word	0x3fb8aa3b
 800948c:	bf800000 	.word	0xbf800000
 8009490:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009494:	f040 810b 	bne.w	80096ae <__ieee754_powf+0x4aa>
 8009498:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 800949c:	f7f7 fc72 	bl	8000d84 <__aeabi_fmul>
 80094a0:	f06f 0217 	mvn.w	r2, #23
 80094a4:	4682      	mov	sl, r0
 80094a6:	ea4f 53ea 	mov.w	r3, sl, asr #23
 80094aa:	3b7f      	subs	r3, #127	@ 0x7f
 80094ac:	441a      	add	r2, r3
 80094ae:	4b96      	ldr	r3, [pc, #600]	@ (8009708 <__ieee754_powf+0x504>)
 80094b0:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 80094b4:	459a      	cmp	sl, r3
 80094b6:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 80094ba:	dd06      	ble.n	80094ca <__ieee754_powf+0x2c6>
 80094bc:	4b93      	ldr	r3, [pc, #588]	@ (800970c <__ieee754_powf+0x508>)
 80094be:	459a      	cmp	sl, r3
 80094c0:	f340 80f7 	ble.w	80096b2 <__ieee754_powf+0x4ae>
 80094c4:	3201      	adds	r2, #1
 80094c6:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 80094ca:	2300      	movs	r3, #0
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	9205      	str	r2, [sp, #20]
 80094d0:	4b8f      	ldr	r3, [pc, #572]	@ (8009710 <__ieee754_powf+0x50c>)
 80094d2:	9a01      	ldr	r2, [sp, #4]
 80094d4:	4630      	mov	r0, r6
 80094d6:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80094da:	46b2      	mov	sl, r6
 80094dc:	4659      	mov	r1, fp
 80094de:	f7f7 fb47 	bl	8000b70 <__aeabi_fsub>
 80094e2:	4631      	mov	r1, r6
 80094e4:	4681      	mov	r9, r0
 80094e6:	4658      	mov	r0, fp
 80094e8:	f7f7 fb44 	bl	8000b74 <__addsf3>
 80094ec:	4601      	mov	r1, r0
 80094ee:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80094f2:	f7f7 fcfb 	bl	8000eec <__aeabi_fdiv>
 80094f6:	4601      	mov	r1, r0
 80094f8:	9004      	str	r0, [sp, #16]
 80094fa:	4648      	mov	r0, r9
 80094fc:	f7f7 fc42 	bl	8000d84 <__aeabi_fmul>
 8009500:	9002      	str	r0, [sp, #8]
 8009502:	9b02      	ldr	r3, [sp, #8]
 8009504:	1076      	asrs	r6, r6, #1
 8009506:	f423 687f 	bic.w	r8, r3, #4080	@ 0xff0
 800950a:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 8009514:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8009518:	f028 080f 	bic.w	r8, r8, #15
 800951c:	4631      	mov	r1, r6
 800951e:	4640      	mov	r0, r8
 8009520:	f7f7 fc30 	bl	8000d84 <__aeabi_fmul>
 8009524:	4601      	mov	r1, r0
 8009526:	4648      	mov	r0, r9
 8009528:	f7f7 fb22 	bl	8000b70 <__aeabi_fsub>
 800952c:	4659      	mov	r1, fp
 800952e:	4681      	mov	r9, r0
 8009530:	4630      	mov	r0, r6
 8009532:	f7f7 fb1d 	bl	8000b70 <__aeabi_fsub>
 8009536:	4601      	mov	r1, r0
 8009538:	4650      	mov	r0, sl
 800953a:	f7f7 fb19 	bl	8000b70 <__aeabi_fsub>
 800953e:	4641      	mov	r1, r8
 8009540:	f7f7 fc20 	bl	8000d84 <__aeabi_fmul>
 8009544:	4601      	mov	r1, r0
 8009546:	4648      	mov	r0, r9
 8009548:	f7f7 fb12 	bl	8000b70 <__aeabi_fsub>
 800954c:	9b04      	ldr	r3, [sp, #16]
 800954e:	4619      	mov	r1, r3
 8009550:	f7f7 fc18 	bl	8000d84 <__aeabi_fmul>
 8009554:	9902      	ldr	r1, [sp, #8]
 8009556:	4683      	mov	fp, r0
 8009558:	4608      	mov	r0, r1
 800955a:	f7f7 fc13 	bl	8000d84 <__aeabi_fmul>
 800955e:	4606      	mov	r6, r0
 8009560:	496c      	ldr	r1, [pc, #432]	@ (8009714 <__ieee754_powf+0x510>)
 8009562:	f7f7 fc0f 	bl	8000d84 <__aeabi_fmul>
 8009566:	496c      	ldr	r1, [pc, #432]	@ (8009718 <__ieee754_powf+0x514>)
 8009568:	f7f7 fb04 	bl	8000b74 <__addsf3>
 800956c:	4631      	mov	r1, r6
 800956e:	f7f7 fc09 	bl	8000d84 <__aeabi_fmul>
 8009572:	496a      	ldr	r1, [pc, #424]	@ (800971c <__ieee754_powf+0x518>)
 8009574:	f7f7 fafe 	bl	8000b74 <__addsf3>
 8009578:	4631      	mov	r1, r6
 800957a:	f7f7 fc03 	bl	8000d84 <__aeabi_fmul>
 800957e:	4968      	ldr	r1, [pc, #416]	@ (8009720 <__ieee754_powf+0x51c>)
 8009580:	f7f7 faf8 	bl	8000b74 <__addsf3>
 8009584:	4631      	mov	r1, r6
 8009586:	f7f7 fbfd 	bl	8000d84 <__aeabi_fmul>
 800958a:	4966      	ldr	r1, [pc, #408]	@ (8009724 <__ieee754_powf+0x520>)
 800958c:	f7f7 faf2 	bl	8000b74 <__addsf3>
 8009590:	4631      	mov	r1, r6
 8009592:	f7f7 fbf7 	bl	8000d84 <__aeabi_fmul>
 8009596:	4964      	ldr	r1, [pc, #400]	@ (8009728 <__ieee754_powf+0x524>)
 8009598:	f7f7 faec 	bl	8000b74 <__addsf3>
 800959c:	4631      	mov	r1, r6
 800959e:	4681      	mov	r9, r0
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7f7 fbef 	bl	8000d84 <__aeabi_fmul>
 80095a6:	4601      	mov	r1, r0
 80095a8:	4648      	mov	r0, r9
 80095aa:	f7f7 fbeb 	bl	8000d84 <__aeabi_fmul>
 80095ae:	4606      	mov	r6, r0
 80095b0:	4641      	mov	r1, r8
 80095b2:	9802      	ldr	r0, [sp, #8]
 80095b4:	f7f7 fade 	bl	8000b74 <__addsf3>
 80095b8:	4659      	mov	r1, fp
 80095ba:	f7f7 fbe3 	bl	8000d84 <__aeabi_fmul>
 80095be:	4631      	mov	r1, r6
 80095c0:	f7f7 fad8 	bl	8000b74 <__addsf3>
 80095c4:	4641      	mov	r1, r8
 80095c6:	4681      	mov	r9, r0
 80095c8:	4640      	mov	r0, r8
 80095ca:	f7f7 fbdb 	bl	8000d84 <__aeabi_fmul>
 80095ce:	4957      	ldr	r1, [pc, #348]	@ (800972c <__ieee754_powf+0x528>)
 80095d0:	4682      	mov	sl, r0
 80095d2:	f7f7 facf 	bl	8000b74 <__addsf3>
 80095d6:	4649      	mov	r1, r9
 80095d8:	f7f7 facc 	bl	8000b74 <__addsf3>
 80095dc:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80095e0:	f026 060f 	bic.w	r6, r6, #15
 80095e4:	4631      	mov	r1, r6
 80095e6:	4640      	mov	r0, r8
 80095e8:	f7f7 fbcc 	bl	8000d84 <__aeabi_fmul>
 80095ec:	494f      	ldr	r1, [pc, #316]	@ (800972c <__ieee754_powf+0x528>)
 80095ee:	4680      	mov	r8, r0
 80095f0:	4630      	mov	r0, r6
 80095f2:	f7f7 fabd 	bl	8000b70 <__aeabi_fsub>
 80095f6:	4651      	mov	r1, sl
 80095f8:	f7f7 faba 	bl	8000b70 <__aeabi_fsub>
 80095fc:	4601      	mov	r1, r0
 80095fe:	4648      	mov	r0, r9
 8009600:	f7f7 fab6 	bl	8000b70 <__aeabi_fsub>
 8009604:	9902      	ldr	r1, [sp, #8]
 8009606:	f7f7 fbbd 	bl	8000d84 <__aeabi_fmul>
 800960a:	4631      	mov	r1, r6
 800960c:	4681      	mov	r9, r0
 800960e:	4658      	mov	r0, fp
 8009610:	f7f7 fbb8 	bl	8000d84 <__aeabi_fmul>
 8009614:	4601      	mov	r1, r0
 8009616:	4648      	mov	r0, r9
 8009618:	f7f7 faac 	bl	8000b74 <__addsf3>
 800961c:	4682      	mov	sl, r0
 800961e:	4601      	mov	r1, r0
 8009620:	4640      	mov	r0, r8
 8009622:	f7f7 faa7 	bl	8000b74 <__addsf3>
 8009626:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800962a:	f026 060f 	bic.w	r6, r6, #15
 800962e:	4630      	mov	r0, r6
 8009630:	493f      	ldr	r1, [pc, #252]	@ (8009730 <__ieee754_powf+0x52c>)
 8009632:	f7f7 fba7 	bl	8000d84 <__aeabi_fmul>
 8009636:	4641      	mov	r1, r8
 8009638:	4681      	mov	r9, r0
 800963a:	4630      	mov	r0, r6
 800963c:	f7f7 fa98 	bl	8000b70 <__aeabi_fsub>
 8009640:	4601      	mov	r1, r0
 8009642:	4650      	mov	r0, sl
 8009644:	f7f7 fa94 	bl	8000b70 <__aeabi_fsub>
 8009648:	493a      	ldr	r1, [pc, #232]	@ (8009734 <__ieee754_powf+0x530>)
 800964a:	f7f7 fb9b 	bl	8000d84 <__aeabi_fmul>
 800964e:	493a      	ldr	r1, [pc, #232]	@ (8009738 <__ieee754_powf+0x534>)
 8009650:	4680      	mov	r8, r0
 8009652:	4630      	mov	r0, r6
 8009654:	f7f7 fb96 	bl	8000d84 <__aeabi_fmul>
 8009658:	4601      	mov	r1, r0
 800965a:	4640      	mov	r0, r8
 800965c:	f7f7 fa8a 	bl	8000b74 <__addsf3>
 8009660:	4b36      	ldr	r3, [pc, #216]	@ (800973c <__ieee754_powf+0x538>)
 8009662:	9a01      	ldr	r2, [sp, #4]
 8009664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009668:	f7f7 fa84 	bl	8000b74 <__addsf3>
 800966c:	9a05      	ldr	r2, [sp, #20]
 800966e:	4606      	mov	r6, r0
 8009670:	4610      	mov	r0, r2
 8009672:	f7f7 fb33 	bl	8000cdc <__aeabi_i2f>
 8009676:	4680      	mov	r8, r0
 8009678:	4b31      	ldr	r3, [pc, #196]	@ (8009740 <__ieee754_powf+0x53c>)
 800967a:	9a01      	ldr	r2, [sp, #4]
 800967c:	4631      	mov	r1, r6
 800967e:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8009682:	4648      	mov	r0, r9
 8009684:	f7f7 fa76 	bl	8000b74 <__addsf3>
 8009688:	4651      	mov	r1, sl
 800968a:	f7f7 fa73 	bl	8000b74 <__addsf3>
 800968e:	4641      	mov	r1, r8
 8009690:	f7f7 fa70 	bl	8000b74 <__addsf3>
 8009694:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8009698:	f02b 0b0f 	bic.w	fp, fp, #15
 800969c:	4641      	mov	r1, r8
 800969e:	4658      	mov	r0, fp
 80096a0:	f7f7 fa66 	bl	8000b70 <__aeabi_fsub>
 80096a4:	4651      	mov	r1, sl
 80096a6:	f7f7 fa63 	bl	8000b70 <__aeabi_fsub>
 80096aa:	4649      	mov	r1, r9
 80096ac:	e6a2      	b.n	80093f4 <__ieee754_powf+0x1f0>
 80096ae:	2200      	movs	r2, #0
 80096b0:	e6f9      	b.n	80094a6 <__ieee754_powf+0x2a2>
 80096b2:	2301      	movs	r3, #1
 80096b4:	e70a      	b.n	80094cc <__ieee754_powf+0x2c8>
 80096b6:	d149      	bne.n	800974c <__ieee754_powf+0x548>
 80096b8:	4922      	ldr	r1, [pc, #136]	@ (8009744 <__ieee754_powf+0x540>)
 80096ba:	4630      	mov	r0, r6
 80096bc:	f7f7 fa5a 	bl	8000b74 <__addsf3>
 80096c0:	4639      	mov	r1, r7
 80096c2:	4681      	mov	r9, r0
 80096c4:	4620      	mov	r0, r4
 80096c6:	f7f7 fa53 	bl	8000b70 <__aeabi_fsub>
 80096ca:	4601      	mov	r1, r0
 80096cc:	4648      	mov	r0, r9
 80096ce:	f7f7 fd15 	bl	80010fc <__aeabi_fcmpgt>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	f47f aec5 	bne.w	8009462 <__ieee754_powf+0x25e>
 80096d8:	2386      	movs	r3, #134	@ 0x86
 80096da:	e03c      	b.n	8009756 <__ieee754_powf+0x552>
 80096dc:	4a1a      	ldr	r2, [pc, #104]	@ (8009748 <__ieee754_powf+0x544>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d907      	bls.n	80096f2 <__ieee754_powf+0x4ee>
 80096e2:	2100      	movs	r1, #0
 80096e4:	4628      	mov	r0, r5
 80096e6:	f7f7 fceb 	bl	80010c0 <__aeabi_fcmplt>
 80096ea:	3800      	subs	r0, #0
 80096ec:	bf18      	it	ne
 80096ee:	2001      	movne	r0, #1
 80096f0:	e641      	b.n	8009376 <__ieee754_powf+0x172>
 80096f2:	d12b      	bne.n	800974c <__ieee754_powf+0x548>
 80096f4:	4639      	mov	r1, r7
 80096f6:	f7f7 fa3b 	bl	8000b70 <__aeabi_fsub>
 80096fa:	4631      	mov	r1, r6
 80096fc:	f7f7 fcf4 	bl	80010e8 <__aeabi_fcmpge>
 8009700:	2800      	cmp	r0, #0
 8009702:	d0e9      	beq.n	80096d8 <__ieee754_powf+0x4d4>
 8009704:	e7ed      	b.n	80096e2 <__ieee754_powf+0x4de>
 8009706:	bf00      	nop
 8009708:	001cc471 	.word	0x001cc471
 800970c:	005db3d6 	.word	0x005db3d6
 8009710:	0800af30 	.word	0x0800af30
 8009714:	3e53f142 	.word	0x3e53f142
 8009718:	3e6c3255 	.word	0x3e6c3255
 800971c:	3e8ba305 	.word	0x3e8ba305
 8009720:	3eaaaaab 	.word	0x3eaaaaab
 8009724:	3edb6db7 	.word	0x3edb6db7
 8009728:	3f19999a 	.word	0x3f19999a
 800972c:	40400000 	.word	0x40400000
 8009730:	3f763800 	.word	0x3f763800
 8009734:	3f76384f 	.word	0x3f76384f
 8009738:	369dc3a0 	.word	0x369dc3a0
 800973c:	0800af20 	.word	0x0800af20
 8009740:	0800af28 	.word	0x0800af28
 8009744:	3338aa3c 	.word	0x3338aa3c
 8009748:	43160000 	.word	0x43160000
 800974c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8009750:	f240 809b 	bls.w	800988a <__ieee754_powf+0x686>
 8009754:	15db      	asrs	r3, r3, #23
 8009756:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800975a:	3b7e      	subs	r3, #126	@ 0x7e
 800975c:	411c      	asrs	r4, r3
 800975e:	4444      	add	r4, r8
 8009760:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8009764:	494d      	ldr	r1, [pc, #308]	@ (800989c <__ieee754_powf+0x698>)
 8009766:	3b7f      	subs	r3, #127	@ 0x7f
 8009768:	4119      	asrs	r1, r3
 800976a:	4021      	ands	r1, r4
 800976c:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8009770:	f1c3 0317 	rsb	r3, r3, #23
 8009774:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8009778:	4638      	mov	r0, r7
 800977a:	411c      	asrs	r4, r3
 800977c:	f1b8 0f00 	cmp.w	r8, #0
 8009780:	bfb8      	it	lt
 8009782:	4264      	neglt	r4, r4
 8009784:	f7f7 f9f4 	bl	8000b70 <__aeabi_fsub>
 8009788:	4607      	mov	r7, r0
 800978a:	4631      	mov	r1, r6
 800978c:	4638      	mov	r0, r7
 800978e:	f7f7 f9f1 	bl	8000b74 <__addsf3>
 8009792:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8009796:	f028 080f 	bic.w	r8, r8, #15
 800979a:	4640      	mov	r0, r8
 800979c:	4940      	ldr	r1, [pc, #256]	@ (80098a0 <__ieee754_powf+0x69c>)
 800979e:	f7f7 faf1 	bl	8000d84 <__aeabi_fmul>
 80097a2:	4639      	mov	r1, r7
 80097a4:	4681      	mov	r9, r0
 80097a6:	4640      	mov	r0, r8
 80097a8:	f7f7 f9e2 	bl	8000b70 <__aeabi_fsub>
 80097ac:	4601      	mov	r1, r0
 80097ae:	4630      	mov	r0, r6
 80097b0:	f7f7 f9de 	bl	8000b70 <__aeabi_fsub>
 80097b4:	493b      	ldr	r1, [pc, #236]	@ (80098a4 <__ieee754_powf+0x6a0>)
 80097b6:	f7f7 fae5 	bl	8000d84 <__aeabi_fmul>
 80097ba:	493b      	ldr	r1, [pc, #236]	@ (80098a8 <__ieee754_powf+0x6a4>)
 80097bc:	4606      	mov	r6, r0
 80097be:	4640      	mov	r0, r8
 80097c0:	f7f7 fae0 	bl	8000d84 <__aeabi_fmul>
 80097c4:	4601      	mov	r1, r0
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7f7 f9d4 	bl	8000b74 <__addsf3>
 80097cc:	4607      	mov	r7, r0
 80097ce:	4601      	mov	r1, r0
 80097d0:	4648      	mov	r0, r9
 80097d2:	f7f7 f9cf 	bl	8000b74 <__addsf3>
 80097d6:	4649      	mov	r1, r9
 80097d8:	4606      	mov	r6, r0
 80097da:	f7f7 f9c9 	bl	8000b70 <__aeabi_fsub>
 80097de:	4601      	mov	r1, r0
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7f7 f9c5 	bl	8000b70 <__aeabi_fsub>
 80097e6:	4631      	mov	r1, r6
 80097e8:	4680      	mov	r8, r0
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7f7 faca 	bl	8000d84 <__aeabi_fmul>
 80097f0:	4607      	mov	r7, r0
 80097f2:	492e      	ldr	r1, [pc, #184]	@ (80098ac <__ieee754_powf+0x6a8>)
 80097f4:	f7f7 fac6 	bl	8000d84 <__aeabi_fmul>
 80097f8:	492d      	ldr	r1, [pc, #180]	@ (80098b0 <__ieee754_powf+0x6ac>)
 80097fa:	f7f7 f9b9 	bl	8000b70 <__aeabi_fsub>
 80097fe:	4639      	mov	r1, r7
 8009800:	f7f7 fac0 	bl	8000d84 <__aeabi_fmul>
 8009804:	492b      	ldr	r1, [pc, #172]	@ (80098b4 <__ieee754_powf+0x6b0>)
 8009806:	f7f7 f9b5 	bl	8000b74 <__addsf3>
 800980a:	4639      	mov	r1, r7
 800980c:	f7f7 faba 	bl	8000d84 <__aeabi_fmul>
 8009810:	4929      	ldr	r1, [pc, #164]	@ (80098b8 <__ieee754_powf+0x6b4>)
 8009812:	f7f7 f9ad 	bl	8000b70 <__aeabi_fsub>
 8009816:	4639      	mov	r1, r7
 8009818:	f7f7 fab4 	bl	8000d84 <__aeabi_fmul>
 800981c:	4927      	ldr	r1, [pc, #156]	@ (80098bc <__ieee754_powf+0x6b8>)
 800981e:	f7f7 f9a9 	bl	8000b74 <__addsf3>
 8009822:	4639      	mov	r1, r7
 8009824:	f7f7 faae 	bl	8000d84 <__aeabi_fmul>
 8009828:	4601      	mov	r1, r0
 800982a:	4630      	mov	r0, r6
 800982c:	f7f7 f9a0 	bl	8000b70 <__aeabi_fsub>
 8009830:	4607      	mov	r7, r0
 8009832:	4601      	mov	r1, r0
 8009834:	4630      	mov	r0, r6
 8009836:	f7f7 faa5 	bl	8000d84 <__aeabi_fmul>
 800983a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800983e:	4681      	mov	r9, r0
 8009840:	4638      	mov	r0, r7
 8009842:	f7f7 f995 	bl	8000b70 <__aeabi_fsub>
 8009846:	4601      	mov	r1, r0
 8009848:	4648      	mov	r0, r9
 800984a:	f7f7 fb4f 	bl	8000eec <__aeabi_fdiv>
 800984e:	4641      	mov	r1, r8
 8009850:	4607      	mov	r7, r0
 8009852:	4630      	mov	r0, r6
 8009854:	f7f7 fa96 	bl	8000d84 <__aeabi_fmul>
 8009858:	4641      	mov	r1, r8
 800985a:	f7f7 f98b 	bl	8000b74 <__addsf3>
 800985e:	4601      	mov	r1, r0
 8009860:	4638      	mov	r0, r7
 8009862:	f7f7 f985 	bl	8000b70 <__aeabi_fsub>
 8009866:	4631      	mov	r1, r6
 8009868:	f7f7 f982 	bl	8000b70 <__aeabi_fsub>
 800986c:	4601      	mov	r1, r0
 800986e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8009872:	f7f7 f97d 	bl	8000b70 <__aeabi_fsub>
 8009876:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800987a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800987e:	da06      	bge.n	800988e <__ieee754_powf+0x68a>
 8009880:	4621      	mov	r1, r4
 8009882:	f000 f821 	bl	80098c8 <scalbnf>
 8009886:	4629      	mov	r1, r5
 8009888:	e526      	b.n	80092d8 <__ieee754_powf+0xd4>
 800988a:	2400      	movs	r4, #0
 800988c:	e77d      	b.n	800978a <__ieee754_powf+0x586>
 800988e:	4618      	mov	r0, r3
 8009890:	e7f9      	b.n	8009886 <__ieee754_powf+0x682>
 8009892:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009896:	e50b      	b.n	80092b0 <__ieee754_powf+0xac>
 8009898:	2100      	movs	r1, #0
 800989a:	e509      	b.n	80092b0 <__ieee754_powf+0xac>
 800989c:	ff800000 	.word	0xff800000
 80098a0:	3f317200 	.word	0x3f317200
 80098a4:	3f317218 	.word	0x3f317218
 80098a8:	35bfbe8c 	.word	0x35bfbe8c
 80098ac:	3331bb4c 	.word	0x3331bb4c
 80098b0:	35ddea0e 	.word	0x35ddea0e
 80098b4:	388ab355 	.word	0x388ab355
 80098b8:	3b360b61 	.word	0x3b360b61
 80098bc:	3e2aaaab 	.word	0x3e2aaaab

080098c0 <fabsf>:
 80098c0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80098c4:	4770      	bx	lr
	...

080098c8 <scalbnf>:
 80098c8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80098cc:	b538      	push	{r3, r4, r5, lr}
 80098ce:	4603      	mov	r3, r0
 80098d0:	460d      	mov	r5, r1
 80098d2:	4604      	mov	r4, r0
 80098d4:	d02e      	beq.n	8009934 <scalbnf+0x6c>
 80098d6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80098da:	d304      	bcc.n	80098e6 <scalbnf+0x1e>
 80098dc:	4601      	mov	r1, r0
 80098de:	f7f7 f949 	bl	8000b74 <__addsf3>
 80098e2:	4603      	mov	r3, r0
 80098e4:	e026      	b.n	8009934 <scalbnf+0x6c>
 80098e6:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 80098ea:	d118      	bne.n	800991e <scalbnf+0x56>
 80098ec:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80098f0:	f7f7 fa48 	bl	8000d84 <__aeabi_fmul>
 80098f4:	4a17      	ldr	r2, [pc, #92]	@ (8009954 <scalbnf+0x8c>)
 80098f6:	4603      	mov	r3, r0
 80098f8:	4295      	cmp	r5, r2
 80098fa:	db0c      	blt.n	8009916 <scalbnf+0x4e>
 80098fc:	4604      	mov	r4, r0
 80098fe:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009902:	3a19      	subs	r2, #25
 8009904:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009908:	428d      	cmp	r5, r1
 800990a:	dd0a      	ble.n	8009922 <scalbnf+0x5a>
 800990c:	4912      	ldr	r1, [pc, #72]	@ (8009958 <scalbnf+0x90>)
 800990e:	4618      	mov	r0, r3
 8009910:	f361 001e 	bfi	r0, r1, #0, #31
 8009914:	e000      	b.n	8009918 <scalbnf+0x50>
 8009916:	4911      	ldr	r1, [pc, #68]	@ (800995c <scalbnf+0x94>)
 8009918:	f7f7 fa34 	bl	8000d84 <__aeabi_fmul>
 800991c:	e7e1      	b.n	80098e2 <scalbnf+0x1a>
 800991e:	0dd2      	lsrs	r2, r2, #23
 8009920:	e7f0      	b.n	8009904 <scalbnf+0x3c>
 8009922:	1951      	adds	r1, r2, r5
 8009924:	29fe      	cmp	r1, #254	@ 0xfe
 8009926:	dcf1      	bgt.n	800990c <scalbnf+0x44>
 8009928:	2900      	cmp	r1, #0
 800992a:	dd05      	ble.n	8009938 <scalbnf+0x70>
 800992c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8009930:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8009934:	4618      	mov	r0, r3
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	f111 0f16 	cmn.w	r1, #22
 800993c:	da01      	bge.n	8009942 <scalbnf+0x7a>
 800993e:	4907      	ldr	r1, [pc, #28]	@ (800995c <scalbnf+0x94>)
 8009940:	e7e5      	b.n	800990e <scalbnf+0x46>
 8009942:	f101 0019 	add.w	r0, r1, #25
 8009946:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800994a:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800994e:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8009952:	e7e1      	b.n	8009918 <scalbnf+0x50>
 8009954:	ffff3cb0 	.word	0xffff3cb0
 8009958:	7149f2ca 	.word	0x7149f2ca
 800995c:	0da24260 	.word	0x0da24260

08009960 <with_errnof>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4604      	mov	r4, r0
 8009964:	460d      	mov	r5, r1
 8009966:	f7fc f889 	bl	8005a7c <__errno>
 800996a:	6005      	str	r5, [r0, #0]
 800996c:	4620      	mov	r0, r4
 800996e:	bd38      	pop	{r3, r4, r5, pc}

08009970 <xflowf>:
 8009970:	b508      	push	{r3, lr}
 8009972:	b140      	cbz	r0, 8009986 <xflowf+0x16>
 8009974:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8009978:	f7f7 fa04 	bl	8000d84 <__aeabi_fmul>
 800997c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009980:	2122      	movs	r1, #34	@ 0x22
 8009982:	f7ff bfed 	b.w	8009960 <with_errnof>
 8009986:	4608      	mov	r0, r1
 8009988:	e7f6      	b.n	8009978 <xflowf+0x8>

0800998a <__math_uflowf>:
 800998a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800998e:	f7ff bfef 	b.w	8009970 <xflowf>

08009992 <__math_oflowf>:
 8009992:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8009996:	f7ff bfeb 	b.w	8009970 <xflowf>
	...

0800999c <_init>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr

080099a8 <_fini>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	bf00      	nop
 80099ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ae:	bc08      	pop	{r3}
 80099b0:	469e      	mov	lr, r3
 80099b2:	4770      	bx	lr
